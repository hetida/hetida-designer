##### Build stage
FROM python:3.9.9-slim-buster as base

ENV TIMEOUT=900

COPY ./runtime/requirements.txt /requirements.txt
COPY ./runtime/requirements-dev.txt /requirements-dev.txt

RUN apt-get -y update && apt-get -y install libpq-dev gcc && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN python3 -m pip install --no-cache-dir --upgrade pip==21.3.1 pip-tools==6.4.0 wheel==0.37.0
RUN pip-sync --pip-args='--no-cache-dir' /requirements.txt

##### Intermediate stage with actual application content
FROM base AS application_base
COPY ./runtime /app
COPY ./VERSION /app/VERSION
RUN chmod +x /app/start.sh

RUN mkdir -p /mnt/obj_repo
RUN chmod -R a+rw /mnt/obj_repo

##### Production stage
# making prod stage available early allows to build it without building test stage
# since test stage is only necessary on build system
FROM application_base AS prod
RUN useradd -m hd_app
USER hd_app
WORKDIR /app
ENV PORT 8090
EXPOSE 8090
CMD ["/app/start.sh"]

##### Test stage
FROM application_base AS test
WORKDIR /app
RUN pip-sync --pip-args='--no-cache-dir' /requirements.txt /requirements-dev.txt
RUN python3 -m pytest --cov=hetdesrun --cov-report xml --junitxml test_results.xml tests
RUN bash /app/scripts/gen_pylint_report.sh

# prod should still be the default build, this is why we close with FROM prod
# Note that in order to really skip building the test stage you need to explicitly specify
# the prod stage via
#     docker build --target prod -f Dockerfile-runtime . -t hetdesrun_webservice
FROM prod

{
  "category": "Basic",
  "content": "\"\"\"Documentation for Restrict to time interval\n\n# Restrict to time interval\n\n## Description\nThis component restricts a Pandas Series or Pandas DataFrame to a Pandas Series or Pandas DataFrame with respect to some given time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, either without timezone name or with utc offset.\n* **start** (String): Date as popular format (e.g. \"10 Aug 2012 10:20:30\", \"2019-08-01T15:20:10\") or relative dates (e.g. \"yesterday -10 years\", \"1 hour ago -0500\"), either without timezone name or with utc offset.\n* **stop** (String): Date as popular format (e.g. \"10 Aug 2012 10:20:30\", \"2019-08-01T15:20:10\") or relative dates (e.g. \"yesterday -10 years\", \"1 hour ago -0500\"), either without timezone name or with utc offset.\n\n## Outputs\n* **interval** (Pandas Series or Pandas DataFrame): Contains data restricted to the indices between start and stop.\n\n## Details\nThe component restricts the input data to the time interval between start and stop. Entries with index before start or after stop are filtered. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series without timezone is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.3,\n\t\t\t\t\"2019-08-01T15:20:20\": 7.5,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t},\n\t\"start\": \"2019-08-01T15:20:15\",\n\t\"stop\": \"2020-08-01T15:20:30\"\n}\n```\nThe expected output is\n```\n\t\"interval\": {\n\t\t\t\t\"2019-08-01T15:20:20\": 7.5,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t\t}\n```\n\nThe json input of a typical call of this component with a Pandas Series without utc offset is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2016-12-31 00:30:00+01:00\": 3.3,\n\t\t\t\t\"2016-12-31 00:30:10+01:00\": 7.5,\n\t\t\t\t\"2016-12-31 00:30:20+01:00\": 0.3,\n\t\t\t\t\"2016-12-31 00:30:30+01:00\": 0.5\n\t},\n\t\"start\": \"2016-12-31 00:30:10+01:00\",\n\t\"stop\": \"2016-12-31 00:30:20+01:00\"\n}\n```\nThe expected output is\n```\n\t\"interval\": {\n\t\t\t\t\"2016-12-31 00:30:10+00:00\": 7.5,\n\t\t\t\t\"2016-12-31 00:30:20+00:00\": 0.3\n\t\t}\n```\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport dateparser\nimport pytz\nfrom pandas._libs.tslibs import OutOfBoundsDatetime, Timestamp\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"data\": {\"data_type\": \"ANY\"},\n        \"start\": {\"data_type\": \"STRING\"},\n        \"stop\": {\"data_type\": \"STRING\"},\n    },\n    \"outputs\": {\n        \"interval\": {\"data_type\": \"ANY\"},\n    },\n    \"name\": \"Restrict to time interval\",\n    \"category\": \"Basic\",\n    \"description\": \"Returns the data belonging to some time interval\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"bf469c0a-d17c-ca6f-59ac-9838b2ff67ac\",\n    \"revision_group_id\": \"bf469c0a-d17c-ca6f-59ac-9838b2ff67ac\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:28.749503+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, data, start, stop):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if data.empty:\n        return {\"interval\": data}\n\n    try:\n        data.index = pd.to_datetime(data.index)\n    except ValueError:\n        data.index = pd.to_datetime(data.index, utc=True)\n\n    data = data.sort_index()\n\n    if start is not None:\n        try:\n            if data.index.tzinfo is None:\n                parsed_start_date = dateparser.parse(\n                    start,\n                    settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": False},\n                )\n            else:\n                parsed_start_date = dateparser.parse(\n                    start,\n                    settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": True},\n                ).replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError, AttributeError):\n            raise ValueError(f\"start timestamp could not be parsed: {start}\")\n        if parsed_start_date is None:\n            raise ValueError(f\"start timestamp could not be parsed: {start}\")\n    else:\n        parsed_start_date = None\n\n    if stop is not None:\n        try:\n            if data.index.tzinfo is None:\n                parsed_stop_date = dateparser.parse(\n                    stop,\n                    settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": False},\n                )\n            else:\n                parsed_stop_date = dateparser.parse(\n                    stop, settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": True}\n                ).replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError):\n            raise ValueError(f\"stop timestamp could not be parsed: {stop}\")\n        if parsed_stop_date is None:\n            raise ValueError(f\"start timestamp could not be parsed: {start}\")\n    else:\n        parsed_stop_date = None\n\n    if (\n        (parsed_start_date is not None)\n        and (parsed_stop_date is not None)\n        and (parsed_start_date > parsed_stop_date)\n    ):\n        raise ValueError(\"start timestamp cannot be after stop timestamp\")\n\n    if parsed_start_date is not None and parsed_stop_date is not None:\n        return {\"interval\": data.loc[parsed_start_date:parsed_stop_date]}\n    elif parsed_start_date is None and parsed_stop_date is not None:\n        return {\"interval\": data.loc[:parsed_stop_date]}\n    elif parsed_start_date is not None and parsed_stop_date is None:\n        return {\"interval\": data.loc[parsed_start_date:]}\n    else:\n        return {\"interval\": data}\n\n\nTEST_WIRING_FROM_PY_FILE_IMPORT = {}\n",
  "description": "Returns the data belonging to some time interval",
  "documentation": "# Restrict to time interval\n\n## Description\nThis component restricts a Pandas Series or Pandas DataFrame to a Pandas Series or Pandas DataFrame with respect to some given time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, either without timezone name or with utc offset.\n* **start** (String): Date as popular format (e.g. \"10 Aug 2012 10:20:30\", \"2019-08-01T15:20:10\") or relative dates (e.g. \"yesterday -10 years\", \"1 hour ago -0500\"), either without timezone name or with utc offset.\n* **stop** (String): Date as popular format (e.g. \"10 Aug 2012 10:20:30\", \"2019-08-01T15:20:10\") or relative dates (e.g. \"yesterday -10 years\", \"1 hour ago -0500\"), either without timezone name or with utc offset.\n\n## Outputs\n* **interval** (Pandas Series or Pandas DataFrame): Contains data restricted to the indices between start and stop.\n\n## Details\nThe component restricts the input data to the time interval between start and stop. Entries with index before start or after stop are filtered. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series without timezone is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.3,\n\t\t\t\t\"2019-08-01T15:20:20\": 7.5,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t},\n\t\"start\": \"2019-08-01T15:20:15\",\n\t\"stop\": \"2020-08-01T15:20:30\"\n}\n```\nThe expected output is\n```\n\t\"interval\": {\n\t\t\t\t\"2019-08-01T15:20:20\": 7.5,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t\t}\n```\n\nThe json input of a typical call of this component with a Pandas Series without utc offset is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2016-12-31 00:30:00+01:00\": 3.3,\n\t\t\t\t\"2016-12-31 00:30:10+01:00\": 7.5,\n\t\t\t\t\"2016-12-31 00:30:20+01:00\": 0.3,\n\t\t\t\t\"2016-12-31 00:30:30+01:00\": 0.5\n\t},\n\t\"start\": \"2016-12-31 00:30:10+01:00\",\n\t\"stop\": \"2016-12-31 00:30:20+01:00\"\n}\n```\nThe expected output is\n```\n\t\"interval\": {\n\t\t\t\t\"2016-12-31 00:30:10+00:00\": 7.5,\n\t\t\t\t\"2016-12-31 00:30:20+00:00\": 0.3\n\t\t}\n```",
  "id": "bf469c0a-d17c-ca6f-59ac-9838b2ff67ac",
  "io_interface": {
    "inputs": [
      {
        "data_type": "ANY",
        "id": "1039e08a-964f-2cc8-cffd-37d53078daf8",
        "name": "data",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "7e7ecf61-c319-f6be-1a3f-1526a879fd9a",
        "name": "start",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "a1154696-3e13-8fe2-ee80-3dea4e879b7d",
        "name": "stop",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "ANY",
        "id": "21fe8c45-8a45-9d81-4e17-0c73ca7a66f4",
        "name": "interval"
      }
    ]
  },
  "name": "Restrict to time interval",
  "released_timestamp": "2022-02-09T17:33:28.749503+00:00",
  "revision_group_id": "bf469c0a-d17c-ca6f-59ac-9838b2ff67ac",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
{
  "category": "Arithmetic",
  "content": "from hetdesrun.component.registration import register\nimport pandas as pd\nimport datetime\nfrom scipy import integrate\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"data\": {\"data_type\": \"SERIES\"},\n    },\n    \"outputs\": {\n        \"integral\": {\"data_type\": \"FLOAT\"},\n    },\n    \"name\": \"Integrate\",\n    \"category\": \"Arithmetic\",\n    \"description\": \"Calculates the integral of a Series\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"dd73bac2-cd9d-61c5-0aec-9dec6f337516\",\n    \"revision_group_id\": \"dd73bac2-cd9d-61c5-0aec-9dec6f337516\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:31.674471+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if (data.size) < 2:\n        raise ValueError(\"size of data must be at least 2\")\n\n    data_dropna = data.dropna()\n\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_dropna = data_dropna.sort_index()\n        x = data_dropna.index\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n        except (TypeError, ValueError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_dropna = data_dropna.sort_index()\n        x = (data_dropna.index - data_dropna.index[0]).total_seconds()\n\n    y = data_dropna.values\n\n    return {\"integral\": integrate.trapz(y, x)}\n",
  "description": "Calculates the integral of a Series",
  "documentation": "# Integrate\n\n## Description\nThis component integrates a Pandas Series.\n\n## Inputs\n* **data** (Pandas Series): The indices must be numeric or datetimes, the values must be numeric.\n\n## Outputs\n* **integral** (Float): The integral of data. \n\n## Details\nThis component calculates the integral according to the trapezoidal rule. Therefore, the component ignores NaN values and uses a version of data, sorted by its index. \nIf the indices are datetimes, their distances are expressed in seconds.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 1.7,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t}\n}\n```\nThe expected output is\n```\n\t\"integral\": 17\n```",
  "id": "dd73bac2-cd9d-61c5-0aec-9dec6f337516",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "3190458c-2c64-2a56-f459-eb9437e85551",
        "name": "data",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "FLOAT",
        "id": "e40cdbef-97c4-13b5-38d3-d29b8d446c16",
        "name": "integral"
      }
    ]
  },
  "name": "Integrate",
  "released_timestamp": "2022-02-09T17:33:31.674471+00:00",
  "revision_group_id": "dd73bac2-cd9d-61c5-0aec-9dec6f337516",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
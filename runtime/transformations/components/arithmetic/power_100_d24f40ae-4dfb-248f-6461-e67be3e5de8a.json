{
  "category": "Arithmetic",
  "content": "\"\"\"Documentation for Power\n\n# Power \n\n## Description\nThis component takes the base to the power exponent for numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **base** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **exponent** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **power** (Integer, Float, Pandas Series or Pandas DataFrame): Base to the power exponent.\n\n## Details\nThe component calculates the base to the power exponent. \n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"base\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 2,\n\t\t\t\t\"2019-08-01T15:44:12\": 9,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": 1,\n                               \"2019-08-07T11:01:00\": 100\n\t},\n\t\"exponent\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.5,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.8,\n\t\t\t\t\"2019-08-05T12:00:34\": 10000    \n\t}\n}\n```\nThe expected output is\n```\n\t\"power\": {\n\t\t\t\"2019-08-01T15:20:12\": 16,\n\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\"2019-08-05T12:00:34\": 1,\n                       \"2019-08-07T11:01:00\": null  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Float and a Pandas DataFrame is\n```\n{\n\t\"base\": {\n\t\t\t\"a\": {\n             \t\t        \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 10,\n\t\t\t\t\"2019-08-05T12:00:34\": 2.5\n             },\n                       \"b\": {\n                                \"2019-08-01T15:20:12\": 4,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 2,\n\t\t\t\t \"2019-08-05T12:00:34\": 7\n             }\n\t},\n\t\"exponent\": 2\n}\n```\nThe expected output is\n```\n\t\"power\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 100,\n\t\t\t\t\"2019-08-05T12:00:34\": 6.25\n             },\n                       \"b\": {\n                               \"2019-08-01T15:20:12\": 16,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 4,\n\t\t\t\t \"2019-08-05T12:00:34\": 49\t\t\t\t \n             }\n\t}\n```\n\"\"\"\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"base\": {\"data_type\": \"ANY\"},\n        \"exponent\": {\"data_type\": \"ANY\"},\n    },\n    \"outputs\": {\n        \"power\": {\"data_type\": \"ANY\"},\n    },\n    \"name\": \"Power\",\n    \"category\": \"Arithmetic\",\n    \"description\": \"Calculates the base to the power exponent\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"d24f40ae-4dfb-248f-6461-e67be3e5de8a\",\n    \"revision_group_id\": \"d24f40ae-4dfb-248f-6461-e67be3e5de8a\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:32.068243+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, base, exponent):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"power\": base**exponent}\n\n\nTEST_WIRING_FROM_PY_FILE_IMPORT = {}\n",
  "description": "Calculates the base to the power exponent",
  "documentation": "# Power \n\n## Description\nThis component takes the base to the power exponent for numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **base** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **exponent** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **power** (Integer, Float, Pandas Series or Pandas DataFrame): Base to the power exponent.\n\n## Details\nThe component calculates the base to the power exponent. \n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"base\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 2,\n\t\t\t\t\"2019-08-01T15:44:12\": 9,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": 1,\n                               \"2019-08-07T11:01:00\": 100\n\t},\n\t\"exponent\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.5,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.8,\n\t\t\t\t\"2019-08-05T12:00:34\": 10000    \n\t}\n}\n```\nThe expected output is\n```\n\t\"power\": {\n\t\t\t\"2019-08-01T15:20:12\": 16,\n\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\"2019-08-05T12:00:34\": 1,\n                       \"2019-08-07T11:01:00\": null  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Float and a Pandas DataFrame is\n```\n{\n\t\"base\": {\n\t\t\t\"a\": {\n             \t\t        \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 10,\n\t\t\t\t\"2019-08-05T12:00:34\": 2.5\n             },\n                       \"b\": {\n                                \"2019-08-01T15:20:12\": 4,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 2,\n\t\t\t\t \"2019-08-05T12:00:34\": 7\n             }\n\t},\n\t\"exponent\": 2\n}\n```\nThe expected output is\n```\n\t\"power\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 100,\n\t\t\t\t\"2019-08-05T12:00:34\": 6.25\n             },\n                       \"b\": {\n                               \"2019-08-01T15:20:12\": 16,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 4,\n\t\t\t\t \"2019-08-05T12:00:34\": 49\t\t\t\t \n             }\n\t}\n```\n",
  "id": "d24f40ae-4dfb-248f-6461-e67be3e5de8a",
  "io_interface": {
    "inputs": [
      {
        "data_type": "ANY",
        "id": "6ced6256-2cd8-913d-fa16-cb1f15b53890",
        "name": "base",
        "type": "REQUIRED"
      },
      {
        "data_type": "ANY",
        "id": "289da806-3bee-5d01-4c31-2b636ad1aa9d",
        "name": "exponent",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "ANY",
        "id": "0e7fd6bb-f5b0-8dc6-9877-749942d2c220",
        "name": "power"
      }
    ]
  },
  "name": "Power",
  "released_timestamp": "2022-02-09T17:33:32.068243+00:00",
  "revision_group_id": "d24f40ae-4dfb-248f-6461-e67be3e5de8a",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
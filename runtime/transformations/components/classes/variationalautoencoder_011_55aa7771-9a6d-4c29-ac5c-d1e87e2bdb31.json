{
  "category": "Classes",
  "content": "import tensorflow as tf\n\n\nclass Sampling(tf.keras.layers.Layer):\n    \"\"\"Uses (z_mean, z_log_var) to sample z, the vector encoding a digit.\"\"\"\n\n    def call(self, inputs):\n        z_mean, z_log_var = inputs\n        batch = tf.shape(z_mean)[0]\n        dim = tf.shape(z_mean)[1]\n        epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n        return z_mean + tf.exp(0.5 * z_log_var) * epsilon\n\n\nclass Encoder(tf.keras.layers.Layer):\n    \"\"\"Maps MNIST digits to a triplet (z_mean, z_log_var, z).\"\"\"\n\n    def __init__(self, latent_dim=32, intermediate_dim=64, name=\"encoder\", **kwargs):\n        super(Encoder, self).__init__(name=name, **kwargs)\n        self.dense_proj = tf.keras.layers.Dense(intermediate_dim, activation=\"relu\")\n        self.dense_mean = tf.keras.layers.Dense(latent_dim)\n        self.dense_log_var = tf.keras.layers.Dense(latent_dim)\n        self.sampling = Sampling()\n\n    def call(self, inputs):\n        x = self.dense_proj(inputs)\n        z_mean = self.dense_mean(x)\n        z_log_var = self.dense_log_var(x)\n        z = self.sampling((z_mean, z_log_var))\n        return z_mean, z_log_var, z\n\n\nclass Decoder(tf.keras.layers.Layer):\n    \"\"\"Converts z, the encoded digit vector, back into a readable digit.\"\"\"\n\n    def __init__(self, original_dim, intermediate_dim=64, name=\"decoder\", **kwargs):\n        super(Decoder, self).__init__(name=name, **kwargs)\n        self.dense_proj = tf.keras.layers.Dense(intermediate_dim, activation=\"relu\")\n        self.dense_output = tf.keras.layers.Dense(original_dim, activation=\"sigmoid\")\n\n    def call(self, inputs):\n        x = self.dense_proj(inputs)\n        return self.dense_output(x)\n\n\nclass VariationalAutoEncoder(tf.keras.Model):\n    \"\"\"Combines the encoder and decoder into an end-to-end model for training.\"\"\"\n\n    def __init__(\n        self,\n        original_dim,\n        intermediate_dim=64,\n        latent_dim=32,\n        name=\"autoencoder\",\n        **kwargs\n    ):\n        super(VariationalAutoEncoder, self).__init__(name=name, **kwargs)\n        self.original_dim = original_dim\n        self.encoder = Encoder(latent_dim=latent_dim, intermediate_dim=intermediate_dim)\n        self.decoder = Decoder(original_dim, intermediate_dim=intermediate_dim)\n\n    def call(self, inputs):\n        z_mean, z_log_var, z = self.encoder(inputs)\n        reconstructed = self.decoder(z)\n        # Add KL divergence regularization loss.\n        kl_loss = -0.5 * tf.reduce_mean(\n            z_log_var - tf.square(z_mean) - tf.exp(z_log_var) + 1\n        )\n        self.add_loss(kl_loss)\n        return reconstructed\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {},\n    \"outputs\": {\n        \"VariationalAutoEncoder\": \"ANY\",\n    },\n    \"name\": \"VariationalAutoEncoder\",\n    \"category\": \"Classes\",\n    \"description\": \"VariationalAutoEncoder\",\n    \"version_tag\": \"0.1.1\",\n    \"id\": \"55aa7771-9a6d-4c29-ac5c-d1e87e2bdb31\",\n    \"revision_group_id\": \"0254a80a-5613-4c6a-8b66-e72f1e1ca8f9\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2023-03-22T08:06:33.726744+00:00\",\n}\n\n\ndef main():\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"VariationalAutoEncoder\": VariationalAutoEncoder}",
  "description": "VariationalAutoEncoder",
  "documentation": "# New Component/Workflow\n## Description\n## Inputs\n## Outputs\n## Details\n## Examples\n",
  "id": "55aa7771-9a6d-4c29-ac5c-d1e87e2bdb31",
  "io_interface": {
    "inputs": [],
    "outputs": [
      {
        "data_type": "ANY",
        "id": "cf4e8cd3-ffd1-48d7-bdec-a88ecea26c13",
        "name": "VariationalAutoEncoder"
      }
    ]
  },
  "name": "VariationalAutoEncoder",
  "released_timestamp": "2023-03-22T08:06:33.726744+00:00",
  "revision_group_id": "0254a80a-5613-4c6a-8b66-e72f1e1ca8f9",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "0.1.1"
}
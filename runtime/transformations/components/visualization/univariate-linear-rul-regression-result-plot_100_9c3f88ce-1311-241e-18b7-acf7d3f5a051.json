{
  "category": "Visualization",
  "content": "from hetdesrun.component.registration import register\n# add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef timeseries_comparison_plot(\n    series_1: pd.Series,\n    series_2: pd.Series,\n    limit_violation_timestamp: str,\n    limit: float,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n    # Only thing I figured is - I could do this\n\n    s1 = series_1.sort_index()\n\n    fig.add_scatter(\n        x=s1.index, y=s1, mode=\"lines\", name=s1.name if s1.name else \"series_1\"\n    )  # Not what is desired - need a line\n\n    s2 = series_2.sort_index()\n\n    fig.add_scatter(\n        x=s2.index, y=s2, mode=\"lines\", name=s2.name if s2.name else \"series_2\"\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    vline_y_min = np.min([series_1.min(), series_2.min(), limit])\n    vline_y_max = np.max([series_1.max(), series_2.max(), limit])\n\n    hline_x_min = np.min([series_1.index.min(), series_2.index.min()])\n    hline_x_max = np.max([series_1.index.max(), series_2.index.max()])\n\n    fig.update_layout(\n        shapes=(\n            [\n                dict(\n                    type=\"line\",\n                    yref=\"y\",\n                    y0=vline_y_min,\n                    y1=vline_y_max,\n                    xref=\"x\",\n                    x0=limit_violation_timestamp,\n                    x1=limit_violation_timestamp,\n                )\n            ]\n            if limit_violation_timestamp is not None\n            else []\n        )\n        + [\n            dict(\n                type=\"line\",\n                yref=\"y\",\n                y0=limit,\n                y1=limit,\n                xref=\"x\",\n                x0=hline_x_min,\n                x1=hline_x_max,\n                line={\"color\": \"red\", \"width\": 1},\n            )\n        ]\n    )\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"limit_violation_prediction_timestamp\": {\"data_type\": \"STRING\"},\n        \"limit\": {\"data_type\": \"FLOAT\"},\n        \"base_series\": {\"data_type\": \"SERIES\"},\n        \"predictions\": {\"data_type\": \"SERIES\"},\n    },\n    \"outputs\": {\n        \"rul_regression_result_plot\": {\"data_type\": \"PLOTLYJSON\"},\n    },\n    \"name\": \"Univariate Linear RUL Regression Result Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plot results of linear regression for remaining useful life on univariate timeseries\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"9c3f88ce-1311-241e-18b7-acf7d3f5a051\",\n    \"revision_group_id\": \"9c3f88ce-1311-241e-18b7-acf7d3f5a051\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:29.903645+00:00\",\n}\n\n\ndef main(*, limit_violation_prediction_timestamp, limit, base_series, predictions):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"rul_regression_result_plot\": plotly_fig_to_json_dict(\n            timeseries_comparison_plot(\n                base_series, predictions, limit_violation_prediction_timestamp, limit\n            )\n        )\n    }\n",
  "description": "Plot results of linear regression for remaining useful life on univariate timeseries",
  "documentation": "# Univariate Linear RUL Regression Result Plot\n\n## Description\nPlot results of linear regression for remaining useful life on univariate timeseries.\n\n## Inputs\n* **limit_violation_prediction_timestamp** (String): The timestamp at which the limit will be reached.\n* **limit** (Float): The limit for RUL, that is the value at which one assumes malfunction to start happening.\n* **base_series** (Pandas Series): The input values to train the model. Values should be floats and index should be a datetime index.\n* **predictions**: (Pandas Series): The predictions of the model. Values should be floats and index should be a datetime index.\n\n## Outputs\n* **rul_regression_result_plot** (Plotly Jsont): The generated Plotly Json. \n\n## Details\nCan be used to plot the results of the corresponding RUL Regression component.\n",
  "id": "9c3f88ce-1311-241e-18b7-acf7d3f5a051",
  "io_interface": {
    "inputs": [
      {
        "data_type": "STRING",
        "id": "e2f270a0-3c80-9f57-776e-ecc396268ac1",
        "name": "limit_violation_prediction_timestamp",
        "type": "REQUIRED"
      },
      {
        "data_type": "FLOAT",
        "id": "c53283a0-82e6-c162-6d79-1acc92206950",
        "name": "limit",
        "type": "REQUIRED"
      },
      {
        "data_type": "SERIES",
        "id": "64734a41-f66b-9394-b961-44dd0b5e74f1",
        "name": "base_series",
        "type": "REQUIRED"
      },
      {
        "data_type": "SERIES",
        "id": "120f0e00-3ee6-743b-22a9-b0f1481c7b60",
        "name": "predictions",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "aebbc55f-1e4a-c035-bbd0-2475307536c9",
        "name": "rul_regression_result_plot"
      }
    ]
  },
  "name": "Univariate Linear RUL Regression Result Plot",
  "released_timestamp": "2022-02-09T17:33:29.903645+00:00",
  "revision_group_id": "9c3f88ce-1311-241e-18b7-acf7d3f5a051",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
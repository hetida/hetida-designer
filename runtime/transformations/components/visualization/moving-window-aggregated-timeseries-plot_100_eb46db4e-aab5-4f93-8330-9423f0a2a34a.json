{
  "category": "Visualization",
  "content": "from typing import Literal\n\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom pandas.tseries.frequencies import to_offset\n\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\ndef freqstr2timedelta(freqstr: str) -> pd.Timedelta:\n    \"\"\"Transform frequency string to Pandas Timedelta.\"\"\"\n    try:\n        return pd.to_timedelta(freqstr)\n    except ValueError:\n        return pd.to_timedelta(to_offset(freqstr))\n\n\npio.templates.default = None\n\n\ndef timeseries_and_aggregate_plot(\n    original_timeseries: pd.Series,\n    aggregated_timeseries: pd.Series,\n    window_size: pd.Timedelta,\n    interval_type: Literal[\"left_closed\", \"right_open\", \"right_closed\", \"left_open\", \"closed\", \"open\"],\n    label_position: str,\n    plotting_mode: Literal[\"lines\", \"dots_and_windows\"] = \"dots_and_windows\",\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n) -> go.Figure:\n    fig = go.Figure()\n\n    marker_size = 6\n    data_color = \"gray\"\n    aggr_color = \"mediumvioletred\"\n    line_width = 2\n\n    aggregated_timeseries_for_plotting = aggregated_timeseries.dropna()\n    \n    # Add markers for data timeseries.\n    fig.add_trace(\n        go.Scatter(\n            x=original_timeseries.index,\n            y=original_timeseries.values,\n            **{\"mode\": \"markers\", \"marker\": dict(color=data_color)}\n            if plotting_mode == \"dots_and_windows\"\n            else {\"mode\": \"lines\", \"line_color\": data_color},\n            name=\"original timeseries\",\n        ),\n    )\n\n    # Add markers for the aggregate timeseries.\n    fig.add_trace(\n        go.Scatter(\n            x=aggregated_timeseries_for_plotting.index,\n            y=aggregated_timeseries_for_plotting.values,\n            **{\"mode\": \"markers\", \"marker\": dict(size=marker_size, color=aggr_color)}\n            if plotting_mode == \"dots_and_windows\"\n            else {\"mode\": \"lines\", \"line_color\": aggr_color},\n            name=\"aggregated timeseries\",\n        ),\n    )\n\n    if plotting_mode == \"dots_and_windows\":\n        # Determine start and end point positions relative to the label positions.\n        x0_offset = pd.Timedelta(0)\n        x1_offset = pd.Timedelta(0)\n        if label_position == \"left\":\n            x1_offset = window_size\n        elif label_position == \"right\":\n            x0_offset = window_size\n        else:  # label_position == \"center\"\n            x0_offset = window_size / 2\n            x1_offset = window_size / 2\n\n        # Add markers to show if the left side of the window is closed\n        if interval_type in [\"left_closed\", \"right_open\", \"closed\"]:\n            fig.add_trace(\n                go.Scatter(\n                    x=aggregated_timeseries_for_plotting.index - x0_offset,\n                    y=aggregated_timeseries_for_plotting.values,\n                    mode=\"markers\",\n                    marker=dict(\n                        size=marker_size + 2,\n                        color=aggr_color,\n                        symbol=8,\n                    ),\n                    name=\"left closed\",\n                ),\n            )\n\n        # Add markers to show if the right side of the window is closed\n        if interval_type in [\"right_closed\", \"left_open\", \"closed\"]:\n            fig.add_trace(\n                go.Scatter(\n                    x=aggregated_timeseries_for_plotting.index + x1_offset,\n                    y=aggregated_timeseries_for_plotting.values,\n                    mode=\"markers\",\n                    marker=dict(\n                        size=marker_size + 2,\n                        color=aggr_color,\n                        symbol=7,\n                    ),\n                    name=\"right closed\",\n                ),\n            )\n\n        # Add lines for each window indicating the window size\n        for index, value in aggregated_timeseries_for_plotting.items():\n            fig.add_shape(\n                type=\"line\",\n                x0=index - x0_offset,\n                x1=index + x1_offset,\n                y0=value,\n                y1=value,\n                line=dict(color=aggr_color, width=line_width),\n                name=\"window size\",\n            )\n\n    # Set the layout.\n    fig.update_layout(**layout_opts)\n\n    # Set margins.\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# # ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"original_timeseries\": {\"data_type\": \"SERIES\"},\n        \"aggregated_timeseries\": {\"data_type\": \"SERIES\"},\n        \"window_size\": {\"data_type\": \"STRING\"},\n        \"interval_type\": {\"data_type\": \"STRING\"},\n        \"label_position\": {\"data_type\": \"STRING\"},\n        \"plotting_mode\": {\"data_type\": \"STRING\"},\n    },\n    \"outputs\": {\n        \"plot\": {\"data_type\": \"PLOTLYJSON\"},\n    },\n    \"name\": \"Moving Window Aggregated Timeseries Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plot a time window based aggregated timeseries and the original timeseries\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"eb46db4e-aab5-4f93-8330-9423f0a2a34a\",\n    \"revision_group_id\": \"f8c5e505-bb87-4814-bf77-6ce1698851ff\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-11-24T13:30:23.468744+00:00\",\n}\n\n\ndef main(*, original_timeseries, aggregated_timeseries, window_size, interval_type, label_position, plotting_mode):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(\n            timeseries_and_aggregate_plot(\n                original_timeseries=original_timeseries,\n                aggregated_timeseries=aggregated_timeseries,\n                window_size=freqstr2timedelta(window_size),\n                interval_type=interval_type,\n                label_position=label_position,\n                plotting_mode=plotting_mode,\n            )\n        )\n    }\n",
  "description": "Plot a time window based aggregated timeseries and the original timeseries",
  "documentation": "# Moving Window Aggregated Timeseries Plot\n\n## Description\nThis component plots a time window based aggregated timeseries, e.g. based on mean or median, and the original timeseries.\n\n## Inputs\n* **original_timeseries** (Pandas Series): Series to perform the moving mean calculation on.\n* **aggregated_timeseries** (Pandas Series): Series to perform the moving mean calculation on.\n* **window_size** (String): Time span of each window. Can be either a pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string.\n* **interval_type** (String): The string must be one of \"left_closed\", \"right_open\", \"right_closed\", \"left_open\", \"closed\", or \"open\". In case a datapoint is on the left or right border of a window, this option determines if it belongs to that window or not, but potentially a neighbouring window.\n* **label_position** (String): The string must be either \"left\", \"center\", or \"right\". This option determines which timestamp is provided to represent the window for the corresponding mean in the output time series.\n* **plotting_mode** (String): The string must be either \"lines\" or \"dots_and_windows\". This option specifies how the data and aggregate timeseries are visualized\n\n## Outputs\n* **plot** (Plotly JSON): The generated Plotly JSON. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe **window_size**, **closed**, and **label_position** parameters should be the same as those used to calculate the **aggregated_timeseries** based on the **original_timeseries**. These may not have been explicitly specified, so it may be necessary to look up the default values for the method used.\n\nIf the **plotting_mode** is set to 'lines' the window mean values as well as the datapoints are displayed as lines or if it is set to 'dots_and_windows' they are displayed by individual markers together with the windows for which the mean values have been calculated. In that case:\n* The **window_size** is indicated by plotting lines of the corresponding horizontal length at the position of each aggregation value.\n* The **interval_type** specifies which sides of the windows are closed, which is indicated by horizontal triangles at the edges of this line, pointing inward.\n* A dot indicates the position of the timestamp along the line corresponding to the aggregation value corresponding to **label_position**. Technically, the line is placed relative to the dot according to this information, which can be important when looking for reasons for unexpected results.\n* A dot indicates the position of the timestamp along the line corresponding to the aggregation value of **label_position**. Technically, the line is placed relative to the point according to this information, which can be important when looking for reasons for unexpected results.\n\nIf NaN values are present in the **aggregated_timeseries**, these will be dropped before plotting.\n\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"original_timeseries\": {\n        \"2022-12-06 23:17:14+00:00\": 14.360453,\n        \"2022-12-06 23:18:14+00:00\": 14.872439,\n        \"2022-12-06 23:19:14+00:00\": 15.803046,\n        \"2022-12-06 23:20:14+00:00\": 13.661063,\n        \"2022-12-06 23:21:14+00:00\": 14.969653,\n        \"2022-12-06 23:22:14+00:00\": 13.530460,\n        \"2022-12-06 23:23:14+00:00\": 14.009814,\n        \"2022-12-06 23:24:14+00:00\": 13.708907,\n        \"2022-12-06 23:25:14+00:00\": 15.119281,\n        \"2022-12-06 23:26:14+00:00\": 15.666053,\n        \"2022-12-06 23:27:14+00:00\": 15.488811,\n        \"2022-12-06 23:28:14+00:00\": 15.515572,\n        \"2022-12-06 23:29:14+00:00\": 14.767891,\n        \"2022-12-06 23:30:14+00:00\": 13.726783,\n        \"2022-12-06 23:31:14+00:00\": 14.997352,\n        \"2022-12-06 23:32:14+00:00\": 13.015161,\n        \"2022-12-06 23:33:14+00:00\": 15.079884,\n        \"2022-12-06 23:34:14+00:00\": 15.001638,\n        \"2022-12-06 23:35:14+00:00\": 16.035476,\n        \"2022-12-06 23:36:14+00:00\": 14.545874,\n        \"2022-12-06 23:37:14+00:00\": 13.970260,\n        \"2022-12-06 23:38:14+00:00\": 15.045999,\n        \"2022-12-06 23:39:14+00:00\": 13.824304,\n        \"2022-12-06 23:40:14+00:00\": 13.620449,\n        \"2022-12-06 23:41:14+00:00\": 15.146005,\n        \"2022-12-06 23:42:14+00:00\": 14.796941,\n        \"2022-12-06 23:43:14+00:00\": 17.036046,\n        \"2022-12-06 23:44:14+00:00\": 14.976151,\n        \"2022-12-06 23:45:14+00:00\": 14.637615,\n        \"2022-12-06 23:46:14+00:00\": 15.195011,\n        \"2022-12-06 23:47:14+00:00\": 14.082022,\n        \"2022-12-06 23:48:14+00:00\": 15.311653,\n        \"2022-12-06 23:49:14+00:00\": 15.534084,\n        \"2022-12-06 23:50:14+00:00\": 15.020099,\n        \"2022-12-06 23:51:14+00:00\": 14.020416,\n        \"2022-12-06 23:52:14+00:00\": 13.779699,\n        \"2022-12-06 23:53:14+00:00\": 14.407253,\n        \"2022-12-06 23:54:14+00:00\": 15.180839,\n        \"2022-12-06 23:55:14+00:00\": 14.618573,\n        \"2022-12-06 23:56:14+00:00\": 14.194774,\n        \"2022-12-06 23:57:14+00:00\": 14.653221,\n        \"2022-12-06 23:58:14+00:00\": 14.911146,\n        \"2022-12-06 23:59:14+00:00\": 14.951289,\n        \"2022-12-07 00:00:14+00:00\": 15.005731,\n        \"2022-12-07 00:01:14+00:00\": 15.708401,\n        \"2022-12-07 00:02:14+00:00\": 13.605439,\n        \"2022-12-07 00:03:14+00:00\": 14.620927,\n        \"2022-12-07 00:04:14+00:00\": 15.181250,\n        \"2022-12-07 00:05:14+00:00\": 13.912724,\n        \"2022-12-07 00:06:14+00:00\": 14.060204\n    },\n    aggregated_timeseries\": {\n        \"2022-12-06T23:22:30.000Z\":14.5261166667,\n        \"2022-12-06T23:37:30.000Z\":15.3292983333,\n        \"2022-12-06T23:52:30.000Z\":13.96039,\n        \"2022-12-07T00:07:30.000Z\":14.91716,\n        \"2022-12-07T00:22:30.000Z\":14.2458843333,\n        \"2022-12-07T00:37:30.000Z\":15.0975393333,\n        \"2022-12-07T00:52:30.000Z\":14.9696723333,\n        \"2022-12-07T01:07:30.000Z\":14.636221,\n        \"2022-12-07T01:22:30.000Z\":13.2423086667,\n        \"2022-12-07T01:37:30.000Z\":14.0745546667,\n        \"2022-12-07T01:52:30.000Z\":14.487968,\n        \"2022-12-07T02:07:30.000Z\":15.2930623333,\n        \"2022-12-07T02:22:30.000Z\":14.722309,\n        \"2022-12-07T02:37:30.000Z\":14.6024093333,\n        \"2022-12-07T02:52:30.000Z\":14.740198,\n        \"2022-12-07T03:07:30.000Z\":13.832052,\n        \"2022-12-07T03:22:30.000Z\":14.4311765\n    },\n    \"window_size\": \"15min\",\n    \"interval_type\": \"left_closed\",\n    \"label_position\": \"center\",\n    \"plotting_mode\": \"dots_and_windows\"\n}\n```",
  "id": "eb46db4e-aab5-4f93-8330-9423f0a2a34a",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "0f92fa34-ee3d-4e3c-927d-4f82a9bb7afd",
        "name": "original_timeseries",
        "type": "REQUIRED"
      },
      {
        "data_type": "SERIES",
        "id": "6c8f83ee-3c55-45be-b893-72c0301ee355",
        "name": "aggregated_timeseries",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "93d14beb-1ec6-4c16-9954-797cc91ec152",
        "name": "window_size",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "a306bb25-1271-4d8c-b3d5-9f4db23807d9",
        "name": "interval_type",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "629d3bfb-3e54-49d6-ba48-7959a5482139",
        "name": "label_position",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "6276625e-33a2-4e01-8b55-0c452e5c46ac",
        "name": "plotting_mode",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "5c3b2c95-872a-4d08-91ff-a847532af488",
        "name": "plot"
      }
    ]
  },
  "name": "Moving Window Aggregated Timeseries Plot",
  "released_timestamp": "2022-11-24T13:30:23.468744+00:00",
  "revision_group_id": "f8c5e505-bb87-4814-bf77-6ce1698851ff",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "{\n    \"2022-12-06 23:17:14+00:00\": 14.360248,\n    \"2022-12-06 23:22:14+00:00\": 14.473486,\n    \"2022-12-06 23:27:14+00:00\": 14.744616,\n    \"2022-12-06 23:32:14+00:00\": 15.729985,\n    \"2022-12-06 23:37:14+00:00\": 14.945974,\n    \"2022-12-06 23:42:14+00:00\": 15.311936,\n    \"2022-12-06 23:47:14+00:00\": 13.721003,\n    \"2022-12-06 23:52:14+00:00\": 14.616136,\n    \"2022-12-06 23:57:14+00:00\": 13.544031,\n    \"2022-12-07 00:02:14+00:00\": 14.823713,\n    \"2022-12-07 00:07:14+00:00\": 15.258110,\n    \"2022-12-07 00:12:14+00:00\": 14.669657,\n    \"2022-12-07 00:17:14+00:00\": 13.963869,\n    \"2022-12-07 00:22:14+00:00\": 14.962489,\n    \"2022-12-07 00:27:14+00:00\": 13.811295,\n    \"2022-12-07 00:32:14+00:00\": 14.672031,\n    \"2022-12-07 00:37:14+00:00\": 15.038961,\n    \"2022-12-07 00:42:14+00:00\": 15.581626,\n    \"2022-12-07 00:47:14+00:00\": 15.183799,\n    \"2022-12-07 00:52:14+00:00\": 14.859828,\n    \"2022-12-07 00:57:14+00:00\": 14.865390,\n    \"2022-12-07 01:02:14+00:00\": 14.221285,\n    \"2022-12-07 01:07:14+00:00\": 14.225866,\n    \"2022-12-07 01:12:14+00:00\": 15.461512,\n    \"2022-12-07 01:17:14+00:00\": 12.252256,\n    \"2022-12-07 01:22:14+00:00\": 13.686977,\n    \"2022-12-07 01:27:14+00:00\": 13.787693,\n    \"2022-12-07 01:32:14+00:00\": 14.528163,\n    \"2022-12-07 01:37:14+00:00\": 14.218455,\n    \"2022-12-07 01:42:14+00:00\": 13.477046,\n    \"2022-12-07 01:47:14+00:00\": 13.925391,\n    \"2022-12-07 01:52:14+00:00\": 14.947494,\n    \"2022-12-07 01:57:14+00:00\": 14.591019,\n    \"2022-12-07 02:02:14+00:00\": 15.930415,\n    \"2022-12-07 02:07:14+00:00\": 15.072922,\n    \"2022-12-07 02:12:14+00:00\": 14.875850,\n    \"2022-12-07 02:17:14+00:00\": 15.044753,\n    \"2022-12-07 02:22:14+00:00\": 15.525060,\n    \"2022-12-07 02:27:14+00:00\": 13.597114,\n    \"2022-12-07 02:32:14+00:00\": 14.499883,\n    \"2022-12-07 02:37:14+00:00\": 14.095923,\n    \"2022-12-07 02:42:14+00:00\": 15.211422,\n    \"2022-12-07 02:47:14+00:00\": 14.847283,\n    \"2022-12-07 02:52:14+00:00\": 15.036699,\n    \"2022-12-07 02:57:14+00:00\": 14.336612,\n    \"2022-12-07 03:02:14+00:00\": 14.517888,\n    \"2022-12-07 03:07:14+00:00\": 13.787849,\n    \"2022-12-07 03:12:14+00:00\": 13.190419,\n    \"2022-12-07 03:17:14+00:00\": 15.435615,\n    \"2022-12-07 03:22:14+00:00\": 13.426738\n}"
        },
        "use_default_value": false,
        "workflow_input_name": "original_timeseries"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "{\n    \"2022-12-06T23:22:30.000Z\": 14.5261166667,\n    \"2022-12-06T23:37:30.000Z\": 15.3292983333,\n    \"2022-12-06T23:52:30.000Z\": 13.96039,\n    \"2022-12-07T00:07:30.000Z\": 14.91716,\n    \"2022-12-07T00:22:30.000Z\": 14.2458843333,\n    \"2022-12-07T00:37:30.000Z\": 15.0975393333,\n    \"2022-12-07T00:52:30.000Z\": 14.9696723333,\n    \"2022-12-07T01:07:30.000Z\": 14.636221,\n    \"2022-12-07T01:22:30.000Z\": 13.2423086667,\n    \"2022-12-07T01:37:30.000Z\": 14.0745546667,\n    \"2022-12-07T01:52:30.000Z\": 14.487968,\n    \"2022-12-07T02:07:30.000Z\": 15.2930623333,\n    \"2022-12-07T02:22:30.000Z\": 14.722309,\n    \"2022-12-07T02:37:30.000Z\": 14.6024093333,\n    \"2022-12-07T02:52:30.000Z\": 14.740198,\n    \"2022-12-07T03:07:30.000Z\": 13.832052,\n    \"2022-12-07T03:22:30.000Z\": 14.4311765\n}"
        },
        "use_default_value": false,
        "workflow_input_name": "aggregated_timeseries"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "15min"
        },
        "use_default_value": false,
        "workflow_input_name": "window_size"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "left_closed"
        },
        "use_default_value": false,
        "workflow_input_name": "interval_type"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "center"
        },
        "use_default_value": false,
        "workflow_input_name": "label_position"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "dots_and_windows"
        },
        "use_default_value": false,
        "workflow_input_name": "plotting_mode"
      }
    ],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
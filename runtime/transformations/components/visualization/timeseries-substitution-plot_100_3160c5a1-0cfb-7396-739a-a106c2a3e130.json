{
  "category": "Visualization",
  "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef handle_substitutions(original_series, substitution_series):\n    \"\"\"Applies substituion series on raw values\n    \n    The substitution series can contain\n    * replacement values (at indices occuring in original)\n    * new values (values at indices not in original)\n    * null values at indices in original marking values for invalidation (ignoring)\n    \n    Returns a tuple of pandas Series objects\n        (completely_handled, replaced_values, replacements, new_values, ignored_values)    \"\"\"\n\n    new = original_series.copy()\n    deleted = new.loc[substitution_series.isnull().reindex(new.index, fill_value=False)]\n\n    kept_before_replacing = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=True)\n    ]\n\n    replaced_originals = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=False)\n    ]\n\n    replacements = substitution_series.reindex(original_series.index).dropna()\n\n    new_values = substitution_series.loc[\n        ~substitution_series.index.isin(original_series.index)\n    ]\n\n    completely_handled_series = new.copy()\n    completely_handled_series = completely_handled_series.loc[\n        substitution_series.notnull().reindex(\n            completely_handled_series.index, fill_value=True\n        )\n    ]\n    completely_handled_series.update(substitution_series)\n    completely_handled_series = pd.concat([completely_handled_series, new_values])\n\n    return (\n        completely_handled_series.sort_index(),\n        replaced_originals,\n        replacements,\n        new_values,\n        deleted,\n    )\n\n\ndef substituted_data_plot(\n    raw_values: pd.Series,\n    substitutions: pd.Series,\n    message_series: pd.Series = None,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n\n    s1 = raw_values.sort_index()\n    s1 = s1.loc[~s1.index.duplicated(keep=\"first\")]\n\n    s2 = substitutions.sort_index()\n    s2 = s2.loc[~s2.index.duplicated(keep=\"first\")]\n\n    completely_handled_series, replaced_originals, replacements, new_values, deleted = handle_substitutions(\n        s1, s2\n    )\n\n    fig.add_scatter(\n        x=completely_handled_series.index,\n        y=completely_handled_series,\n        mode=\"markers+lines\",\n        name=raw_values.name + \"_substituted\"\n        if raw_values.name\n        else \"raw_values_substituted\",\n        line_color=\"blue\",\n        opacity=0.6,\n    )  # Not what is desired - need a line\n\n    fig.add_scatter(\n        x=replaced_originals.index,\n        y=replaced_originals,\n        mode=\"markers\",\n        name=\"replaced raw values\",\n        line_color=\"orange\",\n        marker=dict(size=10, opacity=0.6),\n    )  # Not what is desired - need a line\n\n    fig.add_scatter(\n        x=deleted.index,\n        y=deleted,\n        mode=\"markers\",\n        name=\"ignored raw values\",\n        line_color=\"red\",\n        marker=dict(symbol=\"x\", size=10, opacity=0.6),\n    )  # Not what is desired - need a line\n\n    fig.add_scatter(\n        x=new_values.index,\n        y=new_values,\n        mode=\"markers\",\n        name=\"added values\",\n        line_color=\"green\",\n        marker=dict(symbol=\"cross\", size=10, opacity=0.6),\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"raw_values\": DataType.Series, \"substitution_series\": DataType.Series},\n    outputs={\"substituted_ts_plot\": DataType.PlotlyJson},\n    name=\"Timeseries Substitution Plot\",\n    description=\"Apply a substitution to a timeseries and plot the results together with ignored, replaced and new values\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"3160c5a1-0cfb-7396-739a-a106c2a3e130\",\n    revision_group_id=\"3160c5a1-0cfb-7396-739a-a106c2a3e130\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.721225+00:00\"\n)\ndef main(*, raw_values, substitution_series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"substituted_ts_plot\": plotly_fig_to_json_dict(\n            substituted_data_plot(raw_values, substitution_series)\n        )\n    }\n",
  "description": "Apply a substitution to a timeseries and plot the results together with ignored, replaced and new values",
  "documentation": "# Timeseries Substitution Plot\n\n## Description\nApply a substitution to a timeseries and plot the results together with ignored, replaced and new values marked.\n\n## Inputs\n* **raw_values** (Pandas Series): The original (raw) values. Entries should be numeric and Index should be a DateTime Index.\n* **substitution_series** (Pandas Series): The substitution series containing replacement and new values as well as null/NaN values where original values should be ignored.\n\n## Outputs\n* **substituted_ts_plot** (Plotly Json): The plot showing the substituted (new) timeseries and additionally marks for the replaced values, ignored values and added values.\n\n## Details\nUse this component to see how a substitution is applied. Substitution allows to\n* replace existing values\n* add new values\n* ignore original values\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"raw_values\": {\n    \"2020-07-01T00:00:00Z\": 0,\n    \"2020-07-02T00:00:00Z\": 17,\n    \"2020-07-03T00:00:00Z\": 18,\n    \"2020-07-04T00:00:00Z\": 3,\n    \"2020-07-04T08:00:00Z\": 15,\n    \"2020-07-04T14:00:00Z\": 16,\n    \"2020-07-04T18:00:00Z\": 19,\n    \"2020-07-07T00:00:00Z\": 6,\n    \"2020-07-08T00:00:00Z\": 7\n\t\t},\n\t\"substitution_series\": {\n    \"2020-07-02T00:00:00Z\": 1.0,\n    \"2020-07-03T00:00:00Z\": 2.0,\n    \"2020-07-04T08:00:00Z\": null,\n    \"2020-07-04T14:00:00Z\": null,\n    \"2020-07-04T18:00:00Z\": null,\n    \"2020-07-05T00:00:00Z\": 4,\n    \"2020-07-06T00:00:00Z\": 5,\n    \"2020-07-09T00:00:00Z\": 18.0,\n    \"2020-07-10T00:00:00Z\": 19.0\n    \t\t}\n}\n```\n",
  "id": "3160c5a1-0cfb-7396-739a-a106c2a3e130",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "85ffd7a5-3cd5-0c23-a21c-969ee4f97bea",
        "name": "raw_values"
      },
      {
        "data_type": "SERIES",
        "id": "46fe5379-1e3d-12c4-7929-5ed3fcd8a5c6",
        "name": "substitution_series"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "c756773d-5e8a-6ee6-4c64-ea44f26b2336",
        "name": "substituted_ts_plot"
      }
    ]
  },
  "name": "Timeseries Substitution Plot",
  "released_timestamp": "2022-02-09T17:33:29.721225+00:00",
  "revision_group_id": "3160c5a1-0cfb-7396-739a-a106c2a3e130",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": [],
    "dashboard_positionings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
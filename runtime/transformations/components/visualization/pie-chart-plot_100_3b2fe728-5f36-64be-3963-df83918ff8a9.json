{
  "category": "Visualization",
  "content": "\"\"\"Documentation for Pie Chart Plot\n\n# Pie Chart Plot\n\n## Description\nPlotting a pie chart.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): The input data. \n* **value_column** (String): The column of which the values will be summed up in order to determine the groups relative fractions of this sum. \n\tThis column of dataframe should consist of float values.\n* **group_column** (String): The column used to group the values. \n\tThis should be a string valued or a categorical column.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results\n\n## Details\nThe component generates a Pie chart using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"group_column\": \"group\",\n\t\"value_column\": \"value\",\n\t\"dataframe\": {\n    \"group\": [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"b\"],\n    \"value\": [2, 3, 2, 4, 4, 4, 4]\n    }\n}\n```\n\"\"\"\n\nfrom hdutils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef plotly_pie_chart_plot(\n    dataframe: pd.DataFrame,\n    values_column_name: str,\n    groups_column_name: str,\n    traces_opts: dict = {},\n    layout_opts: dict = {\"height\": 300, \"width\": 300},\n    pie_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a pie chart plot Plotly figure\n\n    Expects a dataframe, a values_column_name selecting the column\n    in the dataframe to sum up. Then groups_column_name selects the groups\n    of values whose relative fraction of the sum should be shown in the Pie Chart.\n\n\n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = px.pie(\n        dataframe, values=values_column_name, names=groups_column_name, **pie_opts\n    )\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(**traces_opts)  # set line color?\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"dataframe\": {\"data_type\": \"DATAFRAME\"},\n        \"value_column\": {\"data_type\": \"STRING\"},\n        \"group_column\": {\"data_type\": \"STRING\"},\n    },\n    \"outputs\": {\n        \"plot\": {\"data_type\": \"PLOTLYJSON\"},\n    },\n    \"name\": \"Pie Chart Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plotting a pie chart\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"3b2fe728-5f36-64be-3963-df83918ff8a9\",\n    \"revision_group_id\": \"3b2fe728-5f36-64be-3963-df83918ff8a9\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:31.046948+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, dataframe, value_column, group_column):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(\n            plotly_pie_chart_plot(dataframe, value_column, group_column)\n        )\n    }\n\n\nTEST_WIRING_FROM_PY_FILE_IMPORT = {}\n",
  "description": "Plotting a pie chart",
  "documentation": "# Pie Chart Plot\n\n## Description\nPlotting a pie chart.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): The input data. \n* **value_column** (String): The column of which the values will be summed up in order to determine the groups relative fractions of this sum. \n\tThis column of dataframe should consist of float values.\n* **group_column** (String): The column used to group the values. \n\tThis should be a string valued or a categorical column.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results\n\n## Details\nThe component generates a Pie chart using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"group_column\": \"group\",\n\t\"value_column\": \"value\",\n\t\"dataframe\": {\n    \"group\": [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"b\"],\n    \"value\": [2, 3, 2, 4, 4, 4, 4]\n    }\n}\n```\n",
  "id": "3b2fe728-5f36-64be-3963-df83918ff8a9",
  "io_interface": {
    "inputs": [
      {
        "data_type": "DATAFRAME",
        "id": "bc8b441a-9d32-f9ab-eb7e-5a19688039d2",
        "name": "dataframe",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "f586c1eb-6943-45cc-b828-fc1c30515b9a",
        "name": "value_column",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "03280c10-5cf8-0e47-9e23-3b06b7388168",
        "name": "group_column",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "2ba3fb5f-4be0-f48a-3124-894113466b62",
        "name": "plot"
      }
    ]
  },
  "name": "Pie Chart Plot",
  "released_timestamp": "2022-02-09T17:33:31.046948+00:00",
  "revision_group_id": "3b2fe728-5f36-64be-3963-df83918ff8a9",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
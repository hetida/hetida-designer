{
  "category": "Visualization",
  "content": "# test\nfrom hdutils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef multi_plotly_timeseries_plot(\n    dataframe: pd.DataFrame,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n\n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n    columns = list(dataframe.keys())\n\n    df = dataframe\n    if set(columns) == set([\"timestamp\", \"value\", \"metric\"]):\n        for metric in df[\"metric\"].values:\n            value_series = pd.Series(\n                (df[\"value\"][df[\"metric\"] == metric]).values,\n                index=(df[\"timestamp\"][df[\"metric\"] == metric]).values,\n                name=metric,\n            ).sort_index()\n            fig.add_scatter(\n                x=value_series.index, y=value_series.values, mode=\"lines\", name=metric\n            )\n    else:\n        to_plot_df = dataframe.sort_index()\n\n        # Only thing I figured is - I could do this\n        for key in columns:\n            fig.add_scatter(\n                x=to_plot_df.index, y=to_plot_df[key], mode=\"lines\", name=key\n            )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"dataframe\": {\"data_type\": \"DATAFRAME\"},\n    },\n    \"outputs\": {\n        \"plot\": {\"data_type\": \"PLOTLYJSON\"},\n    },\n    \"name\": \"Timeseries DataFrame Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plotting a dataframe of multiple timeseries\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"16d6e587-25ea-d0df-f514-da9fef66ad80\",\n    \"revision_group_id\": \"16d6e587-25ea-d0df-f514-da9fef66ad80\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:30.452518+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(multi_plotly_timeseries_plot(dataframe))}\n",
  "description": "Plotting a dataframe of multiple timeseries",
  "documentation": "# Timeseries DataFrame Plot\n\n## Description\nPlotting a dataframe of multiple timeseries.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): Entries must be numeric and Index should be a DateTime Index. \n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming timeseries using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"dataframe\": {\n    \"pH a\": {\n        \"2019-11-29T01:00:00.000Z\": 10.533,\n        \"2019-11-29T02:00:00.000Z\": 10.559,\n        \"2019-11-29T03:00:00.000Z\": 9.7662,\n        \"2019-11-29T04:00:00.000Z\": 11.2332,\n        \"2019-11-29T05:00:00.000Z\": 11.0683,\n        \"2019-11-29T06:00:00.000Z\": 11.2072,\n        \"2019-11-29T07:00:00.000Z\": 11.1522,\n        \"2019-11-29T08:00:00.000Z\": 11.1522,\n        \"2019-11-29T09:00:00.000Z\": 11.1522,\n        \"2019-11-29T10:00:00.000Z\": 11.4473,\n        \"2019-11-29T11:00:00.000Z\": 11.3142,\n        \"2019-11-29T12:00:00.000Z\": 11.3403,\n        \"2019-11-29T13:00:00.000Z\": 11.375,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 12,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 12,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.8918,\n        \"2019-11-30T02:00:00.000Z\": 10.64,\n        \"2019-11-30T03:00:00.000Z\": 10.5648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 12,\n        \"2019-11-30T06:00:00.000Z\": 10.912,\n        \"2019-11-30T07:00:00.000Z\": 12,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 12,\n        \"2019-11-30T13:00:00.000Z\": 12,\n        \"2019-11-30T14:00:00.000Z\": 12,\n        \"2019-11-30T15:00:00.000Z\": 12\n    },\n    \"pH b\": {\n        \"2019-11-29T01:00:00.000Z\": 10.7533,\n        \"2019-11-29T02:00:00.000Z\": 10.759,\n        \"2019-11-29T03:00:00.000Z\": 9.9662,\n        \"2019-11-29T04:00:00.000Z\": 11.1332,\n        \"2019-11-29T05:00:00.000Z\": 11.0083,\n        \"2019-11-29T06:00:00.000Z\": 11.1072,\n        \"2019-11-29T07:00:00.000Z\": 11.1222,\n        \"2019-11-29T08:00:00.000Z\": 11.1322,\n        \"2019-11-29T09:00:00.000Z\": 11.1422,\n        \"2019-11-29T10:00:00.000Z\": 11.7473,\n        \"2019-11-29T11:00:00.000Z\": 11.4142,\n        \"2019-11-29T12:00:00.000Z\": 11.4403,\n        \"2019-11-29T13:00:00.000Z\": 11.475,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 13,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 13,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.7918,\n        \"2019-11-30T02:00:00.000Z\": 10.34,\n        \"2019-11-30T03:00:00.000Z\": 10.2648,\n        \"2019-11-30T04:00:00.000Z\": 10.112,\n        \"2019-11-30T05:00:00.000Z\": 11,\n        \"2019-11-30T06:00:00.000Z\": 10.312,\n        \"2019-11-30T07:00:00.000Z\": 11,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 11,\n        \"2019-11-30T13:00:00.000Z\": 11,\n        \"2019-11-30T14:00:00.000Z\": 11,\n        \"2019-11-30T15:00:00.000Z\": 11.5\n    },\n    \"pH c\": {\n        \"2019-11-29T01:00:00.000Z\": 9.7533,\n        \"2019-11-29T02:00:00.000Z\": 8.759,\n        \"2019-11-29T03:00:00.000Z\": 9.1662,\n        \"2019-11-29T04:00:00.000Z\": 11.0332,\n        \"2019-11-29T05:00:00.000Z\": 11.0033,\n        \"2019-11-29T06:00:00.000Z\": 11.0172,\n        \"2019-11-29T07:00:00.000Z\": 11.0122,\n        \"2019-11-29T08:00:00.000Z\": 11.0222,\n        \"2019-11-29T09:00:00.000Z\": 11.0422,\n        \"2019-11-29T10:00:00.000Z\": 11.0273,\n        \"2019-11-29T11:00:00.000Z\": 11.1242,\n        \"2019-11-29T12:00:00.000Z\": 11.1703,\n        \"2019-11-29T13:00:00.000Z\": 11.035,\n        \"2019-11-29T14:00:00.000Z\": 12.1,\n        \"2019-11-29T15:00:00.000Z\": 11.2763,\n        \"2019-11-29T16:00:00.000Z\": 12.05,\n        \"2019-11-29T17:00:00.000Z\": 12.3,\n        \"2019-11-29T18:00:00.000Z\": 12.82,\n        \"2019-11-29T19:00:00.000Z\": 12.8,\n        \"2019-11-29T20:00:00.000Z\": 12.7,\n        \"2019-11-29T21:00:00.000Z\": 13.77,\n        \"2019-11-29T22:00:00.000Z\": 12.3,\n        \"2019-11-29T23:00:00.000Z\": 12.32,\n        \"2019-11-30T01:00:00.000Z\": 11.6918,\n        \"2019-11-30T02:00:00.000Z\": 11.22,\n        \"2019-11-30T03:00:00.000Z\": 11.0648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 11.04,\n        \"2019-11-30T06:00:00.000Z\": 10.87,\n        \"2019-11-30T07:00:00.000Z\": 10.98,\n        \"2019-11-30T08:00:00.000Z\": 11.63,\n        \"2019-11-30T09:00:00.000Z\": 11.222,\n        \"2019-11-30T10:00:00.000Z\": 11.111,\n        \"2019-11-30T11:00:00.000Z\": 10.7676,\n        \"2019-11-30T12:00:00.000Z\": 10.8787,\n        \"2019-11-30T13:00:00.000Z\": 10.8889,\n        \"2019-11-30T14:00:00.000Z\": 10.9101,\n        \"2019-11-30T15:00:00.000Z\": 10.989\n    }\n    }\n}\n```\n",
  "id": "16d6e587-25ea-d0df-f514-da9fef66ad80",
  "io_interface": {
    "inputs": [
      {
        "data_type": "DATAFRAME",
        "id": "ff22a376-752f-9a5f-899e-601d6e341c72",
        "name": "dataframe",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "c0d410fa-e324-7d06-186a-8096b4aa4468",
        "name": "plot"
      }
    ]
  },
  "name": "Timeseries DataFrame Plot",
  "released_timestamp": "2022-02-09T17:33:30.452518+00:00",
  "revision_group_id": "16d6e587-25ea-d0df-f514-da9fef66ad80",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
{
  "category": "Visualization",
  "content": "\"\"\"Documentation for Compare Two Timeseries Plot\n\n# Compare Two Timeseries Plot\n\n## Description\nPlotting of two timeseries in the same plot.\n\n## Inputs\n* **series_1** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n* **series_2** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n\n## Outputs\n* **comparison_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots both incoming timeseries into the same figure using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"x\": {\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t},\n\t\"y\": {\n    \"2019-11-29T01:00:00.000Z\": 10.7533,\n    \"2019-11-29T02:00:00.000Z\": 10.759,\n    \"2019-11-29T03:00:00.000Z\": 9.9662,\n    \"2019-11-29T04:00:00.000Z\": 11.1332,\n    \"2019-11-29T05:00:00.000Z\": 11.0083,\n    \"2019-11-29T06:00:00.000Z\": 11.1072,\n    \"2019-11-29T07:00:00.000Z\": 11.1222,\n    \"2019-11-29T08:00:00.000Z\": 11.1322,\n    \"2019-11-29T09:00:00.000Z\": 11.1422,\n    \"2019-11-29T10:00:00.000Z\": 11.7473,\n    \"2019-11-29T11:00:00.000Z\": 11.4142,\n    \"2019-11-29T12:00:00.000Z\": 11.4403,\n    \"2019-11-29T13:00:00.000Z\": 11.475,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 13,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 13,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.7918,\n    \"2019-11-30T02:00:00.000Z\": 10.34,\n    \"2019-11-30T03:00:00.000Z\": 10.2648,\n    \"2019-11-30T04:00:00.000Z\": 10.112,\n    \"2019-11-30T05:00:00.000Z\": 11,\n    \"2019-11-30T06:00:00.000Z\": 10.312,\n    \"2019-11-30T07:00:00.000Z\": 11,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 11,\n    \"2019-11-30T13:00:00.000Z\": 11,\n    \"2019-11-30T14:00:00.000Z\": 11,\n    \"2019-11-30T15:00:00.000Z\": 11.5\n    }\n}\n```\n\"\"\"\n\n# add your own imports here\nfrom hdutils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef timeseries_comparison_plot(\n    series_1: pd.Series,\n    series_2: pd.Series,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n\n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n    # Only thing I figured is - I could do this\n\n    s1 = series_1.sort_index()\n\n    fig.add_scatter(\n        x=s1.index, y=s1, mode=\"lines\", name=s1.name if s1.name else \"series_1\"\n    )  # Not what is desired - need a line\n\n    s2 = series_2.sort_index()\n\n    fig.add_scatter(\n        x=s2.index, y=s2, mode=\"lines\", name=s2.name if s2.name else \"series_2\"\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series_1\": {\"data_type\": \"SERIES\"},\n        \"series_2\": {\"data_type\": \"SERIES\"},\n    },\n    \"outputs\": {\n        \"comparison_plot\": {\"data_type\": \"PLOTLYJSON\"},\n    },\n    \"name\": \"Compare Two Timeseries Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plotting of two timeseries in the same plot\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"a432923f-4718-44ae-3c9c-9832e68724bb\",\n    \"revision_group_id\": \"a432923f-4718-44ae-3c9c-9832e68724bb\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:30.020807+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, series_1, series_2):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"comparison_plot\": plotly_fig_to_json_dict(\n            timeseries_comparison_plot(series_1, series_2)\n        )\n    }\n\n\nTEST_WIRING_FROM_PY_FILE_IMPORT = {}\n",
  "description": "Plotting of two timeseries in the same plot",
  "documentation": "# Compare Two Timeseries Plot\n\n## Description\nPlotting of two timeseries in the same plot.\n\n## Inputs\n* **series_1** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n* **series_2** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n\n## Outputs\n* **comparison_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots both incoming timeseries into the same figure using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"x\": {\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t},\n\t\"y\": {\n    \"2019-11-29T01:00:00.000Z\": 10.7533,\n    \"2019-11-29T02:00:00.000Z\": 10.759,\n    \"2019-11-29T03:00:00.000Z\": 9.9662,\n    \"2019-11-29T04:00:00.000Z\": 11.1332,\n    \"2019-11-29T05:00:00.000Z\": 11.0083,\n    \"2019-11-29T06:00:00.000Z\": 11.1072,\n    \"2019-11-29T07:00:00.000Z\": 11.1222,\n    \"2019-11-29T08:00:00.000Z\": 11.1322,\n    \"2019-11-29T09:00:00.000Z\": 11.1422,\n    \"2019-11-29T10:00:00.000Z\": 11.7473,\n    \"2019-11-29T11:00:00.000Z\": 11.4142,\n    \"2019-11-29T12:00:00.000Z\": 11.4403,\n    \"2019-11-29T13:00:00.000Z\": 11.475,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 13,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 13,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.7918,\n    \"2019-11-30T02:00:00.000Z\": 10.34,\n    \"2019-11-30T03:00:00.000Z\": 10.2648,\n    \"2019-11-30T04:00:00.000Z\": 10.112,\n    \"2019-11-30T05:00:00.000Z\": 11,\n    \"2019-11-30T06:00:00.000Z\": 10.312,\n    \"2019-11-30T07:00:00.000Z\": 11,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 11,\n    \"2019-11-30T13:00:00.000Z\": 11,\n    \"2019-11-30T14:00:00.000Z\": 11,\n    \"2019-11-30T15:00:00.000Z\": 11.5\n    }\n}\n```\n",
  "id": "a432923f-4718-44ae-3c9c-9832e68724bb",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "d416b294-0dc1-06b8-01ad-afd4d9794ae4",
        "name": "series_1",
        "type": "REQUIRED"
      },
      {
        "data_type": "SERIES",
        "id": "8478c25c-9370-e6d9-7a1f-4d611782570c",
        "name": "series_2",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "0951b836-933c-044d-030b-6c2ee3b5d00a",
        "name": "comparison_plot"
      }
    ]
  },
  "name": "Compare Two Timeseries Plot",
  "released_timestamp": "2022-02-09T17:33:30.020807+00:00",
  "revision_group_id": "a432923f-4718-44ae-3c9c-9832e68724bb",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
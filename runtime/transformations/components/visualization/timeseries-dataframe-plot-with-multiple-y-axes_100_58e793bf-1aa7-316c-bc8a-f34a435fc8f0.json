{
  "category": "Visualization",
  "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef compute_plot_positions(\n    num_y_axes, horizontal_relative_space_per_y_axis=0.06, side=\"left\"\n):\n    \"\"\"\n    returns tuple plot_area_x_ratio, y_positions\n\n    First assumes that a y axis horizontally fits into 5% of the total figure width\n    and tries to reserve enough horizontal space to match that exactly up to a limit\n    of reserving half the available width.\n\n    If that is not possible it reserves exactly 0.5 times the total width and\n    uniformly arranges the y axis positions (now having less than 5% horizontal space\n    and therefore maybe overlapping)\n\n    horizontal_relative_space_per_y_axis:\n        a value 0f 0.07 for is quite okay for half of a HD screen.\n        its too much for a full hd screen but still acceptable\n    \"\"\"\n\n    hor_ratio = horizontal_relative_space_per_y_axis\n\n    if num_y_axes * hor_ratio < 0.5:\n        positions = [\n            1 - x * hor_ratio - hor_ratio * (side == \"right\") for x in range(num_y_axes)\n        ]\n        plot_area_x_ratio = 1 - num_y_axes * hor_ratio\n\n    else:\n        plot_area_x_ratio = 0.5\n        positions = [1 - x * 0.5 / num_y_axes for x in range(num_y_axes)]\n    return plot_area_x_ratio, positions\n\n\ndef multi_series_with_multi_yaxis(df):\n    \"\"\"One y_axis for each column of input dataframe\"\"\"\n\n    plotly_data = []\n    plotly_layout = plotly.graph_objs.Layout()\n\n    colors = px.colors.qualitative.Plotly\n\n    sep_ratio, positions = compute_plot_positions(len(df.columns), side=\"right\")\n\n    # your layout goes here\n    layout_kwargs = {\n        # \"title\": \"y-axes in loop\",\n        \"xaxis\": {\"domain\": [0, sep_ratio]},\n        \"height\": 200,\n    }\n\n    for i, col in enumerate(df.columns):\n        # we define our layout keys by string concatenation\n        # * (i > 0) is just to get rid of the if i > 0 statement\n        axis_name = \"yaxis\" + str(i + 1) * (i > 0)\n        yaxis = \"y\" + str(i + 1) * (i > 0)\n        plotly_data.append(\n            plotly.graph_objs.Scatter(\n                x=df.index,\n                y=df[col],\n                name=col,\n                line=dict(\n                    color=colors[i % len(colors)]\n                    # , width=4, dash=\"dash\"\n                ),\n            )\n        )\n\n        layout_kwargs[axis_name] = {  #'range': [0, i + 0.1],\n            \"position\": positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"right\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n        }\n\n        plotly_data[i][\"yaxis\"] = yaxis\n        if i > 0:\n            layout_kwargs[axis_name][\"overlaying\"] = \"y\"\n\n    fig = plotly.graph_objs.Figure(\n        data=plotly_data, layout=plotly.graph_objs.Layout(**layout_kwargs)\n    )\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame},\n    outputs={\"plot\": DataType.PlotlyJson},\n    component_name=\"Timeseries DataFrame Plot with multiple Y Axes\",\n    description=\"Plotting a dataframe of multiple timeseries with multiple Y axes\",\n    category=\"Visualization\",\n    uuid=\"58e793bf-1aa7-316c-bc8a-f34a435fc8f0\",\n    group_id=\"58e793bf-1aa7-316c-bc8a-f34a435fc8f0\",\n    tag=\"1.0.0\"\n)\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(multi_series_with_multi_yaxis(dataframe))}\n",
  "description": "Plotting a dataframe of multiple timeseries with multiple Y axes",
  "documentation": "# Timeseries DataFrame Plot with multiple Y Axes\n\n## Description\nPlotting a dataframe with multiple X and Y axes.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming **dataframe** using Plotly such that each column gets its own y axis. Each y axis can be individually moved and scaled. Furthermore for each column a separate x axis is drawn and can be individually moved and scaled. A use case for this component is a dataframe having a datetimeindex and columns which one wants to compare timeshifted or even \"warped\" indiviudally along the x axis against each other.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"dataframe\": {\n    \"pH a\": {\n        \"2019-11-29T01:00:00.000Z\": 10.533,\n        \"2019-11-29T02:00:00.000Z\": 10.559,\n        \"2019-11-29T03:00:00.000Z\": 9.7662,\n        \"2019-11-29T04:00:00.000Z\": 11.2332,\n        \"2019-11-29T05:00:00.000Z\": 11.0683,\n        \"2019-11-29T06:00:00.000Z\": 11.2072,\n        \"2019-11-29T07:00:00.000Z\": 11.1522,\n        \"2019-11-29T08:00:00.000Z\": 11.1522,\n        \"2019-11-29T09:00:00.000Z\": 11.1522,\n        \"2019-11-29T10:00:00.000Z\": 11.4473,\n        \"2019-11-29T11:00:00.000Z\": 11.3142,\n        \"2019-11-29T12:00:00.000Z\": 11.3403,\n        \"2019-11-29T13:00:00.000Z\": 11.375,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 12,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 12,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.8918,\n        \"2019-11-30T02:00:00.000Z\": 10.64,\n        \"2019-11-30T03:00:00.000Z\": 10.5648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 12,\n        \"2019-11-30T06:00:00.000Z\": 10.912,\n        \"2019-11-30T07:00:00.000Z\": 12,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 12,\n        \"2019-11-30T13:00:00.000Z\": 12,\n        \"2019-11-30T14:00:00.000Z\": 12,\n        \"2019-11-30T15:00:00.000Z\": 12\n    },\n    \"pH b\": {\n        \"2019-11-29T01:00:00.000Z\": 10.7533,\n        \"2019-11-29T02:00:00.000Z\": 10.759,\n        \"2019-11-29T03:00:00.000Z\": 9.9662,\n        \"2019-11-29T04:00:00.000Z\": 11.1332,\n        \"2019-11-29T05:00:00.000Z\": 11.0083,\n        \"2019-11-29T06:00:00.000Z\": 11.1072,\n        \"2019-11-29T07:00:00.000Z\": 11.1222,\n        \"2019-11-29T08:00:00.000Z\": 11.1322,\n        \"2019-11-29T09:00:00.000Z\": 11.1422,\n        \"2019-11-29T10:00:00.000Z\": 11.7473,\n        \"2019-11-29T11:00:00.000Z\": 11.4142,\n        \"2019-11-29T12:00:00.000Z\": 11.4403,\n        \"2019-11-29T13:00:00.000Z\": 11.475,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 13,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 13,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.7918,\n        \"2019-11-30T02:00:00.000Z\": 10.34,\n        \"2019-11-30T03:00:00.000Z\": 10.2648,\n        \"2019-11-30T04:00:00.000Z\": 10.112,\n        \"2019-11-30T05:00:00.000Z\": 11,\n        \"2019-11-30T06:00:00.000Z\": 10.312,\n        \"2019-11-30T07:00:00.000Z\": 11,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 11,\n        \"2019-11-30T13:00:00.000Z\": 11,\n        \"2019-11-30T14:00:00.000Z\": 11,\n        \"2019-11-30T15:00:00.000Z\": 11.5\n    },\n    \"pH c\": {\n        \"2019-11-29T01:00:00.000Z\": 9.7533,\n        \"2019-11-29T02:00:00.000Z\": 8.759,\n        \"2019-11-29T03:00:00.000Z\": 9.1662,\n        \"2019-11-29T04:00:00.000Z\": 11.0332,\n        \"2019-11-29T05:00:00.000Z\": 11.0033,\n        \"2019-11-29T06:00:00.000Z\": 11.0172,\n        \"2019-11-29T07:00:00.000Z\": 11.0122,\n        \"2019-11-29T08:00:00.000Z\": 11.0222,\n        \"2019-11-29T09:00:00.000Z\": 11.0422,\n        \"2019-11-29T10:00:00.000Z\": 11.0273,\n        \"2019-11-29T11:00:00.000Z\": 11.1242,\n        \"2019-11-29T12:00:00.000Z\": 11.1703,\n        \"2019-11-29T13:00:00.000Z\": 11.035,\n        \"2019-11-29T14:00:00.000Z\": 12.1,\n        \"2019-11-29T15:00:00.000Z\": 11.2763,\n        \"2019-11-29T16:00:00.000Z\": 12.05,\n        \"2019-11-29T17:00:00.000Z\": 12.3,\n        \"2019-11-29T18:00:00.000Z\": 12.82,\n        \"2019-11-29T19:00:00.000Z\": 12.8,\n        \"2019-11-29T20:00:00.000Z\": 12.7,\n        \"2019-11-29T21:00:00.000Z\": 13.77,\n        \"2019-11-29T22:00:00.000Z\": 12.3,\n        \"2019-11-29T23:00:00.000Z\": 12.32,\n        \"2019-11-30T01:00:00.000Z\": 11.6918,\n        \"2019-11-30T02:00:00.000Z\": 11.22,\n        \"2019-11-30T03:00:00.000Z\": 11.0648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 11.04,\n        \"2019-11-30T06:00:00.000Z\": 10.87,\n        \"2019-11-30T07:00:00.000Z\": 10.98,\n        \"2019-11-30T08:00:00.000Z\": 11.63,\n        \"2019-11-30T09:00:00.000Z\": 11.222,\n        \"2019-11-30T10:00:00.000Z\": 11.111,\n        \"2019-11-30T11:00:00.000Z\": 10.7676,\n        \"2019-11-30T12:00:00.000Z\": 10.8787,\n        \"2019-11-30T13:00:00.000Z\": 10.8889,\n        \"2019-11-30T14:00:00.000Z\": 10.9101,\n        \"2019-11-30T15:00:00.000Z\": 10.989\n    }\n    }\n}\n```\n",
  "id": "58e793bf-1aa7-316c-bc8a-f34a435fc8f0",
  "io_interface": {
    "inputs": [
      {
        "data_type": "DATAFRAME",
        "id": "c011bcc7-5179-4913-f99a-379008401489",
        "name": "dataframe"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "b10e8a92-7d2a-789c-cd5d-4abfaa17a14a",
        "name": "plot"
      }
    ]
  },
  "name": "Timeseries DataFrame Plot with multiple Y Axes",
  "released_timestamp": "2022-02-09T17:33:30.782009+00:00",
  "revision_group_id": "58e793bf-1aa7-316c-bc8a-f34a435fc8f0",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
{
  "category": "Visualization",
  "content": "from hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef compute_plot_positions(\n    num_x_axes,\n    num_y_axes,\n    horizontal_relative_space_per_y_axis=0.06,\n    vertical_relative_space_per_x_axis=0.16,\n    y_axes_side=\"left\",\n    x_axes_side=\"bottom\",\n):\n    \"\"\"\n    returns tuple plot_area_x_ratio, y_positions\n\n    First assumes that a y axis horizontally fits into 5% of the total figure width\n    and tries to reserve enough horizontal space to match that exactly up to a limit\n    of reserving half the available width.\n\n    If that is not possible it reserves exactly 0.5 times the total width and\n    uniformly arranges the y axis positions (now having less than 5% horizontal space\n    and therefore maybe overlapping)\n\n    horizontal_relative_space_per_y_axis:\n        a value 0f 0.07 for is quite okay for half of a HD screen.\n        its too much for a full hd screen but still acceptable\n    \"\"\"\n\n    hor_ratio = horizontal_relative_space_per_y_axis\n\n    if num_y_axes * hor_ratio < 0.5:\n        x_positions = [\n            1 - x * hor_ratio - hor_ratio * (y_axes_side == \"right\")\n            for x in range(num_y_axes)\n        ]\n        plot_area_x_ratio = 1 - num_y_axes * hor_ratio\n\n    else:\n        plot_area_x_ratio = 0.5\n        x_positions = [1 - x * 0.5 / num_y_axes for x in range(num_y_axes)]\n\n    ver_ratio = vertical_relative_space_per_x_axis\n\n    if num_x_axes * ver_ratio < 0.5:\n        y_positions = [\n            1 - y * ver_ratio - ver_ratio * (x_axes_side == \"bottom\")\n            for y in range(num_x_axes)\n        ]\n        plot_area_y_ratio = 1 - num_x_axes * ver_ratio\n\n    else:\n        plot_area_y_ratio = 0.5\n        y_positions = [1 - y * 0.5 / num_x_axes for y in range(num_x_axes)]\n\n    return plot_area_y_ratio, y_positions, plot_area_x_ratio, x_positions\n\n\ndef multi_series_with_multi_yaxis(df, value_col, group_col):\n    \"\"\"One y_axis for each group of the input dataframe\"\"\"\n\n    plotly_data = []\n    plotly_layout = plotly.graph_objs.Layout()\n\n    colors = px.colors.qualitative.Plotly\n\n    groups = df[group_col].unique().tolist()\n\n    y_sep_ratio, y_positions, x_sep_ratio, x_positions = compute_plot_positions(\n        len(groups), len(groups), y_axes_side=\"right\", x_axes_side=\"bottom\"\n    )\n\n    print(y_sep_ratio, y_positions, x_sep_ratio, x_positions)\n\n    # your layout goes here\n    layout_kwargs = {\n        # \"title\": \"y-axes in loop\",\n        # \"xaxis\": {\"domain\": [0, x_sep_ratio]},\n        # \"height\": 200,\n    }\n\n    for i, col in enumerate(groups):\n        # we define our layout keys by string concatenation\n        # * (i > 0) is just to get rid of the if i > 0 statement\n        yaxis_name = \"yaxis\" + str(i + 1) * (i > 0)\n        xaxis_name = \"xaxis\" + str(i + 1) * (i > 0)\n        yaxis = \"y\" + str(i + 1) * (i > 0)\n        xaxis = \"x\" + str(i + 1) * (i > 0)\n\n        group_df = df[df[group_col] == col].sort_values(\"timestamp\")\n\n        value_series = group_df[value_col]\n        if \"timestamp\" in df.columns:\n            timestamps = group_df[\"timestamp\"]\n        else:\n            timestamps = value_series.index\n        # raise ValueError(value_series)\n\n        plotly_data.append(\n            plotly.graph_objs.Scatter(\n                x=timestamps,\n                y=value_series,\n                name=col,\n                opacity=0.8,\n                line=dict(\n                    color=colors[i % len(colors)]\n                    # , width=4, dash=\"dash\"\n                ),\n            )\n        )\n\n        layout_kwargs[yaxis_name] = {  #'range': [0, i + 0.1],\n            \"position\": x_positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"right\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True,\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n            \"domain\": [1.0 - y_sep_ratio, 1.0],\n        }\n\n        layout_kwargs[xaxis_name] = {  #'range': [0, i + 0.1],\n            \"position\": 1 - y_positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"bottom\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True,\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n            \"domain\": [0, x_sep_ratio],\n        }\n\n        plotly_data[i][\"yaxis\"] = yaxis\n        plotly_data[i][\"xaxis\"] = xaxis\n        if i > 0:\n            layout_kwargs[yaxis_name][\"overlaying\"] = \"y\"\n            layout_kwargs[xaxis_name][\"overlaying\"] = \"x\"\n\n    fig = plotly.graph_objs.Figure(\n        data=plotly_data, layout=plotly.graph_objs.Layout(**layout_kwargs)\n    )\n    fig.update_layout(margin=dict(l=10, r=10, b=10, t=30, pad=0))\n    fig.update_layout(\n        autosize=True,\n        showlegend=False,\n        hovermode=\"closest\",\n    )\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"dataframe\": {\"data_type\": \"DATAFRAME\"},\n    },\n    \"outputs\": {\n        \"plot\": {\"data_type\": \"PLOTLYJSON\"},\n    },\n    \"name\": \"Timeseries Plot with multiple movable X and Y Axes\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plots timeseries data with movable and resizable own y and x axes for every timeseries\",  # noqa: E501\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"4e5115a2-2a45-4156-6f54-ff66c176daea\",\n    \"revision_group_id\": \"4e5115a2-2a45-4156-6f54-ff66c176daea\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:31.343634+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(\n            multi_series_with_multi_yaxis(dataframe, \"value\", \"metric\")\n        )\n    }\n",
  "description": "Plots timeseries data with movable and resizable own y and x axes for every timeseries",
  "documentation": "As input this component expects a dataframe of the shape\n```\n{\n    \"value\": [\n        1.0,\n        1.2,\n        0.5,\n        1.9,\n        1.3,\n        0.2,\n        1.5,\n        1.7,\n        0.1\n    ],\n    \"metric\": [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"a\",\n        \"b\",\n        \"c\",\n        \"a\",\n        \"b\",\n        \"c\"\n    ],\n    \"timestamp\": [\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\"\n    ]\n}\n```\n\n, i.e. it contains multiple timeseries distinguished by an identifier in a \"metric\" column.\n",
  "id": "4e5115a2-2a45-4156-6f54-ff66c176daea",
  "io_interface": {
    "inputs": [
      {
        "data_type": "DATAFRAME",
        "id": "7ca708c9-3cff-a55d-9a92-6ffa6e79cf91",
        "name": "dataframe",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "45389948-b720-eb24-638d-af77b6ffeab6",
        "name": "plot"
      }
    ]
  },
  "name": "Timeseries Plot with multiple movable X and Y Axes",
  "released_timestamp": "2022-02-09T17:33:31.343634+00:00",
  "revision_group_id": "4e5115a2-2a45-4156-6f54-ff66c176daea",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
{
  "category": "Visualization",
  "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef timeseries_comparison_plot(\n    series_1: pd.Series,\n    series_2: pd.Series,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n    # Only thing I figured is - I could do this\n\n    s1 = series_1.sort_index()\n\n    fig.add_scatter(\n        x=s1.index,\n        y=s1,\n        mode=\"lines\",\n        name=s1.name if s1.name else \"series_1\",\n        secondary_y=False,\n    )  # Not what is desired - need a line\n\n    s2 = series_2.sort_index()\n\n    fig.add_scatter(\n        x=s2.index,\n        y=s2,\n        mode=\"lines\",\n        name=s2.name if s2.name else \"series_2\",\n        secondary_y=True,\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(\n        title_text=series_1.name if series_1.name is not None else \"series_1\",\n        secondary_y=False,\n    )\n    fig.update_yaxes(\n        title_text=series_2.name if series_2.name is not None else \"series_2\",\n        secondary_y=True,\n    )\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series_1\": DataType.Series, \"series_2\": DataType.Series},\n    outputs={\"plot\": DataType.PlotlyJson},\n    component_name=\"Two Timeseries with Two Y Axes Plot\",\n    description=\"Two timeseries in the same plot with each having its own y axis\",\n    category=\"Visualization\",\n    uuid=\"5dc42708-34fd-ab82-bf2c-307fd66ad749\",\n    group_id=\"5dc42708-34fd-ab82-bf2c-307fd66ad749\",\n    tag=\"1.0.0\"\n)\ndef main(*, series_1, series_2):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(timeseries_comparison_plot(series_1, series_2))\n    }\n",
  "description": "Two timeseries in the same plot with each having its own y axis",
  "documentation": "# Two Timeseries with Two Y Axes Plot\n\n## Description\nPlotting of two timeseries in the same plot, each with its own y axis.\n\n## Inputs\n* **series_1** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n* **series_2** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n\n## Outputs\n* **comparison_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots both incoming timeseries into the same figure using Plotly, giving each its own individually scaled y axis.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"series_1\": {\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t\t},\n\t\"series_2\": {\n    \"2019-11-29T01:00:00.000Z\": 4.1332,\n    \"2019-11-29T02:00:00.000Z\": 3.759,\n    \"2019-11-29T03:00:00.000Z\": 2.9662,\n    \"2019-11-29T04:00:00.000Z\": 4.1332,\n    \"2019-11-29T05:00:00.000Z\": 4.1083,\n    \"2019-11-29T06:00:00.000Z\": 4.1072,\n    \"2019-11-29T07:00:00.000Z\": 3.92,\n    \"2019-11-29T08:00:00.000Z\": 4.8322,\n    \"2019-11-29T09:00:00.000Z\": 2.8422,\n    \"2019-11-29T10:00:00.000Z\": 4.7473,\n    \"2019-11-29T11:00:00.000Z\": 4.4142,\n    \"2019-11-29T12:00:00.000Z\": 4.4403,\n    \"2019-11-29T13:00:00.000Z\": 4.475,\n    \"2019-11-29T14:00:00.000Z\": 5,\n    \"2019-11-29T15:00:00.000Z\": 5.4763,\n    \"2019-11-29T16:00:00.000Z\": 5,\n    \"2019-11-29T17:00:00.000Z\": 5,\n    \"2019-11-29T18:00:00.000Z\": 7,\n    \"2019-11-29T19:00:00.000Z\": 5,\n    \"2019-11-29T20:00:00.000Z\": 5,\n    \"2019-11-29T21:00:00.000Z\": 6,\n    \"2019-11-29T22:00:00.000Z\": 5,\n    \"2019-11-29T23:00:00.000Z\": 5,\n    \"2019-11-30T01:00:00.000Z\": 3.7918,\n    \"2019-11-30T02:00:00.000Z\": 2.34,\n    \"2019-11-30T03:00:00.000Z\": 3.2648,\n    \"2019-11-30T04:00:00.000Z\": 3.112,\n    \"2019-11-30T05:00:00.000Z\": 4,\n    \"2019-11-30T06:00:00.000Z\": 3.312,\n    \"2019-11-30T07:00:00.000Z\": 4,\n    \"2019-11-30T08:00:00.000Z\": 5,\n    \"2019-11-30T09:00:00.000Z\": 4.3663,\n    \"2019-11-30T10:00:00.000Z\": 4.1262,\n    \"2019-11-30T11:00:00.000Z\": 3.7471,\n    \"2019-11-30T12:00:00.000Z\": 4,\n    \"2019-11-30T13:00:00.000Z\": 4,\n    \"2019-11-30T14:00:00.000Z\": 4,\n    \"2019-11-30T15:00:00.000Z\": 4.5\n    }\n}\n```\n",
  "id": "5dc42708-34fd-ab82-bf2c-307fd66ad749",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "9510b309-8dcf-c3fc-b7b1-0f1e44e775f4",
        "name": "series_1"
      },
      {
        "data_type": "SERIES",
        "id": "e3a6d38c-ff01-f859-011e-2be50d03a498",
        "name": "series_2"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "fcc6dc33-541f-0bb4-8543-e3ff36f2eb02",
        "name": "plot"
      }
    ]
  },
  "name": "Two Timeseries with Two Y Axes Plot",
  "released_timestamp": "2022-02-09T17:33:30.612315+00:00",
  "revision_group_id": "5dc42708-34fd-ab82-bf2c-307fd66ad749",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
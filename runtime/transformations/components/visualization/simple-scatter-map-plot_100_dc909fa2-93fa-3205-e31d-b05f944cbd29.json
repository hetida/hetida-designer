{
  "category": "Visualization",
  "content": "# add your own imports here\nfrom hdutils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\nimport numpy as np\n\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef get_plotly_osm_scatter_map_figure(\n    dataframe,\n    lat_col=\"lat\",\n    lon_col=\"lon\",\n    hover_title_col=None,\n    hover_additional_description_cols=None,\n    cat_color_col=None,\n    cat_color_mapping=None,\n    size=None,\n    fixed_size=None,\n    size_max=10,\n    zoom=8,\n    height=400,\n    **kwargs\n):\n\n    if cat_color_mapping is None:\n        cat_color_mapping = {}\n\n    use_size_vals = False\n    if fixed_size is not None and size is None:\n        use_size_vals = True\n        size_vals = np.ones(len(dataframe)) * fixed_size\n        \n    fig = px.scatter_mapbox(\n        dataframe,\n        lat=lat_col,\n        lon=lon_col,\n        hover_name=hover_title_col,\n        hover_data=hover_additional_description_cols,\n        size=size if not use_size_vals else size_vals,\n        size_max=10,\n        color_discrete_map=cat_color_mapping,\n        color=cat_color_col,\n        zoom=zoom,\n        height=height,\n        **kwargs\n    )\n    fig.update_layout(mapbox_style=\"open-street-map\")\n    fig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"data\": {\"data_type\": \"DATAFRAME\"},\n        \"color_map\": {\"data_type\": \"ANY\"},\n        \"cat_color_col\": {\"data_type\": \"STRING\"},\n    },\n    \"outputs\": {\n        \"map_plot\": {\"data_type\": \"PLOTLYJSON\"},\n    },\n    \"name\": \"Simple Scatter Map Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Mark locations on a map\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"dc909fa2-93fa-3205-e31d-b05f944cbd29\",\n    \"revision_group_id\": \"dc909fa2-93fa-3205-e31d-b05f944cbd29\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:31.137600+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, data, color_map, cat_color_col):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"map_plot\": plotly_fig_to_json_dict(\n            get_plotly_osm_scatter_map_figure(\n                data,\n                hover_title_col=\"name\",\n                hover_additional_description_cols=[\"description\"],\n                fixed_size=2,\n                size_max=5,\n                cat_color_col=cat_color_col,\n                cat_color_mapping=color_map,\n            )\n        )\n    }\n",
  "description": "Mark locations on a map",
  "documentation": "# Simple Scatter Map Plot\n\n## Description\nThis component marks locations on a map.\n\n## Inputs\n* **data** (Pandas DataFrame): Must have \n * \"lat\" and a \"lon\" columns containing latitude and longitude coordinates\n * \"name\" column where the titles of the hovering rectangle are obtained from.\n * \"description\" column where additional information is stored that is included in the hovering rectangles.\n * A column of which the name is equal to the value provided in **cat_color_col** input. This must be a categorical column, e.g. String values like `\"A\", \"B\", ...`.\n* **color_map** (Any): Must be a dictionary providing color values for the category values in `data[cat_color_col]`, e.g. `{\"A\": \"#005099\", \"B\": \"#6633FF\"}`\n* **cat_color_col** (String): The name of the column containing the categories in **data**.\n\n## Outputs\n* **map_plot** (Plotly Json): The generated Plotly Json map plot. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThis is an example for a Scatter Map plot. It draws an Openstreetmap map, marking all locations in **data** with a small circle.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"cat_color_col\": \"Organisation\",\n    \"color_map\": {\n        \"Folkwang\": \"#005099\",\n        \"von der Heydt\": \"#00925B\",\n        \"lehmbruck\": \"#0076BD\"\n    },\n    \"data\": {\n        \"lat\": [\n            51.442666,\n            51.256625,\n            51.430145\n        ],\n        \"lon\": [\n            7.005126,\n            7.146598,\n            6.765380\n        ],\n        \"name\": [\n            \"Folkwang Museum Essen\",\n            \"Von der Heydt Museum Wuppertal\",\n            \"Lehmbruck Museum Duisburg\"\n        ],\n        \"description\": [\n            \"\",\n            \"\",\n            \"\"\n        ],\n        \"Organisation\": [\n            \"Folkwang\",\n            \"von der Heydt\",\n            \"lehmbruck\"\n        ]\n    }\n}\n```\n",
  "id": "dc909fa2-93fa-3205-e31d-b05f944cbd29",
  "io_interface": {
    "inputs": [
      {
        "data_type": "DATAFRAME",
        "id": "159f2c5a-40fc-65a2-d84c-2e7d2ae16e0a",
        "name": "data",
        "type": "REQUIRED"
      },
      {
        "data_type": "ANY",
        "id": "0d0227d4-60cd-98de-d7bd-8de9462ff452",
        "name": "color_map",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "b7519a7a-83ae-d0a4-e79c-60b3c0f00c2e",
        "name": "cat_color_col",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "PLOTLYJSON",
        "id": "7c1a20a3-f8ae-be72-f6c3-73e874904c74",
        "name": "map_plot"
      }
    ]
  },
  "name": "Simple Scatter Map Plot",
  "released_timestamp": "2022-02-09T17:33:31.137600+00:00",
  "revision_group_id": "dc909fa2-93fa-3205-e31d-b05f944cbd29",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
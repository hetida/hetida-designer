{
  "category": "Filters",
  "content": "from hetdesrun.component.registration import register\nimport pandas as pd\nfrom scipy.signal import butter\nfrom scipy.signal import lfilter\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"data\": {\"data_type\": \"SERIES\"},\n        \"frequency\": {\"data_type\": \"FLOAT\"},\n    },\n    \"outputs\": {\n        \"filtered\": {\"data_type\": \"SERIES\"},\n    },\n    \"name\": \"Lowpass Filter\",\n    \"category\": \"Filters\",\n    \"description\": \"First-order digital lowpass filter\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"a4a8cfa7-3b18-dc8d-2985-9a8be889686a\",\n    \"revision_group_id\": \"a4a8cfa7-3b18-dc8d-2985-9a8be889686a\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:34.971911+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, data, frequency):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here\n    nyq = 0.5 * data.size / ((data.index[-1] - data.index[0]).total_seconds())\n    normal_frequency = frequency / nyq\n    b, a = butter(1, normal_frequency, btype=\"low\", analog=False)\n    filtered = lfilter(b, a, data)\n    \n    return {\"filtered\": pd.Series(filtered, index=data.index)}\n\n",
  "description": "First-order digital lowpass filter",
  "documentation": "# Lowpass FIlter\n\n## Description\nThis component is a digital first-order lowpass-filter.\n\n## Inputs\n* **data** (Pandas Series): The indices must be datetimes with constant differences, the values must be numeric.\n* **frequency** (Float): Cut-off frequency. \n\n## Outputs\n* **filtered** (Pandas Series): The filtered data.\n\n## Details\nThe component filters a Pandas Series with a given cut-off frequency. The result is a Pandas Series, containing only frequencies smaller than the cut-off frequency.\n",
  "id": "a4a8cfa7-3b18-dc8d-2985-9a8be889686a",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "cb69cbd4-b3ea-61b1-3387-2e31e37aa60e",
        "name": "data",
        "type": "REQUIRED"
      },
      {
        "data_type": "FLOAT",
        "id": "2a87eb31-1cf4-6c86-2906-eb08785b364b",
        "name": "frequency",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "SERIES",
        "id": "61a734b8-3a19-b4e4-c4d9-2fc97ae506aa",
        "name": "filtered"
      }
    ]
  },
  "name": "Lowpass Filter",
  "released_timestamp": "2022-02-09T17:33:34.971911+00:00",
  "revision_group_id": "a4a8cfa7-3b18-dc8d-2985-9a8be889686a",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
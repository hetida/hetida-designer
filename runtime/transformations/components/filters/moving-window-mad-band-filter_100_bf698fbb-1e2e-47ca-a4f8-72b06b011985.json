{
  "category": "Filters",
  "content": "\"\"\"Documentation for Moving Window MAD Band Filter\n\n# Moving Window MAD Band Filter\n\n## Description\nThis component detects outliers based on calculated bandpass filter statistics. These statistics include the median and median absolute deviation (MAD) for a moving window.\n\n## Inputs\n* **series** (Pandas Series): Series to perform the bandpass filter calculation for. The indices must be datetimes.\n* **window_size** (String): Time period of each window. Must be a pandas frequency string.\n* **min_num_datapoints_in_window** (Integer): Minimum number of datapoints required in a window to calculate the statistics.\n* **mad_scaling_factor** (Float): The calculated MADs are multiplied by this factor to adjust the width of the bandfilter at each point. The value 1.4836 makes it equivalent to the standard deviation.\n* **min_band_width_factor** (Float): Factor to calculate the minimum band width. The factor is multiplied with the median of the calculated MADs.\n\n## Outputs\n* **band_filter_dataframe** (Pandas DataFrame): Data frame with the input series, the calculated statistics and the filter mask.\n* **filter_mask** (Pandas Series): Series with the filter mask.\n\n## Details\nThis component detects outlier in a series based on bandpass filter statistics that it calculates. This includes the calculation of the median and median absolute deviation (MAD) for a moving window of size **window_size**. There must be at least **min_num_datapoints_in_window** datapoints within a window to perform a calculation. If there are fewer datapoints in a window, no calculation is performed.\n\nThe function to calculate the MAD is selected based on the size of the series. Both available functions are based on numpy functions. If the size of the series exceeds 10,000 datapoints, numba just-in-time compilation is used to speed up the MAD calculation. The limit of 10,000 datapoints was chosen as result of runtime tests on multiple machines.\n\nThe calculated MADs are multiplied by **mad_normalization_constant**. This allows a normalization with regard to other figures. For example, the result with the constant 1.4826 is equivalent to the standard deviation.\n\nA minimum width of the band is ensured using **min_band_width_factor**. The higher the value, the wider the band. The factor is multiplied with the median of the calculated MADs of all windows. All MADs that are smaller than the product are set to it.\n\nThe last step is to check which datapoints lie outside of the band. If no calculation was performed for a datapoint because too few datapoints were inside the corresponding window, no statement can be made about this datapoint. In this case, the datapoint is classified as normal and not as an outlier.\n\nThe component has two outputs, a data frame with the input series, the calculated statistics, and the result of the last check as well as a series with only the result of the last check. The data frame **band_filter_dataframe** can be used for visualization of the results and the series **filter_mask** to filter the time series.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"series\": {\n        \"2022-01-01T00:00:00Z\": 1.058,\n        \"2022-01-01T00:20:48Z\": 0.699,\n        \"2022-01-01T00:41:37Z\": 1.08,\n        \"2022-01-01T01:02:26Z\": 1.054,\n        \"2022-01-01T01:23:15Z\": 0.763,\n        \"2022-01-01T01:44:04Z\": 1.034,\n        \"2022-01-01T02:04:53Z\": 0.965,\n        \"2022-01-01T02:25:42Z\": 0.601,\n        \"2022-01-01T02:46:31Z\": 0.933,\n        \"2022-01-01T03:07:20Z\": 1.081,\n        \"2022-01-01T03:28:09Z\": 2.1,\n        \"2022-01-01T03:48:58Z\": 0.988,\n        \"2022-01-01T04:09:47Z\": 0.741,\n        \"2022-01-01T04:30:36Z\": 0.647,\n        \"2022-01-01T04:51:25Z\": 0.556,\n        \"2022-01-01T05:12:14Z\": 0.453,\n        \"2022-01-01T05:33:03Z\": 1.009,\n        \"2022-01-01T05:53:52Z\": 1.72,\n        \"2022-01-01T06:14:41Z\": 1.002,\n        \"2022-01-01T06:56:19Z\": 0.857,\n        \"2022-01-01T07:17:08Z\": 0.864,\n        \"2022-01-01T07:37:57Z\": 0.606,\n        \"2022-01-01T07:58:46Z\": 0.899,\n        \"2022-01-01T08:40:24Z\": 0.62,\n        \"2022-01-01T10:03:40Z\": 0.721,\n        \"2022-01-01T10:24:29Z\": 1.193,\n        \"2022-01-01T10:45:18Z\": 0.833,\n        \"2022-01-01T11:06:07Z\": 2.06,\n        \"2022-01-01T11:26:56Z\": 0.68,\n        \"2022-01-01T11:47:45Z\": 1.136,\n        \"2022-01-01T12:08:34Z\": 0.62,\n        \"2022-01-01T12:29:23Z\": 0.946,\n        \"2022-01-01T12:50:12Z\": 0.746,\n        \"2022-01-01T13:11:01Z\": 0.833,\n        \"2022-01-01T13:31:50Z\": 0.857,\n        \"2022-01-01T14:13:28Z\": 0.947,\n        \"2022-01-01T14:34:17Z\": 0.841,\n        \"2022-01-01T14:55:06Z\": 0.668,\n        \"2022-01-01T15:15:55Z\": 0.675,\n        \"2022-01-01T15:36:44Z\": 0.84,\n        \"2022-01-01T15:57:33Z\": 0.821,\n        \"2022-01-01T16:18:22Z\": 0.625,\n        \"2022-01-01T16:39:11Z\": 1.155,\n        \"2022-01-01T17:00:00Z\": 0.968\n    },\n    \"window_size\": \"17486.0S\",\n    \"min_num_datapoints_in_window\": 10,\n    \"mad_scaling_factor\": 4.4478,\n    \"min_band_width_factor\": 1\n}\n```\nThe expected output is\n```\n{\n    \"band_filter_dataframe\": {\n        \"values\": {\n            \"2022-01-01T00:00:00.000Z\":1.058,\n            \"2022-01-01T00:20:48.000Z\":0.699,\n            \"2022-01-01T00:41:37.000Z\":1.08,\n            \"2022-01-01T01:02:26.000Z\":1.054,\n            \"2022-01-01T01:23:15.000Z\":0.763,\n            \"2022-01-01T01:44:04.000Z\":1.034,\n            \"2022-01-01T02:04:53.000Z\":0.965,\n            \"2022-01-01T02:25:42.000Z\":0.601,\n            \"2022-01-01T02:46:31.000Z\":0.933,\n            \"2022-01-01T03:07:20.000Z\":1.081,\n            \"2022-01-01T03:28:09.000Z\":2.1,\n            \"2022-01-01T03:48:58.000Z\":0.988,\n            \"2022-01-01T04:09:47.000Z\":0.741,\n            \"2022-01-01T04:30:36.000Z\":0.647,\n            \"2022-01-01T04:51:25.000Z\":0.556,\n            \"2022-01-01T05:12:14.000Z\":0.453,\n            \"2022-01-01T05:33:03.000Z\":1.009,\n            \"2022-01-01T05:53:52.000Z\":1.72,\n            \"2022-01-01T06:14:41.000Z\":1.002,\n            \"2022-01-01T06:56:19.000Z\":0.857,\n            \"2022-01-01T07:17:08.000Z\":0.864,\n            \"2022-01-01T07:37:57.000Z\":0.606,\n            \"2022-01-01T07:58:46.000Z\":0.899,\n            \"2022-01-01T08:40:24.000Z\":0.62,\n            \"2022-01-01T10:03:40.000Z\":0.721,\n            \"2022-01-01T10:24:29.000Z\":1.193,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":2.06,\n            \"2022-01-01T11:26:56.000Z\":0.68,\n            \"2022-01-01T11:47:45.000Z\":1.136,\n            \"2022-01-01T12:08:34.000Z\":0.62,\n            \"2022-01-01T12:29:23.000Z\":0.946,\n            \"2022-01-01T12:50:12.000Z\":0.746,\n            \"2022-01-01T13:11:01.000Z\":0.833,\n            \"2022-01-01T13:31:50.000Z\":0.857,\n            \"2022-01-01T14:13:28.000Z\":0.947,\n            \"2022-01-01T14:34:17.000Z\":0.841,\n            \"2022-01-01T14:55:06.000Z\":0.668,\n            \"2022-01-01T15:15:55.000Z\":0.675,\n            \"2022-01-01T15:36:44.000Z\":0.84,\n            \"2022-01-01T15:57:33.000Z\":0.821,\n            \"2022-01-01T16:18:22.000Z\":0.625,\n            \"2022-01-01T16:39:11.000Z\":1.155,\n            \"2022-01-01T17:00:00.000Z\":0.968\n        },\n        \"band_center\":{\n            \"2022-01-01T00:41:37.000Z\":0.9995,\n            \"2022-01-01T01:02:26.000Z\":1.034,\n            \"2022-01-01T01:23:15.000Z\":1.011,\n            \"2022-01-01T01:44:04.000Z\":0.988,\n            \"2022-01-01T02:04:53.000Z\":0.9765,\n            \"2022-01-01T02:25:42.000Z\":0.965,\n            \"2022-01-01T02:46:31.000Z\":0.949,\n            \"2022-01-01T03:07:20.000Z\":0.949,\n            \"2022-01-01T03:28:09.000Z\":0.949,\n            \"2022-01-01T03:48:58.000Z\":0.9765,\n            \"2022-01-01T04:09:47.000Z\":0.965,\n            \"2022-01-01T04:30:36.000Z\":0.933,\n            \"2022-01-01T04:51:25.000Z\":0.933,\n            \"2022-01-01T05:12:14.000Z\":0.864,\n            \"2022-01-01T05:33:03.000Z\":0.864,\n            \"2022-01-01T05:53:52.000Z\":0.8605,\n            \"2022-01-01T06:14:41.000Z\":0.799,\n            \"2022-01-01T06:56:19.000Z\":0.8605,\n            \"2022-01-01T10:03:40.000Z\":0.866,\n            \"2022-01-01T10:24:29.000Z\":0.7895,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":0.833,\n            \"2022-01-01T11:26:56.000Z\":0.833,\n            \"2022-01-01T11:47:45.000Z\":0.845,\n            \"2022-01-01T12:08:34.000Z\":0.841,\n            \"2022-01-01T12:29:23.000Z\":0.841,\n            \"2022-01-01T12:50:12.000Z\":0.833,\n            \"2022-01-01T13:11:01.000Z\":0.84,\n            \"2022-01-01T13:31:50.000Z\":0.833,\n            \"2022-01-01T14:13:28.000Z\":0.833,\n            \"2022-01-01T14:34:17.000Z\":0.84,\n            \"2022-01-01T14:55:06.000Z\":0.8365,\n            \"2022-01-01T15:15:55.000Z\":0.84,\n            \"2022-01-01T15:36:44.000Z\":0.8405\n        },\n        \"rolling_deviation\":{\n            \"2022-01-01T00:41:37.000Z\":0.511497,\n            \"2022-01-01T01:02:26.000Z\":0.511497,\n            \"2022-01-01T01:23:15.000Z\":0.511497,\n            \"2022-01-01T01:44:04.000Z\":0.511497,\n            \"2022-01-01T02:04:53.000Z\":0.511497,\n            \"2022-01-01T02:25:42.000Z\":0.5159448,\n            \"2022-01-01T02:46:31.000Z\":0.7072002,\n            \"2022-01-01T03:07:20.000Z\":0.7072002,\n            \"2022-01-01T03:28:09.000Z\":0.8762166,\n            \"2022-01-01T03:48:58.000Z\":0.756126,\n            \"2022-01-01T04:09:47.000Z\":0.9963072,\n            \"2022-01-01T04:30:36.000Z\":0.8539776,\n            \"2022-01-01T04:51:25.000Z\":0.6582744,\n            \"2022-01-01T05:12:14.000Z\":0.9651726,\n            \"2022-01-01T05:33:03.000Z\":0.644931,\n            \"2022-01-01T05:53:52.000Z\":0.644931,\n            \"2022-01-01T06:14:41.000Z\":0.8272908,\n            \"2022-01-01T06:56:19.000Z\":0.8650971,\n            \"2022-01-01T10:03:40.000Z\":0.9607248,\n            \"2022-01-01T10:24:29.000Z\":0.7249914,\n            \"2022-01-01T10:45:18.000Z\":0.6805134,\n            \"2022-01-01T11:06:07.000Z\":0.511497,\n            \"2022-01-01T11:26:56.000Z\":0.511497,\n            \"2022-01-01T11:47:45.000Z\":0.511497,\n            \"2022-01-01T12:08:34.000Z\":0.511497,\n            \"2022-01-01T12:29:23.000Z\":0.511497,\n            \"2022-01-01T12:50:12.000Z\":0.511497,\n            \"2022-01-01T13:11:01.000Z\":0.511497,\n            \"2022-01-01T13:31:50.000Z\":0.511497,\n            \"2022-01-01T14:13:28.000Z\":0.511497,\n            \"2022-01-01T14:34:17.000Z\":0.511497,\n            \"2022-01-01T14:55:06.000Z\":0.511497,\n            \"2022-01-01T15:15:55.000Z\":0.511497,\n            \"2022-01-01T15:36:44.000Z\":0.5203926\n        },\n        \"filter_mask\":{\n            \"2022-01-01T00:00:00.000Z\":true,\n            \"2022-01-01T00:20:48.000Z\":true,\n            \"2022-01-01T00:41:37.000Z\":true,\n            \"2022-01-01T01:02:26.000Z\":true,\n            \"2022-01-01T01:23:15.000Z\":true,\n            \"2022-01-01T01:44:04.000Z\":true,\n            \"2022-01-01T02:04:53.000Z\":true,\n            \"2022-01-01T02:25:42.000Z\":true,\n            \"2022-01-01T02:46:31.000Z\":true,\n            \"2022-01-01T03:07:20.000Z\":true,\n            \"2022-01-01T03:28:09.000Z\":false,\n            \"2022-01-01T03:48:58.000Z\":true,\n            \"2022-01-01T04:09:47.000Z\":true,\n            \"2022-01-01T04:30:36.000Z\":true,\n            \"2022-01-01T04:51:25.000Z\":true,\n            \"2022-01-01T05:12:14.000Z\":true,\n            \"2022-01-01T05:33:03.000Z\":true,\n            \"2022-01-01T05:53:52.000Z\":false,\n            \"2022-01-01T06:14:41.000Z\":true,\n            \"2022-01-01T06:56:19.000Z\":true,\n            \"2022-01-01T07:17:08.000Z\":true,\n            \"2022-01-01T07:37:57.000Z\":true,\n            \"2022-01-01T07:58:46.000Z\":true,\n            \"2022-01-01T08:40:24.000Z\":true,\n            \"2022-01-01T10:03:40.000Z\":true,\n            \"2022-01-01T10:24:29.000Z\":true,\n            \"2022-01-01T10:45:18.000Z\":true,\n            \"2022-01-01T11:06:07.000Z\":false,\n            \"2022-01-01T11:26:56.000Z\":true,\n            \"2022-01-01T11:47:45.000Z\":true,\n            \"2022-01-01T12:08:34.000Z\":true,\n            \"2022-01-01T12:29:23.000Z\":true,\n            \"2022-01-01T12:50:12.000Z\":true,\n            \"2022-01-01T13:11:01.000Z\":true,\n            \"2022-01-01T13:31:50.000Z\":true,\n            \"2022-01-01T14:13:28.000Z\":true,\n            \"2022-01-01T14:34:17.000Z\":true,\n            \"2022-01-01T14:55:06.000Z\":true,\n            \"2022-01-01T15:15:55.000Z\":true,\n            \"2022-01-01T15:36:44.000Z\":true,\n            \"2022-01-01T15:57:33.000Z\":true,\n            \"2022-01-01T16:18:22.000Z\":true,\n            \"2022-01-01T16:39:11.000Z\":true,\n            \"2022-01-01T17:00:00.000Z\":true\n        }\n    },\n    \"filter_mask\": {\n        \"2022-01-01T00:00:00.000Z\":true,\n        \"2022-01-01T00:20:48.000Z\":true,\n        \"2022-01-01T00:41:37.000Z\":true,\n        \"2022-01-01T01:02:26.000Z\":true,\n        \"2022-01-01T01:23:15.000Z\":true,\n        \"2022-01-01T01:44:04.000Z\":true,\n        \"2022-01-01T02:04:53.000Z\":true,\n        \"2022-01-01T02:25:42.000Z\":true,\n        \"2022-01-01T02:46:31.000Z\":true,\n        \"2022-01-01T03:07:20.000Z\":true,\n        \"2022-01-01T03:28:09.000Z\":false,\n        \"2022-01-01T03:48:58.000Z\":true,\n        \"2022-01-01T04:09:47.000Z\":true,\n        \"2022-01-01T04:30:36.000Z\":true,\n        \"2022-01-01T04:51:25.000Z\":true,\n        \"2022-01-01T05:12:14.000Z\":true,\n        \"2022-01-01T05:33:03.000Z\":true,\n        \"2022-01-01T05:53:52.000Z\":false,\n        \"2022-01-01T06:14:41.000Z\":true,\n        \"2022-01-01T06:56:19.000Z\":true,\n        \"2022-01-01T07:17:08.000Z\":true,\n        \"2022-01-01T07:37:57.000Z\":true,\n        \"2022-01-01T07:58:46.000Z\":true,\n        \"2022-01-01T08:40:24.000Z\":true,\n        \"2022-01-01T10:03:40.000Z\":true,\n        \"2022-01-01T10:24:29.000Z\":true,\n        \"2022-01-01T10:45:18.000Z\":true,\n        \"2022-01-01T11:06:07.000Z\":false,\n        \"2022-01-01T11:26:56.000Z\":true,\n        \"2022-01-01T11:47:45.000Z\":true,\n        \"2022-01-01T12:08:34.000Z\":true,\n        \"2022-01-01T12:29:23.000Z\":true,\n        \"2022-01-01T12:50:12.000Z\":true,\n        \"2022-01-01T13:11:01.000Z\":true,\n        \"2022-01-01T13:31:50.000Z\":true,\n        \"2022-01-01T14:13:28.000Z\":true,\n        \"2022-01-01T14:34:17.000Z\":true,\n        \"2022-01-01T14:55:06.000Z\":true,\n        \"2022-01-01T15:15:55.000Z\":true,\n        \"2022-01-01T15:36:44.000Z\":true,\n        \"2022-01-01T15:57:33.000Z\":true,\n        \"2022-01-01T16:18:22.000Z\":true,\n        \"2022-01-01T16:39:11.000Z\":true,\n        \"2022-01-01T17:00:00.000Z\":true\n    }\n}\n```\n\"\"\"\n\nfrom typing import Dict, Union\n\nimport numpy as np\nimport numpy.typing as npt\n\nimport pandas as pd\n\nfrom numba import njit\n\n\ndef median_absolute_deviation(data: npt.ArrayLike) -> np.float64:\n    \"\"\"Calculation of the median absolute deviation (MAD) using numpy functions.\n\n    data (Array like): Values for which the MAD is supposed to be calculated. Must be an array or\n        an object that can be converted to an array.\n\n    Returns: Calculated MAD.\n    \"\"\"\n    return np.median(np.abs(data - np.median(data)))\n\n\n@njit\ndef median_absolute_deviation_numba(data: npt.ArrayLike) -> np.float64:\n    \"\"\"Calculation of the median absolute deviation (MAD) using numba just-in-time compilation.\n\n    data (Array like): Values for which the MAD is supposed to be calculated. Must be an array or\n        an object that can be converted to an array.\n\n    Returns: Calculated MAD.\n    \"\"\"\n    return np.median(np.abs(data - np.median(data)))\n\n\ndef calculate_rolling_median_absolute_deviation(\n    series: pd.Series,\n    mad_scaling_factor: float,\n    window_size: str,\n    min_num_datapoints_in_window: int,\n) -> pd.Series:\n    \"\"\"Calculate the median absolute deviation (MAD) for a rolling window.\n\n    The used MAD function is selected based on the size of the timeseries. The numba version is\n    used for larger series to reduce the runtime. The limit of 10,000 datapoints in a series was\n    chosen as result of runtime tests on different machines.\n\n    series (Pandas Series): Series for which the MAD calculation is supposed to be performed.\n    mad_scaling_factor (Float): The calculated MADs are multiplied by this factor to adjust the\n        width of the bandfilter at each point. The value 1.4836 makes it equivalent to the standard\n        deviation.\n    window_size (String): Time period of each window. Must be a pandas frequency string.\n    min_num_datapoints_in_window (Integer): Minimum number of observations required in a window to\n        calculate a value.\n\n    Returns: Series with the calculated MAD for each timestamp.\n    \"\"\"\n    if len(series) < 10000:\n        scaled_rolling_median_absolute_deviation = mad_scaling_factor * (\n            series.rolling(\n                window=window_size,\n                min_periods=min_num_datapoints_in_window,\n                center=True,\n            ).apply(median_absolute_deviation, raw=True)\n        )\n    else:\n        scaled_rolling_median_absolute_deviation = mad_scaling_factor * (\n            series.rolling(\n                window=window_size,\n                min_periods=min_num_datapoints_in_window,\n                center=True,\n            ).apply(median_absolute_deviation_numba, raw=True, engine=\"numba\")\n        )\n\n    return scaled_rolling_median_absolute_deviation\n\n\ndef calculate_band_filter_statistics(\n    series: pd.Series,\n    window_size: str,\n    min_num_datapoints_in_window: int,\n    mad_scaling_factor: float,\n    min_band_width_factor: float,\n) -> Dict[str, Union[pd.DataFrame, pd.Series]]:\n    \"\"\"Calculate the moving window band filter statistics.\n\n    Function to perform the calculation of band filter statistics using moving windows.\n    The statistics include the median, MAD and filter mask for each window with a\n    minimum size.\n\n    series (Pandas Series): Series for which the statistics are supposed to be calculated.\n        The indices must be datetimes.\n    window_size (String): Time period of each window. Must be a pandas frequency string.\n    min_num_datapoints_in_window (Integer): Minimum number of observations required in a window\n        to perform a calculation.\n    mad_scaling_factor (Float): The calculated MADs are multiplied by this factor to adjust the\n        width of the bandfilter at each point. The value 1.4836 makes it equivalent to the\n        standard deviation.\n    min_band_width_factor (Float): Factor to calculate the minimum band width. The factor is\n        multiplied with the median of the calculated MADs.\n\n    Returns: Series with the calculated moving window band filter statistics.\n    \"\"\"\n    if not isinstance(series.index, pd.DatetimeIndex):\n        raise TypeError(\"This component is exclusively for series with Datetime index!\")\n\n    # Convert series to data frame.\n    band_filter_dataframe = series.to_frame(name=\"values\")\n\n    # Calculate the rolling median.\n    band_filter_dataframe[\"band_center\"] = series.rolling(\n        window=window_size, min_periods=min_num_datapoints_in_window, center=True\n    ).median()\n\n    # Calculate the rolling median absolute deviation.\n    band_filter_dataframe[\n        \"rolling_deviation\"\n    ] = calculate_rolling_median_absolute_deviation(\n        series=series,\n        mad_scaling_factor=mad_scaling_factor,\n        window_size=window_size,\n        min_num_datapoints_in_window=min_num_datapoints_in_window,\n    )\n\n    # Set the minimum width of the band.\n    min_width = (\n        np.median(band_filter_dataframe[\"rolling_deviation\"].dropna())\n        * min_band_width_factor\n    )\n    band_filter_dataframe.loc[\n        band_filter_dataframe[\"rolling_deviation\"] < min_width, \"rolling_deviation\"\n    ] = min_width\n\n    # Check which datapoints are invalid.\n    band_filter_dataframe[\"filter_mask\"] = (\n        np.abs(series - band_filter_dataframe[\"band_center\"])\n        <= band_filter_dataframe[\"rolling_deviation\"]\n    )\n\n    # Set filter_mask to True for all datapoints for which no calculation could be performed\n    # to keep them after filtering.\n    band_filter_dataframe.loc[\n        band_filter_dataframe[\"band_center\"].isna(), \"filter_mask\"\n    ] = True\n\n    return [band_filter_dataframe, band_filter_dataframe[\"filter_mask\"]]\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series\": {\"data_type\": \"SERIES\"},\n        \"window_size\": {\"data_type\": \"STRING\"},\n        \"min_num_datapoints_in_window\": {\"data_type\": \"INT\"},\n        \"mad_scaling_factor\": {\"data_type\": \"FLOAT\"},\n        \"min_band_width_factor\": {\"data_type\": \"FLOAT\"},\n    },\n    \"outputs\": {\n        \"band_filter_dataframe\": {\"data_type\": \"DATAFRAME\"},\n        \"filter_mask\": {\"data_type\": \"SERIES\"},\n    },\n    \"name\": \"Moving Window MAD Band Filter\",\n    \"category\": \"Filters\",\n    \"description\": \"Detect outliers by moving window median absolute deviation (MAD) bandpass filter\",  # noqa: E501\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"bf698fbb-1e2e-47ca-a4f8-72b06b011985\",\n    \"revision_group_id\": \"4cf6f5e7-e4de-4714-8929-5206c595a148\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-11-24T17:03:43.549364+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(\n    *,\n    series,\n    window_size,\n    min_num_datapoints_in_window,\n    mad_scaling_factor,\n    min_band_width_factor,\n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    band_filter_dataframe, filter_mask = calculate_band_filter_statistics(\n        series=series,\n        window_size=window_size,\n        min_num_datapoints_in_window=min_num_datapoints_in_window,\n        mad_scaling_factor=mad_scaling_factor,\n        min_band_width_factor=min_band_width_factor,\n    )\n\n    return {\n        \"band_filter_dataframe\": band_filter_dataframe,\n        \"filter_mask\": filter_mask,\n    }\n\n\nTEST_WIRING_FROM_PY_FILE_IMPORT = {\n    \"input_wirings\": [\n        {\n            \"workflow_input_name\": \"series\",\n            \"adapter_id\": \"direct_provisioning\",\n            \"filters\": {\n                \"value\": '{\\n    \"2022-01-01T00:00:00Z\": 1.058,\\n    \"2022-01-01T00:20:48Z\": 0.699,\\n    \"2022-01-01T00:41:37Z\": 1.08,\\n    \"2022-01-01T01:02:26Z\": 1.054,\\n    \"2022-01-01T01:23:15Z\": 0.763,\\n    \"2022-01-01T01:44:04Z\": 1.034,\\n    \"2022-01-01T02:04:53Z\": 0.965,\\n    \"2022-01-01T02:25:42Z\": 0.601,\\n    \"2022-01-01T02:46:31Z\": 0.933,\\n    \"2022-01-01T03:07:20Z\": 1.081,\\n    \"2022-01-01T03:28:09Z\": 2.1,\\n    \"2022-01-01T03:48:58Z\": 0.988,\\n    \"2022-01-01T04:09:47Z\": 0.741,\\n    \"2022-01-01T04:30:36Z\": 0.647,\\n    \"2022-01-01T04:51:25Z\": 0.556,\\n    \"2022-01-01T05:12:14Z\": 0.453,\\n    \"2022-01-01T05:33:03Z\": 1.009,\\n    \"2022-01-01T05:53:52Z\": 1.72,\\n    \"2022-01-01T06:14:41Z\": 1.002,\\n    \"2022-01-01T06:56:19Z\": 0.857,\\n    \"2022-01-01T07:17:08Z\": 0.864,\\n    \"2022-01-01T07:37:57Z\": 0.606,\\n    \"2022-01-01T07:58:46Z\": 0.899,\\n    \"2022-01-01T08:40:24Z\": 0.62,\\n    \"2022-01-01T10:03:40Z\": 0.721,\\n    \"2022-01-01T10:24:29Z\": 1.193,\\n    \"2022-01-01T10:45:18Z\": 0.833,\\n    \"2022-01-01T11:06:07Z\": 2.06,\\n    \"2022-01-01T11:26:56Z\": 0.68,\\n    \"2022-01-01T11:47:45Z\": 1.136,\\n    \"2022-01-01T12:08:34Z\": 0.62,\\n    \"2022-01-01T12:29:23Z\": 0.946,\\n    \"2022-01-01T12:50:12Z\": 0.746,\\n    \"2022-01-01T13:11:01Z\": 0.833,\\n    \"2022-01-01T13:31:50Z\": 0.857,\\n    \"2022-01-01T14:13:28Z\": 0.947,\\n    \"2022-01-01T14:34:17Z\": 0.841,\\n    \"2022-01-01T14:55:06Z\": 0.668,\\n    \"2022-01-01T15:15:55Z\": 0.675,\\n    \"2022-01-01T15:36:44Z\": 0.84,\\n    \"2022-01-01T15:57:33Z\": 0.821,\\n    \"2022-01-01T16:18:22Z\": 0.625,\\n    \"2022-01-01T16:39:11Z\": 1.155,\\n    \"2022-01-01T17:00:00Z\": 0.968\\n}'\n            },\n        },\n        {\n            \"workflow_input_name\": \"window_size\",\n            \"adapter_id\": \"direct_provisioning\",\n            \"filters\": {\"value\": \"17486.0S\"},\n        },\n        {\n            \"workflow_input_name\": \"min_num_datapoints_in_window\",\n            \"adapter_id\": \"direct_provisioning\",\n            \"filters\": {\"value\": \"10\"},\n        },\n        {\n            \"workflow_input_name\": \"mad_scaling_factor\",\n            \"adapter_id\": \"direct_provisioning\",\n            \"filters\": {\"value\": \"4.4478\"},\n        },\n        {\n            \"workflow_input_name\": \"min_band_width_factor\",\n            \"adapter_id\": \"direct_provisioning\",\n            \"filters\": {\"value\": \"1\"},\n        },\n    ]\n}\n",
  "description": "Detect outliers by moving window median absolute deviation (MAD) bandpass filter",
  "documentation": "# Moving Window MAD Band Filter\n\n## Description\nThis component detects outliers based on calculated bandpass filter statistics. These statistics include the median and median absolute deviation (MAD) for a moving window.\n\n## Inputs\n* **series** (Pandas Series): Series to perform the bandpass filter calculation for. The indices must be datetimes.\n* **window_size** (String): Time period of each window. Must be a pandas frequency string.\n* **min_num_datapoints_in_window** (Integer): Minimum number of datapoints required in a window to calculate the statistics.\n* **mad_scaling_factor** (Float): The calculated MADs are multiplied by this factor to adjust the width of the bandfilter at each point. The value 1.4836 makes it equivalent to the standard deviation.\n* **min_band_width_factor** (Float): Factor to calculate the minimum band width. The factor is multiplied with the median of the calculated MADs.\n\n## Outputs\n* **band_filter_dataframe** (Pandas DataFrame): Data frame with the input series, the calculated statistics and the filter mask.\n* **filter_mask** (Pandas Series): Series with the filter mask.\n\n## Details\nThis component detects outlier in a series based on bandpass filter statistics that it calculates. This includes the calculation of the median and median absolute deviation (MAD) for a moving window of size **window_size**. There must be at least **min_num_datapoints_in_window** datapoints within a window to perform a calculation. If there are fewer datapoints in a window, no calculation is performed.\n\nThe function to calculate the MAD is selected based on the size of the series. Both available functions are based on numpy functions. If the size of the series exceeds 10,000 datapoints, numba just-in-time compilation is used to speed up the MAD calculation. The limit of 10,000 datapoints was chosen as result of runtime tests on multiple machines.\n\nThe calculated MADs are multiplied by **mad_normalization_constant**. This allows a normalization with regard to other figures. For example, the result with the constant 1.4826 is equivalent to the standard deviation.\n\nA minimum width of the band is ensured using **min_band_width_factor**. The higher the value, the wider the band. The factor is multiplied with the median of the calculated MADs of all windows. All MADs that are smaller than the product are set to it.\n\nThe last step is to check which datapoints lie outside of the band. If no calculation was performed for a datapoint because too few datapoints were inside the corresponding window, no statement can be made about this datapoint. In this case, the datapoint is classified as normal and not as an outlier.\n\nThe component has two outputs, a data frame with the input series, the calculated statistics, and the result of the last check as well as a series with only the result of the last check. The data frame **band_filter_dataframe** can be used for visualization of the results and the series **filter_mask** to filter the time series.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"series\": {\n        \"2022-01-01T00:00:00Z\": 1.058,\n        \"2022-01-01T00:20:48Z\": 0.699,\n        \"2022-01-01T00:41:37Z\": 1.08,\n        \"2022-01-01T01:02:26Z\": 1.054,\n        \"2022-01-01T01:23:15Z\": 0.763,\n        \"2022-01-01T01:44:04Z\": 1.034,\n        \"2022-01-01T02:04:53Z\": 0.965,\n        \"2022-01-01T02:25:42Z\": 0.601,\n        \"2022-01-01T02:46:31Z\": 0.933,\n        \"2022-01-01T03:07:20Z\": 1.081,\n        \"2022-01-01T03:28:09Z\": 2.1,\n        \"2022-01-01T03:48:58Z\": 0.988,\n        \"2022-01-01T04:09:47Z\": 0.741,\n        \"2022-01-01T04:30:36Z\": 0.647,\n        \"2022-01-01T04:51:25Z\": 0.556,\n        \"2022-01-01T05:12:14Z\": 0.453,\n        \"2022-01-01T05:33:03Z\": 1.009,\n        \"2022-01-01T05:53:52Z\": 1.72,\n        \"2022-01-01T06:14:41Z\": 1.002,\n        \"2022-01-01T06:56:19Z\": 0.857,\n        \"2022-01-01T07:17:08Z\": 0.864,\n        \"2022-01-01T07:37:57Z\": 0.606,\n        \"2022-01-01T07:58:46Z\": 0.899,\n        \"2022-01-01T08:40:24Z\": 0.62,\n        \"2022-01-01T10:03:40Z\": 0.721,\n        \"2022-01-01T10:24:29Z\": 1.193,\n        \"2022-01-01T10:45:18Z\": 0.833,\n        \"2022-01-01T11:06:07Z\": 2.06,\n        \"2022-01-01T11:26:56Z\": 0.68,\n        \"2022-01-01T11:47:45Z\": 1.136,\n        \"2022-01-01T12:08:34Z\": 0.62,\n        \"2022-01-01T12:29:23Z\": 0.946,\n        \"2022-01-01T12:50:12Z\": 0.746,\n        \"2022-01-01T13:11:01Z\": 0.833,\n        \"2022-01-01T13:31:50Z\": 0.857,\n        \"2022-01-01T14:13:28Z\": 0.947,\n        \"2022-01-01T14:34:17Z\": 0.841,\n        \"2022-01-01T14:55:06Z\": 0.668,\n        \"2022-01-01T15:15:55Z\": 0.675,\n        \"2022-01-01T15:36:44Z\": 0.84,\n        \"2022-01-01T15:57:33Z\": 0.821,\n        \"2022-01-01T16:18:22Z\": 0.625,\n        \"2022-01-01T16:39:11Z\": 1.155,\n        \"2022-01-01T17:00:00Z\": 0.968\n    },\n    \"window_size\": \"17486.0S\",\n    \"min_num_datapoints_in_window\": 10,\n    \"mad_scaling_factor\": 4.4478,\n    \"min_band_width_factor\": 1\n}\n```\nThe expected output is\n```\n{\n    \"band_filter_dataframe\": {\n        \"values\": {\n            \"2022-01-01T00:00:00.000Z\":1.058,\n            \"2022-01-01T00:20:48.000Z\":0.699,\n            \"2022-01-01T00:41:37.000Z\":1.08,\n            \"2022-01-01T01:02:26.000Z\":1.054,\n            \"2022-01-01T01:23:15.000Z\":0.763,\n            \"2022-01-01T01:44:04.000Z\":1.034,\n            \"2022-01-01T02:04:53.000Z\":0.965,\n            \"2022-01-01T02:25:42.000Z\":0.601,\n            \"2022-01-01T02:46:31.000Z\":0.933,\n            \"2022-01-01T03:07:20.000Z\":1.081,\n            \"2022-01-01T03:28:09.000Z\":2.1,\n            \"2022-01-01T03:48:58.000Z\":0.988,\n            \"2022-01-01T04:09:47.000Z\":0.741,\n            \"2022-01-01T04:30:36.000Z\":0.647,\n            \"2022-01-01T04:51:25.000Z\":0.556,\n            \"2022-01-01T05:12:14.000Z\":0.453,\n            \"2022-01-01T05:33:03.000Z\":1.009,\n            \"2022-01-01T05:53:52.000Z\":1.72,\n            \"2022-01-01T06:14:41.000Z\":1.002,\n            \"2022-01-01T06:56:19.000Z\":0.857,\n            \"2022-01-01T07:17:08.000Z\":0.864,\n            \"2022-01-01T07:37:57.000Z\":0.606,\n            \"2022-01-01T07:58:46.000Z\":0.899,\n            \"2022-01-01T08:40:24.000Z\":0.62,\n            \"2022-01-01T10:03:40.000Z\":0.721,\n            \"2022-01-01T10:24:29.000Z\":1.193,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":2.06,\n            \"2022-01-01T11:26:56.000Z\":0.68,\n            \"2022-01-01T11:47:45.000Z\":1.136,\n            \"2022-01-01T12:08:34.000Z\":0.62,\n            \"2022-01-01T12:29:23.000Z\":0.946,\n            \"2022-01-01T12:50:12.000Z\":0.746,\n            \"2022-01-01T13:11:01.000Z\":0.833,\n            \"2022-01-01T13:31:50.000Z\":0.857,\n            \"2022-01-01T14:13:28.000Z\":0.947,\n            \"2022-01-01T14:34:17.000Z\":0.841,\n            \"2022-01-01T14:55:06.000Z\":0.668,\n            \"2022-01-01T15:15:55.000Z\":0.675,\n            \"2022-01-01T15:36:44.000Z\":0.84,\n            \"2022-01-01T15:57:33.000Z\":0.821,\n            \"2022-01-01T16:18:22.000Z\":0.625,\n            \"2022-01-01T16:39:11.000Z\":1.155,\n            \"2022-01-01T17:00:00.000Z\":0.968\n        },\n        \"band_center\":{\n            \"2022-01-01T00:41:37.000Z\":0.9995,\n            \"2022-01-01T01:02:26.000Z\":1.034,\n            \"2022-01-01T01:23:15.000Z\":1.011,\n            \"2022-01-01T01:44:04.000Z\":0.988,\n            \"2022-01-01T02:04:53.000Z\":0.9765,\n            \"2022-01-01T02:25:42.000Z\":0.965,\n            \"2022-01-01T02:46:31.000Z\":0.949,\n            \"2022-01-01T03:07:20.000Z\":0.949,\n            \"2022-01-01T03:28:09.000Z\":0.949,\n            \"2022-01-01T03:48:58.000Z\":0.9765,\n            \"2022-01-01T04:09:47.000Z\":0.965,\n            \"2022-01-01T04:30:36.000Z\":0.933,\n            \"2022-01-01T04:51:25.000Z\":0.933,\n            \"2022-01-01T05:12:14.000Z\":0.864,\n            \"2022-01-01T05:33:03.000Z\":0.864,\n            \"2022-01-01T05:53:52.000Z\":0.8605,\n            \"2022-01-01T06:14:41.000Z\":0.799,\n            \"2022-01-01T06:56:19.000Z\":0.8605,\n            \"2022-01-01T10:03:40.000Z\":0.866,\n            \"2022-01-01T10:24:29.000Z\":0.7895,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":0.833,\n            \"2022-01-01T11:26:56.000Z\":0.833,\n            \"2022-01-01T11:47:45.000Z\":0.845,\n            \"2022-01-01T12:08:34.000Z\":0.841,\n            \"2022-01-01T12:29:23.000Z\":0.841,\n            \"2022-01-01T12:50:12.000Z\":0.833,\n            \"2022-01-01T13:11:01.000Z\":0.84,\n            \"2022-01-01T13:31:50.000Z\":0.833,\n            \"2022-01-01T14:13:28.000Z\":0.833,\n            \"2022-01-01T14:34:17.000Z\":0.84,\n            \"2022-01-01T14:55:06.000Z\":0.8365,\n            \"2022-01-01T15:15:55.000Z\":0.84,\n            \"2022-01-01T15:36:44.000Z\":0.8405\n        },\n        \"rolling_deviation\":{\n            \"2022-01-01T00:41:37.000Z\":0.511497,\n            \"2022-01-01T01:02:26.000Z\":0.511497,\n            \"2022-01-01T01:23:15.000Z\":0.511497,\n            \"2022-01-01T01:44:04.000Z\":0.511497,\n            \"2022-01-01T02:04:53.000Z\":0.511497,\n            \"2022-01-01T02:25:42.000Z\":0.5159448,\n            \"2022-01-01T02:46:31.000Z\":0.7072002,\n            \"2022-01-01T03:07:20.000Z\":0.7072002,\n            \"2022-01-01T03:28:09.000Z\":0.8762166,\n            \"2022-01-01T03:48:58.000Z\":0.756126,\n            \"2022-01-01T04:09:47.000Z\":0.9963072,\n            \"2022-01-01T04:30:36.000Z\":0.8539776,\n            \"2022-01-01T04:51:25.000Z\":0.6582744,\n            \"2022-01-01T05:12:14.000Z\":0.9651726,\n            \"2022-01-01T05:33:03.000Z\":0.644931,\n            \"2022-01-01T05:53:52.000Z\":0.644931,\n            \"2022-01-01T06:14:41.000Z\":0.8272908,\n            \"2022-01-01T06:56:19.000Z\":0.8650971,\n            \"2022-01-01T10:03:40.000Z\":0.9607248,\n            \"2022-01-01T10:24:29.000Z\":0.7249914,\n            \"2022-01-01T10:45:18.000Z\":0.6805134,\n            \"2022-01-01T11:06:07.000Z\":0.511497,\n            \"2022-01-01T11:26:56.000Z\":0.511497,\n            \"2022-01-01T11:47:45.000Z\":0.511497,\n            \"2022-01-01T12:08:34.000Z\":0.511497,\n            \"2022-01-01T12:29:23.000Z\":0.511497,\n            \"2022-01-01T12:50:12.000Z\":0.511497,\n            \"2022-01-01T13:11:01.000Z\":0.511497,\n            \"2022-01-01T13:31:50.000Z\":0.511497,\n            \"2022-01-01T14:13:28.000Z\":0.511497,\n            \"2022-01-01T14:34:17.000Z\":0.511497,\n            \"2022-01-01T14:55:06.000Z\":0.511497,\n            \"2022-01-01T15:15:55.000Z\":0.511497,\n            \"2022-01-01T15:36:44.000Z\":0.5203926\n        },\n        \"filter_mask\":{\n            \"2022-01-01T00:00:00.000Z\":true,\n            \"2022-01-01T00:20:48.000Z\":true,\n            \"2022-01-01T00:41:37.000Z\":true,\n            \"2022-01-01T01:02:26.000Z\":true,\n            \"2022-01-01T01:23:15.000Z\":true,\n            \"2022-01-01T01:44:04.000Z\":true,\n            \"2022-01-01T02:04:53.000Z\":true,\n            \"2022-01-01T02:25:42.000Z\":true,\n            \"2022-01-01T02:46:31.000Z\":true,\n            \"2022-01-01T03:07:20.000Z\":true,\n            \"2022-01-01T03:28:09.000Z\":false,\n            \"2022-01-01T03:48:58.000Z\":true,\n            \"2022-01-01T04:09:47.000Z\":true,\n            \"2022-01-01T04:30:36.000Z\":true,\n            \"2022-01-01T04:51:25.000Z\":true,\n            \"2022-01-01T05:12:14.000Z\":true,\n            \"2022-01-01T05:33:03.000Z\":true,\n            \"2022-01-01T05:53:52.000Z\":false,\n            \"2022-01-01T06:14:41.000Z\":true,\n            \"2022-01-01T06:56:19.000Z\":true,\n            \"2022-01-01T07:17:08.000Z\":true,\n            \"2022-01-01T07:37:57.000Z\":true,\n            \"2022-01-01T07:58:46.000Z\":true,\n            \"2022-01-01T08:40:24.000Z\":true,\n            \"2022-01-01T10:03:40.000Z\":true,\n            \"2022-01-01T10:24:29.000Z\":true,\n            \"2022-01-01T10:45:18.000Z\":true,\n            \"2022-01-01T11:06:07.000Z\":false,\n            \"2022-01-01T11:26:56.000Z\":true,\n            \"2022-01-01T11:47:45.000Z\":true,\n            \"2022-01-01T12:08:34.000Z\":true,\n            \"2022-01-01T12:29:23.000Z\":true,\n            \"2022-01-01T12:50:12.000Z\":true,\n            \"2022-01-01T13:11:01.000Z\":true,\n            \"2022-01-01T13:31:50.000Z\":true,\n            \"2022-01-01T14:13:28.000Z\":true,\n            \"2022-01-01T14:34:17.000Z\":true,\n            \"2022-01-01T14:55:06.000Z\":true,\n            \"2022-01-01T15:15:55.000Z\":true,\n            \"2022-01-01T15:36:44.000Z\":true,\n            \"2022-01-01T15:57:33.000Z\":true,\n            \"2022-01-01T16:18:22.000Z\":true,\n            \"2022-01-01T16:39:11.000Z\":true,\n            \"2022-01-01T17:00:00.000Z\":true\n        }\n    },\n    \"filter_mask\": {\n        \"2022-01-01T00:00:00.000Z\":true,\n        \"2022-01-01T00:20:48.000Z\":true,\n        \"2022-01-01T00:41:37.000Z\":true,\n        \"2022-01-01T01:02:26.000Z\":true,\n        \"2022-01-01T01:23:15.000Z\":true,\n        \"2022-01-01T01:44:04.000Z\":true,\n        \"2022-01-01T02:04:53.000Z\":true,\n        \"2022-01-01T02:25:42.000Z\":true,\n        \"2022-01-01T02:46:31.000Z\":true,\n        \"2022-01-01T03:07:20.000Z\":true,\n        \"2022-01-01T03:28:09.000Z\":false,\n        \"2022-01-01T03:48:58.000Z\":true,\n        \"2022-01-01T04:09:47.000Z\":true,\n        \"2022-01-01T04:30:36.000Z\":true,\n        \"2022-01-01T04:51:25.000Z\":true,\n        \"2022-01-01T05:12:14.000Z\":true,\n        \"2022-01-01T05:33:03.000Z\":true,\n        \"2022-01-01T05:53:52.000Z\":false,\n        \"2022-01-01T06:14:41.000Z\":true,\n        \"2022-01-01T06:56:19.000Z\":true,\n        \"2022-01-01T07:17:08.000Z\":true,\n        \"2022-01-01T07:37:57.000Z\":true,\n        \"2022-01-01T07:58:46.000Z\":true,\n        \"2022-01-01T08:40:24.000Z\":true,\n        \"2022-01-01T10:03:40.000Z\":true,\n        \"2022-01-01T10:24:29.000Z\":true,\n        \"2022-01-01T10:45:18.000Z\":true,\n        \"2022-01-01T11:06:07.000Z\":false,\n        \"2022-01-01T11:26:56.000Z\":true,\n        \"2022-01-01T11:47:45.000Z\":true,\n        \"2022-01-01T12:08:34.000Z\":true,\n        \"2022-01-01T12:29:23.000Z\":true,\n        \"2022-01-01T12:50:12.000Z\":true,\n        \"2022-01-01T13:11:01.000Z\":true,\n        \"2022-01-01T13:31:50.000Z\":true,\n        \"2022-01-01T14:13:28.000Z\":true,\n        \"2022-01-01T14:34:17.000Z\":true,\n        \"2022-01-01T14:55:06.000Z\":true,\n        \"2022-01-01T15:15:55.000Z\":true,\n        \"2022-01-01T15:36:44.000Z\":true,\n        \"2022-01-01T15:57:33.000Z\":true,\n        \"2022-01-01T16:18:22.000Z\":true,\n        \"2022-01-01T16:39:11.000Z\":true,\n        \"2022-01-01T17:00:00.000Z\":true\n    }\n}\n```",
  "id": "bf698fbb-1e2e-47ca-a4f8-72b06b011985",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "228b2073-8946-47d7-9bc5-e3f606413291",
        "name": "series",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "2890da86-d4dd-4ece-a917-8574da4692ef",
        "name": "window_size",
        "type": "REQUIRED"
      },
      {
        "data_type": "INT",
        "id": "77ec0e96-81ee-4a4d-a2a6-99ad0ab71bdf",
        "name": "min_num_datapoints_in_window",
        "type": "REQUIRED"
      },
      {
        "data_type": "FLOAT",
        "id": "3fbf12d9-e297-4e19-94a2-2b7ed3cba32f",
        "name": "mad_scaling_factor",
        "type": "REQUIRED"
      },
      {
        "data_type": "FLOAT",
        "id": "258ed00c-589a-4191-bf9b-9ba2d91986db",
        "name": "min_band_width_factor",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "DATAFRAME",
        "id": "b783e836-dc11-4f7a-a642-07bd5d5a195c",
        "name": "band_filter_dataframe"
      },
      {
        "data_type": "SERIES",
        "id": "3160f65d-48ea-4942-b647-75034172c8bb",
        "name": "filter_mask"
      }
    ]
  },
  "name": "Moving Window MAD Band Filter",
  "released_timestamp": "2022-11-24T17:03:43.549364+00:00",
  "revision_group_id": "4cf6f5e7-e4de-4714-8929-5206c595a148",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "{\n    \"2022-01-01T00:00:00Z\": 1.058,\n    \"2022-01-01T00:20:48Z\": 0.699,\n    \"2022-01-01T00:41:37Z\": 1.08,\n    \"2022-01-01T01:02:26Z\": 1.054,\n    \"2022-01-01T01:23:15Z\": 0.763,\n    \"2022-01-01T01:44:04Z\": 1.034,\n    \"2022-01-01T02:04:53Z\": 0.965,\n    \"2022-01-01T02:25:42Z\": 0.601,\n    \"2022-01-01T02:46:31Z\": 0.933,\n    \"2022-01-01T03:07:20Z\": 1.081,\n    \"2022-01-01T03:28:09Z\": 2.1,\n    \"2022-01-01T03:48:58Z\": 0.988,\n    \"2022-01-01T04:09:47Z\": 0.741,\n    \"2022-01-01T04:30:36Z\": 0.647,\n    \"2022-01-01T04:51:25Z\": 0.556,\n    \"2022-01-01T05:12:14Z\": 0.453,\n    \"2022-01-01T05:33:03Z\": 1.009,\n    \"2022-01-01T05:53:52Z\": 1.72,\n    \"2022-01-01T06:14:41Z\": 1.002,\n    \"2022-01-01T06:56:19Z\": 0.857,\n    \"2022-01-01T07:17:08Z\": 0.864,\n    \"2022-01-01T07:37:57Z\": 0.606,\n    \"2022-01-01T07:58:46Z\": 0.899,\n    \"2022-01-01T08:40:24Z\": 0.62,\n    \"2022-01-01T10:03:40Z\": 0.721,\n    \"2022-01-01T10:24:29Z\": 1.193,\n    \"2022-01-01T10:45:18Z\": 0.833,\n    \"2022-01-01T11:06:07Z\": 2.06,\n    \"2022-01-01T11:26:56Z\": 0.68,\n    \"2022-01-01T11:47:45Z\": 1.136,\n    \"2022-01-01T12:08:34Z\": 0.62,\n    \"2022-01-01T12:29:23Z\": 0.946,\n    \"2022-01-01T12:50:12Z\": 0.746,\n    \"2022-01-01T13:11:01Z\": 0.833,\n    \"2022-01-01T13:31:50Z\": 0.857,\n    \"2022-01-01T14:13:28Z\": 0.947,\n    \"2022-01-01T14:34:17Z\": 0.841,\n    \"2022-01-01T14:55:06Z\": 0.668,\n    \"2022-01-01T15:15:55Z\": 0.675,\n    \"2022-01-01T15:36:44Z\": 0.84,\n    \"2022-01-01T15:57:33Z\": 0.821,\n    \"2022-01-01T16:18:22Z\": 0.625,\n    \"2022-01-01T16:39:11Z\": 1.155,\n    \"2022-01-01T17:00:00Z\": 0.968\n}"
        },
        "use_default_value": false,
        "workflow_input_name": "series"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "17486.0S"
        },
        "use_default_value": false,
        "workflow_input_name": "window_size"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "10"
        },
        "use_default_value": false,
        "workflow_input_name": "min_num_datapoints_in_window"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "4.4478"
        },
        "use_default_value": false,
        "workflow_input_name": "mad_scaling_factor"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "1"
        },
        "use_default_value": false,
        "workflow_input_name": "min_band_width_factor"
      }
    ],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
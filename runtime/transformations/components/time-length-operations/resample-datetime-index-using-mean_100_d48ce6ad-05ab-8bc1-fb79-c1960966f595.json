{
  "category": "Time length operations",
  "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"resampled\": DataType.Any},\n    name=\"Resample Datetime Index using Mean\",\n    description=\"Resamples data for some time frequency by taking means\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"d48ce6ad-05ab-8bc1-fb79-c1960966f595\",\n    revision_group_id=\"d48ce6ad-05ab-8bc1-fb79-c1960966f595\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.870763+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_date = data.copy()\n    try:\n        data_date.index = pd.to_datetime(data_date.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    if not data.index.is_monotonic:\n        raise ValueError(\"data must be sorted by its index\")\n\n    try:\n        return {\"resampled\": data_date.resample(t).mean()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
  "description": "Resamples data for some time frequency by taking means",
  "documentation": "# Resample Datetime Index using Mean\n\n## Description\nThe component resamples data for some time frequency by taking mean values.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetime.\n* **t** (String): The distance between the new indices. For example, 'ms', '15s', 'min', '2h' or 'd'.\n\n## Outputs\n* **resampled** (Pandas Series or Pandas DataFrame): The resampled **data**.\n\n## Details\nThe component resamples **data**. It creates a Pandas Series or Pandas DataFrame with indices in the range of the indices of **data** with the distance t. \n\nIt equippes each index with the average numerical observations in a window of size **t**.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n                \"2019-08-01T00:00:00\": 1.2,\n                \"2019-08-01T15:20:14\": 7.2,\n                \"2019-08-03T00:00:00\": 0.3,\n                \"2019-08-04T15:20:20\": 0.5,\n\t}, \n\t\"t\": \"d\"\n}\n```\nThe expected output is\n```\n\t\"resampled\": {\n\t\t\t\t\"2019-08-01T00:00:00\": 4.2,\n                \"2019-08-02T00:00:00\": null,\n\t\t\t\t\"2019-08-03T00:00:00\": 0.3,\n                \"2019-08-04T00:00:00\": 0.5\n\t}\n```\n",
  "id": "d48ce6ad-05ab-8bc1-fb79-c1960966f595",
  "io_interface": {
    "inputs": [
      {
        "data_type": "ANY",
        "id": "91665fc2-6659-125d-f49a-1d9b75f1fb07",
        "name": "data"
      },
      {
        "data_type": "STRING",
        "id": "1424f6f5-9c49-3d96-efb0-6fd65677715c",
        "name": "t"
      }
    ],
    "outputs": [
      {
        "data_type": "ANY",
        "id": "f676827a-3f35-c06e-e111-5ecf3ff0a312",
        "name": "resampled"
      }
    ]
  },
  "name": "Resample Datetime Index using Mean",
  "released_timestamp": "2022-02-09T17:33:28.870763+00:00",
  "revision_group_id": "d48ce6ad-05ab-8bc1-fb79-c1960966f595",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
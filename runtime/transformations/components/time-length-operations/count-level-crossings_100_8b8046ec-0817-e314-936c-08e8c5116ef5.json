{
  "category": "Time length operations",
  "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series, \"level\": DataType.Float, \"hysteresis\": DataType.Float, \"edge_type\": DataType.Float},\n    outputs={\"result\": DataType.Series},\n    component_name=\"Count level crossings\",\n    description=\"Count the level crossings of the input data\",\n    category=\"Time length operations\",\n    uuid=\"8b8046ec-0817-e314-936c-08e8c5116ef5\",\n    group_id=\"8b8046ec-0817-e314-936c-08e8c5116ef5\",\n    tag=\"1.0.0\"\n)\ndef main(*, data, level, hysteresis, edge_type):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if data.size < 2:\n        raise ValueError(f\"length of data must be greater than 1, it is {data.size}\")\n\n    if hysteresis < 0:\n        raise ValueError(f\"hysteresis must be non-negative, it is {hysteresis}\")\n\n    if not data.index.is_monotonic:\n        raise ValueError(\"data must be sorted by its index\")\n\n    tolerance = hysteresis / 2\n\n    crossings = (data > (level + tolerance)).astype(\"int64\") - (\n        data < (level - tolerance)\n    ).astype(\"int64\")\n    crossings = crossings[crossings != 0]\n\n    crossings.values[1:] = np.diff(crossings) / 2\n    crossings = crossings[1:]\n\n    if edge_type > 0:\n        crossings = crossings[crossings == 1]\n    elif edge_type < 0:\n        crossings = crossings[crossings == -1] / (-1)\n    else:\n        crossings = np.abs(crossings).fillna(0)\n        crossings = crossings[crossings != 0]\n\n    crossings = crossings.cumsum()\n    crossings = crossings.reindex(data.index)\n    crossings[0] = 0\n\n    return {\"result\": crossings.fillna(method=\"pad\").astype(\"int64\")}\n",
  "description": "Count the level crossings of the input data",
  "documentation": "# Count level crossings\n\n## Description\nThis component counts the level crossings of the input data.\n\n## Inputs\n* **data** (Pandas Series): Entries must be numeric.\n* **level** (Float): Center of the hysteresis-area.\n* **hysteresis** (Float): Width of the tolarance window around **level**, must be non-negative. \n* **edge_type** (Float): Input for deciding which type of edges should be counted. Values greater than 0 count ascending level crossings, values smaller than 0 count descending level crossings and equal to 0 all level crossings, respectively.\n\n## Outputs\n* **result** (Pandas Series): Series with the number of existing level crossings at the suitable index of data.\n\n## Details\nThe component counts the level crossings of the given **data**. If the index of data is datetime or numeric, data will be sorted first. \n\nThe input **hysteresis** can be used to define a window of tolerance around the input **level**. For example, if level is 5 and hysteresis is 2, values between 4 and 6 will be tolerated. \n\nThe input **edge_type** defines which kind of level crossings will be counted. Values greater than 0 will count ascending level crossings, values smaller than 0 descending level crossings and the value 0 all level crossings, respectively.\nIn the given example with edge_type 1, a change from 0 to 10 will be counted as level crossing. If the edge_type is -1, the same change will not be counted.\n\n\n## Examples\nThe json input of a typical call of this component, counting all level crossings is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 7.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 5.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 4.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 5.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 8.0,\n\t},\n\t\"level\": 5,\n\t\"hysteresis\": 2,\n\t\"edge_type\": 0\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 2.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 2.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 3.0,\n\t}\n```\n\nThe json input of a call of this component with the same data, counting ascending level crossings is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 7.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 5.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 4.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 5.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 8.0,\n\t}\n\t\"level\": 5\n\t\"hysteresis\": 2\n\t\"edge_type\": 1\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 2.0,\n\t}\n```\n",
  "id": "8b8046ec-0817-e314-936c-08e8c5116ef5",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "a0f3bca5-399d-62b1-ff44-073e7078047b",
        "name": "data"
      },
      {
        "data_type": "FLOAT",
        "id": "bf6756a7-4f17-65e7-c596-20b4fbbafd7b",
        "name": "level"
      },
      {
        "data_type": "FLOAT",
        "id": "63620c80-9031-c0ac-a486-3b79d12d5385",
        "name": "hysteresis"
      },
      {
        "data_type": "FLOAT",
        "id": "4056d458-506e-9e1a-9d22-dc360d8c9284",
        "name": "edge_type"
      }
    ],
    "outputs": [
      {
        "data_type": "SERIES",
        "id": "05d07635-bf66-9dea-3bcb-0d87e2ed02db",
        "name": "result"
      }
    ]
  },
  "name": "Count level crossings",
  "released_timestamp": "2022-02-09T17:33:29.070091+00:00",
  "revision_group_id": "8b8046ec-0817-e314-936c-08e8c5116ef5",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
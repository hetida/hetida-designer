{
  "category": "Statistic",
  "content": "import pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"data\": {\"data_type\": \"ANY\"},\n        \"t\": {\"data_type\": \"STRING\"},\n    },\n    \"outputs\": {\n        \"movstd\": {\"data_type\": \"ANY\"},\n    },\n    \"name\": \"Moving standard deviation time\",\n    \"category\": \"Statistic\",\n    \"description\": \"Calculates the moving standard deviation for a constant time interval\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"5eb8ca16-bbc7-94b1-3d82-6f074cd63456\",\n    \"revision_group_id\": \"5eb8ca16-bbc7-94b1-3d82-6f074cd63456\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:33.045034+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    try:\n        data.index = pd.to_datetime(data.index)\n\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    data_sort = data.sort_index().dropna()\n    try:\n        return {\"movstd\": data_sort.rolling(t).std()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
  "description": "Calculates the moving standard deviation for a constant time interval",
  "documentation": "# Moving standard deviation time\n\n## Description\nThe component calculates the moving standard deviation for a constant time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries must be numeric.\n* **t** (String): The lenght of the time interval, the standard deviation is calculated for. For example, '2ms', '2s', '2min', '2h' or '2d'.\n\n## Outputs\n* **movstd** (Pandas Series or Pandas DataFrame): The moving standard deviation of **data**. \n\n## Details\nThe component calculates the moving standard deviation for a constant time interval. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the standard deviation of the numerical observations in the foregoing time interval of length t.\n\nIf there is just one observation in the interval, no calculation is possible.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"t\": 7s\n}\n```\nThe expected output is\n```\n\t\"movstd\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.5,\n\t\t\t\t\"2019-08-01T15:20:35\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 10.5\n\t}\n```\n",
  "id": "5eb8ca16-bbc7-94b1-3d82-6f074cd63456",
  "io_interface": {
    "inputs": [
      {
        "data_type": "ANY",
        "id": "6bf80f57-feff-69e0-d180-c8263226b941",
        "name": "data",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "72c5b066-33b1-95d0-61c5-7482768bd32f",
        "name": "t",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "ANY",
        "id": "ce143cbe-a84c-1b55-716a-c98b3500aeea",
        "name": "movstd"
      }
    ]
  },
  "name": "Moving standard deviation time",
  "released_timestamp": "2022-02-09T17:33:33.045034+00:00",
  "revision_group_id": "5eb8ca16-bbc7-94b1-3d82-6f074cd63456",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
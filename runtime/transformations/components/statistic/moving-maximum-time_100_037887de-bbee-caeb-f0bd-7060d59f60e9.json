{
  "category": "Statistic",
  "content": "from hetdesrun.component.registration import register\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"data\": {\"data_type\": \"ANY\"},\n        \"t\": {\"data_type\": \"STRING\"},\n    },\n    \"outputs\": {\n        \"movmax\": {\"data_type\": \"ANY\"},\n    },\n    \"name\": \"Moving maximum time\",\n    \"category\": \"Statistic\",\n    \"description\": \"Calculates the moving maximum for a constant time interval\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"037887de-bbee-caeb-f0bd-7060d59f60e9\",\n    \"revision_group_id\": \"037887de-bbee-caeb-f0bd-7060d59f60e9\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-02-09T17:33:33.499500+00:00\",\n}\n\n\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    try:\n        data.index = pd.to_datetime(data.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n    data_sort = data.sort_index()\n\n    data_sort = data_sort.dropna()\n    try:\n        return {\"movmax\": data_sort.rolling(t).max()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
  "description": "Calculates the moving maximum for a constant time interval",
  "documentation": "# Moving maximum time\n\n## Description\nThe component calculates the moving maximum for a constant time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries must be numeric.\n* **t** (String): The lenght of the time interval, the maximum is calculated for. For example, '2ms', '2s', '2min', '2h' or '2d'.\n\n## Outputs\n* **movmax** (Pandas Series or Pandas DataFrame): The moving maximum of **data**. \n\n## Details\nThe component calculates the moving maximum for a constant time interval. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the maximum of the numerical observations in the foregoing time interval of length t.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"t\": 7s\n}\n```\nThe expected output is\n```\n\t\"movmax\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 12.0\n\t}\n```\n",
  "id": "037887de-bbee-caeb-f0bd-7060d59f60e9",
  "io_interface": {
    "inputs": [
      {
        "data_type": "ANY",
        "id": "b9ec067d-0643-2709-7f04-db996826bd37",
        "name": "data",
        "type": "REQUIRED"
      },
      {
        "data_type": "STRING",
        "id": "65ae8654-8110-b448-f475-d33983d265d0",
        "name": "t",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "ANY",
        "id": "316a2503-516e-2a2f-1d7e-aa360c3b440e",
        "name": "movmax"
      }
    ]
  },
  "name": "Moving maximum time",
  "released_timestamp": "2022-02-09T17:33:33.499500+00:00",
  "revision_group_id": "037887de-bbee-caeb-f0bd-7060d59f60e9",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
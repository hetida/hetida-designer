{
  "category": "Physics",
  "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nfrom scipy import integrate\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"speed\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    component_name=\"Time to length\",\n    description=\"Converts time related data to length related data\",\n    category=\"Physics\",\n    uuid=\"517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c\",\n    group_id=\"517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c\",\n    tag=\"1.0.0\"\n)\ndef main(*, data, speed):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n\n    data_sort = data.copy()\n    try:\n        data_sort.index = pd.to_datetime(data_sort.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    if isinstance(speed, (int, float, bool)):\n        data_sort = data_sort.sort_index()\n        time_norm = (data_sort.index - data_sort.index[0]).total_seconds()\n        length = pd.Series(speed * time_norm, index=data_sort.index)\n    else:\n        speed_sort = speed.copy()\n        try:\n            speed_sort.index = pd.to_datetime(speed_sort.index)\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of speed must be datetime\")\n        speed_sort = speed_sort.sort_index()\n        time_norm = (speed_sort.index - speed_sort.index[0]).total_seconds()\n        length = pd.Series(\n            integrate.cumtrapz(speed_sort.values, time_norm, initial=0),\n            index=speed_sort.index,\n        )\n\n        intersect = length.index.intersection(data_sort.index)\n        length = length.reindex(intersect)\n        data_sort = data_sort.reindex(intersect)\n\n    return {\"result\": pd.Series(data_sort.values, index=length.values)}\n",
  "description": "Converts time related data to length related data",
  "documentation": "# Time to length\n\n## Description\nConverts time related data to length related data.\n\n## Inputs\n* **data** (Pandas Series): Indices must be datetimes.\n* **speed** (Integer, Float or Pandas Series): For speed being Pandas Series, indices must be datetimes and entries must be numeric.  \n\n## Outputs\n* **result** (Pandas Series): The length related data.\n\n## Details\nThe component interprets the values of speed as speed in m/s with linear rise between the the given indices. It calculates the covered distance by speed and matches the result with the values given by data.\n\nIf the indices of data and speed are different, result is a conclusion of the insersection of both indices. Therefore, the covered distances will be calculated as exact as speed suffers and after that the corresponding distances and values of data will be matched.\n\nMultiple indices in the result are possible.\n\n\n## Examples\nThe json input of a typical call of this component with speed as Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 5.0,\n            \t\"2019-08-01T15:20:14\": 8.2,\n            \t\"2019-08-01T15:20:15\": 9.3,\n\t\t\t\t\"2019-08-01T15:20:17\": 8.6, \n\t\t\t\t\"2019-08-01T15:20:18\": 0.8, \n\t\t\t\t\"2019-08-01T15:20:21\": 3.4, \n            \t\"2019-08-01T15:20:25\": 2.1\n\t},\n\t\"speed\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1,\n            \t\"2019-08-01T15:20:14\": 2,\n            \t\"2019-08-01T15:20:15\": 3,\n\t\t\t\t\"2019-08-01T15:20:17\": 2, \n\t\t\t\t\"2019-08-01T15:20:18\": 0, \n\t\t\t\t\"2019-08-01T15:20:21\": 0, \n            \t\"2019-08-01T15:20:25\": 4   \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t0.0: 5.0,\n            \t3.0: 8.2,\n            \t5.5: 9.3,\n\t\t\t\t10.5: 8.6, \n\t\t\t\t11.5: 0.8, \n\t\t\t\t11.5: 3.4, \n            \t19.5: 2.1\n\t}\n\n```\n\nThe json input of a typical call of this component with speed as Integer is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n             \t\"2019-08-01T15:20:14\": 7.2,\n             \t\"2019-08-01T15:20:15\": 0.3,\n             \t\"2019-08-01T15:20:20\": 0.5,\n\t},\n    \"speed\": 5\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t0.0:     1.2\n \t\t\t\t10.0:    7.2\n \t\t\t\t15.0:    0.3\n \t\t\t\t40.0:    0.5  \n\t}\n```\n",
  "id": "517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c",
  "io_interface": {
    "inputs": [
      {
        "data_type": "ANY",
        "id": "013a8c93-2919-cb75-df47-11f0bc318ee3",
        "name": "data"
      },
      {
        "data_type": "ANY",
        "id": "6c5beae3-1fb6-08da-6ddf-7081d9f6895a",
        "name": "speed"
      }
    ],
    "outputs": [
      {
        "data_type": "ANY",
        "id": "baa3190b-3474-33a9-9376-f2da6966e71b",
        "name": "result"
      }
    ]
  },
  "name": "Time to length",
  "released_timestamp": "2022-02-09T17:33:32.237126+00:00",
  "revision_group_id": "517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
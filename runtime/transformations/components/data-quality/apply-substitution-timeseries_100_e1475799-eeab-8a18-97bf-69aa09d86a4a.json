{
  "category": "Data Quality",
  "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\n\ndef handle_substitutions(original_series, substitution_series):\n    \"\"\"Applies substituion series on raw values\n    \n    The substitution series can contain\n    * replacement values (at indices occuring in original)\n    * new values (values at indices not in original)\n    * null values at indices in original marking values for invalidation (ignoring)\n    \n    Returns a tuple of pandas Series objects\n        (completely_handled, replaced_values, replacements, new_values, ignored_values)    \"\"\"\n\n    new = original_series.copy()\n    deleted = new.loc[substitution_series.isnull().reindex(new.index, fill_value=False)]\n\n    kept_before_replacing = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=True)\n    ]\n\n    replaced_originals = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=False)\n    ]\n\n    replacements = substitution_series.reindex(original_series.index).dropna()\n\n    new_values = substitution_series.loc[\n        ~substitution_series.index.isin(original_series.index)\n    ]\n\n    completely_handled_series = new.copy()\n    completely_handled_series = completely_handled_series.loc[\n        substitution_series.notnull().reindex(\n            completely_handled_series.index, fill_value=True\n        )\n    ]\n    completely_handled_series.update(substitution_series)\n    completely_handled_series = pd.concat([completely_handled_series, new_values])\n\n    return (\n        completely_handled_series.sort_index(),\n        replaced_originals,\n        replacements,\n        new_values,\n        deleted,\n    )\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"raw_values\": DataType.Series, \"substitution_series\": DataType.Series},\n    outputs={\"substituted_ts\": DataType.Series},\n    component_name=\"Apply Substitution Timeseries\",\n    description=\"Apply a substitution to a timeseries using a substitution series\",\n    category=\"Data Quality\",\n    id=\"e1475799-eeab-8a18-97bf-69aa09d86a4a\",\n    revision_group_id=\"e1475799-eeab-8a18-97bf-69aa09d86a4a\",\n    version_tag=\"1.0.0\"\n)\ndef main(*, raw_values, substitution_series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    s1 = raw_values.sort_index()\n    s1 = s1.loc[~s1.index.duplicated(keep=\"first\")]\n\n    s2 = substitution_series.sort_index()\n    s2 = s2.loc[~s2.index.duplicated(keep=\"first\")]\n    return {\"substituted_ts\": handle_substitutions(s1, s2)[0]}\n",
  "description": "Apply a substitution to a timeseries using a substitution series",
  "documentation": "# Apply Substitution Timeseries\"\n\n## Description\nApply a substitution to a timeseries using a substitution series.\n\n## Inputs\n* **raw_values** (Pandas Series): The original (raw) value series. Entries should be numeric and Index should be a DateTime Index.\n* **substitution_series** (Pandas Series): The substitution series containing replacement and new values as well as null/NaN values where original values should be ignored.\n\n## Outputs\n* **substituted_ts** (Pandas Series): The resulting timeseries with values replaced, ignored or added.\n\n## Details\nApply a substitution allowing to\n* replace existing values\n* add new values\n* ignore original values\nFor ignoring, the substitution series need NaN values at the appropriate indices.\n\n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"raw_values\": {\n\t\t\t    \"2020-07-01T00:00:00Z\": 0,\n\t\t\t    \"2020-07-02T00:00:00Z\": 17,\n\t\t\t    \"2020-07-03T00:00:00Z\": 18,\n\t\t\t    \"2020-07-04T00:00:00Z\": 3,\n\t\t\t    \"2020-07-04T08:00:00Z\": 15,\n\t\t\t    \"2020-07-04T14:00:00Z\": 16,\n\t\t\t    \"2020-07-04T18:00:00Z\": 19,\n\t\t\t    \"2020-07-07T00:00:00Z\": 6,\n\t\t\t    \"2020-07-08T00:00:00Z\": 7\n\t},\n\t\"substitution_series\": {\n\t\t\t    \"2020-07-02T00:00:00Z\": 1.0,\n\t\t\t    \"2020-07-03T00:00:00Z\": 2.0,\n\t\t\t    \"2020-07-04T08:00:00Z\": null,\n\t\t\t    \"2020-07-04T14:00:00Z\": null,\n\t\t\t    \"2020-07-04T18:00:00Z\": null,\n\t\t\t    \"2020-07-05T00:00:00Z\": 4,\n\t\t\t    \"2020-07-06T00:00:00Z\": 5,\n\t\t\t    \"2020-07-09T00:00:00Z\": 18.0,\n\t\t\t    \"2020-07-10T00:00:00Z\": 19.0\n\t}\n}\n```\n",
  "id": "e1475799-eeab-8a18-97bf-69aa09d86a4a",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "4c3fbba4-d4df-f101-0cb9-083ac7e1e180",
        "name": "raw_values"
      },
      {
        "data_type": "SERIES",
        "id": "d751e7e3-3693-b7e1-1bb7-0cce64e00338",
        "name": "substitution_series"
      }
    ],
    "outputs": [
      {
        "data_type": "SERIES",
        "id": "a0d58599-2376-7665-c847-9ca2f86fb079",
        "name": "substituted_ts"
      }
    ]
  },
  "name": "Apply Substitution Timeseries",
  "released_timestamp": "2022-02-09T17:33:35.615498+00:00",
  "revision_group_id": "e1475799-eeab-8a18-97bf-69aa09d86a4a",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
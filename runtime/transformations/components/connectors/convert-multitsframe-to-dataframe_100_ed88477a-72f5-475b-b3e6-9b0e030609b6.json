{
  "category": "Connectors",
  "content": "\"\"\"Documentation for Convert MultiTSFrame to DataFrame\n\n# Convert MultiTSFrame into DataFrame\n\n## Description\nConvert a MultiTSFrame into a DataFrame.\n\n## Inputs\n* **multitsframe** (Pandas DataFrame): The input DataFrame in the format of a MultiTSFrame: The DataFrame must consist of exactly three columns named \"timestamp\", \"metric\", and \"value\". The values in the \"timestamp\" column must have the UTC time zone and are parsed as timestamps in Pandas datetime64 format with nanosecond precision. The values in the \"metric\" column are parsed as strings.\n\n## Outputs\n* **dataframe** (Pandas DataFrame): The output DataFrame constructed from the multitsframe.\n\n## Details\nConvert a MultiTSFrame into a DataFrame with the metrics as column names and the timestamps as index. If there aren't values for all timestamps, the corresponding positions in the DataFrame are filled with NaN.\n\nExamples\nThe json input of a typical call of this component is\n```\n{\n    \"multitsframe\": {\n        \"value\": [\n            1,\n            1.2,\n            0.5\n        ],\n        \"metric\": [\n            \"a\",\n            \"b\",\n            \"c\"\n        ],\n        \"timestamp\": [\n            \"2019-08-01T15:45:36.000Z\",\n            \"2019-08-01T15:48:36.000Z\",\n            \"2019-08-01T15:42:36.000Z\"\n        ]\n    }\n}\n```\n\"\"\"\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"multitsframe\": {\"data_type\": \"MULTITSFRAME\"},\n    },\n    \"outputs\": {\n        \"dataframe\": {\"data_type\": \"DATAFRAME\"},\n    },\n    \"name\": \"Convert MultiTSFrame to DataFrame\",\n    \"category\": \"Connectors\",\n    \"description\": \"Convert a MultiTSFrame to a DataFrame\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"ed88477a-72f5-475b-b3e6-9b0e030609b6\",\n    \"revision_group_id\": \"79bdf171-84bb-443b-9d6b-9f1be3d739d3\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2023-03-31T16:38:16.227282+00:00\",\n}\n\nfrom hdutils import parse_default_value  # noqa: E402, F401\n\n\ndef main(*, multitsframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    column_names = multitsframe.metric.unique()\n    timestamp_index = multitsframe.timestamp.unique()\n\n    data_dict = {}\n    for column_name in column_names:\n        data_dict[column_name] = pd.Series(\n            multitsframe.loc[multitsframe.metric == column_name][\"value\"].tolist(),\n            index=multitsframe.loc[multitsframe.metric == column_name][\"timestamp\"],\n        )\n\n    return {\"dataframe\": pd.DataFrame(data_dict)}\n\n\nTEST_WIRING_FROM_PY_FILE_IMPORT = {\n    \"input_wirings\": [\n        {\n            \"workflow_input_name\": \"multitsframe\",\n            \"adapter_id\": \"direct_provisioning\",\n            \"filters\": {\n                \"value\": '{\\n    \"value\": [\\n        1,\\n        1.2,\\n        0.5\\n    ],\\n    \"metric\": [\\n        \"a\",\\n        \"b\",\\n        \"c\"\\n    ],\\n    \"timestamp\": [\\n        \"2019-08-01T15:45:36.000Z\",\\n        \"2019-08-01T15:48:36.000Z\",\\n        \"2019-08-01T15:42:36.000Z\"\\n    ]\\n}'\n            },\n        }\n    ]\n}\n",
  "description": "Convert a MultiTSFrame to a DataFrame",
  "documentation": "# Convert MultiTSFrame into DataFrame\n\n## Description\nConvert a MultiTSFrame into a DataFrame.\n\n## Inputs\n* **multitsframe** (Pandas DataFrame): The input DataFrame in the format of a MultiTSFrame: The DataFrame must consist of exactly three columns named \"timestamp\", \"metric\", and \"value\". The values in the \"timestamp\" column must have the UTC time zone and are parsed as timestamps in Pandas datetime64 format with nanosecond precision. The values in the \"metric\" column are parsed as strings.\n\n## Outputs\n* **dataframe** (Pandas DataFrame): The output DataFrame constructed from the multitsframe.\n\n## Details\nConvert a MultiTSFrame into a DataFrame with the metrics as column names and the timestamps as index. If there aren't values for all timestamps, the corresponding positions in the DataFrame are filled with NaN.\n\nExamples\nThe json input of a typical call of this component is\n```\n{\n    \"multitsframe\": {\n        \"value\": [\n            1,\n            1.2,\n            0.5\n        ],\n        \"metric\": [\n            \"a\",\n            \"b\",\n            \"c\"\n        ],\n        \"timestamp\": [\n            \"2019-08-01T15:45:36.000Z\",\n            \"2019-08-01T15:48:36.000Z\",\n            \"2019-08-01T15:42:36.000Z\"\n        ]\n    }\n}\n```",
  "id": "ed88477a-72f5-475b-b3e6-9b0e030609b6",
  "io_interface": {
    "inputs": [
      {
        "data_type": "MULTITSFRAME",
        "id": "2862f08a-366c-4559-b7cd-898d26c7b4bd",
        "name": "multitsframe",
        "type": "REQUIRED"
      }
    ],
    "outputs": [
      {
        "data_type": "DATAFRAME",
        "id": "3ddeaead-6ef7-420c-b881-ac78cbbf2f33",
        "name": "dataframe"
      }
    ]
  },
  "name": "Convert MultiTSFrame to DataFrame",
  "released_timestamp": "2023-03-31T16:38:16.227282+00:00",
  "revision_group_id": "79bdf171-84bb-443b-9d6b-9f1be3d739d3",
  "state": "RELEASED",
  "test_wiring": {
    "dashboard_positionings": [],
    "input_wirings": [
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "{\n    \"value\": [\n        1,\n        1.2,\n        0.5\n    ],\n    \"metric\": [\n        \"a\",\n        \"b\",\n        \"c\"\n    ],\n    \"timestamp\": [\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-01T15:48:36.000Z\",\n        \"2019-08-01T15:42:36.000Z\"\n    ]\n}"
        },
        "use_default_value": false,
        "workflow_input_name": "multitsframe"
      }
    ],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "1.0.0"
}
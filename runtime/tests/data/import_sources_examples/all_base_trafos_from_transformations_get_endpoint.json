[
  {
    "id": "10ab5fc1-9654-8a46-1c36-03660b4a2681",
    "revision_group_id": "10ab5fc1-9654-8a46-1c36-03660b4a2681",
    "name": "Linear Regression",
    "description": "Linear Regression on dataframes of values",
    "category": "Regression",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.295168+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Linear Regression\n\n## Description\nLinear Regression on dataframes of values.\n\n## Inputs\n* **y_values** (Pandas DataFrame): Y values for linear regression.\n* **x_values** (Pandas DataFrame): X values for linear regression.\n\n## Outputs\n* **intercept** (Pandas Series): The intercept values of the linear model (one for each column in **y_values**).\n* **slope** (Pandas DataFrame): The slope of the linear model: For every column of **y_values** a column of slope values (one line for each colum of **x_values**).\n* **preds** (Pandas DataFrame): Prediction values for every line of **x_values**.\n* **diffs** (Pandas DataFrame): Differences between **preds** and **y_values**.\n* **trained_model** (sklearn_linear_models_LinearRegresion): Trained sklearn model object.\n\n## Details\nDo an ordinary linear regression on data of arbitrary dimension.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"x_values\": {\n        \"a\": {\n            \"2019-08-01T15:45:36.000Z\": 1,\n            \"2019-08-02T11:33:41.000Z\": 2\n        },\n        \"b\": {\n            \"2019-08-01T15:45:36.000Z\": 1.3,\n            \"2019-08-02T11:33:41.000Z\": 2.8\n        }\n    },\n    \"y_values\": {\n        \"a\": {\n            \"2019-08-01T15:45:36.000Z\": 1.2,\n            \"2019-08-02T11:33:41.000Z\": 2.3\n        },\n        \"b\": {\n            \"2019-08-01T15:45:36.000Z\": 1,\n            \"2019-08-02T11:33:41.000Z\": 2.8\n        }\n    }\n}\n```\n\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport datetime\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n\ndef regression_linear(xs, ys):\n    \"\"\"Linear Regression\"\"\"\n\n    lg = LinearRegression()\n    lg.fit(xs, ys)\n    intercept, slope = lg.intercept_, lg.coef_\n\n    preds = pd.DataFrame(lg.predict(xs), columns=ys.columns, index=xs.index)\n\n    diffs = preds - ys\n    slope_df = pd.DataFrame(slope)\n    slope_df = slope_df.transpose()\n    slope_df.columns = ys.columns\n    slope_df.index = xs.columns\n\n    return preds, diffs, pd.Series(intercept, index=ys.columns), slope_df, lg\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"x_values\": DataType.DataFrame, \"y_values\": DataType.DataFrame},\n    outputs={\"intercept\": DataType.Series, \"slope\": DataType.DataFrame, \"preds\": DataType.DataFrame, \"diffs\": DataType.DataFrame, \"trained_model\": DataType.Any},\n    name=\"Linear Regression\",\n    description=\"Linear Regression on dataframes of values\",\n    category=\"Regression\",\n    version_tag=\"1.0.0\",\n    id=\"10ab5fc1-9654-8a46-1c36-03660b4a2681\",\n    revision_group_id=\"10ab5fc1-9654-8a46-1c36-03660b4a2681\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.295168+00:00\"\n)\ndef main(*, x_values, y_values):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    preds, diffs, intercept, slope, trained_model = regression_linear(\n        x_values, y_values\n    )\n    return {\n        \"diffs\": diffs,\n        \"intercept\": intercept,\n        \"slope\": slope,\n        \"preds\": preds,\n        \"trained_model\": trained_model,\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1e51c656-2fd4-16aa-dc56-e17fab75fe5d",
          "name": "x_values",
          "data_type": "DATAFRAME"
        },
        {
          "id": "313ce24c-b25b-c1c4-b5a7-020cf35b067e",
          "name": "y_values",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "b15d85d7-6ed3-2844-3daa-e7ef1a3d4ad0",
          "name": "intercept",
          "data_type": "SERIES"
        },
        {
          "id": "05b6bb88-0949-8ffb-2559-1b8f4f7da6d6",
          "name": "slope",
          "data_type": "DATAFRAME"
        },
        {
          "id": "f9247cd7-d3df-be56-478d-22815c22d02a",
          "name": "preds",
          "data_type": "DATAFRAME"
        },
        {
          "id": "9b0734c2-3db2-06a8-b5e5-53e2cd306cf0",
          "name": "diffs",
          "data_type": "DATAFRAME"
        },
        {
          "id": "4388d326-dd86-867d-5bea-80508f55b5f8",
          "name": "trained_model",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "ff182e84-913d-e799-5722-98a5d2e3ad09",
    "revision_group_id": "ff182e84-913d-e799-5722-98a5d2e3ad09",
    "name": "Linear Regression two Series",
    "description": "Linear Regression between two series of values",
    "category": "Regression",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.322055+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Linear Regression two Series\n\n## Description\nLinear Regression between two series.\n\n## Inputs\n* **y_values** (Pandas Series): Y values for linear regression.\n* **x_values** (Pandas Series): X values for linear regression.\n\n## Outputs\n* **intercept** (Float): The intercept of the linear model.\n* **slope** (Float): The slope of the linear model.\n* **preds** (Pandas Series): Prediction values for every value of **x_values**.\n* **diffs** (Pandas Series): Differences between **preds** and **y_values**.\n\n## Details\nDo an ordinary linear regression of a 1-dimensional variable y on a 1-dimensional variable x.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"x_values\": {\n        \"2020-01-01T01:15:27.000Z\": 1,\n        \"2020-01-03T08:20:03.000Z\": 2,\n        \"2020-01-03T08:20:04.000Z\": 3,\n        \"2020-01-03T08:20:05.000Z\": 4\n    },\n    \"y_values\": {\n        \"2020-01-01T01:15:27.000Z\": 5,\n        \"2020-01-03T08:20:03.000Z\": 6,\n        \"2020-01-03T08:20:04.000Z\": 9,\n        \"2020-01-03T08:20:05.000Z\": 8\n    }\n}\n```\n\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport datetime\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n\ndef regression_linear(xs: pd.Series, ys: pd.Series):\n    \"\"\"Linear Regression for univariate Remaining Useful Life (RUL) prediction\n    \n    train-series: pd.Series with datetime index and float values. The input data to train\n        the regression model.\n    limit: the limit value against which rul should be made.\n    \n    returns: Tuple (pred_y, timestamp_limit_reached, intercept, slope)\n    \"\"\"\n\n    lg = LinearRegression()\n    lg.fit(xs.values.reshape(-1, 1), ys.values.reshape(-1, 1))\n    intercept, slope = lg.intercept_[0], lg.coef_[0]\n\n    preds = pd.Series(\n        lg.predict(xs.values.reshape(-1, 1)).reshape(1, -1)[0], index=xs.index\n    )\n\n    diffs = preds - ys\n\n    return preds, diffs, intercept, slope\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"x_values\": DataType.Series, \"y_values\": DataType.Series},\n    outputs={\"intercept\": DataType.Float, \"slope\": DataType.Float, \"preds\": DataType.Series, \"diffs\": DataType.Series},\n    name=\"Linear Regression two Series\",\n    description=\"Linear Regression between two series of values\",\n    category=\"Regression\",\n    version_tag=\"1.0.0\",\n    id=\"ff182e84-913d-e799-5722-98a5d2e3ad09\",\n    revision_group_id=\"ff182e84-913d-e799-5722-98a5d2e3ad09\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.322055+00:00\"\n)\ndef main(*, x_values, y_values):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    preds, diffs, intercept, slope = regression_linear(x_values, y_values)\n    return {\"diffs\": diffs, \"intercept\": intercept, \"slope\": slope, \"preds\": preds}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "0c1fe181-983a-d47c-3f00-4dd11fa2288e",
          "name": "x_values",
          "data_type": "SERIES"
        },
        {
          "id": "0092ff94-8992-32a3-b75e-0b5b13fd0d82",
          "name": "y_values",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "294b70a6-9aee-4d56-b373-c78b0580fd96",
          "name": "intercept",
          "data_type": "FLOAT"
        },
        {
          "id": "cc2c36a9-5d82-6214-1d83-384547929837",
          "name": "slope",
          "data_type": "FLOAT"
        },
        {
          "id": "7dbe6575-e730-620f-36c9-6e1ff7188ffd",
          "name": "preds",
          "data_type": "SERIES"
        },
        {
          "id": "6ec76bd5-ec12-ea11-51e9-c505fae9e295",
          "name": "diffs",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "0da30127-b4d1-5e0d-2621-2c59b891c9b0",
    "revision_group_id": "0da30127-b4d1-5e0d-2621-2c59b891c9b0",
    "name": "Exp",
    "description": "Calculates the exponential function of data",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.016352+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Exp\n\n## Description\nThis component calculates the exponential function for numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Integer, Float, Pandas Series or Pandas DataFrame with numeric values.\n\n## Outputs\n* **exp** (Integer, Float, Pandas Series or Pandas DataFrame): Exponential of data.\n\n## Details\nThe component calculates the exponential function of data. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\t\"2019-08-03T16:20:15\": null  \n\t}\n}\n```\nThe expected output is\n```\n\t\"exp\": {\n\t\t\t\"2019-08-01T15:20:12\": 1,\n\t\t\t\"2019-08-01T15:44:12\": 20.085536923187664,\n\t\t\t\"2019-08-03T16:20:15\": null \n\t}\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport math\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"exp\": DataType.Any},\n    name=\"Exp\",\n    description=\"Calculates the exponential function of data\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"0da30127-b4d1-5e0d-2621-2c59b891c9b0\",\n    revision_group_id=\"0da30127-b4d1-5e0d-2621-2c59b891c9b0\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.016352+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"exp\": math.e ** data}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1757da7e-6614-b287-5177-7377b0c24f37",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "71fd7d71-41fa-6e8e-ad1a-d4a005a83fa5",
          "name": "exp",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "11152e31-cf25-4280-2b28-220319277011",
    "revision_group_id": "11152e31-cf25-4280-2b28-220319277011",
    "name": "nth root",
    "description": "Calculates the nth root",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T18:33:31.917736+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# nth root\n\n## Description\nThis component calculates the nth root for numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **n** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **root** (Integer, Float, Pandas Series or Pandas DataFrame): The nth root of data.\n\n## Details\nThe component calculates the nth root. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 8,\n\t\t\t\t\"2019-08-01T15:44:12\": 27,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": 1,\n         \t\t        \"2019-08-07T11:01:00\": 1000\n\t},\n\t\"n\": 3\n}\n```\nThe expected output is\n```\n\t\"root\": {\n\t\t\t\"2019-08-01T15:20:12\": 2,\n\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\"2019-08-05T12:00:34\": 1,\n        \t        \"2019-08-07T11:01:00\": 10  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n    \"data\": {\n\t\t\t\"a\": {\n            \t\t        \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 100,\n\t\t\t\t\"2019-08-05T12:00:34\": 6.25\n             },\n                       \"b\": {\n                                \"2019-08-01T15:20:12\": 4,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 25,\n\t\t\t\t \"2019-08-05T12:00:34\": 625\n             }\n\t}\n}\n```\nThe expected output is\n```\n\t\"sqrt\": {\n\t\t\t\"a\": {\n            \t\t        \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 10,\n\t\t\t\t\"2019-08-05T12:00:34\": 2.5\n             },\n                       \"b\": {\n                                \"2019-08-01T15:20:12\": 2,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 5,\n\t\t\t\t \"2019-08-05T12:00:34\": 25\t\t\t\t\n             }\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"n\": DataType.Any},\n    outputs={\"root\": DataType.Any},\n    name=\"nth root\",\n    description=\"Calculates the nth root\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"11152e31-cf25-4280-2b28-220319277011\",\n    revision_group_id=\"11152e31-cf25-4280-2b28-220319277011\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T18:33:31.917736+00:00\"\n)\ndef main(*, data, n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"root\": data ** (1 / n)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "f5717b42-a4ad-3fd1-60e6-a575d460ab57",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "fac33722-5845-9ab2-7285-088648397e37",
          "name": "n",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "98f4bba2-4c3d-7225-a17a-e6735baddf7b",
          "name": "root",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "data",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "8"
          }
        },
        {
          "workflow_input_name": "n",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "3"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "cd804f5d-76ea-1f8b-6adc-b4c4a78acaf4",
    "revision_group_id": "cd804f5d-76ea-1f8b-6adc-b4c4a78acaf4",
    "name": "Log to base",
    "description": "Takes the logarithm of data to some given base",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.861302+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Log to base\n\n## Description\nThis component calculates the logarithm to some given base.\n\n## Inputs\n* **base** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **log** (Integer, Float, Pandas Series or Pandas DataFrame): Logarithm of data to the given base.\n\n## Details\nThe component calculates the logarithm of data to some given base. \n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"base\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 2,\n\t\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\t\"2019-08-03T16:20:15\": 4,\n\t\t\t\t\"2019-08-05T12:00:34\": 10,\n                \t\t\"2019-08-07T11:01:00\": 100\n\t},\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 16,\n\t\t\t\t\"2019-08-01T15:44:12\": 243,\n\t\t\t\t\"2019-08-03T16:20:15\": 2,\n\t\t\t\t\"2019-08-05T12:00:34\": 10000    \n\t}\n}\n```\nThe expected output is\n```\n\t\"log\": {\n\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\"2019-08-01T15:44:12\": 5,\n\t\t\t\"2019-08-03T16:20:15\": 0.5,\n\t\t\t\"2019-08-05T12:00:34\": 4,\n          \t\t\"2019-08-07T11:01:00\": null  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Float and a Pandas DataFrame is\n```\n{\n    \"base\": 2\n    \"data\": {\n\t\t\t\t\"a\": {\n                \t\t\t\"2019-08-01T15:20:12\": 1,\n\t\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\t\"2019-08-03T16:20:15\": 16,\n\t\t\t\t\t\"2019-08-05T12:00:34\": 2\n\t\t\t\t},\n\t\t\t\t\"b\": {\n\t\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\t\"2019-08-01T15:44:12\": 8,\n\t\t\t\t\t\"2019-08-03T16:20:15\": 2,\n\t\t\t\t\t\"2019-08-05T12:00:34\": 2\n\t\t\t\t}\n\t}\n}\n```\nThe expected output is\n```\n\t\"log\": {\n\t\t\t\"a\": {\n               \t\t\"2019-08-01T15:20:12\": 0,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 8,\n\t\t\t\t\"2019-08-05T12:00:34\": 1\n             },\n            \"b\": {\n                \t\t \"2019-08-01T15:20:12\": 2,\n\t\t\t\t \"2019-08-01T15:44:12\": 3,\n\t\t\t\t \"2019-08-03T16:20:15\": 1,\n\t\t\t\t \"2019-08-05T12:00:34\": 1\n             }\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"base\": DataType.Any, \"data\": DataType.Any},\n    outputs={\"log\": DataType.Any},\n    name=\"Log to base\",\n    description=\"Takes the logarithm of data to some given base\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"cd804f5d-76ea-1f8b-6adc-b4c4a78acaf4\",\n    revision_group_id=\"cd804f5d-76ea-1f8b-6adc-b4c4a78acaf4\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.861302+00:00\"\n)\ndef main(*, base, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"log\": np.log(data) / np.log(base)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "e123c91c-496f-b727-af82-1715599b24c4",
          "name": "base",
          "data_type": "ANY"
        },
        {
          "id": "db594bb9-ca83-e915-ca26-db1b28c56869",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "cd1bdf43-4863-2566-0847-3872934d24a1",
          "name": "log",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "619cbd38-26b4-3d5e-14a0-721224b13bc7",
    "revision_group_id": "619cbd38-26b4-3d5e-14a0-721224b13bc7",
    "name": "Sum Columns",
    "description": "Add up values along the column axis.",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.953861+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Sum Columns\n\n## Description\nThis component adds up values along the column axis.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): Entries should be numeric.\n* **result_series_name** (String): The name of the resulting series.\n\n## Outputs\n* **sum_values** (Pandas Series): Contains the line-wise sums of the dataframe.\n\n## Details\nComputes line-wise sums (that is summation along the column axis) of the dataframe.\n\n## Examples \nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n    \"dataframe\": {\n\t\t\t\"a\": {\n           \t\t        \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 100,\n\t\t\t\t\"2019-08-05T12:00:34\": 0\n                 },\n        \t\t\"b\": {\n                                \"2019-08-01T15:20:12\": 4,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 25,\n\t\t\t\t \"2019-08-05T12:00:34\": 625\n                 }\n\t},\n\t\"result_series_name\" = sum_up_columns\n}\n```\nThe expected output is\n```\n\t\"sum_values\": {\n                               \"2019-08-01T15:20:12\": 5,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 125,\n\t\t\t\t\"2019-08-05T12:00:34\": 625\n             }\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame, \"result_series_name\": DataType.String},\n    outputs={\"sum_values\": DataType.Series},\n    name=\"Sum Columns\",\n    description=\"Add up values along the column axis.\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"619cbd38-26b4-3d5e-14a0-721224b13bc7\",\n    revision_group_id=\"619cbd38-26b4-3d5e-14a0-721224b13bc7\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.953861+00:00\"\n)\ndef main(*, dataframe, result_series_name):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    s = dataframe.sum(axis=1)\n    s.name = result_series_name\n    return {\"sum_values\": s}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "2d0fd551-4bda-00f2-1b17-d7151d326ca1",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        },
        {
          "id": "9c53c4b2-4899-5d6d-5a30-908d3111df3d",
          "name": "result_series_name",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "afd8086c-a2be-dc35-821e-4fb35bcf0c04",
          "name": "sum_values",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "40a03a56-5e3d-2695-07e4-9bcf0b1c3a39",
    "revision_group_id": "40a03a56-5e3d-2695-07e4-9bcf0b1c3a39",
    "name": "Sqrt",
    "description": "Calculates the square root",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.169008+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Sqrt\n\n## Description\nThis component calculates the square root for numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **sqrt** (Integer, Float, Pandas Series or Pandas DataFrame): The square root of data.\n\n## Details\nThe component calculates the square root. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\"2019-08-01T15:44:12\": 9,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": 1,\n             \t\t\t\"2019-08-07T11:01:00\": 100\n\t}\n}\n```\nThe expected output is\n```\n\t\"sqrt\": {\n\t\t\t\"2019-08-01T15:20:12\": 2,\n\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\"2019-08-05T12:00:34\": 1,\n                       \"2019-08-07T11:01:00\": 10  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n    \"data\": {\n\t\t\t\"a\": {\n           \t\t        \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 100,\n\t\t\t\t\"2019-08-05T12:00:34\": 6.25\n             },\n        \t\t\"b\": {\n                                \"2019-08-01T15:20:12\": 4,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 25,\n\t\t\t\t \"2019-08-05T12:00:34\": 625\n             }\n\t}\n}\n```\nThe expected output is\n```\n\t\"sqrt\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 10,\n\t\t\t\t\"2019-08-05T12:00:34\": 2.5\n             },\n          \t        \"b\": {\n                \t         \"2019-08-01T15:20:12\": 2,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 5,\n\t\t\t\t \"2019-08-05T12:00:34\": 25\n             }\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"sqrt\": DataType.Any},\n    name=\"Sqrt\",\n    description=\"Calculates the square root\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"40a03a56-5e3d-2695-07e4-9bcf0b1c3a39\",\n    revision_group_id=\"40a03a56-5e3d-2695-07e4-9bcf0b1c3a39\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.169008+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"sqrt\": np.sqrt(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "bc209f5e-c11c-181e-e026-92ee60714c94",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "5b535a18-0914-34ae-7d74-3368782df395",
          "name": "sqrt",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "878d85a2-2cf5-235b-d260-fd94c734cec9",
    "revision_group_id": "878d85a2-2cf5-235b-d260-fd94c734cec9",
    "name": "Sum up Series",
    "description": "Calculates the sum of a Series",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.783721+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Sum up Series\n\n## Description\nThis component sums up a Pandas Series.\n\n## Inputs\n* **data** (Pandas Series): The values must be numeric.\n\n## Outputs\n* **sum** (Float): The sum of alls values of data.\n\n## Details\nThis component calculates the sum of the provided series.\n\n## Examples \nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\t\"2019-08-03T16:20:15\": null  \n\t}\n}\n```\nThe expected output is\n```\n\t\"sum\": 4\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series},\n    outputs={\"sum\": DataType.Float},\n    name=\"Sum up Series\",\n    description=\"Calculates the sum of a Series\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"878d85a2-2cf5-235b-d260-fd94c734cec9\",\n    revision_group_id=\"878d85a2-2cf5-235b-d260-fd94c734cec9\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.783721+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"sum\": data.sum()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "2bf8a46c-95bb-2364-6cb0-fe45e12fdf0c",
          "name": "data",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "03643e0b-1fe7-a9a9-5c1b-e9452265a40a",
          "name": "sum",
          "data_type": "FLOAT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "84337854-360a-bbc3-203c-f795d549076d",
    "revision_group_id": "84337854-360a-bbc3-203c-f795d549076d",
    "name": "Pi",
    "description": "Returns the mathematical constant Pi = 3.1415...",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.824904+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pi\n\n## Description\nThis component returns the mathematical constant Pi = 3.1415... as float.\n\n## Inputs\n-\n\n## Outputs\n* **pi** (float): The mathematical constant Pi = 3.1415.... \n\n## Details\nThe component returns the mathematical constant Pi = 3.1415... as float.\n\n## Examples\nThe json input of a call of this component is \n```\n\t{}\n```\nThe expected output of this component is\n```\n\t\"pi\": 3.141592653589793\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport math\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={},\n    outputs={\"pi\": DataType.Float},\n    name=\"Pi\",\n    description=\"Returns the mathematical constant Pi = 3.1415...\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"84337854-360a-bbc3-203c-f795d549076d\",\n    revision_group_id=\"84337854-360a-bbc3-203c-f795d549076d\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.824904+00:00\"\n)\ndef main():\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"pi\": math.pi}\n",
    "io_interface": {
      "inputs": [],
      "outputs": [
        {
          "id": "22b3bf05-32fc-3e37-2a2f-949e1b046e40",
          "name": "pi",
          "data_type": "FLOAT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "84bcdf4c-a068-3679-0cec-78bd6fcd3b48",
    "revision_group_id": "84bcdf4c-a068-3679-0cec-78bd6fcd3b48",
    "name": "Derivate",
    "description": "Calculates the difference quotient of a Series",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.889748+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Derivate\n\n## Description\nThe component calculates the difference quotient.\n\n## Inputs\n* **data** (Pandas Series): The indices must be numeric or datetimes, the values must be numeric.\n\n## Outputs\n* **diff_quo** (Pandas Series): The difference quotient of data.\n\n## Details\nThe component calculates the difference quotient of data, sorted by its index. It ignores NaN values. \nIf the indices are datetimes, their distances are expressed in seconds.\nEach difference quotient is given to the greater index.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.3,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t}\n}\n```\nThe expected output is\n```\n\t\"diff_quo\": {\n\t\t\t\"2019-08-01T15:20:25\": -0.2,\n\t\t\t\"2019-08-01T15:20:30\": 0.04\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series},\n    outputs={\"diff_quo\": DataType.Series},\n    name=\"Derivate\",\n    description=\"Calculates the difference quotient of a Series\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"84bcdf4c-a068-3679-0cec-78bd6fcd3b48\",\n    revision_group_id=\"84bcdf4c-a068-3679-0cec-78bd6fcd3b48\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.889748+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    if (data.size) < 2:\n        raise ValueError(\"size of data must be at least 2\")\n\n    data_dropna = data.dropna()\n\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_dropna = data_dropna.sort_index()\n        x = data_dropna.index\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_dropna = data_dropna.sort_index()\n        x = (data_dropna.index - data_dropna.index[0]).total_seconds()\n\n    y = data_dropna.values\n\n    x_diff = np.ediff1d(x)\n    y_diff = np.ediff1d(y)\n    \n    return {\"diff_quo\": pd.Series(y_diff / x_diff, index=data_dropna.index[1:])}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5b9a025d-86aa-ae5c-61c3-f37e83852de2",
          "name": "data",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "4ea5db5c-893a-c273-b696-c68463f6cdc2",
          "name": "diff_quo",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "dd73bac2-cd9d-61c5-0aec-9dec6f337516",
    "revision_group_id": "dd73bac2-cd9d-61c5-0aec-9dec6f337516",
    "name": "Integrate",
    "description": "Calculates the integral of a Series",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.674471+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Integrate\n\n## Description\nThis component integrates a Pandas Series.\n\n## Inputs\n* **data** (Pandas Series): The indices must be numeric or datetimes, the values must be numeric.\n\n## Outputs\n* **integral** (Float): The integral of data. \n\n## Details\nThis component calculates the integral according to the trapezoidal rule. Therefore, the component ignores NaN values and uses a version of data, sorted by its index. \nIf the indices are datetimes, their distances are expressed in seconds.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 1.7,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t}\n}\n```\nThe expected output is\n```\n\t\"integral\": 17\n```",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport datetime\nfrom scipy import integrate\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series},\n    outputs={\"integral\": DataType.Float},\n    name=\"Integrate\",\n    description=\"Calculates the integral of a Series\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"dd73bac2-cd9d-61c5-0aec-9dec6f337516\",\n    revision_group_id=\"dd73bac2-cd9d-61c5-0aec-9dec6f337516\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.674471+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if (data.size) < 2:\n        raise ValueError(\"size of data must be at least 2\")\n\n    data_dropna = data.dropna()\n\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_dropna = data_dropna.sort_index()\n        x = data_dropna.index\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n        except (TypeError, ValueError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_dropna = data_dropna.sort_index()\n        x = (data_dropna.index - data_dropna.index[0]).total_seconds()\n\n    y = data_dropna.values\n\n    return {\"integral\": integrate.trapz(y, x)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "3190458c-2c64-2a56-f459-eb9437e85551",
          "name": "data",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "e40cdbef-97c4-13b5-38d3-d29b8d446c16",
          "name": "integral",
          "data_type": "FLOAT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "13d3376a-9c08-d78f-8ad4-6d24fef504ca",
    "revision_group_id": "13d3376a-9c08-d78f-8ad4-6d24fef504ca",
    "name": "E",
    "description": "Returns the mathematical constant e = 2.718281...",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.624208+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# E\n\n## Description\nThis component returns the mathematical constant e = 2.718281... as a float variable.\n\n## Inputs\n-\n\n## Outputs\n* **e** (float): The mathematical constant e = 2.718281... \n\n## Details\nThe component returns the mathematical constant e = 2.718281... as a float variable.\n\n## Examples\nThe json input of a call of this component is \n```\n\t{}\n```\nThe expected output of this component is\n```\n\t\"e\": 2.718281828459045\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport math\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={},\n    outputs={\"e\": DataType.Float},\n    name=\"E\",\n    description=\"Returns the mathematical constant e = 2.718281...\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"13d3376a-9c08-d78f-8ad4-6d24fef504ca\",\n    revision_group_id=\"13d3376a-9c08-d78f-8ad4-6d24fef504ca\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.624208+00:00\"\n)\ndef main():\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"e\": math.e}\n",
    "io_interface": {
      "inputs": [],
      "outputs": [
        {
          "id": "62db7151-3420-c400-3526-7d80323a9855",
          "name": "e",
          "data_type": "FLOAT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "d2cc4c0d-303e-b0ad-fdba-73392e890b30",
    "revision_group_id": "d2cc4c0d-303e-b0ad-fdba-73392e890b30",
    "name": "Cumulative sum",
    "description": "Calculates the cumulative sum of a Series or DataFrame",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.709082+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Cumulative sum\n\n## Description\nThe component calculates the cumulative sum.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): The indices must be numeric or datetimes, the values must be numeric.\n\n## Outputs\n* **cum_sum** (Pandas Series): The cumulative sum of the input.\n\n## Details\nThe component calculates the cumulative sum of data, sorted by its index. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.3,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t}\n}\n```\nThe expected output is\n```\n\t\"cum_sum\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.3,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.6,\n\t\t\t\t\"2019-08-01T15:20:30\": 4.1\n\t\t}\n```",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"cum_sum\": DataType.Any},\n    name=\"Cumulative sum\",\n    description=\"Calculates the cumulative sum of a Series or DataFrame\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"d2cc4c0d-303e-b0ad-fdba-73392e890b30\",\n    revision_group_id=\"d2cc4c0d-303e-b0ad-fdba-73392e890b30\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.709082+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    if pd.api.types.is_numeric_dtype(data.index.dtype):\n        data_sort = data.sort_index()\n\n    else:\n        try:\n            data.index = pd.to_datetime(data.index)\n\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_sort = data.sort_index()\n    return {\"cum_sum\": data_sort.cumsum()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1f7f06dd-be1b-6bf6-ff03-b5827812ab53",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "6235c925-1b9a-28b2-4cff-ec1f71bfdd6d",
          "name": "cum_sum",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "9f3ebd8c-92cf-deb1-09e9-d67ba16e9754",
    "revision_group_id": "9f3ebd8c-92cf-deb1-09e9-d67ba16e9754",
    "name": "Ln",
    "description": "Calculates the natural logarithm of data",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.203509+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Ln\n\n## Description\nThis component calculates the natural logarithm of data.\n\n## Inputs\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric. \n\n## Outputs\n* **ln** (Integer, Float, Pandas Series or Pandas DataFrame): Natural logarithm of data.\n\n## Details\nThe component calculates the natural logarithm of data. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": null,\n\t\t\t\t\"2019-08-01T15:44:12\": 1,\n\t\t\t\t\"2019-08-03T16:20:15\": 2.718281828459045\n\t}\n}\n```\nThe expected output is\n```\n\t\"ln\": {\n\t\t\t\t\"2019-08-01T15:20:12\": null,\n\t\t\t\t\"2019-08-01T15:44:12\": 0,\n\t\t\t\t\"2019-08-03T16:20:15\": 1, \n\t}\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\nimport math\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"ln\": DataType.Any},\n    name=\"Ln\",\n    description=\"Calculates the natural logarithm of data\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"9f3ebd8c-92cf-deb1-09e9-d67ba16e9754\",\n    revision_group_id=\"9f3ebd8c-92cf-deb1-09e9-d67ba16e9754\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.203509+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"ln\": np.log(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "0544dacf-17de-a744-e6b7-d4e12e6326f3",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "3a12d1c7-3962-58e9-ebe9-d4844e344700",
          "name": "ln",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "ebb5b2d1-7c25-94dd-ca81-6a9e5b21bc2f",
    "revision_group_id": "ebb5b2d1-7c25-94dd-ca81-6a9e5b21bc2f",
    "name": "Modulo",
    "description": "Calculates the modulo to some given b",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T18:33:31.739754+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Modulo\n\n## Description\nThis component calculates the modulo of the given input.\n\n## Inputs\n* **a** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **b** (Integer)\n\n## Outputs\n* **modulo** (Integer, Float, Pandas Series or Pandas DataFrame): The result of a mod b.\n\n## Details\nThis component calculates a mod b.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 9.5,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.420,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n           \t\t\t\"2019-08-07T11:01:00\": -10\n\t},\n\t\t\t\t\"b\" = 3\n}\n```\nThe expected output is\n```\n\t\"modulo\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.5,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.42,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n             \t\t\t\"2019-08-07T11:01:00\": 2\n\t}\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"a\": DataType.Any, \"b\": DataType.Integer},\n    outputs={\"modulo\": DataType.Any},\n    name=\"Modulo\",\n    description=\"Calculates the modulo to some given b\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"ebb5b2d1-7c25-94dd-ca81-6a9e5b21bc2f\",\n    revision_group_id=\"ebb5b2d1-7c25-94dd-ca81-6a9e5b21bc2f\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T18:33:31.739754+00:00\"\n)\ndef main(*, a, b):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"modulo\": a % b}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1aa579e3-e568-326c-0768-72c725844828",
          "name": "a",
          "data_type": "ANY"
        },
        {
          "id": "6198074e-18fa-0ba1-13a7-8d77b7f2c8f3",
          "name": "b",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "f309d0e5-6f20-2edb-c7be-13f84882af93",
          "name": "modulo",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "a",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "27"
          }
        },
        {
          "workflow_input_name": "b",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "4"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "d24f40ae-4dfb-248f-6461-e67be3e5de8a",
    "revision_group_id": "d24f40ae-4dfb-248f-6461-e67be3e5de8a",
    "name": "Power",
    "description": "Calculates the base to the power exponent",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.068243+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Power \n\n## Description\nThis component takes the base to the power exponent for numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **base** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **exponent** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **power** (Integer, Float, Pandas Series or Pandas DataFrame): Base to the power exponent.\n\n## Details\nThe component calculates the base to the power exponent. \n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"base\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 2,\n\t\t\t\t\"2019-08-01T15:44:12\": 9,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": 1,\n                               \"2019-08-07T11:01:00\": 100\n\t},\n\t\"exponent\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.5,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.8,\n\t\t\t\t\"2019-08-05T12:00:34\": 10000    \n\t}\n}\n```\nThe expected output is\n```\n\t\"power\": {\n\t\t\t\"2019-08-01T15:20:12\": 16,\n\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\"2019-08-05T12:00:34\": 1,\n                       \"2019-08-07T11:01:00\": null  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Float and a Pandas DataFrame is\n```\n{\n\t\"base\": {\n\t\t\t\"a\": {\n             \t\t        \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 10,\n\t\t\t\t\"2019-08-05T12:00:34\": 2.5\n             },\n                       \"b\": {\n                                \"2019-08-01T15:20:12\": 4,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 2,\n\t\t\t\t \"2019-08-05T12:00:34\": 7\n             }\n\t},\n\t\"exponent\": 2\n}\n```\nThe expected output is\n```\n\t\"power\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 100,\n\t\t\t\t\"2019-08-05T12:00:34\": 6.25\n             },\n                       \"b\": {\n                               \"2019-08-01T15:20:12\": 16,\n\t\t\t\t \"2019-08-01T15:44:12\": 0,\n\t\t\t\t \"2019-08-03T16:20:15\": 4,\n\t\t\t\t \"2019-08-05T12:00:34\": 49\t\t\t\t \n             }\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"base\": DataType.Any, \"exponent\": DataType.Any},\n    outputs={\"power\": DataType.Any},\n    name=\"Power\",\n    description=\"Calculates the base to the power exponent\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"d24f40ae-4dfb-248f-6461-e67be3e5de8a\",\n    revision_group_id=\"d24f40ae-4dfb-248f-6461-e67be3e5de8a\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.068243+00:00\"\n)\ndef main(*, base, exponent):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"power\": base ** exponent}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "6ced6256-2cd8-913d-fa16-cb1f15b53890",
          "name": "base",
          "data_type": "ANY"
        },
        {
          "id": "289da806-3bee-5d01-4c31-2b636ad1aa9d",
          "name": "exponent",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "0e7fd6bb-f5b0-8dc6-9877-749942d2c220",
          "name": "power",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "ce801dcb-8ce1-14ad-029d-a14796dcac92",
    "revision_group_id": "ce801dcb-8ce1-14ad-029d-a14796dcac92",
    "name": "Consecutive differences",
    "description": "Calculates the consecutive differences of a Series",
    "category": "Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.132660+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Consecutive differences\n\n## Description\nThis component calculates the consecutive differences of values of a Pandas Series.\n\n## Inputs\n* **data** (Pandas Series): The indices must be numeric or datetimes, the values must be numeric.\n\n## Outputs\n* **diff** (Pandas Series): The consecutive differences of data.\n\n## Details\nThis component calculates the differences of consecutive values of data, sorted by its index. It ignores NaN values. \nEach difference is placed at the greater index.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.3,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t}\n}\n```\nThe expected output is\n```\n\t\"diff\": {\n\t\t\t\t\"2019-08-01T15:20:25\": -3.0,\n\t\t\t\t\"2019-08-01T15:20:30\":  0.2\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series},\n    outputs={\"diff\": DataType.Series},\n    name=\"Consecutive differences\",\n    description=\"Calculates the consecutive differences of a Series\",\n    category=\"Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"ce801dcb-8ce1-14ad-029d-a14796dcac92\",\n    revision_group_id=\"ce801dcb-8ce1-14ad-029d-a14796dcac92\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.132660+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_dropna = data.dropna()\n\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_dropna = data_dropna.sort_index()\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n\n        except TypeError:\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_dropna = data_dropna.sort_index()\n    data_diff = np.ediff1d(data_dropna.values)\n\n    return {\"diff\": pd.Series(data_diff, index=data_dropna.index[1:])}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "41d0c7d6-e752-ed73-3f58-50791cf1ed6a",
          "name": "data",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "fbade8ef-7e0a-b310-a971-0b935be91a9c",
          "name": "diff",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c",
    "revision_group_id": "517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c",
    "name": "Time to length",
    "description": "Converts time related data to length related data",
    "category": "Physics",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.237126+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Time to length\n\n## Description\nConverts time related data to length related data.\n\n## Inputs\n* **data** (Pandas Series): Indices must be datetimes.\n* **speed** (Integer, Float or Pandas Series): For speed being Pandas Series, indices must be datetimes and entries must be numeric.  \n\n## Outputs\n* **result** (Pandas Series): The length related data.\n\n## Details\nThe component interprets the values of speed as speed in m/s with linear rise between the the given indices. It calculates the covered distance by speed and matches the result with the values given by data.\n\nIf the indices of data and speed are different, result is a conclusion of the insersection of both indices. Therefore, the covered distances will be calculated as exact as speed suffers and after that the corresponding distances and values of data will be matched.\n\nMultiple indices in the result are possible.\n\n\n## Examples\nThe json input of a typical call of this component with speed as Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 5.0,\n            \t\"2019-08-01T15:20:14\": 8.2,\n            \t\"2019-08-01T15:20:15\": 9.3,\n\t\t\t\t\"2019-08-01T15:20:17\": 8.6, \n\t\t\t\t\"2019-08-01T15:20:18\": 0.8, \n\t\t\t\t\"2019-08-01T15:20:21\": 3.4, \n            \t\"2019-08-01T15:20:25\": 2.1\n\t},\n\t\"speed\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1,\n            \t\"2019-08-01T15:20:14\": 2,\n            \t\"2019-08-01T15:20:15\": 3,\n\t\t\t\t\"2019-08-01T15:20:17\": 2, \n\t\t\t\t\"2019-08-01T15:20:18\": 0, \n\t\t\t\t\"2019-08-01T15:20:21\": 0, \n            \t\"2019-08-01T15:20:25\": 4   \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t0.0: 5.0,\n            \t3.0: 8.2,\n            \t5.5: 9.3,\n\t\t\t\t10.5: 8.6, \n\t\t\t\t11.5: 0.8, \n\t\t\t\t11.5: 3.4, \n            \t19.5: 2.1\n\t}\n\n```\n\nThe json input of a typical call of this component with speed as Integer is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n             \t\"2019-08-01T15:20:14\": 7.2,\n             \t\"2019-08-01T15:20:15\": 0.3,\n             \t\"2019-08-01T15:20:20\": 0.5,\n\t},\n    \"speed\": 5\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t0.0:     1.2\n \t\t\t\t10.0:    7.2\n \t\t\t\t15.0:    0.3\n \t\t\t\t40.0:    0.5  \n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nfrom scipy import integrate\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"speed\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Time to length\",\n    description=\"Converts time related data to length related data\",\n    category=\"Physics\",\n    version_tag=\"1.0.0\",\n    id=\"517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c\",\n    revision_group_id=\"517fb2a7-ec6a-eced-c2ea-eb6dc5e76b0c\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.237126+00:00\"\n)\ndef main(*, data, speed):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n\n    data_sort = data.copy()\n    try:\n        data_sort.index = pd.to_datetime(data_sort.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    if isinstance(speed, (int, float, bool)):\n        data_sort = data_sort.sort_index()\n        time_norm = (data_sort.index - data_sort.index[0]).total_seconds()\n        length = pd.Series(speed * time_norm, index=data_sort.index)\n    else:\n        speed_sort = speed.copy()\n        try:\n            speed_sort.index = pd.to_datetime(speed_sort.index)\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of speed must be datetime\")\n        speed_sort = speed_sort.sort_index()\n        time_norm = (speed_sort.index - speed_sort.index[0]).total_seconds()\n        length = pd.Series(\n            integrate.cumtrapz(speed_sort.values, time_norm, initial=0),\n            index=speed_sort.index,\n        )\n\n        intersect = length.index.intersection(data_sort.index)\n        length = length.reindex(intersect)\n        data_sort = data_sort.reindex(intersect)\n\n    return {\"result\": pd.Series(data_sort.values, index=length.values)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "013a8c93-2919-cb75-df47-11f0bc318ee3",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "6c5beae3-1fb6-08da-6ddf-7081d9f6895a",
          "name": "speed",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "baa3190b-3474-33a9-9376-f2da6966e71b",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "bbf3e562-439a-9662-616f-969bf79d57a2",
    "revision_group_id": "bbf3e562-439a-9662-616f-969bf79d57a2",
    "name": "Average",
    "description": "Calculates the average",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.301070+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Average\n\n## Description\nThis component calculates the average of the input.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **average** (Float or Pandas Series): The average of **data**. \n\n## Details\nThe component calculates the average of the columns of **data**, excluding NaN respectively None values. \n\nColumns including non-numeric values are ignored. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 1.7,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"average\": 1 \n```\nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n\t\"data\": {\n\t\t\t\t\"a\": {\n                    \"2019-08-01T15:44:12\": 9,\n                    \"2019-08-01T15:20:12\": -4,\n                    \"2019-08-03T16:20:15\": None,\n                    \"2019-08-05T12:00:34\": 1,\n                },\n                \"b\": {\n                    \"2019-08-01T15:44:12\": -1,\n                    \"2019-08-01T15:20:12\": \"test\",\n                    \"2019-08-03T16:20:15\": 0,\n                    \"2019-08-05T12:00:34\": 4,\n                }\n\t}\n}\n```\nThe expected output is\n```\n\t\"average\": {\n\t\t\t\t\"a\": 2\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"average\": DataType.Any},\n    name=\"Average\",\n    description=\"Calculates the average\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"bbf3e562-439a-9662-616f-969bf79d57a2\",\n    revision_group_id=\"bbf3e562-439a-9662-616f-969bf79d57a2\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.301070+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"average\": data.mean()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "b2a0c07a-11a5-898a-e5c5-78f39a9d06b0",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "ad503a44-073e-aa13-5c9a-906d4c3552ed",
          "name": "average",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "4615ec0d-99bd-40ba-a88b-643dd28fa6e7",
    "revision_group_id": "a9614fc3-e7a0-4df1-8a8c-a1c8cadeb84b",
    "name": "Infer Window Size",
    "description": "Infers the size to choose for a moving window",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-11-24T17:06:12.073942+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Infer Window Size\n\n## Description\nThis component calculates the window size for a given time series and creates a pandas frequency string for it.\n\n## Inputs\n* **series** (Pandas Series): Series for which the calculation is supposed to be performed. The indices must be datetimes.\n* **min_num_desired_datapoints_in_window** (Integer): Minimum number of datapoints supposed to be in each window.\n* **buffer_factor** (Float): Factor to multiply *min_num_desired_datapoints_in_window* with in order to control the expected number of datapoints inside each window.\n\n## Outputs\n* **frequency_string** (String): The created pandas frequency string.\n\n## Details\nThis component calculates the window size for a given time series based on the median time difference between two consecutive datapoints in seconds. This value is assumed to be the expected time difference between two datapoints for the following steps.\n\nThe input **min_num_desired_datapoints_in_window** specifies the minimum number of datapoints desired to be inside each window. A reasonable value is 30 to assume sampling normality.\n\nThe input **buffer_factor** is a decimal factor by which **min_num_desired_datapoints_in_window** is multiplied before calculating the window size. If the value is 1, the majority of windows are expected to contain this number of datapoints, but depending on the input series, some windows may contain more and some fewer datapoints. To achieve that a larger number of windows contain at least the specified number of datapoints, the **buffer_factor** should be greater than 1. This results in the expected number of datapoints in each window being higher than the specified minimum number. For values smaller than 1, the window size will be correspondingly smaller, so that the windows are expected to contain fewer datapoints than desired.\n\nThe calculated median is multiplied with these two inputs and converted into seconds to get the window size.\n\nThe result of the calculation is converted into a [pandas frequency string](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases) to be able to use it as frequency input of pandas functions, e.g. *pandas.DataFrame.rolling*. The string is always in seconds. The format works for both large and small time ranges even though metrics other than seconds might make more sense depending on the individual case.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"series\": {\n        \"2022-01-01T00:00:00Z\": 1.058,\n        \"2022-01-01T00:20:48Z\": 0.699,\n        \"2022-01-01T00:41:37Z\": 1.08,\n        \"2022-01-01T01:02:26Z\": 1.054,\n        \"2022-01-01T01:23:15Z\": 0.763,\n        \"2022-01-01T01:44:04Z\": 1.034,\n        \"2022-01-01T02:04:53Z\": 0.965,\n        \"2022-01-01T02:25:42Z\": 0.601,\n        \"2022-01-01T02:46:31Z\": 0.933,\n        \"2022-01-01T03:07:20Z\": 1.081,\n        \"2022-01-01T03:28:09Z\": 2.1,\n        \"2022-01-01T03:48:58Z\": 0.988,\n        \"2022-01-01T04:09:47Z\": 0.741,\n        \"2022-01-01T04:30:36Z\": 0.647,\n        \"2022-01-01T04:51:25Z\": 0.556,\n        \"2022-01-01T05:12:14Z\": 0.453,\n        \"2022-01-01T05:33:03Z\": 1.009,\n        \"2022-01-01T05:53:52Z\": 1.72,\n        \"2022-01-01T06:14:41Z\": 1.002,\n        \"2022-01-01T06:56:19Z\": 0.857,\n        \"2022-01-01T07:17:08Z\": 0.864,\n        \"2022-01-01T07:37:57Z\": 0.606,\n        \"2022-01-01T07:58:46Z\": 0.899,\n        \"2022-01-01T08:40:24Z\": 0.62,\n        \"2022-01-01T10:03:40Z\": 0.721,\n        \"2022-01-01T10:24:29Z\": 1.193,\n        \"2022-01-01T10:45:18Z\": 0.833,\n        \"2022-01-01T11:06:07Z\": 2.06,\n        \"2022-01-01T11:26:56Z\": 0.68,\n        \"2022-01-01T11:47:45Z\": 1.136,\n        \"2022-01-01T12:08:34Z\": 0.62,\n        \"2022-01-01T12:29:23Z\": 0.946,\n        \"2022-01-01T12:50:12Z\": 0.746,\n        \"2022-01-01T13:11:01Z\": 0.833,\n        \"2022-01-01T13:31:50Z\": 0.857,\n        \"2022-01-01T14:13:28Z\": 0.947,\n        \"2022-01-01T14:34:17Z\": 0.841,\n        \"2022-01-01T14:55:06Z\": 0.668,\n        \"2022-01-01T15:15:55Z\": 0.675,\n        \"2022-01-01T15:36:44Z\": 0.84,\n        \"2022-01-01T15:57:33Z\": 0.821,\n        \"2022-01-01T16:18:22Z\": 0.625,\n        \"2022-01-01T16:39:11Z\": 1.155,\n        \"2022-01-01T17:00:00Z\": 0.968\n    },\n    \"min_num_desired_datapoints_in_window\": 10,\n    \"buffer_factor\": 1.4\n}\n```\nThe expected output is\n```\n{\n    \"frequency_string\": \"17486.0S\"\n}\n```\n",
    "content": "import pandas as pd\n\n\ndef calculate_window_size(\n    series: pd.Series, min_num_desired_datapoints_in_window: int, buffer_factor: float\n) -> float:\n    \"\"\"Window size calculation.\n\n    Function to calculate the window size in seconds for the analysis of a timeseries with moving\n    windows.\n\n    series (Pandas Series): Series for which the calculation is supposed to be performed.\n        The indices must be datetimes.\n    min_num_desired_datapoints_in_window (Integer): Minimum number of datapoints supposed to be in\n        each window.\n    buffer_factor (Float): Factor to multiply min_num_desired_datapoints_in_window with in order to\n        control the expected number of datapoints inside each window.\n\n\n    Returns: Calculated window size in seconds.\n    \"\"\"\n    if not isinstance(series.index, pd.DatetimeIndex):\n        raise TypeError(\"This component is exclusively for series with Datetime index!\")\n\n    median_diff = series.sort_index().index.to_series().diff().median().seconds\n\n    return median_diff * (min_num_desired_datapoints_in_window * buffer_factor)\n\n\ndef create_pandas_frequency_string(number_of_seconds: float) -> str:\n    return str(number_of_seconds) + \"S\"\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series\": \"SERIES\",\n        \"min_num_desired_datapoints_in_window\": \"INT\",\n        \"buffer_factor\": \"FLOAT\",\n    },\n    \"outputs\": {\n        \"frequency_string\": \"STRING\",\n    },\n    \"name\": \"Infer Window Size\",\n    \"category\": \"Statistic\",\n    \"description\": \"Infers the size to choose for a moving window\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"4615ec0d-99bd-40ba-a88b-643dd28fa6e7\",\n    \"revision_group_id\": \"a9614fc3-e7a0-4df1-8a8c-a1c8cadeb84b\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-11-24T17:06:12.073942+00:00\",\n}\n\n\ndef main(*, series, min_num_desired_datapoints_in_window, buffer_factor):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    window_size = calculate_window_size(\n        series=series,\n        min_num_desired_datapoints_in_window=min_num_desired_datapoints_in_window,\n        buffer_factor=buffer_factor,\n    )\n\n    return {\"frequency_string\": create_pandas_frequency_string(window_size)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "c85c22fe-6e56-4f3e-a969-552847ac013f",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "861001bc-7d9e-4315-8290-3af665a98417",
          "name": "min_num_desired_datapoints_in_window",
          "data_type": "INT"
        },
        {
          "id": "57af13c4-c4be-4cc0-9d49-098154bc23bc",
          "name": "buffer_factor",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "c8a9eff0-b531-482e-90d8-0d19903f7f4f",
          "name": "frequency_string",
          "data_type": "STRING"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2022-01-01T00:00:00Z\": 1.058,\n    \"2022-01-01T00:20:48Z\": 0.699,\n    \"2022-01-01T00:41:37Z\": 1.08,\n    \"2022-01-01T01:02:26Z\": 1.054,\n    \"2022-01-01T01:23:15Z\": 0.763,\n    \"2022-01-01T01:44:04Z\": 1.034,\n    \"2022-01-01T02:04:53Z\": 0.965,\n    \"2022-01-01T02:25:42Z\": 0.601,\n    \"2022-01-01T02:46:31Z\": 0.933,\n    \"2022-01-01T03:07:20Z\": 1.081,\n    \"2022-01-01T03:28:09Z\": 2.1,\n    \"2022-01-01T03:48:58Z\": 0.988,\n    \"2022-01-01T04:09:47Z\": 0.741,\n    \"2022-01-01T04:30:36Z\": 0.647,\n    \"2022-01-01T04:51:25Z\": 0.556,\n    \"2022-01-01T05:12:14Z\": 0.453,\n    \"2022-01-01T05:33:03Z\": 1.009,\n    \"2022-01-01T05:53:52Z\": 1.72,\n    \"2022-01-01T06:14:41Z\": 1.002,\n    \"2022-01-01T06:56:19Z\": 0.857,\n    \"2022-01-01T07:17:08Z\": 0.864,\n    \"2022-01-01T07:37:57Z\": 0.606,\n    \"2022-01-01T07:58:46Z\": 0.899,\n    \"2022-01-01T08:40:24Z\": 0.62,\n    \"2022-01-01T10:03:40Z\": 0.721,\n    \"2022-01-01T10:24:29Z\": 1.193,\n    \"2022-01-01T10:45:18Z\": 0.833,\n    \"2022-01-01T11:06:07Z\": 2.06,\n    \"2022-01-01T11:26:56Z\": 0.68,\n    \"2022-01-01T11:47:45Z\": 1.136,\n    \"2022-01-01T12:08:34Z\": 0.62,\n    \"2022-01-01T12:29:23Z\": 0.946,\n    \"2022-01-01T12:50:12Z\": 0.746,\n    \"2022-01-01T13:11:01Z\": 0.833,\n    \"2022-01-01T13:31:50Z\": 0.857,\n    \"2022-01-01T14:13:28Z\": 0.947,\n    \"2022-01-01T14:34:17Z\": 0.841,\n    \"2022-01-01T14:55:06Z\": 0.668,\n    \"2022-01-01T15:15:55Z\": 0.675,\n    \"2022-01-01T15:36:44Z\": 0.84,\n    \"2022-01-01T15:57:33Z\": 0.821,\n    \"2022-01-01T16:18:22Z\": 0.625,\n    \"2022-01-01T16:39:11Z\": 1.155,\n    \"2022-01-01T17:00:00Z\": 0.968\n}"
          }
        },
        {
          "workflow_input_name": "min_num_desired_datapoints_in_window",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "10"
          }
        },
        {
          "workflow_input_name": "buffer_factor",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "1.4"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "a2ba0da0-5a9a-60e9-6af5-e07917988021",
    "revision_group_id": "a2ba0da0-5a9a-60e9-6af5-e07917988021",
    "name": "Moving average time",
    "description": "Calculates the moving average for a constant time interval",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.865433+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving average time\n\n## Description\nThe component calculates the moving average for a constant time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries must be numeric.\n* **t** (String): The lenght of the time interval, the average is calculated for. For example, '2ms', '2s', '2min', '2h' or '2d'.\n\n## Outputs\n* **mavg** (Pandas Series or Pandas DataFrame): The moving average of **data**. \n\n## Details\nThe component calculates the moving average for a constant time interval. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the average of the numerical observations in the foregoing time interval of length t.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"t\": 7s\n}\n```\nThe expected output is\n```\n\t\"mavg\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.5,\n\t\t\t\t\"2019-08-01T15:20:35\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 10.5\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"mavg\": DataType.Any},\n    name=\"Moving average time\",\n    description=\"Calculates the moving average for a constant time interval\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"a2ba0da0-5a9a-60e9-6af5-e07917988021\",\n    revision_group_id=\"a2ba0da0-5a9a-60e9-6af5-e07917988021\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.865433+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_date = data.copy()\n    try:\n        data_date.index = pd.to_datetime(data_date.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    data_sort = data_date.sort_index().dropna()\n    \n    try:\n        return {\"mavg\": data_sort.rolling(t).mean()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
    "io_interface": {
      "inputs": [
        {
          "id": "11ac167d-8852-a638-b2af-f4df9b7d00de",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "fa10796f-5c68-640d-8bb8-3e19d74b8deb",
          "name": "t",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "c5a1c608-812f-2a8d-db63-29a4a0c8261b",
          "name": "mavg",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "037887de-bbee-caeb-f0bd-7060d59f60e9",
    "revision_group_id": "037887de-bbee-caeb-f0bd-7060d59f60e9",
    "name": "Moving maximum time",
    "description": "Calculates the moving maximum for a constant time interval",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.499500+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving maximum time\n\n## Description\nThe component calculates the moving maximum for a constant time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries must be numeric.\n* **t** (String): The lenght of the time interval, the maximum is calculated for. For example, '2ms', '2s', '2min', '2h' or '2d'.\n\n## Outputs\n* **movmax** (Pandas Series or Pandas DataFrame): The moving maximum of **data**. \n\n## Details\nThe component calculates the moving maximum for a constant time interval. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the maximum of the numerical observations in the foregoing time interval of length t.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"t\": 7s\n}\n```\nThe expected output is\n```\n\t\"movmax\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 12.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"movmax\": DataType.Any},\n    name=\"Moving maximum time\",\n    description=\"Calculates the moving maximum for a constant time interval\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"037887de-bbee-caeb-f0bd-7060d59f60e9\",\n    revision_group_id=\"037887de-bbee-caeb-f0bd-7060d59f60e9\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.499500+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    try:\n        data.index = pd.to_datetime(data.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n    data_sort = data.sort_index()\n\n    data_sort = data_sort.dropna()\n    try:\n        return {\"movmax\": data_sort.rolling(t).max()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
    "io_interface": {
      "inputs": [
        {
          "id": "b9ec067d-0643-2709-7f04-db996826bd37",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "65ae8654-8110-b448-f475-d33983d265d0",
          "name": "t",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "316a2503-516e-2a2f-1d7e-aa360c3b440e",
          "name": "movmax",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "375819f5-deb3-0d5f-8661-22d202b39c54",
    "revision_group_id": "375819f5-deb3-0d5f-8661-22d202b39c54",
    "name": "Minimum",
    "description": "Calculates the minimum",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.382897+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Minimum\n\n## Description\nThis component calculates the minimum of the input.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **min** (Float or Pandas Series): The minimum of **data**. \n\n## Details\nThis component calculates the minimum of the columns of **data**.\n\nColumns including non-numeric values are ignored. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 1.7,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"min\": 0.3 \n```\nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n\t\"data\": {\n\t\t\t\t\"a\": {\n                    \"2019-08-01T15:44:12\": 9,\n                    \"2019-08-01T15:20:12\": -4,\n                    \"2019-08-03T16:20:15\": None,\n                    \"2019-08-05T12:00:34\": 1,\n                },\n                \"b\": {\n                    \"2019-08-01T15:44:12\": -1,\n                    \"2019-08-01T15:20:12\": \"test\",\n                    \"2019-08-03T16:20:15\": 0,\n                    \"2019-08-05T12:00:34\": 4,\n                }\n\t}\n}\n```\nThe expected output is\n```\n\t\"min\": {\n\t\t\t\t\"a\": -4\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"min\": DataType.Any},\n    name=\"Minimum\",\n    description=\"Calculates the minimum\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"375819f5-deb3-0d5f-8661-22d202b39c54\",\n    revision_group_id=\"375819f5-deb3-0d5f-8661-22d202b39c54\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.382897+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"min\": data.min()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5acd4330-5a3b-cfbc-a8f2-c8b9b8eff519",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "e276294f-3232-2203-5912-b65d8e0a9fd8",
          "name": "min",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "468f917b-7b99-9394-d600-50ee05237041",
    "revision_group_id": "468f917b-7b99-9394-d600-50ee05237041",
    "name": "Moving maximum number",
    "description": "Calculates the moving maximum for a constant number of observations",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.240792+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving maximum number\n\n## Description\nThe component calculates the moving maximum for a constant number of observations.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be numeric or datetimes, entries must be numeric.\n* **n** (Integer): The number of observations, the maximum is calculated for.\n\n## Outputs\n* **movmax** (Pandas Series or Pandas DataFrame): The moving maximum of **data**.\n\n## Details\nThe component calculates the moving maximum for a constant number of observations, sorted by their indices. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the maximum of the foregoing n numerical observations.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"n\": 3\n}\n```\nThe expected output is\n```\n\t\"movmax\": {\n\t\t\t\t\"2019-08-01T15:20:10\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": null,\n\t\t\t\t\"2019-08-01T15:20:30\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 12.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"n\": DataType.Integer},\n    outputs={\"movmax\": DataType.Any},\n    name=\"Moving maximum number\",\n    description=\"Calculates the moving maximum for a constant number of observations\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"468f917b-7b99-9394-d600-50ee05237041\",\n    revision_group_id=\"468f917b-7b99-9394-d600-50ee05237041\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.240792+00:00\"\n)\ndef main(*, data, n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_dropna = data.dropna()\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_sort = data_dropna.sort_index()\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_sort = data_dropna.sort_index()\n    return {\"movmax\": data_sort.rolling(n).max()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "0946bafe-e91b-70eb-345e-df8c4f742d94",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "5ec0ce79-7de8-f60f-9f10-59db81439948",
          "name": "n",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "c9f55ad2-345e-6b44-d9c5-6461f18a2e24",
          "name": "movmax",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "c9736810-73d8-b109-3822-96a5bf0a6d1c",
    "revision_group_id": "c9736810-73d8-b109-3822-96a5bf0a6d1c",
    "name": "Moving median number",
    "description": "Calculates the moving median for a constant number of observations",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.539215+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving median number\n\n## Description\nThe component calculates the moving median for a constant number of observations.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be numeric or datetimes, entries must be numeric.\n* **n** (Integer): The number of observations, the median is calculated for.\n\n## Outputs\n* **movmedian** (Pandas Series or Pandas DataFrame): The moving median of **data**.\n\n## Details\nThe component calculates the moving median for a constant number of observations, sorted by their indices. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the median of the foregoing n numerical observations.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"n\": 3\n}\n```\nThe expected output is\n```\n\t\"movmedian\": {\n\t\t\t\t\"2019-08-01T15:20:10\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": null,\n\t\t\t\t\"2019-08-01T15:20:30\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"n\": DataType.Integer},\n    outputs={\"movmedian\": DataType.Any},\n    name=\"Moving median number\",\n    description=\"Calculates the moving median for a constant number of observations\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"c9736810-73d8-b109-3822-96a5bf0a6d1c\",\n    revision_group_id=\"c9736810-73d8-b109-3822-96a5bf0a6d1c\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.539215+00:00\"\n)\ndef main(*, data, n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_dropna = data.dropna()\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_sort = data_dropna.sort_index()\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_sort = data_dropna.sort_index()\n    return {\"movmedian\": data_sort.rolling(n).median()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "a40336a2-7b58-5e64-000a-76ca4acabfa8",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "47452b34-56f7-4781-dab4-b6ea97a16504",
          "name": "n",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "53dfadff-5c8e-9e46-84b6-dd39b740dbd3",
          "name": "movmedian",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "6c4ce4d5-e73f-210e-48a8-230c8e5088ef",
    "revision_group_id": "6c4ce4d5-e73f-210e-48a8-230c8e5088ef",
    "name": "Standard Scale",
    "description": "Applies Standard Scaling",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.974755+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Standard Scale\n\n## Description\nStandard scaled data.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **scaled** (Pandas Series or Pandas DataFrame): The scaled **data**.\n\n## Details\nScales **data** using a standard scaler (i.e. using mean and standard deviation).\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"scaled\": DataType.Any},\n    name=\"Standard Scale\",\n    description=\"Applies Standard Scaling\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"6c4ce4d5-e73f-210e-48a8-230c8e5088ef\",\n    revision_group_id=\"6c4ce4d5-e73f-210e-48a8-230c8e5088ef\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.974755+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    input_data = data if isinstance(data, pd.DataFrame) else data.to_frame()\n\n    scaler = (\n        StandardScaler()\n    )  # Skalierung an Mittelwert und Standard-Abweichung (z-score)\n    scaled = pd.DataFrame(\n        scaler.fit_transform(input_data),\n        columns=input_data.columns,\n        index=input_data.index,\n    )\n\n    return {\"scaled\": scaled if isinstance(data, pd.DataFrame) else scaled.squeeze()}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "e9b15143-fbda-a5da-dbff-566e70e1a596",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "f663ee05-50a9-fe08-b15a-cb26d845681d",
          "name": "scaled",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "1feea93c-a6e7-4fec-c01c-6f30037f8cca",
    "revision_group_id": "1feea93c-a6e7-4fec-c01c-6f30037f8cca",
    "name": "Moving median time",
    "description": "Calculates the moving median for a constant time interval",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.096270+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving median time\n\n## Description\nThe component calculates the moving median for a constant time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries must be numeric.\n* **t** (String): The lenght of the time interval, the median is calculated for. For example, '2ms', '2s', '2min', '2h' or '2d'.\n\n## Outputs\n* **movmedian** (Pandas Series or Pandas DataFrame): The moving median of **data**. \n\n## Details\nThe component calculates the moving median for a constant time interval. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the median of the numerical observations in the foregoing time interval of length t.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:50\": 10.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"t\": 16s\n}\n```\nThe expected output is\n```\n\t\"movmedian\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.5,\n\t\t\t\t\"2019-08-01T15:20:35\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 8.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 11.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 10.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"movmedian\": DataType.Any},\n    name=\"Moving median time\",\n    description=\"Calculates the moving median for a constant time interval\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"1feea93c-a6e7-4fec-c01c-6f30037f8cca\",\n    revision_group_id=\"1feea93c-a6e7-4fec-c01c-6f30037f8cca\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.096270+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    try:\n        data.index = pd.to_datetime(data.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    data_sort = data.sort_index().dropna()\n    try:\n        return {\"movmedian\": data_sort.rolling(t).median()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
    "io_interface": {
      "inputs": [
        {
          "id": "6b923bb9-8bc1-d887-2301-0dd6a635ef70",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "68c2afc3-f44e-f7e5-1ccd-4937d66da3bc",
          "name": "t",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "2dbd97a1-b135-f3e6-3ee9-23b30ab35d4b",
          "name": "movmedian",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e79f021a-93a8-d55b-1032-19d91d78fd51",
    "revision_group_id": "e79f021a-93a8-d55b-1032-19d91d78fd51",
    "name": "Moving minimum number",
    "description": "Calculates the moving minimum for a constant number of observations",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.594171+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving minimum number\n\n## Description\nThe component calculates the moving minimum for a constant number of observations.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be numeric or datetimes, entries must be numeric.\n* **n** (Integer): The number of observations, the minimum is calculated for.\n\n## Outputs\n* **movmin** (Pandas Series or Pandas DataFrame): The moving minimum of **data**.\n\n## Details\nThe component calculates the moving minimum for a constant number of observations, sorted by their indices. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the minimum of the foregoing n numerical observations.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"n\": 3\n}\n```\nThe expected output is\n```\n\t\"movmin\": {\n\t\t\t\t\"2019-08-01T15:20:10\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": null,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 6.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"n\": DataType.Integer},\n    outputs={\"movmin\": DataType.Any},\n    name=\"Moving minimum number\",\n    description=\"Calculates the moving minimum for a constant number of observations\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"e79f021a-93a8-d55b-1032-19d91d78fd51\",\n    revision_group_id=\"e79f021a-93a8-d55b-1032-19d91d78fd51\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.594171+00:00\"\n)\ndef main(*, data, n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_dropna = data.dropna()\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_sort = data_dropna.sort_index()\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_sort = data_dropna.sort_index()\n    return {\"movmin\": data_sort.rolling(n).min()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "48a7cb58-647f-d913-47fe-e2f237bc0712",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "f9a58a5b-148b-3d09-7972-5c720fd9b90b",
          "name": "n",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "f28696d9-6e6a-1b8f-26f8-33061a551817",
          "name": "movmin",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "c9c8eb62-a694-3108-1c64-957bdd514c2b",
    "revision_group_id": "c9c8eb62-a694-3108-1c64-957bdd514c2b",
    "name": "Moving average number",
    "description": "Calculates the moving average for a constant number of observations",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.160618+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving average number\n\n## Description\nThe component calculates the moving average for a constant number of observations.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be numeric or datetimes, entries must be numeric.\n* **n** (Integer): The number of observations, the average is calculated for.\n\n## Outputs\n* **mavg** (Pandas Series or Pandas DataFrame): The moving average of **data**.\n\n## Details\nThe component calculates the moving average for a constant number of observations, sorted by their indices. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the average of the foregoing n numerical observations.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"n\": 3\n}\n```\nThe expected output is\n```\n\t\"mavg\": {\n\t\t\t\t\"2019-08-01T15:20:10\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": null,\n\t\t\t\t\"2019-08-01T15:20:30\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"n\": DataType.Integer},\n    outputs={\"mavg\": DataType.Any},\n    name=\"Moving average number\",\n    description=\"Calculates the moving average for a constant number of observations\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"c9c8eb62-a694-3108-1c64-957bdd514c2b\",\n    revision_group_id=\"c9c8eb62-a694-3108-1c64-957bdd514c2b\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.160618+00:00\"\n)\ndef main(*, data, n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_dropna = data.dropna()\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_sort = data_dropna.sort_index()\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_sort = data_dropna.sort_index()\n    return {\"mavg\": data_sort.rolling(n).mean()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "34ddd872-40cc-8c2a-cd95-ec3c194d7360",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "1ee20bfd-6aa1-bafc-3c18-614079784e1c",
          "name": "n",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "5b0c6d0a-1046-17f2-ece7-5235de433cc3",
          "name": "mavg",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e4682ac2-9a53-4fac-a4ea-e766666ee27e",
    "revision_group_id": "0b98c587-601f-4a03-9f17-02f857d3a741",
    "name": "Moving Time Window Mean",
    "description": "Calculate moving time window mean values",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-11-24T13:30:19.250905+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving Time Window Mean\n\n## Description\nThis component calculates the mean of observations in time windows of fixed size moving over the data with a fixed frequency.\n\n## Inputs\n* **timeseries** (Pandas Series): Series to perform the moving mean calculation on.\n* **window_size** (String): Time span of each window. Can be either a Pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string.\n* **window_frequency** (String): Time span between window starts. Can be either a Pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string. For directly consecutive, non-overlapping windows set **window_frequency** to the same value as **window_size**.\n* **frequency_offset** (String): Offset of the window starts compared to 1970-01-01 00:00:00. Can be either a Pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string. In most cases no offset is necessary, so this can be set to zero, i.e. \"0\".\n* **interval_type** (String): The string must be one of \"left_closed\", \"right_open\", \"right_closed\", \"left_closed\" \"closed\", or \"open\". In case a datapoint is on the left or right edge of a window this option determines if it belongs to that window or not, but potentially a neighbouring window.\n* **label_position** (String): The string must be either \"left\", \"center\", or \"right\". This option determines which timestamp is provided to represent the window for the corresponding mean in the output time series. \n\n## Outputs\n* **window_means** (Pandas Series): Series with the calculated means of each window.\n\n## Details\nThe datapoints of the **timeseries** are associated with time windows whose lengths are specified by **window_size**, and which are repeated with the frequency specified by **window_frequency** and the offset specified by **frequency_offset**.\nTo obtain for example windows with a **window_frequency** of \"5min\" that do not start at :00, :05, :10, :15 and so on, but instead at :04, :09, :14, :19 and so on, just set the **frequency_offset** to \"4min\" as in the example below.\n\nThe parameter **interval_type** is used to determine if a datapoint just on the edge of a window belongs to that window. The values \"left_closed\" and \"right_open\" mean that a point on the left edge of a window belongs to this window, whereas a point on its right edge does not belong to it. The values \"right_closed\" and \"left_open\" mean the same but vice versa, wheras \"closed\" means that both belong to the window, and \"open\" means that none of these points belong to the window.\n\nThe mean of all datapoints associated to the same time period is calculated. The value of **label_position** determines at which position of the window the label for the mean value of the window should be placed.\n\nThe time series does not need to have a regular frequency, and the window size can even be smaller than the smallest distance between successive observations, which then results in empty windows. For empty windows, the result value is NaN.\nIf NaN values are present in the original time series, they are eliminated before calculating the mean.\n\nTo reduce the execution time, if possible (**window_frequency** and **window_size** are identical, the **label_position** is \"left\" or \"right\") the Pandas function resample is used instead of the Pandas function rolling.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"timeseries\": {\n        \"2022-12-06 23:17:14+00:00\": 14.360453,\n        \"2022-12-06 23:18:14+00:00\": 14.872439,\n        \"2022-12-06 23:19:14+00:00\": 15.803046,\n        \"2022-12-06 23:20:14+00:00\": 13.661063,\n        \"2022-12-06 23:21:14+00:00\": 14.969653,\n        \"2022-12-06 23:22:14+00:00\": 13.530460,\n        \"2022-12-06 23:23:14+00:00\": 14.009814,\n        \"2022-12-06 23:24:14+00:00\": 13.708907,\n        \"2022-12-06 23:25:14+00:00\": 15.119281,\n        \"2022-12-06 23:26:14+00:00\": 15.666053,\n        \"2022-12-06 23:27:14+00:00\": 15.488811,\n        \"2022-12-06 23:28:14+00:00\": 15.515572,\n        \"2022-12-06 23:29:14+00:00\": 14.767891,\n        \"2022-12-06 23:30:14+00:00\": 13.726783,\n        \"2022-12-06 23:31:14+00:00\": 14.997352,\n        \"2022-12-06 23:32:14+00:00\": 13.015161,\n        \"2022-12-06 23:33:14+00:00\": 15.079884,\n        \"2022-12-06 23:34:14+00:00\": 15.001638,\n        \"2022-12-06 23:35:14+00:00\": 16.035476,\n        \"2022-12-06 23:36:14+00:00\": 14.545874,\n        \"2022-12-06 23:37:14+00:00\": 13.970260,\n        \"2022-12-06 23:38:14+00:00\": 15.045999,\n        \"2022-12-06 23:39:14+00:00\": 13.824304,\n        \"2022-12-06 23:40:14+00:00\": 13.620449,\n        \"2022-12-06 23:41:14+00:00\": 15.146005,\n        \"2022-12-06 23:42:14+00:00\": 14.796941,\n        \"2022-12-06 23:43:14+00:00\": 17.036046,\n        \"2022-12-06 23:44:14+00:00\": 14.976151,\n        \"2022-12-06 23:45:14+00:00\": 14.637615,\n        \"2022-12-06 23:46:14+00:00\": 15.195011,\n        \"2022-12-06 23:47:14+00:00\": 14.082022,\n        \"2022-12-06 23:48:14+00:00\": 15.311653,\n        \"2022-12-06 23:49:14+00:00\": 15.534084,\n        \"2022-12-06 23:50:14+00:00\": 15.020099,\n        \"2022-12-06 23:51:14+00:00\": 14.020416,\n        \"2022-12-06 23:52:14+00:00\": 13.779699,\n        \"2022-12-06 23:53:14+00:00\": 14.407253,\n        \"2022-12-06 23:54:14+00:00\": 15.180839,\n        \"2022-12-06 23:55:14+00:00\": 14.618573,\n        \"2022-12-06 23:56:14+00:00\": 14.194774,\n        \"2022-12-06 23:57:14+00:00\": 14.653221,\n        \"2022-12-06 23:58:14+00:00\": 14.911146,\n        \"2022-12-06 23:59:14+00:00\": 14.951289,\n        \"2022-12-07 00:00:14+00:00\": 15.005731,\n        \"2022-12-07 00:01:14+00:00\": 15.708401,\n        \"2022-12-07 00:02:14+00:00\": 13.605439,\n        \"2022-12-07 00:03:14+00:00\": 14.620927,\n        \"2022-12-07 00:04:14+00:00\": 15.181250,\n        \"2022-12-07 00:05:14+00:00\": 13.912724,\n        \"2022-12-07 00:06:14+00:00\": 14.060204\n    },\n    \"window_size\": \"15min\",\n    \"window_frequency\": \"5min\",\n    \"frequency_offset\": \"4min\",\n    \"interval_type\": \"left_closed\",\n    \"label_positions\": \"left\"\n}\n```\nThe expected output is\n```\n\"mean_windows\": {\n    \"2022-12-06T23:14:00.000Z\": 14.616446,\n    \"2022-12-06T23:19:00.000Z\": 14.3948072,\n    \"2022-12-06T23:24:00.000Z\": 15.0997248,\n    \"2022-12-06T23:29:00.000Z\": 14.3174142,\n    \"2022-12-06T23:34:00.000Z\": 14.9198494,\n    \"2022-12-06T23:39:00.000Z\": 14.884749,\n    \"2022-12-06T23:44:00.000Z\": 14.8404904,\n    \"2022-12-06T23:49:00.000Z\": 14.5523102,\n    \"2022-12-06T23:54:00.000Z\": 14.7117106,\n    \"2022-12-06T23:59:00.000Z\": 14.7783574,\n    \"2022-12-07T00:04:00.000Z\": 14.384726\n}\n```",
    "content": "from typing import Any, Literal, Optional\n\nimport numba\nimport numpy as np\nimport pandas as pd\n\n\ndef freqstr2dateoffset(freqstr: str) -> pd.DateOffset:\n    \"\"\"Transform frequency string to Pandas DateOffset.\"\"\"\n    return pd.tseries.frequencies.to_offset(freqstr)\n\n\ndef freqstr2timedelta(freqstr: str) -> pd.Timedelta:\n    \"\"\"Transform frequency string to Pandas Timedelta.\"\"\"\n    try:\n        return pd.to_timedelta(freqstr)\n    except ValueError:\n        return pd.to_timedelta(freqstr2dateoffset(freqstr))\n\n\ndef shift_timestamp_to_the_left_onto_rhythm(\n    timestamp: pd.Timestamp,\n    window_frequency: pd.DateOffset,\n    frequency_offset: pd.Timedelta,\n) -> pd.Timestamp:\n    \"\"\"Shift a timestamp to the left in the rhythm.\n\n    The parameters window_frequency and frequency_offset define a kind of \"rhythm\".\n    For example a window_frequency of \"5min\" and a frequency_offset of \"1min\" define the\n    rhythm which contains all timestamps, where the minutes are 01, 06, 11, 16, and so on.\n    The provided timestamp is shifted to the left onto the closest timestamp of this rhythm.\n\n    Conveniently, the Pandas class Timestamp comes with a method `floor`, which is similar to\n    the mathematical method `floor`, but instead of a decimal place takes into account the\n    specified frequency.\n\n    It is not completely obvious how the frequency_offset needs to be taken into account so that the\n    shifted timestamp actually lies in the desired interval:\n        timestamp - window_frequency < shifted <= timestamp\n    so in the following a little proof is provided:\n\n    On the one hand we have:\n        frequency_offset < window_frequency\n        shifted = (timestamp - frequency_offset).floor(freq=window_frequency) + frequency_offset\n    <-> shifted - frequency_offset = (timestamp - frequency_offset).floor(freq=window_frequency)\n                                  <=  timestamp - frequency_offset\n     -> shifted <= timestamp\n\n    On the other hand:\n        shifted - frequency_offset = (timestamp - frequency_offset).floor(freq=window_frequency)\n                                   >  timestamp - frequency_offset - window_frequency\n     -> shifted > timestamp - window_frequency\n    \"\"\"\n    return (timestamp - frequency_offset).floor(\n        freq=window_frequency\n    ) + frequency_offset\n\n\ndef shift_timestamp_to_the_right_onto_rhythm(\n    timestamp: pd.Timestamp,\n    window_frequency: pd.DateOffset,\n    frequency_offset: pd.Timedelta,\n) -> pd.Timestamp:\n    \"\"\"Shift a timestamp to the right in the rhythm.\n\n    The parameters window_frequency and frequency_offset define a kind of \"rhythm\".\n    The specified timestamp is shifted to the right onto the closest timestamp of this rhythm.\n\n    Conveniently, the Pandas class Timestamp has a method `ceil` that is similar to the\n    mathematical method `ceil`, but instead of a decimal place, it takes into account the\n    specified frequency.\n\n    It is not completely obvious how the frequency_offset must be taken into account so that\n    the shifted timestamp actually lies in the desired interval:\n        timestamp <= shifted < timestamp + window_frequency\n    The proof that the implemented code fulfills this requirement is analogous to the one for\n    `shift_timestamp_to_the_left_in_rhythm`.\n    \"\"\"\n    return (timestamp - frequency_offset).ceil(freq=window_frequency) + frequency_offset\n\n\ndef right_window_edge_from_left_window_edge(\n    left_window_edge: pd.Timestamp, window_size: pd.DateOffset\n) -> pd.Timestamp:\n    return left_window_edge + window_size\n\n\ndef determine_right_window_edges(\n    first_index: pd.Timestamp,\n    last_index: pd.Timestamp,\n    window_size: pd.DateOffset,\n    window_frequency: pd.DateOffset,\n    frequency_offset: pd.Timedelta,\n) -> pd.DatetimeIndex:\n    \"\"\"Determine right window edges of all windows containing first_index and last_index.\n\n    This function determines the right edges of the windows for which the mean shall be calculated.\n\n    The parameters window_frequency and frequency_offset define an endless \"rhythm\" where left\n    edges of windows should be located. From first_index and last_index the left edges of earliest\n    and latest window containing these timestamps are determined. Using the window_size left window\n    edges are transformed to right window edges. Finally the list of all right window edges is\n    determined and returned.\n\n    The right edges are determined because the Pandas rolling method only offers the possibility to\n    operate on windows that center around the current point or on windows for which the current\n    point is the right edge.\n    \"\"\"\n    earliest_possible_left_edge_of_window_containing_first_index = (\n        first_index - window_size\n    )\n    first_window_left_edge = shift_timestamp_to_the_right_onto_rhythm(\n        timestamp=earliest_possible_left_edge_of_window_containing_first_index,\n        window_frequency=window_frequency,\n        frequency_offset=frequency_offset,\n    )\n    first_window_right_boundary = right_window_edge_from_left_window_edge(\n        left_window_edge=first_window_left_edge, window_size=window_size\n    )\n\n    latest_possible_left_edge_of_window_containing_last_index = last_index\n    last_window_left_boundary = shift_timestamp_to_the_left_onto_rhythm(\n        timestamp=latest_possible_left_edge_of_window_containing_last_index,\n        window_frequency=window_frequency,\n        frequency_offset=frequency_offset,\n    )\n    last_window_right_boundary = right_window_edge_from_left_window_edge(\n        left_window_edge=last_window_left_boundary, window_size=window_size\n    )\n\n    return pd.date_range(\n        start=first_window_right_boundary,\n        end=last_window_right_boundary,\n        freq=window_frequency,\n        inclusive=\"both\",\n    )\n\n\ndef mean_of_values_excluding_nan(array: np.array):\n    return np.mean(array[~np.isnan(array)])\n\n\n@numba.njit\ndef mean_of_values_excluding_nan_with_numba(array: np.array):\n    return np.mean(array[~np.isnan(array)])\n\n\ndef calculate_moving_time_window_mean(\n    timeseries: pd.Series,\n    window_size: pd.DateOffset,\n    window_frequency: pd.DateOffset,\n    frequency_offset: pd.Timedelta,\n    inclusive: Literal[\n        \"left_closed\", \"right_open\", \"right_closed\", \"left_open\", \"closed\", \"open\"\n    ],\n    label_position: Literal[\"left\", \"center\", \"right\"],\n    engine: Optional[Literal[\"numba\"]],\n) -> pd.Series:\n    \"\"\"Calculate the periodically shifting mean for a constant time window.\n\n    timeseries (Pandas Series): Series to perform the periodically shifting time window mean\n        calculation on.\n    window_size (Pandas DateOffset): Time span of each window.\n    window_frequency (Pandas DateOffset): Frequency of windows for which the mean is calculated,\n        i.e. time delta between the start (or end) of each two consecutive windows.\n        For directly consecutive, non-overlapping windows set window_frequency to the same value as\n        window_size. If the window_frequency is smaller than the window_size the windows will\n        overlap. If the window_frequency is larger than the window_size, their will be gaps between\n        each two successive windows.\n    frequency_offset (Pandas Timedelta): Offset of the window starts compared to\n        1970-01-01 00:00:00. In most cases no offset is necessary, so this can be set to zero,\n        i.e. \"0\".\n    inclusive (string): The string must be either \"left\" or \"right\".\n        In case a datapoint is on the left or right border of a window this option\n        determines if it belongs to that window or not, but potentially a neighbouring window.\n    label_position (string): The string must be either \"left\", \"center\", or \"right\".\n        This option determines which timestamp is provided to represent the window for the\n        corresponding mean in the output time series.\n\n    To reduce the runtime, if possible (window_frequency and window_size are identical, the\n    label_position is \"left\" or \"right\") the Pandas function resample is used instead of the Pandas\n    function rolling.\n    \"\"\"\n    if not isinstance(timeseries.index, pd.DatetimeIndex):\n        raise TypeError(\n            \"This component is exclusively for Pandas Series with a Pandas DatetimeIndex!\"\n        )\n\n    timeseries.sort_index(inplace=True)\n\n    frequency_offset = frequency_offset % window_frequency\n\n    if window_size == window_frequency and inclusive in [\"left\", \"right\"]:\n        # resample is the fastest method, if it can be used\n        result = timeseries.resample(\n            rule=window_size,\n            closed=inclusive,\n            label=\"right\",\n            origin=\"epoch\",  # default: \"start_day\"\n            # both have the same result for frequencies\n            # which are multiples of a day or divde a day evenly\n            # for other frequencies \"start_day\" will result in\n            # varying output depending on the start of the series\n            offset=frequency_offset,\n        ).mean()\n    else:\n        # default label position in rolling is right\n        # left is  not possible, only alternative is center\n        right_window_boundaries = determine_right_window_edges(\n            first_index=timeseries.index[0],\n            last_index=timeseries.index[-1],\n            window_size=window_size,\n            window_frequency=window_frequency,\n            frequency_offset=frequency_offset,\n        )\n\n        reindexed_timeseries = timeseries.reindex(\n            index=right_window_boundaries.union(timeseries.index)\n        )\n\n        result = reindexed_timeseries.rolling(\n            window_size.freqstr, closed=inclusive\n        ).apply(\n            mean_of_values_excluding_nan_with_numba\n            if engine == \"numba\"\n            else mean_of_values_excluding_nan,\n            raw=True,\n            engine=engine,\n        )\n\n        result = result.reindex(index=right_window_boundaries)\n\n    if label_position == \"center\":\n        result = result.shift(freq=-pd.to_timedelta(window_size) / 2)\n    elif label_position == \"left\":\n        result = result.shift(freq=-pd.to_timedelta(window_size))\n\n    return result\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"timeseries\": \"SERIES\",\n        \"window_size\": \"STRING\",\n        \"window_frequency\": \"STRING\",\n        \"frequency_offset\": \"STRING\",\n        \"interval_type\": \"STRING\",\n        \"label_position\": \"STRING\",\n    },\n    \"outputs\": {\n        \"window_means\": \"SERIES\",\n    },\n    \"name\": \"Moving Time Window Mean\",\n    \"category\": \"Statistic\",\n    \"description\": \"Calculate moving time window mean values\",\n    \"version_tag\": \"1.0.1\",\n    \"id\": \"f925b519-7bb1-4689-81fe-9d00a6192007\",\n    \"revision_group_id\": \"0b98c587-601f-4a03-9f17-02f857d3a741\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-12-01T13:07:34.333037+00:00\",\n}\n\n\ndef main(*, timeseries, window_size, window_frequency, frequency_offset, interval_type, label_position):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    inclusive_string_from_interval_type = {\n        \"closed\": \"both\",\n        \"open\": \"neither\",\n        \"left_closed\": \"left\",\n        \"right_open\": \"left\",\n        \"right_closed\": \"right\",\n        \"left_open\": \"right\",\n    }\n\n    if interval_type not in inclusive_string_from_interval_type:\n        msg = (\n            f\"'{interval_type}' is not allowed as input for interval_type!\\n\"\n            \"Please use one of the following options instead:\\n\"\n            + \"\\n\".join(option for option in inclusive_string_from_interval_type.keys())\n            + \"\\n\"\n        )\n        raise ValueError(msg)\n\n    return {\n        \"window_means\": calculate_moving_time_window_mean(\n            timeseries=timeseries,\n            window_size=freqstr2dateoffset(window_size),\n            window_frequency=freqstr2dateoffset(window_frequency),\n            frequency_offset=freqstr2timedelta(frequency_offset),\n            inclusive=inclusive_string_from_interval_type[interval_type],\n            label_position=label_position,\n            engine=\"numba\",\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5bfe6402-81cc-49ef-beb2-456bbfbbd6cb",
          "name": "timeseries",
          "data_type": "SERIES"
        },
        {
          "id": "1c0ddc42-cd17-4378-9f07-9930c1a1f7f2",
          "name": "window_size",
          "data_type": "STRING"
        },
        {
          "id": "8aa8f60e-0bd5-41d4-b511-372b3660c189",
          "name": "window_frequency",
          "data_type": "STRING"
        },
        {
          "id": "a29e7af3-4be2-4cbb-9f78-1b7520ed5142",
          "name": "frequency_offset",
          "data_type": "STRING"
        },
        {
          "id": "abb7a7e9-fda2-4e74-9e0c-14574410008a",
          "name": "interval_type",
          "data_type": "STRING"
        },
        {
          "id": "2e68e763-81db-4127-84cb-80e0c7e3f080",
          "name": "label_position",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "c81dedf8-99e5-431f-ab4e-b6db9eaf7772",
          "name": "window_means",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "timeseries",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2022-12-06 23:17:14+00:00\": 14.360453,\n    \"2022-12-06 23:18:14+00:00\": 14.872439,\n    \"2022-12-06 23:19:14+00:00\": 15.803046,\n    \"2022-12-06 23:20:14+00:00\": 13.661063,\n    \"2022-12-06 23:21:14+00:00\": 14.969653,\n    \"2022-12-06 23:22:14+00:00\": 13.530460,\n    \"2022-12-06 23:23:14+00:00\": 14.009814,\n    \"2022-12-06 23:24:14+00:00\": 13.708907,\n    \"2022-12-06 23:25:14+00:00\": 15.119281,\n    \"2022-12-06 23:26:14+00:00\": 15.666053,\n    \"2022-12-06 23:27:14+00:00\": 15.488811,\n    \"2022-12-06 23:28:14+00:00\": 15.515572,\n    \"2022-12-06 23:29:14+00:00\": 14.767891,\n    \"2022-12-06 23:30:14+00:00\": 13.726783,\n    \"2022-12-06 23:31:14+00:00\": 14.997352,\n    \"2022-12-06 23:32:14+00:00\": 13.015161,\n    \"2022-12-06 23:33:14+00:00\": 15.079884,\n    \"2022-12-06 23:34:14+00:00\": 15.001638,\n    \"2022-12-06 23:35:14+00:00\": 16.035476,\n    \"2022-12-06 23:36:14+00:00\": 14.545874,\n    \"2022-12-06 23:37:14+00:00\": 13.970260,\n    \"2022-12-06 23:38:14+00:00\": 15.045999,\n    \"2022-12-06 23:39:14+00:00\": 13.824304,\n    \"2022-12-06 23:40:14+00:00\": 13.620449,\n    \"2022-12-06 23:41:14+00:00\": 15.146005,\n    \"2022-12-06 23:42:14+00:00\": 14.796941,\n    \"2022-12-06 23:43:14+00:00\": 17.036046,\n    \"2022-12-06 23:44:14+00:00\": 14.976151,\n    \"2022-12-06 23:45:14+00:00\": 14.637615,\n    \"2022-12-06 23:46:14+00:00\": 15.195011,\n    \"2022-12-06 23:47:14+00:00\": 14.082022,\n    \"2022-12-06 23:48:14+00:00\": 15.311653,\n    \"2022-12-06 23:49:14+00:00\": 15.534084,\n    \"2022-12-06 23:50:14+00:00\": 15.020099,\n    \"2022-12-06 23:51:14+00:00\": 14.020416,\n    \"2022-12-06 23:52:14+00:00\": 13.779699,\n    \"2022-12-06 23:53:14+00:00\": 14.407253,\n    \"2022-12-06 23:54:14+00:00\": 15.180839,\n    \"2022-12-06 23:55:14+00:00\": 14.618573,\n    \"2022-12-06 23:56:14+00:00\": 14.194774,\n    \"2022-12-06 23:57:14+00:00\": 14.653221,\n    \"2022-12-06 23:58:14+00:00\": 14.911146,\n    \"2022-12-06 23:59:14+00:00\": 14.951289,\n    \"2022-12-07 00:00:14+00:00\": 15.005731,\n    \"2022-12-07 00:01:14+00:00\": 15.708401,\n    \"2022-12-07 00:02:14+00:00\": 13.605439,\n    \"2022-12-07 00:03:14+00:00\": 14.620927,\n    \"2022-12-07 00:04:14+00:00\": 15.181250,\n    \"2022-12-07 00:05:14+00:00\": 13.912724,\n    \"2022-12-07 00:06:14+00:00\": 14.060204\n}"
          }
        },
        {
          "workflow_input_name": "window_size",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "15min"
          }
        },
        {
          "workflow_input_name": "window_frequency",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "5min"
          }
        },
        {
          "workflow_input_name": "frequency_offset",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "4min"
          }
        },
        {
          "workflow_input_name": "interval_type",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "left_closed"
          }
        },
        {
          "workflow_input_name": "label_position",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "left"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "33d7c458-762c-7555-7a20-26ef0708bc28",
    "revision_group_id": "33d7c458-762c-7555-7a20-26ef0708bc28",
    "name": "Moving minimum time",
    "description": "Calculates the moving minimum for a constant time interval",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.919407+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving minimum time\n\n## Description\nThe component calculates the moving minimum for a constant time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries must be numeric.\n* **t** (String): The lenght of the time interval, the minimum is calculated for. For example, '2ms', '2s', '2min', '2h' or '2d'.\n\n## Outputs\n* **movmin** (Pandas Series or Pandas DataFrame): The moving minimum of **data**. \n\n## Details\nThe component calculates the moving minimum for a constant time interval. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the minimum of the numerical observations in the foregoing time interval of length t.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"t\": 7s\n}\n```\nThe expected output is\n```\n\t\"movmin\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"movmin\": DataType.Any},\n    name=\"Moving minimum time\",\n    description=\"Calculates the moving minimum for a constant time interval\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"33d7c458-762c-7555-7a20-26ef0708bc28\",\n    revision_group_id=\"33d7c458-762c-7555-7a20-26ef0708bc28\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.919407+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    try:\n        data.index = pd.to_datetime(data.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    data_sort = data.sort_index().dropna()\n    try:\n        return {\"movmin\": data_sort.rolling(t).min()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
    "io_interface": {
      "inputs": [
        {
          "id": "3dbae9ca-ea79-c96f-268c-e713baaccf57",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "3c9b6644-beff-26a9-6926-0182a6cd13cd",
          "name": "t",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "5934c762-75d3-aa09-029a-5f5ad9536c5d",
          "name": "movmin",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "dc9dcd3d-88a0-539c-c5d9-bb52c0eded33",
    "revision_group_id": "dc9dcd3d-88a0-539c-c5d9-bb52c0eded33",
    "name": "Median",
    "description": "Calculates the median",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.340020+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Median\n\n## Description\nThis component calculates the median of the input.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **median** (Float or Pandas Series): The median of **data**. \n\n## Details\nThis component calculates the median of the columns of **data**, excluding NaN respectively None values.\n\nColumns including non-numeric values are ignored. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 1.7,\n\t\t\t\t\"2019-08-01T15:20:20\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"median\": 0.65\n```\nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n\t\"data\": {\n\t\t\t\t\"a\": {\n                    \"2019-08-01T15:44:12\": 9,\n                    \"2019-08-01T15:20:12\": -4,\n                    \"2019-08-03T16:20:15\": None,\n                    \"2019-08-05T12:00:34\": 1,\n                },\n                \"b\": {\n                    \"2019-08-01T15:44:12\": -1,\n                    \"2019-08-01T15:20:12\": \"test\",\n                    \"2019-08-03T16:20:15\": 0,\n                    \"2019-08-05T12:00:34\": 4,\n                }\n\t}\n}\n```\nThe expected output is\n```\n\t\"median\": {\n\t\t\t\t\"a\": 1\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"median\": DataType.Any},\n    name=\"Median\",\n    description=\"Calculates the median\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"dc9dcd3d-88a0-539c-c5d9-bb52c0eded33\",\n    revision_group_id=\"dc9dcd3d-88a0-539c-c5d9-bb52c0eded33\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.340020+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"median\": data.median()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "f40f20e1-1a7e-6069-7620-c39ee314b651",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "ba52acd3-92d0-9f51-5e2e-c7575d5c2cca",
          "name": "median",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "462e4cd5-1772-a925-6d26-8d33011111cd",
    "revision_group_id": "462e4cd5-1772-a925-6d26-8d33011111cd",
    "name": "Standard deviation",
    "description": "Calculates the standard deviation",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.425137+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Standard deviation\n\n## Description\nThis component calculates the standard deviation of the input.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **std** (Float or Pandas Series): The standard deviation of **data**. \n\n## Details\nThis component calculates the standard deviation of the columns of **data**, excluding NaN respectively None values. \n\nColumns including non-numeric values are ignored. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 1.7,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"std\": 0.7 \n```\nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n\t\"data\": {\n\t\t\t\t\"a\": {\n                    \"2019-08-01T15:44:12\": -9,\n                    \"2019-08-01T15:20:12\": 4,\n                    \"2019-08-03T16:20:15\": None,\n                    \"2019-08-05T12:00:34\": 2,\n                },\n                \"b\": {\n                    \"2019-08-01T15:44:12\": -1,\n                    \"2019-08-01T15:20:12\": \"test\",\n                    \"2019-08-03T16:20:15\": 0,\n                    \"2019-08-05T12:00:34\": 4,\n                }\n\t}\n}\n```\nThe expected output is\n```\n\t\"std\": {\n\t\t\t\t\"a\": 7\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"std\": DataType.Any},\n    name=\"Standard deviation\",\n    description=\"Calculates the standard deviation\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"462e4cd5-1772-a925-6d26-8d33011111cd\",\n    revision_group_id=\"462e4cd5-1772-a925-6d26-8d33011111cd\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.425137+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"std\": data.std()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "c95854a4-8a38-7b84-762c-fc886277d6be",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "58c23998-b897-2065-ee9a-da65eb72f3ec",
          "name": "std",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "5eb8ca16-bbc7-94b1-3d82-6f074cd63456",
    "revision_group_id": "5eb8ca16-bbc7-94b1-3d82-6f074cd63456",
    "name": "Moving standard deviation time",
    "description": "Calculates the moving standard deviation for a constant time interval",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.045034+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving standard deviation time\n\n## Description\nThe component calculates the moving standard deviation for a constant time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries must be numeric.\n* **t** (String): The lenght of the time interval, the standard deviation is calculated for. For example, '2ms', '2s', '2min', '2h' or '2d'.\n\n## Outputs\n* **movstd** (Pandas Series or Pandas DataFrame): The moving standard deviation of **data**. \n\n## Details\nThe component calculates the moving standard deviation for a constant time interval. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the standard deviation of the numerical observations in the foregoing time interval of length t.\n\nIf there is just one observation in the interval, no calculation is possible.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"t\": 7s\n}\n```\nThe expected output is\n```\n\t\"movstd\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.5,\n\t\t\t\t\"2019-08-01T15:20:35\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 10.5\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"movstd\": DataType.Any},\n    name=\"Moving standard deviation time\",\n    description=\"Calculates the moving standard deviation for a constant time interval\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"5eb8ca16-bbc7-94b1-3d82-6f074cd63456\",\n    revision_group_id=\"5eb8ca16-bbc7-94b1-3d82-6f074cd63456\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.045034+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    try:\n        data.index = pd.to_datetime(data.index)\n\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    data_sort = data.sort_index().dropna()\n    try:\n        return {\"movstd\": data_sort.rolling(t).std()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
    "io_interface": {
      "inputs": [
        {
          "id": "6bf80f57-feff-69e0-d180-c8263226b941",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "72c5b066-33b1-95d0-61c5-7482768bd32f",
          "name": "t",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "ce143cbe-a84c-1b55-716a-c98b3500aeea",
          "name": "movstd",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "d72939c2-1b0c-065e-556a-c9974c179c0f",
    "revision_group_id": "d72939c2-1b0c-065e-556a-c9974c179c0f",
    "name": "Maximum",
    "description": "Calculates the maximum",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.646362+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Maximum\n\n## Description\nThis component calculates the maximum of the input.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **max** (Float or Pandas Series): The maximum of **data**. \n\n## Details\nThis component calculates the maximum of the columns of **data**.\n\nColumns including non-numeric values are ignored. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 1.7,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"max\": 1.7 \n```\nThe json input of a typical call of this component with a Pandas DataFrame is\n```\n{\n\t\"data\": {\n\t\t\t\t\"a\": {\n                    \"2019-08-01T15:44:12\": 9,\n                    \"2019-08-01T15:20:12\": -4,\n                    \"2019-08-03T16:20:15\": None,\n                    \"2019-08-05T12:00:34\": 1,\n                },\n                \"b\": {\n                    \"2019-08-01T15:44:12\": -1,\n                    \"2019-08-01T15:20:12\": \"test\",\n                    \"2019-08-03T16:20:15\": 0,\n                    \"2019-08-05T12:00:34\": 4,\n                }\n\t}\n}\n```\nThe expected output is\n```\n\t\"max\": {\n\t\t\t\t\"a\": 9\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"max\": DataType.Any},\n    name=\"Maximum\",\n    description=\"Calculates the maximum\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"d72939c2-1b0c-065e-556a-c9974c179c0f\",\n    revision_group_id=\"d72939c2-1b0c-065e-556a-c9974c179c0f\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.646362+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"max\": data.max()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "7f421540-fcf7-2467-d3d0-a50a7b363ae8",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "07cb220c-638b-2d36-4f26-ddbe013e72d8",
          "name": "max",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "acfd3d99-0a6c-97ae-7bcf-de08ea9ce4ee",
    "revision_group_id": "acfd3d99-0a6c-97ae-7bcf-de08ea9ce4ee",
    "name": "Moving standard deviation number",
    "description": "Calculates the moving standard deviation for a constant number of observations",
    "category": "Statistic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.745223+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving average number\n\n## Description\nThe component calculates the moving average for a constant number of observations.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be numeric or datetimes, entries must be numeric.\n* **n** (Integer): The number of observations, the average is calculated for.\n\n## Outputs\n* **mavg** (Pandas Series or Pandas DataFrame): The moving average of **data**.\n\n## Details\nThe component calculates the moving average for a constant number of observations, sorted by their indices. \n\nTherefore, it excludes NaN respectively None values from **data** and equippes each remaining index with the average of the foregoing n numerical observations.   \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:20\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:40\": null,\n\t\t\t\t\"2019-08-01T15:20:55\": 12.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}, \n\t\"n\": 3\n}\n```\nThe expected output is\n```\n\t\"mavg\": {\n\t\t\t\t\"2019-08-01T15:20:10\": null,\n\t\t\t\t\"2019-08-01T15:20:25\": null,\n\t\t\t\t\"2019-08-01T15:20:30\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:35\": 3.0,\n\t\t\t\t\"2019-08-01T15:20:55\": 6.0,\n\t\t\t\t\"2019-08-01T15:20:56\": 9.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"n\": DataType.Integer},\n    outputs={\"movstd\": DataType.Any},\n    name=\"Moving standard deviation number\",\n    description=\"Calculates the moving standard deviation for a constant number of observations\",\n    category=\"Statistic\",\n    version_tag=\"1.0.0\",\n    id=\"acfd3d99-0a6c-97ae-7bcf-de08ea9ce4ee\",\n    revision_group_id=\"acfd3d99-0a6c-97ae-7bcf-de08ea9ce4ee\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.745223+00:00\"\n)\ndef main(*, data, n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_dropna = data.dropna()\n    if pd.api.types.is_numeric_dtype(data_dropna.index.dtype):\n        data_sort = data_dropna.sort_index()\n\n    else:\n        try:\n            data_dropna.index = pd.to_datetime(data_dropna.index)\n\n        except (ValueError, TypeError):\n            raise TypeError(\"indices of data must be numeric or datetime\")\n        data_sort = data_dropna.sort_index()\n    return {\"movstd\": data_sort.rolling(n).std()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "8925f032-d4f5-fd22-eada-f5f2ffc59045",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "9cab813b-d3ec-8ae8-220e-8c475a0ade90",
          "name": "n",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "b8c1fe2f-d109-2f05-9008-27cbe9a5c247",
          "name": "movstd",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "ea4a196f-5d94-d3cf-02e8-8c750414fc89",
    "revision_group_id": "ea4a196f-5d94-d3cf-02e8-8c750414fc89",
    "name": "Abs",
    "description": "Returns absolute values",
    "category": "Basic Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.270360+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Abs\n\n## Description\nThis component calculates the absolute value of the input.\n\n## Inputs\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **absolute** (Integer, Float, Pandas Series or Pandas DataFrame): Absolute value of data.\n\n## Details\nThe component calculates the absolute value of the input. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\"2019-08-01T15:44:12\": -9,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n                               \"2019-08-07T11:01:00\": -100\n\t}\n}\n```\nThe expected output is\n```\n\t\"absolute\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\"2019-08-01T15:44:12\": 9,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n                               \"2019-08-07T11:01:00\": 100\n\t}\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"absolute\": DataType.Any},\n    name=\"Abs\",\n    description=\"Returns absolute values\",\n    category=\"Basic Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"ea4a196f-5d94-d3cf-02e8-8c750414fc89\",\n    revision_group_id=\"ea4a196f-5d94-d3cf-02e8-8c750414fc89\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.270360+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"absolute\": abs(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "2bf34e30-2de3-b373-e214-b2354eb14d27",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "4280fb87-b12a-44af-8a9e-250912467d0e",
          "name": "absolute",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "2abf72f6-68c9-7398-7175-165d31b3ced7",
    "revision_group_id": "2abf72f6-68c9-7398-7175-165d31b3ced7",
    "name": "Add",
    "description": "Add inputs",
    "category": "Basic Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.478184+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Add\n\n## Description\nThis component adds numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **a** (Integer, Float, Pandas Series or Pandas DataFrame): First summand, entries must be numeric.\n* **b** (Integer, Float, Pandas Series or Pandas DataFrame): Second summand, entries must be numeric.\n\n## Outputs\n* **sum** (Integer, Float, Pandas Series or Pandas DataFrame): The sum of summand a and summand b. \n\n## Details\nThe component adds the inputs. \n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.0,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5,\n                               \"2019-08-07T11:01:00\": 7.8\n\t},\n\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.4,\n\t\t\t\t\"2019-08-01T15:44:12\": 2.6,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.8,\n\t\t\t\t\"2019-08-05T12:00:34\": 5.0    \n\t}\n}\n```\nThe expected output is\n```\n\t\"sum\": {\n\t\t\t\"2019-08-01T15:20:12\": 3.6,\n\t\t\t\"2019-08-01T15:44:12\": 2.6,\n\t\t\t\"2019-08-03T16:20:15\": 4.1,\n\t\t\t\"2019-08-05T12:00:34\": 5.5,\n                       \"2019-08-07T11:01:00\": null  \n\t}\n```\n\nThe json input of a typical call of this component with a Float and a Pandas DataFrame is\n```\n{\n\t\"a\": 5.1\n        \"b\": {\n\t\t\t\"first\": {\n                               \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"second\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t}\n}\n```\nThe expected output is\n```\n\t\"sum\": {\n\t\t\t\"first\": {\n                               \"2019-08-01T15:20:12\": 6.3,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 5.4,\n\t\t\t\t\"2019-08-05T12:00:34\": 5.6\n             },\n            \"second\": {\n                                \"2019-08-01T15:20:12\": 59.5,\n\t\t\t\t \"2019-08-01T15:44:12\": 9.4,\n\t\t\t\t \"2019-08-03T16:20:15\": 26.1,\n\t\t\t\t \"2019-08-05T12:00:34\": 12.6\n             }\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"a\": DataType.Any, \"b\": DataType.Any},\n    outputs={\"sum\": DataType.Any},\n    name=\"Add\",\n    description=\"Add inputs\",\n    category=\"Basic Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"2abf72f6-68c9-7398-7175-165d31b3ced7\",\n    revision_group_id=\"2abf72f6-68c9-7398-7175-165d31b3ced7\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.478184+00:00\"\n)\ndef main(*, a, b):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n\n    return {\"sum\": (a + b)}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "a329b531-6fd7-fc1b-cd99-9e3eac95f7ee",
          "name": "a",
          "data_type": "ANY"
        },
        {
          "id": "97f7df43-bfb5-554a-4ba7-f3fc85a468b6",
          "name": "b",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "1dde5f5d-178b-aa88-be6a-8fe1bb59cd27",
          "name": "sum",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "0438da97-f524-4a68-28c9-a88c81aa2c63",
    "revision_group_id": "0438da97-f524-4a68-28c9-a88c81aa2c63",
    "name": "Multiply",
    "description": "Multiplies a and b",
    "category": "Basic Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.663533+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Multiply\n\n## Description\nThis component multiplies numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **a** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **b** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **product** (Integer, Float, Pandas Series or Pandas DataFrame): The product of a and b.\n\n## Details\nThe component multiplies a and b. \n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 3.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.0,\n\t\t\t\t\"2019-08-03T16:20:15\": 5.0,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5,\n                               \"2019-08-07T11:01:00\": 7.0\n\t},\n\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 2.5,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.0,\n\t\t\t\t\"2019-08-05T12:00:34\": 5.0    \n\t}\n}\n```\nThe expected output is\n```\n\t\"product\": {\n\t\t\t\"2019-08-01T15:20:12\": 3,\n\t\t\t\"2019-08-01T15:44:12\": 0,\n\t\t\t\"2019-08-03T16:20:15\": 15,\n\t\t\t\"2019-08-05T12:00:34\": 2.5,\n                       \"2019-08-07T11:01:00\": null\n\t}\n\n```\n\nThe json input of a typical call of this component with a Float and a Pandas DataFrame is\n```\n{\n\t\"a\": 5.0\n    \"b\": {\n\t\t\t\"first\": {\n                               \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"second\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t}\n}\n```\nThe expected output is\n```\n\t\"product\": {\n\t\t\t\"first\": {\n                               \"2019-08-01T15:20:12\": 6,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 1.5,\n\t\t\t\t\"2019-08-05T12:00:34\": 2.5\n             },\n            \"second\": {\n                                \"2019-08-01T15:20:12\": 272,\n\t\t\t\t \"2019-08-01T15:44:12\": 21.5,\n\t\t\t\t \"2019-08-03T16:20:15\": 105,\n\t\t\t\t \"2019-08-05T12:00:34\": 37.5\n             }\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"a\": DataType.Any, \"b\": DataType.Any},\n    outputs={\"product\": DataType.Any},\n    name=\"Multiply\",\n    description=\"Multiplies a and b\",\n    category=\"Basic Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"0438da97-f524-4a68-28c9-a88c81aa2c63\",\n    revision_group_id=\"0438da97-f524-4a68-28c9-a88c81aa2c63\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.663533+00:00\"\n)\ndef main(*, a, b):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"product\": (a * b)}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "61a078bc-e8e2-3b9f-34b3-07507885f3f3",
          "name": "a",
          "data_type": "ANY"
        },
        {
          "id": "c9a07403-6a18-5562-c19c-247d76abcf36",
          "name": "b",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "5f9428b2-948a-5739-4e83-5da58092fc7e",
          "name": "product",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "24f115a8-45ad-21f2-c6ce-8edfc28f3b3f",
    "revision_group_id": "24f115a8-45ad-21f2-c6ce-8edfc28f3b3f",
    "name": "Signum",
    "description": "Returns sign of the input",
    "category": "Basic Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.343501+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Signum\n\n## Description\nThis component calculates the signum of the input.\n\n## Inputs\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **absolute** (Integer, Float, Pandas Series or Pandas DataFrame): Signum of data.\n\n## Details\nThe component calculates the signum of the input. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4,\n\t\t\t\t\"2019-08-01T15:44:12\": -9,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n                \"2019-08-07T11:01:00\": -100\n\t}\n}\n```\nThe expected output is\n```\n\t\"absolute\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1,\n\t\t\t\t\"2019-08-01T15:44:12\": -1,\n\t\t\t\t\"2019-08-03T16:20:15\": 0,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n                \"2019-08-07T11:01:00\": -1\n\t}\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"signum\": DataType.Any},\n    name=\"Signum\",\n    description=\"Returns sign of the input\",\n    category=\"Basic Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"24f115a8-45ad-21f2-c6ce-8edfc28f3b3f\",\n    revision_group_id=\"24f115a8-45ad-21f2-c6ce-8edfc28f3b3f\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.343501+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"signum\": np.sign(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "8ae9aed6-8009-2aa6-1b2e-d991c6535e90",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "2e6a7af0-898a-2e5f-06b8-8c740b06f8f0",
          "name": "signum",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "10d27d69-e999-6654-3cef-427672aeb0fa",
    "revision_group_id": "10d27d69-e999-6654-3cef-427672aeb0fa",
    "name": "Substract",
    "description": "Subtracts b from a",
    "category": "Basic Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.445565+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Substract\n\n## Description\nThis component subtracts numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **a** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **b** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **difference** (Integer, Float, Pandas Series or Pandas DataFrame): The difference of a and b. \n\n## Details\nThe component calculates the difference of a and b.\n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.0,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5,\n                \"2019-08-07T11:01:00\": 7.8\n\t},\n\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.4,\n\t\t\t\t\"2019-08-01T15:44:12\": 2.6,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.8,\n\t\t\t\t\"2019-08-05T12:00:34\": 5.0    \n\t}\n}\n```\nThe expected output is\n```\n\t\"difference\": {\n\t\t\t\"2019-08-01T15:20:12\": -0.2\n\t\t\t\"2019-08-01T15:44:12\": -2.6,\n\t\t\t\"2019-08-03T16:20:15\": -3.5,\n\t\t\t\"2019-08-05T12:00:34\": -4.5,\n            \"2019-08-07T11:01:00\":  null  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Float and a Pandas DataFrame is\n```\n{\n\t\"a\": 5.1\n    \"b\": {\n\t\t\t\"first\": {\n                \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"second\": {\n                 \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t}\n}\n```\nThe expected output is\n```\n\t\"difference\": {\n\t\t\t\"first\": {\n                \"2019-08-01T15:20:12\": 3.9,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 4.8,\n\t\t\t\t\"2019-08-05T12:00:34\": 4.6\n             },\n            \"second\": {\n                 \"2019-08-01T15:20:12\": -49.3,\n\t\t\t\t \"2019-08-01T15:44:12\": 0.8,\n\t\t\t\t \"2019-08-03T16:20:15\": -16.9,\n\t\t\t\t \"2019-08-05T12:00:34\": -2.4\n             }\n\t}\n```",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"a\": DataType.Any, \"b\": DataType.Any},\n    outputs={\"difference\": DataType.Any},\n    name=\"Substract\",\n    description=\"Subtracts b from a\",\n    category=\"Basic Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"10d27d69-e999-6654-3cef-427672aeb0fa\",\n    revision_group_id=\"10d27d69-e999-6654-3cef-427672aeb0fa\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.445565+00:00\"\n)\ndef main(*, a, b):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"difference\": (a - b)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "70a510ea-ae96-d1cd-7135-25bc41e65bb6",
          "name": "a",
          "data_type": "ANY"
        },
        {
          "id": "ba67d6e1-4a1a-8a02-0a55-cf8731e01734",
          "name": "b",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "4c60ecbd-35e4-e78c-6569-f4b26365c565",
          "name": "difference",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "50220962-16c0-c94f-8f0a-1e57d76e6878",
    "revision_group_id": "50220962-16c0-c94f-8f0a-1e57d76e6878",
    "name": "Round",
    "description": "Rounds values with specified number of decimals",
    "category": "Basic Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.390855+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Round\n\n## Description\nThis component rounds values with specified number of decimals.\n\n## Inputs\n* **data** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **decimals** (Integer): Number of decimals.\n\n## Outputs\n* **rounded** (Integer, Float, Pandas Series or Pandas DataFrame): Rounded data.\n\n## Details\nThis component rounds values with specified number of decimals.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4.54154,\n\t\t\t\t\"2019-08-01T15:44:12\": -9.4854,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.420,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n                               \"2019-08-07T11:01:00\": 100.1202\n\t},\n\t\"decimals\" = 2\n}\n```\nThe expected output is\n```\n\t\"rounded\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 4.54,\n\t\t\t\t\"2019-08-01T15:44:12\": -9.49,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.42,\n\t\t\t\t\"2019-08-05T12:00:34\": null,\n                               \"2019-08-07T11:01:00\": 100.12\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"decimals\": DataType.Integer},\n    outputs={\"rounded\": DataType.Any},\n    name=\"Round\",\n    description=\"Rounds values with specified number of decimals\",\n    category=\"Basic Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"50220962-16c0-c94f-8f0a-1e57d76e6878\",\n    revision_group_id=\"50220962-16c0-c94f-8f0a-1e57d76e6878\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.390855+00:00\"\n)\ndef main(*, data, decimals):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"rounded\": round(data, decimals)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "af913fee-f47d-7ece-99bb-865d4756b8d4",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "411c4761-1ae8-481f-2e59-f8882c6e044e",
          "name": "decimals",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "1189d4f3-2d77-065b-1416-fe19a0b615ff",
          "name": "rounded",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "6d510037-229e-8e85-56f3-4a3797fdf315",
    "revision_group_id": "6d510037-229e-8e85-56f3-4a3797fdf315",
    "name": "Divide",
    "description": "Divides a by b",
    "category": "Basic Arithmetic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.545293+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Divide\n\n## Description\nThis component divides numeric values, Pandas Series and Pandas DataFrames.\n\n## Inputs\n* **a** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **b** (Integer, Float, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **quotient** (Integer, Float, Pandas Series or Pandas DataFrame): The quotient of a and b. \n\n## Details\nThe component divides a by b. \n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.0,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5,\n                               \"2019-08-07T11:01:00\": 7.8\n\t},\n\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.5,\n\t\t\t\t\"2019-08-01T15:44:12\": 2.6,\n\t\t\t\t\"2019-08-03T16:20:15\": 2.0,\n\t\t\t\t\"2019-08-05T12:00:34\": 1.0    \n\t}\n}\n```\nThe expected output is\n```\n\t\"quotient\": {\n\t\t\t\"2019-08-01T15:20:12\": 2.4,\n\t\t\t\"2019-08-01T15:44:12\": 0.0,\n\t\t\t\"2019-08-03T16:20:15\": 0.15,\n\t\t\t\"2019-08-05T12:00:34\": 0.5,\n                       \"2019-08-07T11:01:00\": null  \n\t}\n\n```\n\nThe json input of a typical call of this component with a Pandas DataFrame and a float is\n```\n{\n    \"a\": {\n\t\t\t\"first\": {\n                               \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"second\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"b\": 2.0\n}\n```\nThe expected output is\n```\n\t\"quotient\": {\n\t\t\t\"first\": {\n                               \"2019-08-01T15:20:12\": 0.6,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.15,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.25\n             },\n            \"second\": {\n                                \"2019-08-01T15:20:12\": 27.2,\n\t\t\t\t \"2019-08-01T15:44:12\": 2.15,\n\t\t\t\t \"2019-08-03T16:20:15\": 10.5,\n\t\t\t\t \"2019-08-05T12:00:34\": 3.75\n             }\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"a\": DataType.Any, \"b\": DataType.Any},\n    outputs={\"quotient\": DataType.Any},\n    name=\"Divide\",\n    description=\"Divides a by b\",\n    category=\"Basic Arithmetic\",\n    version_tag=\"1.0.0\",\n    id=\"6d510037-229e-8e85-56f3-4a3797fdf315\",\n    revision_group_id=\"6d510037-229e-8e85-56f3-4a3797fdf315\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.545293+00:00\"\n)\ndef main(*, a, b):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"quotient\": a / b}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5833be27-ac97-e5cd-3f88-7fa2312401df",
          "name": "a",
          "data_type": "ANY"
        },
        {
          "id": "8b0c3cdf-0eef-967a-8674-ace724adb24a",
          "name": "b",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "17fd03ed-9257-c04c-f5f6-a8cdad3bd5bf",
          "name": "quotient",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "8d61a267-3a71-51cd-2817-48c320469d6b",
    "revision_group_id": "8d61a267-3a71-51cd-2817-48c320469d6b",
    "name": "Univariate Linear RUL Regression",
    "description": "Linear Regression for Remaining Useful Life on univariate timeseries",
    "category": "Remaining Useful Life",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.799634+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Univariate Linear RUL Regression\n\n## Description\nLinear Regression for Remaining Useful Life on univariate timeseries.\n\n## Inputs\n* **num_pred_series_future_days** (Integer): How many days onwards (from last data point) the generated prediction series should reach.\n* **pred_series_frequency** (String): Frequency of the prediction series to generate. For example a value of \"5min\" will generate a value every 5 minutes.\n* **timeseries** (Pandas Series): The input values to train the model. Values should be floats and index should be a datetime index.\n* **limit**: (Float): The limit for RUL, that is the value at which one assumes malfunction to start happening.\n\n## Outputs\n* **intercept** (Float): The intercept of the linear model. The timestamp of the first datapoint of the train input **timeseries** is used here to indicate the x-position of the y axis, i.e., this is the value of the resulting linear model at that timestamp.\n* **slope** (Float): The slope of the linear model.\n* **pred_series** (Pandas Series): A Series of predicted values starting at the timestamp of the first datapoint of **timeseries** and ending at the last timestamp of **timeseries** plus **num_pred_series_future_days** days. This can be used to plot the model prediction.\n* **limit_violation_prediction_timestamp** (String): The timestamp as a String at which the limit will be reached. Note: This can be in the past depending on the data!\n\n## Details\nDo an ordinary linear regression in order to predict remaining useful life. More exactly, this outputs the limit violation timestamp, train model coefficients and a series of prediction values. The remaining useful life can of course then be inferred from the current time and the limit violation timestamp.\n\n## Examples \nThe json input of a typical call of this component is\n```\n{\n\t\"num_pred_series_future_days\": 30,\n\t\"pred_series_frequency\": \"5min\",\n\t\"limit\": 1.3,\n\t\"timeseries\": {\n\t\t    \"2020-05-01T00:00:00.000Z\": 2.5340945967,\n\t\t    \"2020-05-01T01:00:00.000Z\": 2.5658768256,\n\t\t    \"2020-05-01T02:00:00.000Z\": 2.570679579,\n\t\t    \"2020-05-01T03:00:00.000Z\": 2.5618633791,\n\t\t    \"2020-05-01T04:00:00.000Z\": 2.5709272918,\n\t\t    \"2020-05-01T05:00:00.000Z\": 2.5447713467,\n\t\t    \"2020-05-01T06:00:00.000Z\": 2.544863302,\n\t\t    \"2020-05-01T07:00:00.000Z\": 2.5890837968,\n\t\t    \"2020-05-01T08:00:00.000Z\": 2.5646962713,\n\t\t    \"2020-05-01T09:00:00.000Z\": 2.5335594298,\n\t\t    \"2020-05-01T10:00:00.000Z\": 2.5570004281,\n\t\t    \"2020-05-01T11:00:00.000Z\": 2.5279007185,\n\t\t    \"2020-05-01T12:00:00.000Z\": 2.5180691208,\n\t\t    \"2020-05-01T13:00:00.000Z\": 2.5425170109,\n\t\t    \"2020-05-01T14:00:00.000Z\": 2.5193970292,\n\t\t    \"2020-05-01T15:00:00.000Z\": 2.505462918,\n\t\t    \"2020-05-01T16:00:00.000Z\": 2.5569998157,\n\t\t    \"2020-05-01T17:00:00.000Z\": 2.507311926,\n\t\t    \"2020-05-01T18:00:00.000Z\": 2.498353005,\n\t\t    \"2020-05-01T19:00:00.000Z\": 2.546221722,\n\t\t    \"2020-05-01T20:00:00.000Z\": 2.5223358532,\n\t\t    \"2020-05-01T21:00:00.000Z\": 2.4936112195,\n\t\t    \"2020-05-01T22:00:00.000Z\": 2.4929833196,\n\t\t    \"2020-05-01T23:00:00.000Z\": 2.5375547278,\n\t\t    \"2020-05-02T00:00:00.000Z\": 2.5104412318,\n\t\t    \"2020-05-02T01:00:00.000Z\": 2.5113524681,\n\t\t    \"2020-05-02T02:00:00.000Z\": 2.5337742397,\n\t\t    \"2020-05-02T03:00:00.000Z\": 2.5038516369,\n\t\t    \"2020-05-02T04:00:00.000Z\": 2.4963372908,\n\t\t    \"2020-05-02T05:00:00.000Z\": 2.5195275913,\n\t\t    \"2020-05-02T06:00:00.000Z\": 2.4935793186,\n\t\t    \"2020-05-02T07:00:00.000Z\": 2.5164266646,\n\t\t    \"2020-05-02T08:00:00.000Z\": 2.5185465582,\n\t\t    \"2020-05-02T09:00:00.000Z\": 2.5350140943,\n\t\t    \"2020-05-02T10:00:00.000Z\": 2.5117286988,\n\t\t    \"2020-05-02T11:00:00.000Z\": 2.5082871799,\n\t\t    \"2020-05-02T12:00:00.000Z\": 2.5149836071,\n\t\t    \"2020-05-02T13:00:00.000Z\": 2.5028807486,\n\t\t    \"2020-05-02T14:00:00.000Z\": 2.523517088,\n\t\t    \"2020-05-02T15:00:00.000Z\": 2.554328315,\n\t\t    \"2020-05-02T16:00:00.000Z\": 2.4982672405,\n\t\t    \"2020-05-02T17:00:00.000Z\": 2.5212582072,\n\t\t    \"2020-05-02T18:00:00.000Z\": 2.5408671362,\n\t\t    \"2020-05-02T19:00:00.000Z\": 2.534927499,\n\t\t    \"2020-05-02T20:00:00.000Z\": 2.5499492231,\n\t\t    \"2020-05-02T21:00:00.000Z\": 2.506651042,\n\t\t    \"2020-05-02T22:00:00.000Z\": 2.5362261202,\n\t\t    \"2020-05-02T23:00:00.000Z\": 2.5289785015,\n\t\t    \"2020-05-03T00:00:00.000Z\": 2.5439596654,\n\t\t    \"2020-05-03T01:00:00.000Z\": 2.5349408476,\n\t\t    \"2020-05-03T02:00:00.000Z\": 2.4928973472,\n\t\t    \"2020-05-03T03:00:00.000Z\": 2.5235283235,\n\t\t    \"2020-05-03T04:00:00.000Z\": 2.4952145471,\n\t\t    \"2020-05-03T05:00:00.000Z\": 2.5357483131,\n\t\t    \"2020-05-03T06:00:00.000Z\": 2.4875558337,\n\t\t    \"2020-05-03T07:00:00.000Z\": 2.4976392088,\n\t\t    \"2020-05-03T08:00:00.000Z\": 2.4934381565,\n\t\t    \"2020-05-03T09:00:00.000Z\": 2.5499418548,\n\t\t    \"2020-05-03T10:00:00.000Z\": 2.5353427119,\n\t\t    \"2020-05-03T11:00:00.000Z\": 2.5438575598,\n\t\t    \"2020-05-03T12:00:00.000Z\": 2.5477980799,\n\t\t    \"2020-05-03T13:00:00.000Z\": 2.5353353389,\n\t\t    \"2020-05-03T14:00:00.000Z\": 2.490339555,\n\t\t    \"2020-05-03T15:00:00.000Z\": 2.5258760102,\n\t\t    \"2020-05-03T16:00:00.000Z\": 2.4909430024,\n\t\t    \"2020-05-03T17:00:00.000Z\": 2.5418209819,\n\t\t    \"2020-05-03T18:00:00.000Z\": 2.4963330331,\n\t\t    \"2020-05-03T19:00:00.000Z\": 2.4893977942,\n\t\t    \"2020-05-03T20:00:00.000Z\": 2.5157624715,\n\t\t    \"2020-05-03T21:00:00.000Z\": 2.5332988324,\n\t\t    \"2020-05-03T22:00:00.000Z\": 2.5080267414,\n\t\t    \"2020-05-03T23:00:00.000Z\": 2.5110675161,\n\t\t    \"2020-05-04T00:00:00.000Z\": 2.4916789597,\n\t\t    \"2020-05-04T01:00:00.000Z\": 2.4857544538,\n\t\t    \"2020-05-04T02:00:00.000Z\": 2.5523625847,\n\t\t    \"2020-05-04T03:00:00.000Z\": 2.5161945193,\n\t\t    \"2020-05-04T04:00:00.000Z\": 2.5031237636,\n\t\t    \"2020-05-04T05:00:00.000Z\": 2.499693572,\n\t\t    \"2020-05-04T06:00:00.000Z\": 2.5310847546,\n\t\t    \"2020-05-04T07:00:00.000Z\": 2.5294701706,\n\t\t    \"2020-05-04T08:00:00.000Z\": 2.4953251286,\n\t\t    \"2020-05-04T09:00:00.000Z\": 2.5145793132,\n\t\t    \"2020-05-04T10:00:00.000Z\": 2.537795696,\n\t\t    \"2020-05-04T11:00:00.000Z\": 2.5177948972,\n\t\t    \"2020-05-04T12:00:00.000Z\": 2.4771575641,\n\t\t    \"2020-05-04T13:00:00.000Z\": 2.4766223173,\n\t\t    \"2020-05-04T14:00:00.000Z\": 2.4866457947,\n\t\t    \"2020-05-04T15:00:00.000Z\": 2.4773926315,\n\t\t    \"2020-05-04T16:00:00.000Z\": 2.4849491065,\n\t\t    \"2020-05-04T17:00:00.000Z\": 2.4614148496,\n\t\t    \"2020-05-04T18:00:00.000Z\": 2.5140566144,\n\t\t    \"2020-05-04T19:00:00.000Z\": 2.4610181004,\n\t\t    \"2020-05-04T20:00:00.000Z\": 2.5032041998,\n\t\t    \"2020-05-04T21:00:00.000Z\": 2.4602600843,\n\t\t    \"2020-05-04T22:00:00.000Z\": 2.4425060895,\n\t\t    \"2020-05-04T23:00:00.000Z\": 2.4887562624,\n\t\t    \"2020-05-05T00:00:00.000Z\": 2.4587981472,\n\t\t    \"2020-05-05T01:00:00.000Z\": 2.4976287919,\n\t\t    \"2020-05-05T02:00:00.000Z\": 2.4759566315,\n\t\t    \"2020-05-05T03:00:00.000Z\": 2.4983647141,\n\t\t    \"2020-05-05T04:00:00.000Z\": 2.4481869955,\n\t\t    \"2020-05-05T05:00:00.000Z\": 2.4620033756,\n\t\t    \"2020-05-05T06:00:00.000Z\": 2.4722438504,\n\t\t    \"2020-05-05T07:00:00.000Z\": 2.4836028877,\n\t\t    \"2020-05-05T08:00:00.000Z\": 2.4999365634,\n\t\t    \"2020-05-05T09:00:00.000Z\": 2.4590343725,\n\t\t    \"2020-05-05T10:00:00.000Z\": 2.485029072,\n\t\t    \"2020-05-05T11:00:00.000Z\": 2.4832933203,\n\t\t    \"2020-05-05T12:00:00.000Z\": 2.4493189797,\n\t\t    \"2020-05-05T13:00:00.000Z\": 2.4555612652,\n\t\t    \"2020-05-05T14:00:00.000Z\": 2.4331822011,\n\t\t    \"2020-05-05T15:00:00.000Z\": 2.4437542619,\n\t\t    \"2020-05-05T16:00:00.000Z\": 2.4103224236,\n\t\t    \"2020-05-05T17:00:00.000Z\": 2.4599756767,\n\t\t    \"2020-05-05T18:00:00.000Z\": 2.4195711603,\n\t\t    \"2020-05-05T19:00:00.000Z\": 2.4204898355,\n\t\t    \"2020-05-05T20:00:00.000Z\": 2.4271840023,\n\t\t    \"2020-05-05T21:00:00.000Z\": 2.4093728506,\n\t\t    \"2020-05-05T22:00:00.000Z\": 2.4287596847,\n\t\t    \"2020-05-05T23:00:00.000Z\": 2.4502553829,\n\t\t    \"2020-05-06T00:00:00.000Z\": 2.4032112072,\n\t\t    \"2020-05-06T01:00:00.000Z\": 2.4164635616,\n\t\t    \"2020-05-06T02:00:00.000Z\": 2.3964321581,\n\t\t    \"2020-05-06T03:00:00.000Z\": 2.4296400627,\n\t\t    \"2020-05-06T04:00:00.000Z\": 2.4597693405,\n\t\t    \"2020-05-06T05:00:00.000Z\": 2.4051327723,\n\t\t    \"2020-05-06T06:00:00.000Z\": 2.39231384,\n\t\t    \"2020-05-06T07:00:00.000Z\": 2.4227524163,\n\t\t    \"2020-05-06T08:00:00.000Z\": 2.4241047304,\n\t\t    \"2020-05-06T09:00:00.000Z\": 2.383595989,\n\t\t    \"2020-05-06T10:00:00.000Z\": 2.3830219146,\n\t\t    \"2020-05-06T11:00:00.000Z\": 2.391330956,\n\t\t    \"2020-05-06T12:00:00.000Z\": 2.4083971686,\n\t\t    \"2020-05-06T13:00:00.000Z\": 2.4019011994,\n\t\t    \"2020-05-06T14:00:00.000Z\": 2.3741282476,\n\t\t    \"2020-05-06T15:00:00.000Z\": 2.408673447,\n\t\t    \"2020-05-06T16:00:00.000Z\": 2.3888631077,\n\t\t    \"2020-05-06T17:00:00.000Z\": 2.3805006535,\n\t\t    \"2020-05-06T18:00:00.000Z\": 2.4118540536,\n\t\t    \"2020-05-06T19:00:00.000Z\": 2.3915179257,\n\t\t    \"2020-05-06T20:00:00.000Z\": 2.3692830106,\n\t\t    \"2020-05-06T21:00:00.000Z\": 2.4088917478,\n\t\t    \"2020-05-06T22:00:00.000Z\": 2.3724274396,\n\t\t    \"2020-05-06T23:00:00.000Z\": 2.3524618611,\n\t\t    \"2020-05-07T00:00:00.000Z\": 2.3824901899,\n\t\t    \"2020-05-07T01:00:00.000Z\": 2.39644748,\n\t\t    \"2020-05-07T02:00:00.000Z\": 2.4080285331,\n\t\t    \"2020-05-07T03:00:00.000Z\": 2.3540845158,\n\t\t    \"2020-05-07T04:00:00.000Z\": 2.377081574,\n\t\t    \"2020-05-07T05:00:00.000Z\": 2.3825706704,\n\t\t    \"2020-05-07T06:00:00.000Z\": 2.3969814116,\n\t\t    \"2020-05-07T07:00:00.000Z\": 2.3902110487,\n\t\t    \"2020-05-07T08:00:00.000Z\": 2.8876608764,\n\t\t    \"2020-05-07T09:00:00.000Z\": 2.8554512351,\n\t\t    \"2020-05-07T10:00:00.000Z\": 2.9011506947,\n\t\t    \"2020-05-07T11:00:00.000Z\": 2.8739810027,\n\t\t    \"2020-05-07T12:00:00.000Z\": 2.8642327429,\n\t\t    \"2020-05-07T13:00:00.000Z\": 2.8609388862,\n\t\t    \"2020-05-07T14:00:00.000Z\": 2.8691609675,\n\t\t    \"2020-05-07T15:00:00.000Z\": 2.8516302986,\n\t\t    \"2020-05-07T16:00:00.000Z\": 2.8860791586,\n\t\t    \"2020-05-07T17:00:00.000Z\": 2.8417859745,\n\t\t    \"2020-05-07T18:00:00.000Z\": 2.8577750865,\n\t\t    \"2020-05-07T19:00:00.000Z\": 2.861678322,\n\t\t    \"2020-05-07T20:00:00.000Z\": 2.8064804686,\n\t\t    \"2020-05-07T21:00:00.000Z\": 2.8447594889,\n\t\t    \"2020-05-07T22:00:00.000Z\": 2.855936299,\n\t\t    \"2020-05-07T23:00:00.000Z\": 2.8142863343,\n\t\t    \"2020-05-08T00:00:00.000Z\": 2.8373024815,\n\t\t    \"2020-05-08T01:00:00.000Z\": 2.8435283639,\n\t\t    \"2020-05-08T02:00:00.000Z\": 2.8654301284,\n\t\t    \"2020-05-08T03:00:00.000Z\": 2.821334943,\n\t\t    \"2020-05-08T04:00:00.000Z\": 2.8432670041,\n\t\t    \"2020-05-08T05:00:00.000Z\": 2.8557929741,\n\t\t    \"2020-05-08T06:00:00.000Z\": 2.8156375097,\n\t\t    \"2020-05-08T07:00:00.000Z\": 2.855427583,\n\t\t    \"2020-05-08T08:00:00.000Z\": 2.8338698983,\n\t\t    \"2020-05-08T09:00:00.000Z\": 2.8455777397,\n\t\t    \"2020-05-08T10:00:00.000Z\": 2.8302046473,\n\t\t    \"2020-05-08T11:00:00.000Z\": 2.811772505,\n\t\t    \"2020-05-08T12:00:00.000Z\": 2.8327504575,\n\t\t    \"2020-05-08T13:00:00.000Z\": 2.8149162137,\n\t\t    \"2020-05-08T14:00:00.000Z\": 2.8418180107,\n\t\t    \"2020-05-08T15:00:00.000Z\": 2.77624676,\n\t\t    \"2020-05-08T16:00:00.000Z\": 2.7750554183,\n\t\t    \"2020-05-08T17:00:00.000Z\": 2.8217362031,\n\t\t    \"2020-05-08T18:00:00.000Z\": 2.7887413672,\n\t\t    \"2020-05-08T19:00:00.000Z\": 2.8221631708,\n\t\t    \"2020-05-08T20:00:00.000Z\": 2.7607433072,\n\t\t    \"2020-05-08T21:00:00.000Z\": 2.8068503911,\n\t\t    \"2020-05-08T22:00:00.000Z\": 2.8275220851,\n\t\t    \"2020-05-08T23:00:00.000Z\": 2.7854105273,\n\t\t    \"2020-05-09T00:00:00.000Z\": 2.8234034853,\n\t\t    \"2020-05-09T01:00:00.000Z\": 2.7770116762,\n\t\t    \"2020-05-09T02:00:00.000Z\": 2.8169012822,\n\t\t    \"2020-05-09T03:00:00.000Z\": 2.7867158786,\n\t\t    \"2020-05-09T04:00:00.000Z\": 2.7771182754,\n\t\t    \"2020-05-09T05:00:00.000Z\": 2.8149487573,\n\t\t    \"2020-05-09T06:00:00.000Z\": 2.804412661,\n\t\t    \"2020-05-09T07:00:00.000Z\": 2.8110121218,\n\t\t    \"2020-05-09T08:00:00.000Z\": 2.7997556599,\n\t\t    \"2020-05-09T09:00:00.000Z\": 2.827594843,\n\t\t    \"2020-05-09T10:00:00.000Z\": 2.8026913184,\n\t\t    \"2020-05-09T11:00:00.000Z\": 2.7666065452,\n\t\t    \"2020-05-09T12:00:00.000Z\": 2.8146925781,\n\t\t    \"2020-05-09T13:00:00.000Z\": 2.8285910075,\n\t\t    \"2020-05-09T14:00:00.000Z\": 2.819171443,\n\t\t    \"2020-05-09T15:00:00.000Z\": 2.8276060552,\n\t\t    \"2020-05-09T16:00:00.000Z\": 2.786607283,\n\t\t    \"2020-05-09T17:00:00.000Z\": 2.8048391834,\n\t\t    \"2020-05-09T18:00:00.000Z\": 2.8159184436,\n\t\t    \"2020-05-09T19:00:00.000Z\": 2.7891395973,\n\t\t    \"2020-05-09T20:00:00.000Z\": 2.8116468863,\n\t\t    \"2020-05-09T21:00:00.000Z\": 2.7978174856,\n\t\t    \"2020-05-09T22:00:00.000Z\": 2.7989229558,\n\t\t    \"2020-05-09T23:00:00.000Z\": 2.7688699705,\n\t\t    \"2020-05-10T00:00:00.000Z\": 2.8017221595,\n\t\t    \"2020-05-10T01:00:00.000Z\": 2.772552825,\n\t\t    \"2020-05-10T02:00:00.000Z\": 2.7706036817,\n\t\t    \"2020-05-10T03:00:00.000Z\": 2.8012202962,\n\t\t    \"2020-05-10T04:00:00.000Z\": 2.785791312,\n\t\t    \"2020-05-10T05:00:00.000Z\": 2.7742417236,\n\t\t    \"2020-05-10T06:00:00.000Z\": 2.7712404497,\n\t\t    \"2020-05-10T07:00:00.000Z\": 2.8023151587,\n\t\t    \"2020-05-10T08:00:00.000Z\": 2.8038778267,\n\t\t    \"2020-05-10T09:00:00.000Z\": 2.7654629581,\n\t\t    \"2020-05-10T10:00:00.000Z\": 2.7723918403,\n\t\t    \"2020-05-10T11:00:00.000Z\": 2.7758481247,\n\t\t    \"2020-05-10T12:00:00.000Z\": 2.767177124,\n\t\t    \"2020-05-10T13:00:00.000Z\": 2.7656505946,\n\t\t    \"2020-05-10T14:00:00.000Z\": 2.7967909952,\n\t\t    \"2020-05-10T15:00:00.000Z\": 2.7623871484,\n\t\t    \"2020-05-10T16:00:00.000Z\": 2.7634893745,\n\t\t    \"2020-05-10T17:00:00.000Z\": 2.8194647161,\n\t\t    \"2020-05-10T18:00:00.000Z\": 2.770016505,\n\t\t    \"2020-05-10T19:00:00.000Z\": 2.791569751,\n\t\t    \"2020-05-10T20:00:00.000Z\": 2.7731723248,\n\t\t    \"2020-05-10T21:00:00.000Z\": 2.7867953525,\n\t\t    \"2020-05-10T22:00:00.000Z\": 2.779407642,\n\t\t    \"2020-05-10T23:00:00.000Z\": 2.8176463762,\n\t\t    \"2020-05-11T00:00:00.000Z\": 2.7962230453,\n\t\t    \"2020-05-11T01:00:00.000Z\": 2.7806077636,\n\t\t    \"2020-05-11T02:00:00.000Z\": 2.8055549689,\n\t\t    \"2020-05-11T03:00:00.000Z\": 2.7778179322,\n\t\t    \"2020-05-11T04:00:00.000Z\": 2.7663530922,\n\t\t    \"2020-05-11T05:00:00.000Z\": 2.8133794994,\n\t\t    \"2020-05-11T06:00:00.000Z\": 2.8175014886,\n\t\t    \"2020-05-11T07:00:00.000Z\": 2.8094160034,\n\t\t    \"2020-05-11T08:00:00.000Z\": 2.7852624609,\n\t\t    \"2020-05-11T09:00:00.000Z\": 2.7784953118,\n\t\t    \"2020-05-11T10:00:00.000Z\": 2.7841129905,\n\t\t    \"2020-05-11T11:00:00.000Z\": 2.7954359299,\n\t\t    \"2020-05-11T12:00:00.000Z\": 2.7670627932,\n\t\t    \"2020-05-11T13:00:00.000Z\": 2.7513481564,\n\t\t    \"2020-05-11T14:00:00.000Z\": 2.7789241783,\n\t\t    \"2020-05-11T15:00:00.000Z\": 2.7950077875,\n\t\t    \"2020-05-11T16:00:00.000Z\": 2.7340843339,\n\t\t    \"2020-05-11T17:00:00.000Z\": 2.7706471042,\n\t\t    \"2020-05-11T18:00:00.000Z\": 2.7340350929,\n\t\t    \"2020-05-11T19:00:00.000Z\": 2.7857325803,\n\t\t    \"2020-05-11T20:00:00.000Z\": 2.7754412275,\n\t\t    \"2020-05-11T21:00:00.000Z\": 2.7255128288,\n\t\t    \"2020-05-11T22:00:00.000Z\": 2.7736621437,\n\t\t    \"2020-05-11T23:00:00.000Z\": 2.7741544669,\n\t\t    \"2020-05-12T00:00:00.000Z\": 2.7567000156,\n\t\t    \"2020-05-12T01:00:00.000Z\": 2.7286863092,\n\t\t    \"2020-05-12T02:00:00.000Z\": 2.7251265494,\n\t\t    \"2020-05-12T03:00:00.000Z\": 2.7373543428,\n\t\t    \"2020-05-12T04:00:00.000Z\": 2.7232293938,\n\t\t    \"2020-05-12T05:00:00.000Z\": 2.7407298649,\n\t\t    \"2020-05-12T06:00:00.000Z\": 2.7512581857,\n\t\t    \"2020-05-12T07:00:00.000Z\": 2.720196368,\n\t\t    \"2020-05-12T08:00:00.000Z\": 2.7268853219,\n\t\t    \"2020-05-12T09:00:00.000Z\": 2.7248220638,\n\t\t    \"2020-05-12T10:00:00.000Z\": 2.7589560897,\n\t\t    \"2020-05-12T11:00:00.000Z\": 2.7355221787,\n\t\t    \"2020-05-12T12:00:00.000Z\": 2.7154885845,\n\t\t    \"2020-05-12T13:00:00.000Z\": 2.6972396153,\n\t\t    \"2020-05-12T14:00:00.000Z\": 2.6945708743,\n\t\t    \"2020-05-12T15:00:00.000Z\": 2.728854137,\n\t\t    \"2020-05-12T16:00:00.000Z\": 2.741924416,\n\t\t    \"2020-05-12T17:00:00.000Z\": 2.681514517,\n\t\t    \"2020-05-12T18:00:00.000Z\": 2.7359950179,\n\t\t    \"2020-05-12T19:00:00.000Z\": 2.7258032095,\n\t\t    \"2020-05-12T20:00:00.000Z\": 2.7151585953,\n\t\t    \"2020-05-12T21:00:00.000Z\": 2.6768890865,\n\t\t    \"2020-05-12T22:00:00.000Z\": 2.7274083591,\n\t\t    \"2020-05-12T23:00:00.000Z\": 2.6761276008,\n\t\t    \"2020-05-13T00:00:00.000Z\": 2.7166516426,\n\t\t    \"2020-05-13T01:00:00.000Z\": 2.6845210743,\n\t\t    \"2020-05-13T02:00:00.000Z\": 2.7179678993,\n\t\t    \"2020-05-13T03:00:00.000Z\": 2.6928699958,\n\t\t    \"2020-05-13T04:00:00.000Z\": 2.7208969343,\n\t\t    \"2020-05-13T05:00:00.000Z\": 2.6712462796,\n\t\t    \"2020-05-13T06:00:00.000Z\": 2.7076362206,\n\t\t    \"2020-05-13T07:00:00.000Z\": 2.7303837224,\n\t\t    \"2020-05-13T08:00:00.000Z\": 2.7057166449,\n\t\t    \"2020-05-13T09:00:00.000Z\": 2.6738723965,\n\t\t    \"2020-05-13T10:00:00.000Z\": 2.6983200178,\n\t\t    \"2020-05-13T11:00:00.000Z\": 2.7183696993,\n\t\t    \"2020-05-13T12:00:00.000Z\": 2.6584979712,\n\t\t    \"2020-05-13T13:00:00.000Z\": 2.7019644564,\n\t\t    \"2020-05-13T14:00:00.000Z\": 2.6980747823,\n\t\t    \"2020-05-13T15:00:00.000Z\": 2.6837261034,\n\t\t    \"2020-05-13T16:00:00.000Z\": 2.6480272182,\n\t\t    \"2020-05-13T17:00:00.000Z\": 2.6373243943,\n\t\t    \"2020-05-13T18:00:00.000Z\": 2.6789372856,\n\t\t    \"2020-05-13T19:00:00.000Z\": 2.6539083585,\n\t\t    \"2020-05-13T20:00:00.000Z\": 2.6905034117,\n\t\t    \"2020-05-13T21:00:00.000Z\": 2.6637545007,\n\t\t    \"2020-05-13T22:00:00.000Z\": 2.6615138317,\n\t\t    \"2020-05-13T23:00:00.000Z\": 2.6877730651,\n\t\t    \"2020-05-14T00:00:00.000Z\": 2.6778959828,\n\t\t    \"2020-05-14T01:00:00.000Z\": 2.6791458864,\n\t\t    \"2020-05-14T02:00:00.000Z\": 2.6282751287,\n\t\t    \"2020-05-14T03:00:00.000Z\": 2.691481752,\n\t\t    \"2020-05-14T04:00:00.000Z\": 2.6438410933,\n\t\t    \"2020-05-14T05:00:00.000Z\": 2.6446438349,\n\t\t    \"2020-05-14T06:00:00.000Z\": 2.6664778986,\n\t\t    \"2020-05-14T07:00:00.000Z\": 2.6749865152,\n\t\t    \"2020-05-14T08:00:00.000Z\": 2.6197573996,\n\t\t    \"2020-05-14T09:00:00.000Z\": 2.63033336,\n\t\t    \"2020-05-14T10:00:00.000Z\": 2.6196842281,\n\t\t    \"2020-05-14T11:00:00.000Z\": 2.665106046,\n\t\t    \"2020-05-14T12:00:00.000Z\": 2.653752376,\n\t\t    \"2020-05-14T13:00:00.000Z\": 2.6624281378,\n\t\t    \"2020-05-14T14:00:00.000Z\": 2.6601045184,\n\t\t    \"2020-05-14T15:00:00.000Z\": 2.6642180189,\n\t\t    \"2020-05-14T16:00:00.000Z\": 2.6121169417,\n\t\t    \"2020-05-14T17:00:00.000Z\": 2.617543464,\n\t\t    \"2020-05-14T18:00:00.000Z\": 2.6513501098,\n\t\t    \"2020-05-14T19:00:00.000Z\": 2.6522931433,\n\t\t    \"2020-05-14T20:00:00.000Z\": 2.6010705104,\n\t\t    \"2020-05-14T21:00:00.000Z\": 2.6449498766,\n\t\t    \"2020-05-14T22:00:00.000Z\": 2.5983408246,\n\t\t    \"2020-05-14T23:00:00.000Z\": 2.5985499313,\n\t\t    \"2020-05-15T00:00:00.000Z\": 2.6413951229,\n\t\t    \"2020-05-15T01:00:00.000Z\": 2.6424818539,\n\t\t    \"2020-05-15T02:00:00.000Z\": 2.5927885137,\n\t\t    \"2020-05-15T03:00:00.000Z\": 2.6240514022,\n\t\t    \"2020-05-15T04:00:00.000Z\": 2.5925715035,\n\t\t    \"2020-05-15T05:00:00.000Z\": 2.6138055716,\n\t\t    \"2020-05-15T06:00:00.000Z\": 2.5910883652,\n\t\t    \"2020-05-15T07:00:00.000Z\": 2.5769435193,\n\t\t    \"2020-05-15T08:00:00.000Z\": 2.6266156697,\n\t\t    \"2020-05-15T09:00:00.000Z\": 2.6374539388,\n\t\t    \"2020-05-15T10:00:00.000Z\": 2.5787424447,\n\t\t    \"2020-05-15T11:00:00.000Z\": 2.5678192952,\n\t\t    \"2020-05-15T12:00:00.000Z\": 2.6153927681,\n\t\t    \"2020-05-15T13:00:00.000Z\": 2.5853832131,\n\t\t    \"2020-05-15T14:00:00.000Z\": 2.6132661902,\n\t\t    \"2020-05-15T15:00:00.000Z\": 2.5931169794,\n\t\t    \"2020-05-15T16:00:00.000Z\": 2.5833136246,\n\t\t    \"2020-05-15T17:00:00.000Z\": 2.591572653,\n\t\t    \"2020-05-15T18:00:00.000Z\": 2.5957702589,\n\t\t    \"2020-05-15T19:00:00.000Z\": 2.5913523358,\n\t\t    \"2020-05-15T20:00:00.000Z\": 2.601923737,\n\t\t    \"2020-05-15T21:00:00.000Z\": 2.5841345704,\n\t\t    \"2020-05-15T22:00:00.000Z\": 2.5392555788,\n\t\t    \"2020-05-15T23:00:00.000Z\": 2.5391458001,\n\t\t    \"2020-05-16T00:00:00.000Z\": 2.5678552605,\n\t\t    \"2020-05-16T01:00:00.000Z\": 2.5837382437,\n\t\t    \"2020-05-16T02:00:00.000Z\": 2.575568777,\n\t\t    \"2020-05-16T03:00:00.000Z\": 2.5546579073,\n\t\t    \"2020-05-16T04:00:00.000Z\": 2.5788964958,\n\t\t    \"2020-05-16T05:00:00.000Z\": 2.5711382881,\n\t\t    \"2020-05-16T06:00:00.000Z\": 2.5954454415,\n\t\t    \"2020-05-16T07:00:00.000Z\": 2.5547805625,\n\t\t    \"2020-05-16T08:00:00.000Z\": 2.5734597485,\n\t\t    \"2020-05-16T09:00:00.000Z\": 2.5353495222,\n\t\t    \"2020-05-16T10:00:00.000Z\": 2.5712632657,\n\t\t    \"2020-05-16T11:00:00.000Z\": 2.5893826923,\n\t\t    \"2020-05-16T12:00:00.000Z\": 2.5872103903,\n\t\t    \"2020-05-16T13:00:00.000Z\": 2.5923852379,\n\t\t    \"2020-05-16T14:00:00.000Z\": 2.5792818832,\n\t\t    \"2020-05-16T15:00:00.000Z\": 2.5990198819,\n\t\t    \"2020-05-16T16:00:00.000Z\": 2.5778749408,\n\t\t    \"2020-05-16T17:00:00.000Z\": 2.543925516,\n\t\t    \"2020-05-16T18:00:00.000Z\": 2.5972598182,\n\t\t    \"2020-05-16T19:00:00.000Z\": 2.5423908565,\n\t\t    \"2020-05-16T20:00:00.000Z\": 2.5578227224,\n\t\t    \"2020-05-16T21:00:00.000Z\": 2.5858883985,\n\t\t    \"2020-05-16T22:00:00.000Z\": 2.5805623562,\n\t\t    \"2020-05-16T23:00:00.000Z\": 2.5448297192,\n\t\t    \"2020-05-17T00:00:00.000Z\": 2.5491601489,\n\t\t    \"2020-05-17T01:00:00.000Z\": 2.5731124094,\n\t\t    \"2020-05-17T02:00:00.000Z\": 2.5736406969,\n\t\t    \"2020-05-17T03:00:00.000Z\": 2.5626850061,\n\t\t    \"2020-05-17T04:00:00.000Z\": 2.5436138376,\n\t\t    \"2020-05-17T05:00:00.000Z\": 2.5855244367,\n\t\t    \"2020-05-17T06:00:00.000Z\": 2.5701957181,\n\t\t    \"2020-05-17T07:00:00.000Z\": 2.5898424455,\n\t\t    \"2020-05-17T08:00:00.000Z\": 2.5407796698,\n\t\t    \"2020-05-17T09:00:00.000Z\": 2.6043293124,\n\t\t    \"2020-05-17T10:00:00.000Z\": 2.5897971392,\n\t\t    \"2020-05-17T11:00:00.000Z\": 2.591151675,\n\t\t    \"2020-05-17T12:00:00.000Z\": 2.5381999262,\n\t\t    \"2020-05-17T13:00:00.000Z\": 2.5496228887,\n\t\t    \"2020-05-17T14:00:00.000Z\": 2.5541065096,\n\t\t    \"2020-05-17T15:00:00.000Z\": 2.5871030528,\n\t\t    \"2020-05-17T16:00:00.000Z\": 2.6038788497,\n\t\t    \"2020-05-17T17:00:00.000Z\": 2.5506534759,\n\t\t    \"2020-05-17T18:00:00.000Z\": 2.5866884411,\n\t\t    \"2020-05-17T19:00:00.000Z\": 2.5455842598,\n\t\t    \"2020-05-17T20:00:00.000Z\": 2.5487742565,\n\t\t    \"2020-05-17T21:00:00.000Z\": 2.5406442875,\n\t\t    \"2020-05-17T22:00:00.000Z\": 2.5737797011,\n\t\t    \"2020-05-17T23:00:00.000Z\": 2.5390274429,\n\t\t    \"2020-05-18T00:00:00.000Z\": 2.561363499,\n\t\t    \"2020-05-18T01:00:00.000Z\": 2.5911964892,\n\t\t    \"2020-05-18T02:00:00.000Z\": 2.5796647228,\n\t\t    \"2020-05-18T03:00:00.000Z\": 2.5697442187,\n\t\t    \"2020-05-18T04:00:00.000Z\": 2.5946197386,\n\t\t    \"2020-05-18T05:00:00.000Z\": 2.6040066764,\n\t\t    \"2020-05-18T06:00:00.000Z\": 2.5510987719,\n\t\t    \"2020-05-18T07:00:00.000Z\": 2.5467777836,\n\t\t    \"2020-05-18T08:00:00.000Z\": 2.5285608801,\n\t\t    \"2020-05-18T09:00:00.000Z\": 2.5624147864,\n\t\t    \"2020-05-18T10:00:00.000Z\": 2.5722812283,\n\t\t    \"2020-05-18T11:00:00.000Z\": 2.5278309885,\n\t\t    \"2020-05-18T12:00:00.000Z\": 2.5354241218,\n\t\t    \"2020-05-18T13:00:00.000Z\": 2.5589556058,\n\t\t    \"2020-05-18T14:00:00.000Z\": 2.5464946567,\n\t\t    \"2020-05-18T15:00:00.000Z\": 2.5107928288,\n\t\t    \"2020-05-18T16:00:00.000Z\": 2.5077725848,\n\t\t    \"2020-05-18T17:00:00.000Z\": 2.5586393555,\n\t\t    \"2020-05-18T18:00:00.000Z\": 2.5007512067,\n\t\t    \"2020-05-18T19:00:00.000Z\": 2.5039389529,\n\t\t    \"2020-05-18T20:00:00.000Z\": 2.4914330926,\n\t\t    \"2020-05-18T21:00:00.000Z\": 2.5565952434,\n\t\t    \"2020-05-18T22:00:00.000Z\": 2.5287467728,\n\t\t    \"2020-05-18T23:00:00.000Z\": 2.522552616,\n\t\t    \"2020-05-19T00:00:00.000Z\": 2.549253813,\n\t\t    \"2020-05-19T01:00:00.000Z\": 2.556982035,\n\t\t    \"2020-05-19T02:00:00.000Z\": 2.5008039191,\n\t\t    \"2020-05-19T03:00:00.000Z\": 2.4974688627,\n\t\t    \"2020-05-19T04:00:00.000Z\": 2.5190140812,\n\t\t    \"2020-05-19T05:00:00.000Z\": 2.4941905269,\n\t\t    \"2020-05-19T06:00:00.000Z\": 2.5027892972,\n\t\t    \"2020-05-19T07:00:00.000Z\": 2.4878828835,\n\t\t    \"2020-05-19T08:00:00.000Z\": 2.5477026977,\n\t\t    \"2020-05-19T09:00:00.000Z\": 2.5224390682,\n\t\t    \"2020-05-19T10:00:00.000Z\": 2.535521406,\n\t\t    \"2020-05-19T11:00:00.000Z\": 2.5355743475,\n\t\t    \"2020-05-19T12:00:00.000Z\": 2.4792855611,\n\t\t    \"2020-05-19T13:00:00.000Z\": 2.5215776496,\n\t\t    \"2020-05-19T14:00:00.000Z\": 2.5044866209,\n\t\t    \"2020-05-19T15:00:00.000Z\": 2.4703409983,\n\t\t    \"2020-05-19T16:00:00.000Z\": 2.4601050583,\n\t\t    \"2020-05-19T17:00:00.000Z\": 2.4696577071,\n\t\t    \"2020-05-19T18:00:00.000Z\": 2.4938061169,\n\t\t    \"2020-05-19T19:00:00.000Z\": 2.5085306803,\n\t\t    \"2020-05-19T20:00:00.000Z\": 2.4842918727,\n\t\t    \"2020-05-19T21:00:00.000Z\": 2.4808950741,\n\t\t    \"2020-05-19T22:00:00.000Z\": 2.4660397747,\n\t\t    \"2020-05-19T23:00:00.000Z\": 2.4943824127,\n\t\t    \"2020-05-20T00:00:00.000Z\": 2.4817219064,\n\t\t    \"2020-05-20T01:00:00.000Z\": 2.5147926716,\n\t\t    \"2020-05-20T02:00:00.000Z\": 2.470617541,\n\t\t    \"2020-05-20T03:00:00.000Z\": 2.4616569742,\n\t\t    \"2020-05-20T04:00:00.000Z\": 2.4553394116,\n\t\t    \"2020-05-20T05:00:00.000Z\": 2.4874017253,\n\t\t    \"2020-05-20T06:00:00.000Z\": 2.4713692517,\n\t\t    \"2020-05-20T07:00:00.000Z\": 2.442824733,\n\t\t    \"2020-05-20T08:00:00.000Z\": 2.4667143821,\n\t\t    \"2020-05-20T09:00:00.000Z\": 2.4675433882,\n\t\t    \"2020-05-20T10:00:00.000Z\": 2.4729672287,\n\t\t    \"2020-05-20T11:00:00.000Z\": 2.4588428232,\n\t\t    \"2020-05-20T12:00:00.000Z\": 2.447491051,\n\t\t    \"2020-05-20T13:00:00.000Z\": 2.4471712469,\n\t\t    \"2020-05-20T14:00:00.000Z\": 2.4346698167,\n\t\t    \"2020-05-20T15:00:00.000Z\": 2.4578873391,\n\t\t    \"2020-05-20T16:00:00.000Z\": 2.4737688817,\n\t\t    \"2020-05-20T17:00:00.000Z\": 2.44960546,\n\t\t    \"2020-05-20T18:00:00.000Z\": 2.4650394974,\n\t\t    \"2020-05-20T19:00:00.000Z\": 2.4429578423,\n\t\t    \"2020-05-20T20:00:00.000Z\": 2.4125596516,\n\t\t    \"2020-05-20T21:00:00.000Z\": 2.4147819577,\n\t\t    \"2020-05-20T22:00:00.000Z\": 2.4481842665,\n\t\t    \"2020-05-20T23:00:00.000Z\": 2.4224650937,\n\t\t    \"2020-05-21T00:00:00.000Z\": 2.4026664814,\n\t\t    \"2020-05-21T01:00:00.000Z\": 2.466764339,\n\t\t    \"2020-05-21T02:00:00.000Z\": 2.4513187372,\n\t\t    \"2020-05-21T03:00:00.000Z\": 2.458536271,\n\t\t    \"2020-05-21T04:00:00.000Z\": 2.4245890798,\n\t\t    \"2020-05-21T05:00:00.000Z\": 2.4688075588,\n\t\t    \"2020-05-21T06:00:00.000Z\": 2.4405861286,\n\t\t    \"2020-05-21T07:00:00.000Z\": 2.3964599329,\n\t\t    \"2020-05-21T08:00:00.000Z\": 2.435074941,\n\t\t    \"2020-05-21T09:00:00.000Z\": 2.4060865447,\n\t\t    \"2020-05-21T10:00:00.000Z\": 2.4452533621,\n\t\t    \"2020-05-21T11:00:00.000Z\": 2.3889190886,\n\t\t    \"2020-05-21T12:00:00.000Z\": 2.3827470555,\n\t\t    \"2020-05-21T13:00:00.000Z\": 2.3999072124,\n\t\t    \"2020-05-21T14:00:00.000Z\": 2.3811214257,\n\t\t    \"2020-05-21T15:00:00.000Z\": 2.3957512349,\n\t\t    \"2020-05-21T16:00:00.000Z\": 2.367176444,\n\t\t    \"2020-05-21T17:00:00.000Z\": 2.3667989162,\n\t\t    \"2020-05-21T18:00:00.000Z\": 2.4097563074,\n\t\t    \"2020-05-21T19:00:00.000Z\": 2.364553978,\n\t\t    \"2020-05-21T20:00:00.000Z\": 2.3876010939,\n\t\t    \"2020-05-21T21:00:00.000Z\": 2.3854184921,\n\t\t    \"2020-05-21T22:00:00.000Z\": 2.3732121899,\n\t\t    \"2020-05-21T23:00:00.000Z\": 2.3901082352,\n\t\t    \"2020-05-22T00:00:00.000Z\": 2.3737547667,\n\t\t    \"2020-05-22T01:00:00.000Z\": 2.3845882331,\n\t\t    \"2020-05-22T02:00:00.000Z\": 2.3605831468,\n\t\t    \"2020-05-22T03:00:00.000Z\": 2.3828253831,\n\t\t    \"2020-05-22T04:00:00.000Z\": 2.3717004247,\n\t\t    \"2020-05-22T05:00:00.000Z\": 2.3632612577,\n\t\t    \"2020-05-22T06:00:00.000Z\": 2.3792611882,\n\t\t    \"2020-05-22T07:00:00.000Z\": 2.3633100994,\n\t\t    \"2020-05-22T08:00:00.000Z\": 2.3894403828,\n\t\t    \"2020-05-22T09:00:00.000Z\": 2.3584370477,\n\t\t    \"2020-05-22T10:00:00.000Z\": 2.3933310636,\n\t\t    \"2020-05-22T11:00:00.000Z\": 2.3871154084,\n\t\t    \"2020-05-22T12:00:00.000Z\": 2.380782142,\n\t\t    \"2020-05-22T13:00:00.000Z\": 2.3701802855,\n\t\t    \"2020-05-22T14:00:00.000Z\": 2.3835220151,\n\t\t    \"2020-05-22T15:00:00.000Z\": 2.3760978453,\n\t\t    \"2020-05-22T16:00:00.000Z\": 2.3373011628,\n\t\t    \"2020-05-22T17:00:00.000Z\": 2.3382425414,\n\t\t    \"2020-05-22T18:00:00.000Z\": 2.3650870754,\n\t\t    \"2020-05-22T19:00:00.000Z\": 2.3587905078,\n\t\t    \"2020-05-22T20:00:00.000Z\": 2.3215876808,\n\t\t    \"2020-05-22T21:00:00.000Z\": 2.3288642393,\n\t\t    \"2020-05-22T22:00:00.000Z\": 2.3696680585,\n\t\t    \"2020-05-22T23:00:00.000Z\": 2.3575409325,\n\t\t    \"2020-05-23T00:00:00.000Z\": 2.317467971,\n\t\t    \"2020-05-23T01:00:00.000Z\": 2.3163217478,\n\t\t    \"2020-05-23T02:00:00.000Z\": 2.3497703926,\n\t\t    \"2020-05-23T03:00:00.000Z\": 2.3673813145,\n\t\t    \"2020-05-23T04:00:00.000Z\": 2.348324602,\n\t\t    \"2020-05-23T05:00:00.000Z\": 2.3183434648,\n\t\t    \"2020-05-23T06:00:00.000Z\": 2.3177696674,\n\t\t    \"2020-05-23T07:00:00.000Z\": 2.3515651594,\n\t\t    \"2020-05-23T08:00:00.000Z\": 2.3128771772,\n\t\t    \"2020-05-23T09:00:00.000Z\": 2.3163857401,\n\t\t    \"2020-05-23T10:00:00.000Z\": 2.356220498,\n\t\t    \"2020-05-23T11:00:00.000Z\": 2.3230863058,\n\t\t    \"2020-05-23T12:00:00.000Z\": 2.3222366944,\n\t\t    \"2020-05-23T13:00:00.000Z\": 2.3503805409,\n\t\t    \"2020-05-23T14:00:00.000Z\": 2.3635722983,\n\t\t    \"2020-05-23T15:00:00.000Z\": 2.3646286918,\n\t\t    \"2020-05-23T16:00:00.000Z\": 2.3578381079,\n\t\t    \"2020-05-23T17:00:00.000Z\": 2.3176569752,\n\t\t    \"2020-05-23T18:00:00.000Z\": 2.3414491826,\n\t\t    \"2020-05-23T19:00:00.000Z\": 2.331806027,\n\t\t    \"2020-05-23T20:00:00.000Z\": 2.3117808223,\n\t\t    \"2020-05-23T21:00:00.000Z\": 2.3753074369,\n\t\t    \"2020-05-23T22:00:00.000Z\": 2.3113172098,\n\t\t    \"2020-05-23T23:00:00.000Z\": 2.3265853179,\n\t\t    \"2020-05-24T00:00:00.000Z\": 2.3732642937,\n\t\t    \"2020-05-24T01:00:00.000Z\": 2.3680356495,\n\t\t    \"2020-05-24T02:00:00.000Z\": 2.374909295,\n\t\t    \"2020-05-24T03:00:00.000Z\": 2.3493766638,\n\t\t    \"2020-05-24T04:00:00.000Z\": 2.3359450082,\n\t\t    \"2020-05-24T05:00:00.000Z\": 2.37211517,\n\t\t    \"2020-05-24T06:00:00.000Z\": 2.3623120316,\n\t\t    \"2020-05-24T07:00:00.000Z\": 2.3301069077,\n\t\t    \"2020-05-24T08:00:00.000Z\": 2.3729559093,\n\t\t    \"2020-05-24T09:00:00.000Z\": 2.3609485986,\n\t\t    \"2020-05-24T10:00:00.000Z\": 2.3424942096,\n\t\t    \"2020-05-24T11:00:00.000Z\": 2.3197571838,\n\t\t    \"2020-05-24T12:00:00.000Z\": 2.3710370622,\n\t\t    \"2020-05-24T13:00:00.000Z\": 2.3179119157,\n\t\t    \"2020-05-24T14:00:00.000Z\": 2.3416944935,\n\t\t    \"2020-05-24T15:00:00.000Z\": 2.3370203896,\n\t\t    \"2020-05-24T16:00:00.000Z\": 2.3538106751,\n\t\t    \"2020-05-24T17:00:00.000Z\": 2.3291531084,\n\t\t    \"2020-05-24T18:00:00.000Z\": 2.3345230688,\n\t\t    \"2020-05-24T19:00:00.000Z\": 2.3722221681,\n\t\t    \"2020-05-24T20:00:00.000Z\": 2.3386888412,\n\t\t    \"2020-05-24T21:00:00.000Z\": 2.3352960009,\n\t\t    \"2020-05-24T22:00:00.000Z\": 2.362323786,\n\t\t    \"2020-05-24T23:00:00.000Z\": 2.3393720985,\n\t\t    \"2020-05-25T00:00:00.000Z\": 2.3250893285,\n\t\t    \"2020-05-25T01:00:00.000Z\": 2.3335853665,\n\t\t    \"2020-05-25T02:00:00.000Z\": 2.3342798565,\n\t\t    \"2020-05-25T03:00:00.000Z\": 2.355586723,\n\t\t    \"2020-05-25T04:00:00.000Z\": 2.3375514173,\n\t\t    \"2020-05-25T05:00:00.000Z\": 2.3414990313,\n\t\t    \"2020-05-25T06:00:00.000Z\": 2.3436017427,\n\t\t    \"2020-05-25T07:00:00.000Z\": 2.3293509691,\n\t\t    \"2020-05-25T08:00:00.000Z\": 2.3704824342,\n\t\t    \"2020-05-25T09:00:00.000Z\": 2.327739129,\n\t\t    \"2020-05-25T10:00:00.000Z\": 2.3141902095,\n\t\t    \"2020-05-25T11:00:00.000Z\": 2.3037736953,\n\t\t    \"2020-05-25T12:00:00.000Z\": 2.3481850616,\n\t\t    \"2020-05-25T13:00:00.000Z\": 2.3378050724,\n\t\t    \"2020-05-25T14:00:00.000Z\": 2.3519978131,\n\t\t    \"2020-05-25T15:00:00.000Z\": 2.3111453787,\n\t\t    \"2020-05-25T16:00:00.000Z\": 2.3117858997,\n\t\t    \"2020-05-25T17:00:00.000Z\": 2.3437823839,\n\t\t    \"2020-05-25T18:00:00.000Z\": 2.2985355935,\n\t\t    \"2020-05-25T19:00:00.000Z\": 2.2889319628,\n\t\t    \"2020-05-25T20:00:00.000Z\": 2.3141072335,\n\t\t    \"2020-05-25T21:00:00.000Z\": 2.2663323608,\n\t\t    \"2020-05-25T22:00:00.000Z\": 2.2663467487,\n\t\t    \"2020-05-25T23:00:00.000Z\": 2.3139569202,\n\t\t    \"2020-05-26T00:00:00.000Z\": 2.3129660677,\n\t\t    \"2020-05-26T01:00:00.000Z\": 2.2993218542,\n\t\t    \"2020-05-26T02:00:00.000Z\": 2.2902738561,\n\t\t    \"2020-05-26T03:00:00.000Z\": 2.3081958222,\n\t\t    \"2020-05-26T04:00:00.000Z\": 2.2772477378,\n\t\t    \"2020-05-26T05:00:00.000Z\": 2.2833754102,\n\t\t    \"2020-05-26T06:00:00.000Z\": 2.298624666,\n\t\t    \"2020-05-26T07:00:00.000Z\": 2.3208954595,\n\t\t    \"2020-05-26T08:00:00.000Z\": 2.3117240553,\n\t\t    \"2020-05-26T09:00:00.000Z\": 2.2581707124,\n\t\t    \"2020-05-26T10:00:00.000Z\": 2.3074877882,\n\t\t    \"2020-05-26T11:00:00.000Z\": 2.2788177398,\n\t\t    \"2020-05-26T12:00:00.000Z\": 2.28910202,\n\t\t    \"2020-05-26T13:00:00.000Z\": 2.2542432777,\n\t\t    \"2020-05-26T14:00:00.000Z\": 2.2889851565,\n\t\t    \"2020-05-26T15:00:00.000Z\": 2.2558450265,\n\t\t    \"2020-05-26T16:00:00.000Z\": 2.2350560292,\n\t\t    \"2020-05-26T17:00:00.000Z\": 2.2520909581,\n\t\t    \"2020-05-26T18:00:00.000Z\": 2.2404024881,\n\t\t    \"2020-05-26T19:00:00.000Z\": 2.2450243247,\n\t\t    \"2020-05-26T20:00:00.000Z\": 2.2414637677,\n\t\t    \"2020-05-26T21:00:00.000Z\": 2.2549509291,\n\t\t    \"2020-05-26T22:00:00.000Z\": 2.2677979399,\n\t\t    \"2020-05-26T23:00:00.000Z\": 2.2591624133,\n\t\t    \"2020-05-27T00:00:00.000Z\": 2.2643949437,\n\t\t    \"2020-05-27T01:00:00.000Z\": 2.2324029864,\n\t\t    \"2020-05-27T02:00:00.000Z\": 2.2204872979,\n\t\t    \"2020-05-27T03:00:00.000Z\": 2.2671816003,\n\t\t    \"2020-05-27T04:00:00.000Z\": 2.2306875543,\n\t\t    \"2020-05-27T05:00:00.000Z\": 2.2269123244,\n\t\t    \"2020-05-27T06:00:00.000Z\": 2.2200746478,\n\t\t    \"2020-05-27T07:00:00.000Z\": 2.2452332587,\n\t\t    \"2020-05-27T08:00:00.000Z\": 2.2781186957,\n\t\t    \"2020-05-27T09:00:00.000Z\": 2.2682838438,\n\t\t    \"2020-05-27T10:00:00.000Z\": 2.2457983355,\n\t\t    \"2020-05-27T11:00:00.000Z\": 2.2482833103,\n\t\t    \"2020-05-27T12:00:00.000Z\": 2.2440763375,\n\t\t    \"2020-05-27T13:00:00.000Z\": 2.2496754332,\n\t\t    \"2020-05-27T14:00:00.000Z\": 2.2377133006,\n\t\t    \"2020-05-27T15:00:00.000Z\": 2.2295662521,\n\t\t    \"2020-05-27T16:00:00.000Z\": 2.2425895424,\n\t\t    \"2020-05-27T17:00:00.000Z\": 2.1867354651,\n\t\t    \"2020-05-27T18:00:00.000Z\": 2.2163906738,\n\t\t    \"2020-05-27T19:00:00.000Z\": 2.2085768065,\n\t\t    \"2020-05-27T20:00:00.000Z\": 2.2285712981,\n\t\t    \"2020-05-27T21:00:00.000Z\": 2.1805731795,\n\t\t    \"2020-05-27T22:00:00.000Z\": 2.22810313,\n\t\t    \"2020-05-27T23:00:00.000Z\": 2.2138538519,\n\t\t    \"2020-05-28T00:00:00.000Z\": 2.2441786299,\n\t\t    \"2020-05-28T01:00:00.000Z\": 2.1803427779,\n\t\t    \"2020-05-28T02:00:00.000Z\": 2.1992977156,\n\t\t    \"2020-05-28T03:00:00.000Z\": 2.2416509924,\n\t\t    \"2020-05-28T04:00:00.000Z\": 2.2079578008,\n\t\t    \"2020-05-28T05:00:00.000Z\": 2.2354591923,\n\t\t    \"2020-05-28T06:00:00.000Z\": 2.2412756431,\n\t\t    \"2020-05-28T07:00:00.000Z\": 2.1753252775,\n\t\t    \"2020-05-28T08:00:00.000Z\": 2.2150658764,\n\t\t    \"2020-05-28T09:00:00.000Z\": 2.1862375701,\n\t\t    \"2020-05-28T10:00:00.000Z\": 2.2181060672,\n\t\t    \"2020-05-28T11:00:00.000Z\": 2.2245614275,\n\t\t    \"2020-05-28T12:00:00.000Z\": 2.2105838228,\n\t\t    \"2020-05-28T13:00:00.000Z\": 2.1950357091,\n\t\t    \"2020-05-28T14:00:00.000Z\": 2.2175681951,\n\t\t    \"2020-05-28T15:00:00.000Z\": 2.2071353605,\n\t\t    \"2020-05-28T16:00:00.000Z\": 2.1753563139,\n\t\t    \"2020-05-28T17:00:00.000Z\": 2.1543748944,\n\t\t    \"2020-05-28T18:00:00.000Z\": 2.1911450449,\n\t\t    \"2020-05-28T19:00:00.000Z\": 2.1370935896,\n\t\t    \"2020-05-28T20:00:00.000Z\": 2.1732676508,\n\t\t    \"2020-05-28T21:00:00.000Z\": 2.1649085713,\n\t\t    \"2020-05-28T22:00:00.000Z\": 2.1334434498,\n\t\t    \"2020-05-28T23:00:00.000Z\": 2.1373257318,\n\t\t    \"2020-05-29T00:00:00.000Z\": 2.1415503769,\n\t\t    \"2020-05-29T01:00:00.000Z\": 2.1741583417,\n\t\t    \"2020-05-29T02:00:00.000Z\": 2.1300865559,\n\t\t    \"2020-05-29T03:00:00.000Z\": 2.187064251,\n\t\t    \"2020-05-29T04:00:00.000Z\": 2.1513825069,\n\t\t    \"2020-05-29T05:00:00.000Z\": 2.148031209,\n\t\t    \"2020-05-29T06:00:00.000Z\": 2.1331376479,\n\t\t    \"2020-05-29T07:00:00.000Z\": 2.1866245451,\n\t\t    \"2020-05-29T08:00:00.000Z\": 2.1624172082,\n\t\t    \"2020-05-29T09:00:00.000Z\": 2.1499761981,\n\t\t    \"2020-05-29T10:00:00.000Z\": 2.1777404933,\n\t\t    \"2020-05-29T11:00:00.000Z\": 2.1764986815,\n\t\t    \"2020-05-29T12:00:00.000Z\": 2.1468509665,\n\t\t    \"2020-05-29T13:00:00.000Z\": 2.1455738939,\n\t\t    \"2020-05-29T14:00:00.000Z\": 2.1549592857,\n\t\t    \"2020-05-29T15:00:00.000Z\": 2.1269280095,\n\t\t    \"2020-05-29T16:00:00.000Z\": 2.1164827024,\n\t\t    \"2020-05-29T17:00:00.000Z\": 2.1100834923,\n\t\t    \"2020-05-29T18:00:00.000Z\": 2.1519334744,\n\t\t    \"2020-05-29T19:00:00.000Z\": 2.1371329129,\n\t\t    \"2020-05-29T20:00:00.000Z\": 2.1307888009,\n\t\t    \"2020-05-29T21:00:00.000Z\": 2.0880198804,\n\t\t    \"2020-05-29T22:00:00.000Z\": 2.127288623,\n\t\t    \"2020-05-29T23:00:00.000Z\": 2.1287463572,\n\t\t    \"2020-05-30T00:00:00.000Z\": 2.1008850918,\n\t\t    \"2020-05-30T01:00:00.000Z\": 2.1057585274,\n\t\t    \"2020-05-30T02:00:00.000Z\": 2.094936324,\n\t\t    \"2020-05-30T03:00:00.000Z\": 2.1372542762,\n\t\t    \"2020-05-30T04:00:00.000Z\": 2.1179414143,\n\t\t    \"2020-05-30T05:00:00.000Z\": 2.1476393765,\n\t\t    \"2020-05-30T06:00:00.000Z\": 2.1205701259,\n\t\t    \"2020-05-30T07:00:00.000Z\": 2.1262053678,\n\t\t    \"2020-05-30T08:00:00.000Z\": 2.1034287209,\n\t\t    \"2020-05-30T09:00:00.000Z\": 2.1354021483,\n\t\t    \"2020-05-30T10:00:00.000Z\": 2.1334894546,\n\t\t    \"2020-05-30T11:00:00.000Z\": 2.1229640927,\n\t\t    \"2020-05-30T12:00:00.000Z\": 2.1171839151,\n\t\t    \"2020-05-30T13:00:00.000Z\": 2.1067720936,\n\t\t    \"2020-05-30T14:00:00.000Z\": 2.0950818038,\n\t\t    \"2020-05-30T15:00:00.000Z\": 2.1165297234,\n\t\t    \"2020-05-30T16:00:00.000Z\": 2.0956712067,\n\t\t    \"2020-05-30T17:00:00.000Z\": 2.1244171597,\n\t\t    \"2020-05-30T18:00:00.000Z\": 2.1326702003,\n\t\t    \"2020-05-30T19:00:00.000Z\": 2.1150019978,\n\t\t    \"2020-05-30T20:00:00.000Z\": 2.1278116649,\n\t\t    \"2020-05-30T21:00:00.000Z\": 2.0869849234,\n\t\t    \"2020-05-30T22:00:00.000Z\": 2.125263829,\n\t\t    \"2020-05-30T23:00:00.000Z\": 2.1139123953,\n\t\t    \"2020-05-31T00:00:00.000Z\": 2.1152377215,\n\t\t    \"2020-05-31T01:00:00.000Z\": 2.1327071907,\n\t\t    \"2020-05-31T02:00:00.000Z\": 2.1167130658,\n\t\t    \"2020-05-31T03:00:00.000Z\": 2.1544416014,\n\t\t    \"2020-05-31T04:00:00.000Z\": 2.0879369852,\n\t\t    \"2020-05-31T05:00:00.000Z\": 2.1003692503,\n\t\t    \"2020-05-31T06:00:00.000Z\": 2.1174453335,\n\t\t    \"2020-05-31T07:00:00.000Z\": 2.1327697996,\n\t\t    \"2020-05-31T08:00:00.000Z\": 2.1119295366,\n\t\t    \"2020-05-31T09:00:00.000Z\": 2.1069297046,\n\t\t    \"2020-05-31T10:00:00.000Z\": 2.1386254617,\n\t\t    \"2020-05-31T11:00:00.000Z\": 2.1337873369,\n\t\t    \"2020-05-31T12:00:00.000Z\": 2.1320484796,\n\t\t    \"2020-05-31T13:00:00.000Z\": 2.1413517653,\n\t\t    \"2020-05-31T14:00:00.000Z\": 2.1145457701,\n\t\t    \"2020-05-31T15:00:00.000Z\": 2.1302952654,\n\t\t    \"2020-05-31T16:00:00.000Z\": 2.1023544041,\n\t\t    \"2020-05-31T17:00:00.000Z\": 2.0877782935,\n\t\t    \"2020-05-31T18:00:00.000Z\": 2.0851633362,\n\t\t    \"2020-05-31T19:00:00.000Z\": 2.1097252537,\n\t\t    \"2020-05-31T20:00:00.000Z\": 2.0969373432,\n\t\t    \"2020-05-31T21:00:00.000Z\": 2.1420687879,\n\t\t    \"2020-05-31T22:00:00.000Z\": 2.1491158273,\n\t\t    \"2020-05-31T23:00:00.000Z\": 2.124131625,\n\t\t    \"2020-06-01T00:00:00.000Z\": 2.1425570685,\n\t\t    \"2020-06-01T01:00:00.000Z\": 2.1430335317,\n\t\t    \"2020-06-01T02:00:00.000Z\": 2.0961178869,\n\t\t    \"2020-06-01T03:00:00.000Z\": 2.091500574,\n\t\t    \"2020-06-01T04:00:00.000Z\": 2.1289326241,\n\t\t    \"2020-06-01T05:00:00.000Z\": 2.1001815773,\n\t\t    \"2020-06-01T06:00:00.000Z\": 2.0956116776,\n\t\t    \"2020-06-01T07:00:00.000Z\": 2.1276899602,\n\t\t    \"2020-06-01T08:00:00.000Z\": 2.0883829359,\n\t\t    \"2020-06-01T09:00:00.000Z\": 2.1191745956,\n\t\t    \"2020-06-01T10:00:00.000Z\": 2.1359184385,\n\t\t    \"2020-06-01T11:00:00.000Z\": 2.1150058764,\n\t\t    \"2020-06-01T12:00:00.000Z\": 2.1059588226,\n\t\t    \"2020-06-01T13:00:00.000Z\": 2.1100688769,\n\t\t    \"2020-06-01T14:00:00.000Z\": 2.092024714,\n\t\t    \"2020-06-01T15:00:00.000Z\": 2.0816991334,\n\t\t    \"2020-06-01T16:00:00.000Z\": 2.0674233713,\n\t\t    \"2020-06-01T17:00:00.000Z\": 2.0731764502,\n\t\t    \"2020-06-01T18:00:00.000Z\": 2.0602776299,\n\t\t    \"2020-06-01T19:00:00.000Z\": 2.0453738282,\n\t\t    \"2020-06-01T20:00:00.000Z\": 2.0585446903,\n\t\t    \"2020-06-01T21:00:00.000Z\": 2.0987198157,\n\t\t    \"2020-06-01T22:00:00.000Z\": 2.0422762919,\n\t\t    \"2020-06-01T23:00:00.000Z\": 2.1045616634,\n\t\t    \"2020-06-02T00:00:00.000Z\": 2.1073579135,\n\t\t    \"2020-06-02T01:00:00.000Z\": 2.0780935507,\n\t\t    \"2020-06-02T02:00:00.000Z\": 2.0729714237,\n\t\t    \"2020-06-02T03:00:00.000Z\": 2.0573977155,\n\t\t    \"2020-06-02T04:00:00.000Z\": 2.0608699953,\n\t\t    \"2020-06-02T05:00:00.000Z\": 2.0714640979,\n\t\t    \"2020-06-02T06:00:00.000Z\": 2.094514572,\n\t\t    \"2020-06-02T07:00:00.000Z\": 2.1033975554,\n\t\t    \"2020-06-02T08:00:00.000Z\": 2.0476842497,\n\t\t    \"2020-06-02T09:00:00.000Z\": 2.0913142616,\n\t\t    \"2020-06-02T10:00:00.000Z\": 2.0336843467,\n\t\t    \"2020-06-02T11:00:00.000Z\": 2.0383831388,\n\t\t    \"2020-06-02T12:00:00.000Z\": 2.0418092971,\n\t\t    \"2020-06-02T13:00:00.000Z\": 2.0649145453,\n\t\t    \"2020-06-02T14:00:00.000Z\": 2.0512161839,\n\t\t    \"2020-06-02T15:00:00.000Z\": 2.0686642896,\n\t\t    \"2020-06-02T16:00:00.000Z\": 2.0598713812,\n\t\t    \"2020-06-02T17:00:00.000Z\": 2.0219322476,\n\t\t    \"2020-06-02T18:00:00.000Z\": 2.0351501934,\n\t\t    \"2020-06-02T19:00:00.000Z\": 2.0266163426,\n\t\t    \"2020-06-02T20:00:00.000Z\": 2.0644049299,\n\t\t    \"2020-06-02T21:00:00.000Z\": 2.016462477,\n\t\t    \"2020-06-02T22:00:00.000Z\": 2.050952448,\n\t\t    \"2020-06-02T23:00:00.000Z\": 2.0540254954,\n\t\t    \"2020-06-03T00:00:00.000Z\": 2.0210876923,\n\t\t    \"2020-06-03T01:00:00.000Z\": 2.0509779924,\n\t\t    \"2020-06-03T02:00:00.000Z\": 1.9978356372,\n\t\t    \"2020-06-03T03:00:00.000Z\": 2.0218252491,\n\t\t    \"2020-06-03T04:00:00.000Z\": 2.0153880438,\n\t\t    \"2020-06-03T05:00:00.000Z\": 2.0631142101,\n\t\t    \"2020-06-03T06:00:00.000Z\": 2.0265129691,\n\t\t    \"2020-06-03T07:00:00.000Z\": 2.0129508505,\n\t\t    \"2020-06-03T08:00:00.000Z\": 2.0249723556,\n\t\t    \"2020-06-03T09:00:00.000Z\": 2.0305358457,\n\t\t    \"2020-06-03T10:00:00.000Z\": 2.0089213589,\n\t\t    \"2020-06-03T11:00:00.000Z\": 2.0247600939,\n\t\t    \"2020-06-03T12:00:00.000Z\": 1.9836005561,\n\t\t    \"2020-06-03T13:00:00.000Z\": 2.0217152172,\n\t\t    \"2020-06-03T14:00:00.000Z\": 1.9796010588,\n\t\t    \"2020-06-03T15:00:00.000Z\": 1.9818004199,\n\t\t    \"2020-06-03T16:00:00.000Z\": 2.0308196048,\n\t\t    \"2020-06-03T17:00:00.000Z\": 1.9945792697,\n\t\t    \"2020-06-03T18:00:00.000Z\": 1.963538552,\n\t\t    \"2020-06-03T19:00:00.000Z\": 1.974156957,\n\t\t    \"2020-06-03T20:00:00.000Z\": 1.9956456414,\n\t\t    \"2020-06-03T21:00:00.000Z\": 1.9907259797,\n\t\t    \"2020-06-03T22:00:00.000Z\": 1.9962944007,\n\t\t    \"2020-06-03T23:00:00.000Z\": 1.9605906684,\n\t\t    \"2020-06-04T00:00:00.000Z\": 2.0150474252,\n\t\t    \"2020-06-04T01:00:00.000Z\": 1.9720500907,\n\t\t    \"2020-06-04T02:00:00.000Z\": 2.0157201445,\n\t\t    \"2020-06-04T03:00:00.000Z\": 1.9646814322,\n\t\t    \"2020-06-04T04:00:00.000Z\": 1.9730844286,\n\t\t    \"2020-06-04T05:00:00.000Z\": 2.0107599578,\n\t\t    \"2020-06-04T06:00:00.000Z\": 2.0072156705,\n\t\t    \"2020-06-04T07:00:00.000Z\": 2.0048548668,\n\t\t    \"2020-06-04T08:00:00.000Z\": 1.9958200518,\n\t\t    \"2020-06-04T09:00:00.000Z\": 1.9679680676,\n\t\t    \"2020-06-04T10:00:00.000Z\": 1.9793470877,\n\t\t    \"2020-06-04T11:00:00.000Z\": 1.9592617077,\n\t\t    \"2020-06-04T12:00:00.000Z\": 1.9887023322,\n\t\t    \"2020-06-04T13:00:00.000Z\": 1.9344542709,\n\t\t    \"2020-06-04T14:00:00.000Z\": 1.9880870209,\n\t\t    \"2020-06-04T15:00:00.000Z\": 1.9461746893,\n\t\t    \"2020-06-04T16:00:00.000Z\": 1.9825521986,\n\t\t    \"2020-06-04T17:00:00.000Z\": 1.979853137,\n\t\t    \"2020-06-04T18:00:00.000Z\": 1.9343908128,\n\t\t    \"2020-06-04T19:00:00.000Z\": 1.9542340726,\n\t\t    \"2020-06-04T20:00:00.000Z\": 1.9194681724,\n\t\t    \"2020-06-04T21:00:00.000Z\": 1.9475225896,\n\t\t    \"2020-06-04T22:00:00.000Z\": 1.9186403536,\n\t\t    \"2020-06-04T23:00:00.000Z\": 1.9089691019,\n\t\t    \"2020-06-05T00:00:00.000Z\": 1.9347044622,\n\t\t    \"2020-06-05T01:00:00.000Z\": 1.9686426954,\n\t\t    \"2020-06-05T02:00:00.000Z\": 1.9347011013,\n\t\t    \"2020-06-05T03:00:00.000Z\": 1.9123184662,\n\t\t    \"2020-06-05T04:00:00.000Z\": 1.9501929906,\n\t\t    \"2020-06-05T05:00:00.000Z\": 1.9495252168,\n\t\t    \"2020-06-05T06:00:00.000Z\": 1.936373197,\n\t\t    \"2020-06-05T07:00:00.000Z\": 1.9554062787,\n\t\t    \"2020-06-05T08:00:00.000Z\": 1.9487862742,\n\t\t    \"2020-06-05T09:00:00.000Z\": 1.897130141,\n\t\t    \"2020-06-05T10:00:00.000Z\": 1.9151998984,\n\t\t    \"2020-06-05T11:00:00.000Z\": 1.9167378534,\n\t\t    \"2020-06-05T12:00:00.000Z\": 1.9230983108,\n\t\t    \"2020-06-05T13:00:00.000Z\": 1.9058410026,\n\t\t    \"2020-06-05T14:00:00.000Z\": 1.922041465,\n\t\t    \"2020-06-05T15:00:00.000Z\": 1.9168180426,\n\t\t    \"2020-06-05T16:00:00.000Z\": 1.9089082012,\n\t\t    \"2020-06-05T17:00:00.000Z\": 1.8950817099,\n\t\t    \"2020-06-05T18:00:00.000Z\": 1.8881599743,\n\t\t    \"2020-06-05T19:00:00.000Z\": 1.86709386,\n\t\t    \"2020-06-05T20:00:00.000Z\": 1.8847201573,\n\t\t    \"2020-06-05T21:00:00.000Z\": 1.9280194342,\n\t\t    \"2020-06-05T22:00:00.000Z\": 1.8687165683,\n\t\t    \"2020-06-05T23:00:00.000Z\": 1.9175760407,\n\t\t    \"2020-06-06T00:00:00.000Z\": 1.9144149245,\n\t\t    \"2020-06-06T01:00:00.000Z\": 1.9048689942,\n\t\t    \"2020-06-06T02:00:00.000Z\": 1.90828592,\n\t\t    \"2020-06-06T03:00:00.000Z\": 1.9297969376,\n\t\t    \"2020-06-06T04:00:00.000Z\": 1.9149704211,\n\t\t    \"2020-06-06T05:00:00.000Z\": 1.8929761375,\n\t\t    \"2020-06-06T06:00:00.000Z\": 1.8971279541,\n\t\t    \"2020-06-06T07:00:00.000Z\": 1.9263268993,\n\t\t    \"2020-06-06T08:00:00.000Z\": 1.8958174786,\n\t\t    \"2020-06-06T09:00:00.000Z\": 1.8761773916,\n\t\t    \"2020-06-06T10:00:00.000Z\": 1.8660876667,\n\t\t    \"2020-06-06T11:00:00.000Z\": 1.8916842966,\n\t\t    \"2020-06-06T12:00:00.000Z\": 1.9127603337,\n\t\t    \"2020-06-06T13:00:00.000Z\": 1.9011050005,\n\t\t    \"2020-06-06T14:00:00.000Z\": 1.8896462276,\n\t\t    \"2020-06-06T15:00:00.000Z\": 1.8711809414,\n\t\t    \"2020-06-06T16:00:00.000Z\": 1.8916412969,\n\t\t    \"2020-06-06T17:00:00.000Z\": 1.8800334125,\n\t\t    \"2020-06-06T18:00:00.000Z\": 1.8642478045,\n\t\t    \"2020-06-06T19:00:00.000Z\": 1.8957160305,\n\t\t    \"2020-06-06T20:00:00.000Z\": 1.9129895837,\n\t\t    \"2020-06-06T21:00:00.000Z\": 1.8864261351,\n\t\t    \"2020-06-06T22:00:00.000Z\": 1.874593256,\n\t\t    \"2020-06-06T23:00:00.000Z\": 1.8760368949,\n\t\t    \"2020-06-07T00:00:00.000Z\": 1.9109769621,\n\t\t    \"2020-06-07T01:00:00.000Z\": 1.8716809077,\n\t\t    \"2020-06-07T02:00:00.000Z\": 1.9041580864,\n\t\t    \"2020-06-07T03:00:00.000Z\": 1.8750807346,\n\t\t    \"2020-06-07T04:00:00.000Z\": 1.9202575144,\n\t\t    \"2020-06-07T05:00:00.000Z\": 1.8610116065,\n\t\t    \"2020-06-07T06:00:00.000Z\": 1.8945901134,\n\t\t    \"2020-06-07T07:00:00.000Z\": 1.8946142489,\n\t\t    \"2020-06-07T08:00:00.000Z\": 1.8614582248,\n\t\t    \"2020-06-07T09:00:00.000Z\": 1.863572688,\n\t\t    \"2020-06-07T10:00:00.000Z\": 1.9297434778,\n\t\t    \"2020-06-07T11:00:00.000Z\": 1.9187304684,\n\t\t    \"2020-06-07T12:00:00.000Z\": 1.9298306208,\n\t\t    \"2020-06-07T13:00:00.000Z\": 1.8608512867,\n\t\t    \"2020-06-07T14:00:00.000Z\": 1.9118411163,\n\t\t    \"2020-06-07T15:00:00.000Z\": 1.9066744163,\n\t\t    \"2020-06-07T16:00:00.000Z\": 1.9116551009,\n\t\t    \"2020-06-07T17:00:00.000Z\": 1.8828661629,\n\t\t    \"2020-06-07T18:00:00.000Z\": 1.8866379428,\n\t\t    \"2020-06-07T19:00:00.000Z\": 1.8788772036,\n\t\t    \"2020-06-07T20:00:00.000Z\": 1.9042945734,\n\t\t    \"2020-06-07T21:00:00.000Z\": 1.9056594968,\n\t\t    \"2020-06-07T22:00:00.000Z\": 1.8887214568,\n\t\t    \"2020-06-07T23:00:00.000Z\": 1.8835326276,\n\t\t    \"2020-06-08T00:00:00.000Z\": 1.9284506235,\n\t\t    \"2020-06-08T01:00:00.000Z\": 1.9143168494,\n\t\t    \"2020-06-08T02:00:00.000Z\": 1.9007075218,\n\t\t    \"2020-06-08T03:00:00.000Z\": 1.8777673036,\n\t\t    \"2020-06-08T04:00:00.000Z\": 1.8952513778,\n\t\t    \"2020-06-08T05:00:00.000Z\": 1.9264865217,\n\t\t    \"2020-06-08T06:00:00.000Z\": 1.8817259003,\n\t\t    \"2020-06-08T07:00:00.000Z\": 1.921584556,\n\t\t    \"2020-06-08T08:00:00.000Z\": 1.9018817759,\n\t\t    \"2020-06-08T09:00:00.000Z\": 1.859008478,\n\t\t    \"2020-06-08T10:00:00.000Z\": 1.8824316125,\n\t\t    \"2020-06-08T11:00:00.000Z\": 1.8904210058,\n\t\t    \"2020-06-08T12:00:00.000Z\": 1.8955465242,\n\t\t    \"2020-06-08T13:00:00.000Z\": 1.87751679,\n\t\t    \"2020-06-08T14:00:00.000Z\": 1.8580814686,\n\t\t    \"2020-06-08T15:00:00.000Z\": 1.8642935056,\n\t\t    \"2020-06-08T16:00:00.000Z\": 1.8605427948,\n\t\t    \"2020-06-08T17:00:00.000Z\": 1.8785871911,\n\t\t    \"2020-06-08T18:00:00.000Z\": 1.8686244945,\n\t\t    \"2020-06-08T19:00:00.000Z\": 1.8326614693,\n\t\t    \"2020-06-08T20:00:00.000Z\": 1.8783741861,\n\t\t    \"2020-06-08T21:00:00.000Z\": 1.8839774383,\n\t\t    \"2020-06-08T22:00:00.000Z\": 1.8581453184,\n\t\t    \"2020-06-08T23:00:00.000Z\": 1.8737832229,\n\t\t    \"2020-06-09T00:00:00.000Z\": 1.825608836,\n\t\t    \"2020-06-09T01:00:00.000Z\": 1.8419542375,\n\t\t    \"2020-06-09T02:00:00.000Z\": 1.8341249644,\n\t\t    \"2020-06-09T03:00:00.000Z\": 1.8737361118,\n\t\t    \"2020-06-09T04:00:00.000Z\": 1.8373356528,\n\t\t    \"2020-06-09T05:00:00.000Z\": 1.8610829866,\n\t\t    \"2020-06-09T06:00:00.000Z\": 1.8647217478,\n\t\t    \"2020-06-09T07:00:00.000Z\": 1.8542354706,\n\t\t    \"2020-06-09T08:00:00.000Z\": 1.8584044488,\n\t\t    \"2020-06-09T09:00:00.000Z\": 1.8574092583,\n\t\t    \"2020-06-09T10:00:00.000Z\": 1.8314458281,\n\t\t    \"2020-06-09T11:00:00.000Z\": 1.8291249077,\n\t\t    \"2020-06-09T12:00:00.000Z\": 1.794912816,\n\t\t    \"2020-06-09T13:00:00.000Z\": 1.806780492,\n\t\t    \"2020-06-09T14:00:00.000Z\": 1.8515750872,\n\t\t    \"2020-06-09T15:00:00.000Z\": 1.7881377768,\n\t\t    \"2020-06-09T16:00:00.000Z\": 1.782908594,\n\t\t    \"2020-06-09T17:00:00.000Z\": 1.7871490101,\n\t\t    \"2020-06-09T18:00:00.000Z\": 1.7824570591,\n\t\t    \"2020-06-09T19:00:00.000Z\": 1.8381627319,\n\t\t    \"2020-06-09T20:00:00.000Z\": 1.7788963713,\n\t\t    \"2020-06-09T21:00:00.000Z\": 1.8135459458,\n\t\t    \"2020-06-09T22:00:00.000Z\": 1.7706291347,\n\t\t    \"2020-06-09T23:00:00.000Z\": 1.7832814738,\n\t\t    \"2020-06-10T00:00:00.000Z\": 1.7915501526,\n\t\t    \"2020-06-10T01:00:00.000Z\": 1.797562649,\n\t\t    \"2020-06-10T02:00:00.000Z\": 1.810740465,\n\t\t    \"2020-06-10T03:00:00.000Z\": 1.8039826415,\n\t\t    \"2020-06-10T04:00:00.000Z\": 1.8061031814,\n\t\t    \"2020-06-10T05:00:00.000Z\": 1.7798470634,\n\t\t    \"2020-06-10T06:00:00.000Z\": 1.824419133,\n\t\t    \"2020-06-10T07:00:00.000Z\": 1.7714949585,\n\t\t    \"2020-06-10T08:00:00.000Z\": 1.8110842269,\n\t\t    \"2020-06-10T09:00:00.000Z\": 1.7653148984,\n\t\t    \"2020-06-10T10:00:00.000Z\": 1.7642104437,\n\t\t    \"2020-06-10T11:00:00.000Z\": 1.7882945391,\n\t\t    \"2020-06-10T12:00:00.000Z\": 1.7510199158,\n\t\t    \"2020-06-10T13:00:00.000Z\": 1.7602817891,\n\t\t    \"2020-06-10T14:00:00.000Z\": 1.7692896514,\n\t\t    \"2020-06-10T15:00:00.000Z\": 1.7816856687,\n\t\t    \"2020-06-10T16:00:00.000Z\": 1.7726023267,\n\t\t    \"2020-06-10T17:00:00.000Z\": 1.7529701599,\n\t\t    \"2020-06-10T18:00:00.000Z\": 1.7944730908,\n\t\t    \"2020-06-10T19:00:00.000Z\": 1.7959826561,\n\t\t    \"2020-06-10T20:00:00.000Z\": 1.7262595779,\n\t\t    \"2020-06-10T21:00:00.000Z\": 1.7599426932,\n\t\t    \"2020-06-10T22:00:00.000Z\": 1.7942664293,\n\t\t    \"2020-06-10T23:00:00.000Z\": 1.7568792181,\n\t\t    \"2020-06-11T00:00:00.000Z\": 1.7503584801,\n\t\t    \"2020-06-11T01:00:00.000Z\": 1.772818345,\n\t\t    \"2020-06-11T02:00:00.000Z\": 1.7599267103,\n\t\t    \"2020-06-11T03:00:00.000Z\": 1.7543246604,\n\t\t    \"2020-06-11T04:00:00.000Z\": 1.7716360143,\n\t\t    \"2020-06-11T05:00:00.000Z\": 1.7497533172,\n\t\t    \"2020-06-11T06:00:00.000Z\": 1.7296714486,\n\t\t    \"2020-06-11T07:00:00.000Z\": 1.7868207192,\n\t\t    \"2020-06-11T08:00:00.000Z\": 1.7441884421,\n\t\t    \"2020-06-11T09:00:00.000Z\": 1.7268847381,\n\t\t    \"2020-06-11T10:00:00.000Z\": 1.7372780067,\n\t\t    \"2020-06-11T11:00:00.000Z\": 1.7531690232,\n\t\t    \"2020-06-11T12:00:00.000Z\": 1.7563962807,\n\t\t    \"2020-06-11T13:00:00.000Z\": 1.7337006137,\n\t\t    \"2020-06-11T14:00:00.000Z\": 1.7567559875,\n\t\t    \"2020-06-11T15:00:00.000Z\": 1.7314396428\n\t}\n}\n```\n\n\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport datetime\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n\ndef rul_regression_linear(\n    train_series: pd.Series,\n    limit: float,\n    num_pred_series_future_days: int,\n    pred_series_frequency: str = \"min\",\n):\n    \"\"\"Linear Regression for univariate Remaining Useful Life (RUL) prediction\n    \n    train-series: pd.Series with datetime index and float values. The input data to train\n        the regression model.\n    limit: the limit value against which rul should be made.\n    \n    returns: Tuple (pred_y, timestamp_limit_reached, intercept, slope)\n    \"\"\"\n\n    train_x_vals = pd.Series(train_series.index, index=train_series.index)\n\n    min_timestamp, max_timestamp = train_x_vals.min(), train_x_vals.max()\n\n    train_x_diffs = (\n        train_x_vals - min_timestamp\n    )  # time_deltas to chronologically first timestamp\n\n    lg = LinearRegression()\n    lg.fit(\n        train_x_diffs.dt.total_seconds().values.reshape(-1, 1),\n        train_series.values.reshape(-1, 1),\n    )\n    intercept, slope = lg.intercept_[0], lg.coef_[0]\n\n    max_timestamp_preds = max_timestamp + datetime.timedelta(\n        days=num_pred_series_future_days\n    )\n    pred_x_vals = pd.date_range(\n        start=min_timestamp, end=max_timestamp_preds, freq=pred_series_frequency\n    )\n    pred_x_diffs = pd.Series(pred_x_vals - min_timestamp)\n    pred_y = pd.Series(\n        lg.predict(pred_x_diffs.dt.total_seconds().values.reshape(-1, 1)).reshape(\n            1, -1\n        )[0],\n        index=pred_x_vals,\n    )\n\n    if slope == 0:\n        limit_reached_secs_from_min_timestamp = None\n    else:\n\n        limit_reached_secs_from_min_timestamp = ((limit - intercept) / slope)[0]\n\n    if limit_reached_secs_from_min_timestamp is not None:\n        timestamp_limit_reached = min_timestamp + datetime.timedelta(\n            seconds=limit_reached_secs_from_min_timestamp\n        )\n    else:\n        timestamp_limit_reached = pd.NaT\n    return pred_y, timestamp_limit_reached, intercept, slope\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"num_pred_series_future_days\": DataType.Integer, \"pred_series_frequency\": DataType.String, \"timeseries\": DataType.Series, \"limit\": DataType.Float},\n    outputs={\"intercept\": DataType.Float, \"slope\": DataType.Float, \"pred_series\": DataType.Series, \"limit_violation_prediction_timestamp\": DataType.String},\n    name=\"Univariate Linear RUL Regression\",\n    description=\"Linear Regression for Remaining Useful Life on univariate timeseries\",\n    category=\"Remaining Useful Life\",\n    version_tag=\"1.0.0\",\n    id=\"8d61a267-3a71-51cd-2817-48c320469d6b\",\n    revision_group_id=\"8d61a267-3a71-51cd-2817-48c320469d6b\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.799634+00:00\"\n)\ndef main(*, num_pred_series_future_days, pred_series_frequency, timeseries, limit):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    pred_y, timestamp_limit_reached, intercept, slope = rul_regression_linear(\n        timeseries, limit, num_pred_series_future_days, pred_series_frequency\n    )\n    return {\n        \"pred_series\": pred_y,\n        \"intercept\": intercept,\n        \"slope\": slope,\n        \"limit_violation_prediction_timestamp\": timestamp_limit_reached.to_pydatetime().isoformat()\n        if timestamp_limit_reached != pd.NaT\n        else None,\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "278dc2d7-73da-3c38-a1ad-ea7d186ac887",
          "name": "num_pred_series_future_days",
          "data_type": "INT"
        },
        {
          "id": "425f3ef8-e7ae-6ba9-c2c1-dcc594b3c61a",
          "name": "pred_series_frequency",
          "data_type": "STRING"
        },
        {
          "id": "c482c011-a393-ff58-67d6-c4caec939083",
          "name": "timeseries",
          "data_type": "SERIES"
        },
        {
          "id": "6c78164c-2fa7-90d0-bfbd-a09a571046b5",
          "name": "limit",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "cf404526-75de-f1ff-f961-200e99dde8d6",
          "name": "intercept",
          "data_type": "FLOAT"
        },
        {
          "id": "1828c68d-c5c9-f31a-f2e9-3493409f53ed",
          "name": "slope",
          "data_type": "FLOAT"
        },
        {
          "id": "2ac7a056-8d7c-b5a7-f35a-d3676a77afbf",
          "name": "pred_series",
          "data_type": "SERIES"
        },
        {
          "id": "9643ae27-3cb4-f5a7-886d-5865d206486c",
          "name": "limit_violation_prediction_timestamp",
          "data_type": "STRING"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "d48ce6ad-05ab-8bc1-fb79-c1960966f595",
    "revision_group_id": "d48ce6ad-05ab-8bc1-fb79-c1960966f595",
    "name": "Resample Datetime Index using Mean",
    "description": "Resamples data for some time frequency by taking means",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.870763+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Resample Datetime Index using Mean\n\n## Description\nThe component resamples data for some time frequency by taking mean values.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetime.\n* **t** (String): The distance between the new indices. For example, 'ms', '15s', 'min', '2h' or 'd'.\n\n## Outputs\n* **resampled** (Pandas Series or Pandas DataFrame): The resampled **data**.\n\n## Details\nThe component resamples **data**. It creates a Pandas Series or Pandas DataFrame with indices in the range of the indices of **data** with the distance t. \n\nIt equippes each index with the average numerical observations in a window of size **t**.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n                \"2019-08-01T00:00:00\": 1.2,\n                \"2019-08-01T15:20:14\": 7.2,\n                \"2019-08-03T00:00:00\": 0.3,\n                \"2019-08-04T15:20:20\": 0.5,\n\t}, \n\t\"t\": \"d\"\n}\n```\nThe expected output is\n```\n\t\"resampled\": {\n\t\t\t\t\"2019-08-01T00:00:00\": 4.2,\n                \"2019-08-02T00:00:00\": null,\n\t\t\t\t\"2019-08-03T00:00:00\": 0.3,\n                \"2019-08-04T00:00:00\": 0.5\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"resampled\": DataType.Any},\n    name=\"Resample Datetime Index using Mean\",\n    description=\"Resamples data for some time frequency by taking means\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"d48ce6ad-05ab-8bc1-fb79-c1960966f595\",\n    revision_group_id=\"d48ce6ad-05ab-8bc1-fb79-c1960966f595\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.870763+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_date = data.copy()\n    try:\n        data_date.index = pd.to_datetime(data_date.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    if not data.index.is_monotonic:\n        raise ValueError(\"data must be sorted by its index\")\n\n    try:\n        return {\"resampled\": data_date.resample(t).mean()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
    "io_interface": {
      "inputs": [
        {
          "id": "91665fc2-6659-125d-f49a-1d9b75f1fb07",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "1424f6f5-9c49-3d96-efb0-6fd65677715c",
          "name": "t",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "f676827a-3f35-c06e-e111-5ecf3ff0a312",
          "name": "resampled",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "64d61740-f520-492f-ffa7-485916fc973c",
    "revision_group_id": "64d61740-f520-492f-ffa7-485916fc973c",
    "name": "Shift Datetime Index",
    "description": "Shift index by desired frequency",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.122243+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Shift Datetime Index\n\n## Description\nThis component shifts the indices of some data by the desired frequency and number of periods.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Index must be datetime.\n* **frequency** (String): Frequency, the data should be shifted. For example 'ms', '3s', 'min', '2h' or 'd'.\n* **periods** (Integer): Positive or negative number of periods to shift.\n\n## Outputs\n* **shifted** (Pandas Seriesor Pandas DataFrame): Shifted **data**.\n\n## Details\nThis component shifts the indices of **data** by the desired frequency and number of periods. \n\n## Examples\nThe json input of a typical call of this component, shifting index of data by 2 days is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-02T15:20:15\": 7.0,\n\t\t\t\t\"2019-08-04T15:19:20\": 5.0,\n\t},\n\t\"frequency\" = \"d\"\n\t\"periods\": 2\n}\n```\nThe expected output is\n```\n\t\"shifted\": {\n\t\t\t\t\"2019-08-03T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-04T15:20:15\": 7.0,\n\t\t\t\t\"2019-08-06T15:19:20\": 5.0,\n\t}\n```\n\nThe json input of a call of this component with the same data, shifting index of data -1 minute\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-03T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-04T15:20:15\": 7.0,\n\t\t\t\t\"2019-08-06T15:19:20\": 5.0,\n\t},\n\t\"periods\": -1\n}\n```\nThe expected output is\n```\n\t\"shifted\": {\n\t\t\t\t\"2019-08-03T15:19:00\": 1.0,\n\t\t\t\t\"2019-08-04T15:19:15\": 7.0,\n\t\t\t\t\"2019-08-06T15:18:20\": 5.0,\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"frequency\": DataType.String, \"periods\": DataType.Integer},\n    outputs={\"shifted\": DataType.Any},\n    name=\"Shift Datetime Index\",\n    description=\"Shift index by desired frequency\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"64d61740-f520-492f-ffa7-485916fc973c\",\n    revision_group_id=\"64d61740-f520-492f-ffa7-485916fc973c\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.122243+00:00\"\n)\ndef main(*, data, frequency, periods):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    shifted = data.copy()\n    shifted.index = shifted.index.shift(periods=periods, freq=frequency)\n    return {\"shifted\": shifted}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "ec081b95-17ab-0c57-77ca-99f7de7d7869",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "3faa780e-23e1-5dc8-2bb3-d44b979e20af",
          "name": "frequency",
          "data_type": "STRING"
        },
        {
          "id": "02cfb5fc-41ad-dbf5-13b6-1750b1187632",
          "name": "periods",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "b86f4465-814e-0c5e-967d-dd2ba844bbfa",
          "name": "shifted",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "c587ced1-7841-4208-8f88-9a9bd6a28f20",
    "revision_group_id": "3b838621-8d8e-493a-a91a-5a7680385ed9",
    "name": "Add Timedelta to Index",
    "description": "Add a timedelta to the index of a frame or series",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-12-14T13:05:39.748501+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Add Timedelta to Index\n\n## Description\nThis component adds the provided timedelta to each of the indices of the provided dataframe or series.\n\n## Inputs\n* **df_or_series** (Any): Both dataframe and series are accepted, the indices must be datetimes.\n* **timedelta** (String): Timedelta to be added (may be negative) to each of the indices, e.g. '3s', '-1min', or '2days'.\n\n## Outputs\n* **df_or_series** (Any): Dataframe or series same as the input just with the provided timedelta added to each of the indices.\n\n## Details\nThis component adds the provided timedelta to each of the indices of the provided dataframe or series. \n\n## Examples\nThe json input of a typical call of this component, adding a timedelta of 2 days to each of the indices is\n```\n{\n\t\"df_or_series\": {\n\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\"2019-08-02T15:20:15\": 7.0,\n\t\t\"2019-08-04T15:19:20\": 5.0\n\t},\n\t\"timedelta\": \"2days\"\n}\n```\nThe expected output is\n```\n\t\"df_or_series\": {\n\t\t\"2019-08-03T15:20:00\": 1.0,\n\t\t\"2019-08-04T15:20:15\": 7.0,\n\t\t\"2019-08-06T15:19:20\": 5.0\n\t}\n```\n\nThe json input of a call of this component with the same series, adding a timedelta of -1 minute\n```\n{\n\t\"df_or_series\": {\n\t\t\"2019-08-03T15:20:00\": 1.0,\n\t\t\"2019-08-04T15:20:15\": 7.0,\n\t\t\"2019-08-06T15:19:20\": 5.0\n\t},\n\t\"timedelta\": \"-1min\"\n}\n```\nThe expected output is\n```\n\t\"df_or_series\": {\n\t\t\"2019-08-03T15:19:00\": 1.0,\n\t\t\"2019-08-04T15:19:15\": 7.0,\n\t\t\"2019-08-06T15:18:20\": 5.0\n\t}\n```\n",
    "content": "\"\"\" Module Docsting: Documentation for \"Add Timedelta to Index\"\n\n# Add Timedelta to Index\n\n## Description\nThis component adds the provided timedelta to each of the indices of the provided dataframe or series.\n\n## Inputs\n* **df_or_series** (Any): Both dataframe and series are accepted, the indices must be datetimes.\n* **timedelta** (String): Timedelta to be added (may be negative) to each of the indices, e.g. '3s', '-1min', or '2days'.\n\n## Outputs\n* **df_or_series** (Any): Dataframe or series same as the input just with the provided timedelta added to each of the indices.\n\n## Details\nThis component adds the provided timedelta to each of the indices of the provided dataframe or series. \n\n## Examples\nThe json input of a typical call of this component, adding a timedelta of 2 days to each of the indices is\n```\n{\n\t\"df_or_series\": {\n\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\"2019-08-02T15:20:15\": 7.0,\n\t\t\"2019-08-04T15:19:20\": 5.0\n\t},\n\t\"timedelta\": \"2days\"\n}\n```\nThe expected output is\n```\n\t\"df_or_series\": {\n\t\t\"2019-08-03T15:20:00\": 1.0,\n\t\t\"2019-08-04T15:20:15\": 7.0,\n\t\t\"2019-08-06T15:19:20\": 5.0\n\t}\n```\n\nThe json input of a call of this component with the same series, adding a timedelta of -1 minute\n```\n{\n\t\"df_or_series\": {\n\t\t\"2019-08-03T15:20:00\": 1.0,\n\t\t\"2019-08-04T15:20:15\": 7.0,\n\t\t\"2019-08-06T15:19:20\": 5.0\n\t},\n\t\"timedelta\": \"-1min\"\n}\n```\nThe expected output is\n```\n\t\"df_or_series\": {\n\t\t\"2019-08-03T15:19:00\": 1.0,\n\t\t\"2019-08-04T15:19:15\": 7.0,\n\t\t\"2019-08-06T15:18:20\": 5.0\n\t}\n```\n\n\"\"\"\n\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"df_or_series\": DataType.Any, \"timedelta\": DataType.String},\n    outputs={\"df_or_series\": DataType.Any},\n    name=\"Add Timedelta to Index\",\n    description=\"Add a timedelta to the index of a frame or series\",\n    category=\"Time length operations\",\n    id=\"c587ced1-7841-4208-8f88-9a9bd6a28f20\",\n    revision_group_id=\"3b838621-8d8e-493a-a91a-5a7680385ed9\",\n    version_tag=\"1.0.0\"\n)\ndef main(*, df_or_series, timedelta):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    \"\"\" Usage example:\n    >>> main(\n    ...     df_or_series=pd.Series(\n    ...             [10.0, 22.0, 18.0, 2.0],   \n    ...             index=pd.to_datetime([\"2019-08-01T15:20:10\", \"2019-08-01T15:20:11\", \"2019-08-01T15:20:14\", \"2019-08-01T15:20:16\"])\n    ...     ),\n    ...     timedelta = \"-4s\",\n    ... )[\"df_or_series\"]\n    2019-08-01 15:20:06    10.0\n    2019-08-01 15:20:07    22.0\n    2019-08-01 15:20:10    18.0\n    2019-08-01 15:20:12     2.0\n    dtype: float64\n    \"\"\"\n    # write your function code here.\n    df_or_series = pd.DataFrame.from_dict(df_or_series, orient=\"index\")\n    df_or_series.index = pd.to_datetime(df_or_series.index)\n    if df_or_series.columns.size < 2:\n        df_or_series = df_or_series.squeeze(\"columns\")\n    new_index = df_or_series.index + pd.Timedelta(timedelta)\n    df_or_series.index = new_index\n    return {\"df_or_series\": df_or_series}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "eb2945f3-5099-3bdd-5a56-dc5302b6f593",
          "name": "df_or_series",
          "data_type": "ANY"
        },
        {
          "id": "13ebeae2-65f7-1903-6315-3abe3ba73eb3",
          "name": "timedelta",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "c5042c41-c7fa-0857-9ffc-818f1aca71a2",
          "name": "df_or_series",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "8b8046ec-0817-e314-936c-08e8c5116ef5",
    "revision_group_id": "8b8046ec-0817-e314-936c-08e8c5116ef5",
    "name": "Count level crossings",
    "description": "Count the level crossings of the input data",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.070091+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Count level crossings\n\n## Description\nThis component counts the level crossings of the input data.\n\n## Inputs\n* **data** (Pandas Series): Entries must be numeric.\n* **level** (Float): Center of the hysteresis-area.\n* **hysteresis** (Float): Width of the tolarance window around **level**, must be non-negative. \n* **edge_type** (Float): Input for deciding which type of edges should be counted. Values greater than 0 count ascending level crossings, values smaller than 0 count descending level crossings and equal to 0 all level crossings, respectively.\n\n## Outputs\n* **result** (Pandas Series): Series with the number of existing level crossings at the suitable index of data.\n\n## Details\nThe component counts the level crossings of the given **data**. If the index of data is datetime or numeric, data will be sorted first. \n\nThe input **hysteresis** can be used to define a window of tolerance around the input **level**. For example, if level is 5 and hysteresis is 2, values between 4 and 6 will be tolerated. \n\nThe input **edge_type** defines which kind of level crossings will be counted. Values greater than 0 will count ascending level crossings, values smaller than 0 descending level crossings and the value 0 all level crossings, respectively.\nIn the given example with edge_type 1, a change from 0 to 10 will be counted as level crossing. If the edge_type is -1, the same change will not be counted.\n\n\n## Examples\nThe json input of a typical call of this component, counting all level crossings is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 7.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 5.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 4.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 5.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 8.0,\n\t},\n\t\"level\": 5,\n\t\"hysteresis\": 2,\n\t\"edge_type\": 0\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 2.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 2.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 3.0,\n\t}\n```\n\nThe json input of a call of this component with the same data, counting ascending level crossings is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 7.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 5.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 4.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 2.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 5.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 8.0,\n\t}\n\t\"level\": 5\n\t\"hysteresis\": 2\n\t\"edge_type\": 1\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 0.0,\n\t\t\t\t\"2019-08-01T15:20:10\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:20\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:30\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:40\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:50\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:21:10\": 2.0,\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series, \"level\": DataType.Float, \"hysteresis\": DataType.Float, \"edge_type\": DataType.Float},\n    outputs={\"result\": DataType.Series},\n    name=\"Count level crossings\",\n    description=\"Count the level crossings of the input data\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"8b8046ec-0817-e314-936c-08e8c5116ef5\",\n    revision_group_id=\"8b8046ec-0817-e314-936c-08e8c5116ef5\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.070091+00:00\"\n)\ndef main(*, data, level, hysteresis, edge_type):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if data.size < 2:\n        raise ValueError(f\"length of data must be greater than 1, it is {data.size}\")\n\n    if hysteresis < 0:\n        raise ValueError(f\"hysteresis must be non-negative, it is {hysteresis}\")\n\n    if not data.index.is_monotonic:\n        raise ValueError(\"data must be sorted by its index\")\n\n    tolerance = hysteresis / 2\n\n    crossings = (data > (level + tolerance)).astype(\"int64\") - (\n        data < (level - tolerance)\n    ).astype(\"int64\")\n    crossings = crossings[crossings != 0]\n\n    crossings.values[1:] = np.diff(crossings) / 2\n    crossings = crossings[1:]\n\n    if edge_type > 0:\n        crossings = crossings[crossings == 1]\n    elif edge_type < 0:\n        crossings = crossings[crossings == -1] / (-1)\n    else:\n        crossings = np.abs(crossings).fillna(0)\n        crossings = crossings[crossings != 0]\n\n    crossings = crossings.cumsum()\n    crossings = crossings.reindex(data.index)\n    crossings[0] = 0\n\n    return {\"result\": crossings.fillna(method=\"pad\").astype(\"int64\")}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "a0f3bca5-399d-62b1-ff44-073e7078047b",
          "name": "data",
          "data_type": "SERIES"
        },
        {
          "id": "bf6756a7-4f17-65e7-c596-20b4fbbafd7b",
          "name": "level",
          "data_type": "FLOAT"
        },
        {
          "id": "63620c80-9031-c0ac-a486-3b79d12d5385",
          "name": "hysteresis",
          "data_type": "FLOAT"
        },
        {
          "id": "4056d458-506e-9e1a-9d22-dc360d8c9284",
          "name": "edge_type",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "05d07635-bf66-9dea-3bcb-0d87e2ed02db",
          "name": "result",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "66811a16-65e6-ad80-ce1d-669f97d06d16",
    "revision_group_id": "66811a16-65e6-ad80-ce1d-669f97d06d16",
    "name": "Shift Values",
    "description": "Shift index by desired number of periods",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.018360+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Shift values\n\n## Description\nThis component shifts the values of some data by the desired number of periods.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Data that should be shifted.\n* **periods** (Integer): Positive or negative number of periods to shift.\n\n## Outputs\n* **shifted** (Pandas Series or Pandas DataFrame): Shifted **data**.\n\n## Details\nThis component shifts the values of **data** by the desired number of **periods**. \n\n## Examples\nThe json input of a typical call of this component, shifting the values of data by 2 periods is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:01\": 7.0,\n\t\t\t\t\"2019-08-01T15:20:02\": 5.0,\n\t},\n\t\"periods\": 2\n}\n```\nThe expected output is\n```\n\t\"shifted\": {\n\t\t\t\t\"2019-08-01T15:20:00\": null,\n\t\t\t\t\"2019-08-01T15:20:01\": null,\n\t\t\t\t\"2019-08-01T15:20:02\": 1.0,\n\t}\n```\n\nThe json input of a call of this component with the same data, shifting the values of data -1 period is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:01\": 7.0,\n\t\t\t\t\"2019-08-01T15:20:02\": 5.0,\n\t},\n\t\"periods\": -1\n}\n```\nThe expected output is\n```\n\t\"shifted\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 7.0,\n\t\t\t\t\"2019-08-01T15:20:01\": 5.0,\n\t\t\t\t\"2019-08-01T15:20:02\": null,\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"periods\": DataType.Integer},\n    outputs={\"shifted\": DataType.Any},\n    name=\"Shift Values\",\n    description=\"Shift index by desired number of periods\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"66811a16-65e6-ad80-ce1d-669f97d06d16\",\n    revision_group_id=\"66811a16-65e6-ad80-ce1d-669f97d06d16\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.018360+00:00\"\n)\ndef main(*, data, periods):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"shifted\": data.shift(periods)}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "ca00677e-b8f3-512d-96d8-9d38ce9efc29",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "990dbc08-f31e-91c3-22cf-d4fb24bfac6d",
          "name": "periods",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "85045ebb-ca42-ef79-9142-004835f3acd1",
          "name": "shifted",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "015d7a72-f9c3-8a14-dde8-3aa59b2e9f10",
    "revision_group_id": "015d7a72-f9c3-8a14-dde8-3aa59b2e9f10",
    "name": "Resample Numeric Index using Mean",
    "description": "Resamples data with given distances using mean",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.096634+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Resample Numeric Index\n\n## Description\nThe component resamples data with given distances using mean.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be Integer, entries numeric.\n* **d** (Integer): The distance between the new indices.\n\n## Outputs\n* **resampled** (Pandas Series or Pandas DataFrame): The resampled **data**.\n\n## Details\nThe component resamples **data** using means on windows. It creates a Pandas Series or Pandas DataFrame with indices in the range of the indices of data with distance **d**.\n\nIt equips each index with the average of the numerical observations in a window of size **d** around.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n                2: 1.2,\n                3: 7.2,\n                5: 2.8,\n                6: 8.0,\n\t\t\t\t9: 10.8\n\t}, \n\t\"d\": 3\n}\n```\nThe expected output is\n```\n\t\"resampled\": {\n\t\t\t\t2: 4.2,\n                5: 6.0,\n                8: 9.4\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"d\": DataType.Integer},\n    outputs={\"resampled\": DataType.Any},\n    name=\"Resample Numeric Index using Mean\",\n    description=\"Resamples data with given distances using mean\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"015d7a72-f9c3-8a14-dde8-3aa59b2e9f10\",\n    revision_group_id=\"015d7a72-f9c3-8a14-dde8-3aa59b2e9f10\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.096634+00:00\"\n)\ndef main(*, data, d):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n    if data.empty:\n        return {\"resampled\": data}\n    if not data.index.is_monotonic:\n        raise ValueError(\"data must be sorted by its index\")\n\n    data_reindex = data.copy()\n    data_reindex = data.reindex(\n        pd.RangeIndex(data.index[0], data.index[-1], d).union(data.index)\n    )\n    data_reindex = data_reindex.rolling(d, min_periods=1, center=True).mean()\n    return {\n        \"resampled\": data_reindex.reindex(\n            pd.RangeIndex(data.index[0], data.index[-1] + 1, d)\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5bb39fa6-528e-ea48-7c50-1f426304f6de",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "731e06a1-a060-a3bf-ae0b-070a10dbfcb7",
          "name": "d",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "ef508b0e-e6ba-a3a0-e307-92742ee2908a",
          "name": "resampled",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "0362dc9d-9861-b2c2-e26b-2a42909346bf",
    "revision_group_id": "0362dc9d-9861-b2c2-e26b-2a42909346bf",
    "name": "Linear Interpolation Datetime Index",
    "description": "Calculates the linear interpolation for some time frequency",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.989750+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Linear Interpolation Datetime Index\n\n## Description\nThe component linearly interpolates the input data for some given time frequency.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, entries numeric.\n* **t** (String): The time frequency used in the interpolation. For example, 'ms', 's', 'min', 'h' or 'd'.\n\n## Outputs\n* **interpolation** (Pandas Series or Pandas DataFrame): The linear interpolation of **data**. \n\n## Details\nThe component calculates the linear interpolation of the input **data** for some time frequency **t**. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n                \"2019-08-01T15:20:12\": 1.2,\n                \"2019-08-01T15:20:14\": 7.2,\n                \"2019-08-01T15:20:15\": 0.3,\n                \"2019-08-01T15:20:20\": 0.5,\n\t}, \n\t\"t\": s\n}\n```\nThe expected output is\n```\n\t\"interpolation\": {\n\t\t\t\t\"2019-08-01 15:20:12\": 1.20\n\t\t\t\t\"2019-08-01 15:20:13\": 4.20\n\t\t\t\t\"2019-08-01 15:20:14\": 7.20\n\t\t\t\t\"2019-08-01 15:20:15\": 0.30\n\t\t\t\t\"2019-08-01 15:20:16\": 0.34\n\t\t\t\t\"2019-08-01 15:20:17\": 0.38\n\t\t\t\t\"2019-08-01 15:20:18\": 0.42\n\t\t\t\t\"2019-08-01 15:20:19\": 0.46\n\t\t\t\t\"2019-08-01 15:20:20\": 0.50\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"t\": DataType.String},\n    outputs={\"interpolation\": DataType.Any},\n    name=\"Linear Interpolation Datetime Index\",\n    description=\"Calculates the linear interpolation for some time frequency\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"0362dc9d-9861-b2c2-e26b-2a42909346bf\",\n    revision_group_id=\"0362dc9d-9861-b2c2-e26b-2a42909346bf\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.989750+00:00\"\n)\ndef main(*, data, t):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    data_date = data.copy()\n    try:\n        data_date.index = pd.to_datetime(data_date.index)\n    except (ValueError, TypeError):\n        raise TypeError(\"indices of data must be datetime\")\n\n    try:\n        return {\"interpolation\": data_date.resample(t).interpolate()}\n    except (ValueError):\n        raise ValueError(f\"t could not be parsed as frequency: {t}\")\n",
    "io_interface": {
      "inputs": [
        {
          "id": "a3251e66-0eef-65a4-afb2-484b688d157d",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "c6ad04d9-4230-d6a3-c4db-f83a0f52a4af",
          "name": "t",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "d6e26a17-024e-a6ce-a4aa-8af713780960",
          "name": "interpolation",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "b1dba357-b6d5-43cd-ac3e-7b6cd829be37",
    "revision_group_id": "79de1ec7-b629-4360-a5e2-4eba19e60bd0",
    "name": "Merge timeseries deduplicating timestamps",
    "description": "Combine multiple timeseries from a timeseries dataframe into one, avoiding duplicate timestamps.",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-12-14T13:05:39.751758+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Merge timeseries deduplicating timestamps\n\nThis components merges all timeseries in a multiple timeseries dataframe\nof the form provided by the Timeseries Dataframe component. Thereby it avoids \nduplicates by moving duplicate timestamps into the future, distributing them\nevenly with respect to the next differing timestamp, bounded by a maximum timedelta\nprovidable as paramter.\n\nThis component may be useful if \n* a signal is measured by multiple sensors\n* which may lead to duplicate timestamps (but possibly different values)\n* you want to keep all values (e.g. to detect outliers) and methods like \n  mean / median aggregation are not suitable\n* moving duplicate timestamps into the future does not affect your analysis\n  too much.\n\n",
    "content": "\"\"\"Merge timeseries deduplicating timestamps\n\n# Merge timeseries deduplicating timestamps\n\nThis components merges all timeseries in a multiple timeseries dataframe\nof the form provided by the Timeseries Dataframe component. Thereby it avoids \nduplicates by moving duplicate timestamps into the future, distributing them\nevenly with respect to the next differing timestamp, bounded by a maximum timedelta\nprovidable as paramter.\n\nThis component may be useful if \n* a signal is measured by multiple sensors\n* which may lead to duplicate timestamps (but possibly different values)\n* you want to keep all values (e.g. to detect outliers) and methods like \n  mean / median aggregation are not suitable\n* moving duplicate timestamps into the future does not affect your analysis\n  too much.\n\n\n\"\"\"\n\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n\ndef cumsum_resetting_at_nan(orig):\n    \"\"\"Compute a cumsum but resetting at every nan value\"\"\"\n    cumsum = orig.cumsum().fillna(method=\"ffill\")\n\n    # take cumsum at nan positions and then diff to last\n    # position before with nan value. This gives the\n    # value added to cumsum \"in-between\".\n    # Edge case: After the first portion the diff is null, here we can\n    # simply fill with the cumsum value itself (\".fillna(cumsum)\")\n    # The negative of this can be used adapt the cumsum.\n    reset = -(cumsum[orig.isnull()].diff().fillna(cumsum))\n\n    result = orig.where(orig.notnull(), reset).cumsum()\n\n    return result.fillna(0)\n\n\ndef dupl_count_at_duplicated_positions(orig, dupl_counts):\n    \"\"\"A series where the total number of duplicates in a sequence is written at every duplicate position\"\"\"\n    last_duplicated_position = orig.duplicated() & (\n        ~orig.duplicated().shift(-1).fillna(False)\n    )\n    return dupl_counts.where(\n        last_duplicated_position | (dupl_counts == 0), np.nan\n    ).backfill()\n\n\ndef dupl_delta_to_next(orig):\n    \"\"\"Delta to next different timestamp at every position\"\"\"\n    last_duplicated_position = orig.duplicated() & (\n        ~orig.duplicated().shift(-1).fillna(False)\n    )\n    timestamps_after = (\n        (orig.shift(-1))\n        .where(last_duplicated_position, orig.where(~orig.duplicated()))\n        .bfill()\n    )\n    delta_to = (timestamps_after - orig).fillna(pd.Timedelta(0))\n    return delta_to\n\n\ndef distribute_duplicated_timestamps(timestamp_series, max_distribution_delta: str):\n    \"\"\"distribute duplicated timestamps to get unique timestamps\n\n    This is useful if you want to \"merge\" two timeseries without throwing\n    away values or aggregating and if you need unique timestamps in the end result.\n\n    It moves duplicate timestamps a bit into the future to archieve this.\n\n\n    timestamp_series: series with timestamp values (containing duplicates).\n        Should be sorted by these timestamp values. Will be sorted here nevertheless.\n        Index is ignored.\n\n    max_distribution_delta (str for pd.Timedelta): If the next timestamp after some duplicated timestamps\n        is further away than this delta, the duplicated timestamps will be distributed\n        uniformly in the time interval starting at the duplicated value and ending after\n        this delta beginning from the duplicated value and continuing in\n            1/(number of duplicates +1) * max_distribution_delta\n        steps. If the next timestamp after some duplicated timestamps\n        is nearer than this delta, the delta to this next timestamp is used instead of\n        max_distribution_delta.\n\n        Examples: \"1h\", \"5min\", \"1h30min\"\n    \"\"\"\n\n    max_dist_delta_timedelta = pd.Timedelta(max_distribution_delta)\n\n    working_timestamp_series = timestamp_series.sort_values()\n\n    # mark as True from second occurences onwards:\n    duplicates_marked = working_timestamp_series.duplicated()\n\n    duplicates_true_other_nan = duplicates_marked.where(duplicates_marked, np.nan)\n\n    factors_at_duplicate_positions = cumsum_resetting_at_nan(duplicates_true_other_nan)\n\n    dupl_count_at_duplicate_positions = dupl_count_at_duplicated_positions(\n        working_timestamp_series, factors_at_duplicate_positions\n    )\n\n    delta_to = dupl_delta_to_next(working_timestamp_series)\n\n    selected_series = pd.Series(max_dist_delta_timedelta, index=delta_to.index)\n    return (\n        working_timestamp_series\n        + factors_at_duplicate_positions\n        * 1\n        / (dupl_count_at_duplicate_positions + 1)\n        * pd.DataFrame(\n            [\n                delta_to.where(delta_to > pd.Timedelta(0), selected_series),\n                selected_series,\n            ]\n        ).min()\n    )\n\n\ndef merge_with_deduplicated_timestamps(\n    timeseries_df, max_distribution_delta: str, name=\"merged_timeseries\"\n):\n    \"\"\"Merges multiple timeseries into one, deduplicating timestamps by moving them into the future a bit\n\n    timeseries_df should be sorted\n    \"\"\"\n    timeseries_df.sort_values(\"timestamp\", inplace=True)\n\n    new_timestamps = distribute_duplicated_timestamps(\n        timeseries_df[\"timestamp\"], max_distribution_delta\n    )\n\n    return pd.Series(timeseries_df[\"value\"].values, index=new_timestamps, name=name)\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\n        \"timeseries_df\": DataType.DataFrame,\n        \"max_distribution_delta\": DataType.String,\n        \"new_name\": DataType.String,\n    },\n    outputs={\"timeseries\": DataType.Series},\n    name=\"Merge timeseries deduplicating timestamps\",\n    description=\"Combine multiple timeseries from a timeseries dataframe into one, avoiding duplicate timestamps.\",\n    category=\"Time length operations\",\n    id=\"b1dba357-b6d5-43cd-ac3e-7b6cd829be37\",\n    revision_group_id=\"79de1ec7-b629-4360-a5e2-4eba19e60bd0\",\n    version_tag=\"1.0.0\",\n)\ndef main(*, timeseries_df, max_distribution_delta, new_name):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"timeseries\": merge_with_deduplicated_timestamps(\n            timeseries_df, max_distribution_delta, new_name\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "bc4e2fd0-7ce2-b4db-8ffc-70fa741f7a1d",
          "name": "timeseries_df",
          "data_type": "DATAFRAME"
        },
        {
          "id": "3a08de46-664b-83a7-1539-ef0eaf752174",
          "name": "max_distribution_delta",
          "data_type": "STRING"
        },
        {
          "id": "05a0332a-fbd4-32c7-50f2-737d38dbb508",
          "name": "new_name",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "9ea49d83-75e4-5186-4f1b-445c55d2a5ff",
          "name": "timeseries",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "7b18532a-8e26-7b30-5053-6f5f056be3d4",
    "revision_group_id": "7b18532a-8e26-7b30-5053-6f5f056be3d4",
    "name": "Time Gaps",
    "description": "Calculates the sizes of time gaps",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.950093+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Time Gap sizes\n\n## Description\nThis component calculates the sizes of time gaps.\n\n## Inputs\n* **data** (Pandas Series): Index must be datetime.\n\n## Outputs\n* **gap_sizes** (Pandas Series): Series with the sizes of the gaps between the indices of **data**, expressed in seconds.\n\n## Details\nThis component calculates the sizes of time gaps between the (datetime) indices of the provided **data**. The value at each index of the result contains the time difference to the foregoing index, expressed in seconds.\n\nThe actual values of the provided Series are ignored.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:00\": 1.0,\n\t\t\t\t\"2019-08-01T15:20:15\": 7.0,\n\t\t\t\t\"2019-08-01T15:21:00\": 5.0,\n\t\t\t\t\"2019-08-01T15:22:05\": 4.0,\n\t\t\t\t\"2019-08-01T15:22:06\": 2.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"gap_sizes\": {\n\t\t\t\t\"2019-08-01T15:20:15\": 15,\n\t\t\t\t\"2019-08-01T15:21:00\": 45,\n\t\t\t\t\"2019-08-01T15:22:05\": 65,\n\t\t\t\t\"2019-08-01T15:20:06\": 1\n\t}\n```\n",
    "content": "import pandas as pd\nimport numpy as np\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series},\n    outputs={\"gap_sizes\": DataType.Series},\n    name=\"Time Gaps\",\n    description=\"Calculates the sizes of time gaps\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"7b18532a-8e26-7b30-5053-6f5f056be3d4\",\n    revision_group_id=\"7b18532a-8e26-7b30-5053-6f5f056be3d4\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.950093+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    if not len(data) >= 2:\n        raise ValueError(f\"length of data must be greater than 1, it is {len(data)}\")\n    return {\n        \"gap_sizes\": pd.Series(\n            (data.index.values[1:] - data.index.values[:-1]) / np.timedelta64(1, \"s\"),\n            index=data.index.values[1:],\n        )\n    }\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "8ab6bc3d-f452-a884-fdfc-1e7cc245202c",
          "name": "data",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "56dc00a1-a2b0-a5dc-3051-a9898397859a",
          "name": "gap_sizes",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "1d53dedc-9e4a-1ccc-4dfb-3e5059f89db8",
    "revision_group_id": "1d53dedc-9e4a-1ccc-4dfb-3e5059f89db8",
    "name": "Linear Interpolation numeric index",
    "description": "Calculates the linear interpolation for some distance",
    "category": "Time length operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.043769+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Linear Index Interpolation\n\n## Description\nThe component calculates the linear interpolation of the input for some distance.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be Integer, entries numeric and data sorted by its index.\n* **d** (Integer): The distance between the indices of the interpolated **data**.\n\n## Outputs\n* **interpolation** (Pandas Series or Pandas DataFrame): The linear interpolation of **data**. \n\n## Details\nThe component calculates the linear interpolation of the input for some distance in the interval given by the smallest and biggest index of data.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n                2: 1.2,\n                3: 7.2,\n                5: 2.8,\n                6: 4.8,\n\t\t\t\t9: 10.8\n\t}, \n\t\"d\": 2\n}\n```\nThe expected output is\n```\n\t\"interpolation\": {\n\t\t\t\t2.0: 1.2\n\t\t\t\t4.0: 5.0\n\t\t\t\t6.0: 4.8\n\t\t\t\t8.0: 8.8\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"d\": DataType.Integer},\n    outputs={\"interpolation\": DataType.Any},\n    name=\"Linear Interpolation numeric index\",\n    description=\"Calculates the linear interpolation for some distance\",\n    category=\"Time length operations\",\n    version_tag=\"1.0.0\",\n    id=\"1d53dedc-9e4a-1ccc-4dfb-3e5059f89db8\",\n    revision_group_id=\"1d53dedc-9e4a-1ccc-4dfb-3e5059f89db8\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.043769+00:00\"\n)\ndef main(*, data, d):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n\n    if data.empty:\n        return {\"interpolation\": data}\n    data_reindex = data.reindex(\n        pd.RangeIndex(data.index[0], data.index[-1], d).union(data.index)\n    )\n    data_reindex = data_reindex.interpolate(method=\"index\")\n    return {\n        \"interpolation\": data_reindex.reindex(\n            pd.RangeIndex(data.index[0], data.index[-1] + 1, d)\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "6af5afaf-96c3-fe84-6aa2-e692e4371b74",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "ad7bf640-743e-c12a-8ce4-89c263257a9f",
          "name": "d",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "e3d348d4-bad5-7e7f-b4cd-85e510717326",
          "name": "interpolation",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "95c006e4-5050-7722-6717-d1c6be2ba890",
    "revision_group_id": "95c006e4-5050-7722-6717-d1c6be2ba890",
    "name": "Timeseries and Alerts Plot",
    "description": "Plotting a single timeseries and alerts into same figure",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.492254+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeseries and Alerts Plot\n\n## Description\nPlotting a single timeseries and alerts into the same figure.\n\n## Inputs\n* **series** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n* **alert_series** (Pandas Series): Entries should be 1, 0 or -1 and Index should be a DateTime Index. Typically, this series comes from a \"Alerts from Score\" component of the Anomaly Detection category. Here, 1 indicates an alert start (first abormal data point) and -1 an alert end (first datapoint returning to normal). Zeroes indicate no change of alert-state.\n\n## Outputs\n* **alert_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming **series** using Plotly and marks the alerts specified by the **alert_series**.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"series\": {\n    \"2018-05-19T22:20:00.000Z\": 86.9358994238,\n    \"2018-05-19T22:25:00.000Z\": 78.6552569681,\n    \"2018-05-19T22:30:00.000Z\": 93.515633185,\n    \"2018-05-19T22:35:00.000Z\": 96.3497006614,\n    \"2018-05-19T22:40:00.000Z\": 83.1926874657,\n    \"2018-05-19T22:45:00.000Z\": 69.9740743464,\n    \"2018-05-19T22:50:00.000Z\": 90.5433921349,\n    \"2018-05-19T22:55:00.000Z\": 97.4750274531,\n    \"2018-05-19T23:00:00.000Z\": 101.6738801355,\n    \"2018-05-19T23:05:00.000Z\": 85.8482897506,\n    \"2018-05-19T23:10:00.000Z\": 84.770860201,\n    \"2018-05-19T23:15:00.000Z\": 85.8559629927,\n    \"2018-05-19T23:20:00.000Z\": 86.5037351162,\n    \"2018-05-19T23:25:00.000Z\": 80.7784552462,\n    \"2018-05-19T23:30:00.000Z\": 89.8411904351,\n    \"2018-05-19T23:35:00.000Z\": 83.1826662979,\n    \"2018-05-19T23:40:00.000Z\": 103.3734694408,\n    \"2018-05-19T23:45:00.000Z\": 101.6826743271,\n    \"2018-05-19T23:50:00.000Z\": 86.4656528841,\n    \"2018-05-19T23:55:00.000Z\": 74.1823425367,\n    \"2018-05-20T00:00:00.000Z\": 77.5083836047,\n    \"2018-05-20T00:05:00.000Z\": 109.1359083963,\n    \"2018-05-20T00:10:00.000Z\": 86.9635555496,\n    \"2018-05-20T00:15:00.000Z\": 72.4734381604,\n    \"2018-05-20T00:20:00.000Z\": 82.6569065462,\n    \"2018-05-20T00:25:00.000Z\": 95.6306292516,\n    \"2018-05-20T00:30:00.000Z\": 96.5189997059,\n    \"2018-05-20T00:35:00.000Z\": 80.0414834298,\n    \"2018-05-20T00:40:00.000Z\": 81.5688589141,\n    \"2018-05-20T00:45:00.000Z\": 66.8476389718,\n    \"2018-05-20T00:50:00.000Z\": 82.1313723217,\n    \"2018-05-20T00:55:00.000Z\": 88.9032494153,\n    \"2018-05-20T01:00:00.000Z\": 78.8591066896,\n    \"2018-05-20T01:05:00.000Z\": 60.278205314,\n    \"2018-05-20T01:10:00.000Z\": 53.8951835823,\n    \"2018-05-20T01:15:00.000Z\": 71.4961130601,\n    \"2018-05-20T01:20:00.000Z\": 78.9503633957,\n    \"2018-05-20T01:25:00.000Z\": 88.2164623807,\n    \"2018-05-20T01:30:00.000Z\": 67.4817188089,\n    \"2018-05-20T01:35:00.000Z\": 48.9307150285,\n    \"2018-05-20T01:40:00.000Z\": 65.6820065898,\n    \"2018-05-20T01:45:00.000Z\": 80.4674129099,\n    \"2018-05-20T01:50:00.000Z\": 83.0974319003,\n    \"2018-05-20T01:55:00.000Z\": 66.4044977776,\n    \"2018-05-20T02:00:00.000Z\": 52.6199439715,\n    \"2018-05-20T02:05:00.000Z\": 50.2284429626,\n    \"2018-05-20T02:10:00.000Z\": 85.1886876577,\n    \"2018-05-20T02:15:00.000Z\": 85.5129601692,\n    \"2018-05-20T02:20:00.000Z\": 71.3317339188,\n    \"2018-05-20T02:25:00.000Z\": 52.917747152,\n    \"2018-05-20T02:30:00.000Z\": 52.3827727031,\n    \"2018-05-20T02:35:00.000Z\": 64.1071562615,\n    \"2018-05-20T02:40:00.000Z\": 83.0344096679,\n    \"2018-05-20T02:45:00.000Z\": 71.5022451453,\n    \"2018-05-20T02:50:00.000Z\": 46.4394249402,\n    \"2018-05-20T02:55:00.000Z\": 43.382501745,\n    \"2018-05-20T03:00:00.000Z\": 54.4602695018,\n    \"2018-05-20T03:05:00.000Z\": 76.2991858088,\n    \"2018-05-20T03:10:00.000Z\": 82.7155861643,\n    \"2018-05-20T03:15:00.000Z\": 52.7799214093,\n    \"2018-05-20T03:20:00.000Z\": 48.0293243988,\n    \"2018-05-20T03:25:00.000Z\": 40.2136775726,\n    \"2018-05-20T03:30:00.000Z\": 30.8733628055,\n    \"2018-05-20T03:35:00.000Z\": 56.7236835216,\n    \"2018-05-20T03:40:00.000Z\": 80.7648985358,\n    \"2018-05-20T03:45:00.000Z\": 60.5576562717,\n    \"2018-05-20T03:50:00.000Z\": 42.7602142735,\n    \"2018-05-20T03:55:00.000Z\": 42.8245428316,\n    \"2018-05-20T04:00:00.000Z\": 45.9636153002,\n    \"2018-05-20T04:05:00.000Z\": 39.4304037403,\n    \"2018-05-20T04:10:00.000Z\": 54.3346944195,\n    \"2018-05-20T04:15:00.000Z\": 53.7024337135,\n    \"2018-05-20T04:20:00.000Z\": 48.0270534763,\n    \"2018-05-20T04:25:00.000Z\": 28.7165651222,\n    \"2018-05-20T04:30:00.000Z\": 25.1043662316,\n    \"2018-05-20T04:35:00.000Z\": 29.6552481484,\n    \"2018-05-20T04:40:00.000Z\": 33.9357116455,\n    \"2018-05-20T04:45:00.000Z\": 36.5774719321,\n    \"2018-05-20T04:50:00.000Z\": 57.2633214106,\n    \"2018-05-20T04:55:00.000Z\": 49.2236152236,\n    \"2018-05-20T05:00:00.000Z\": 42.0204170321,\n    \"2018-05-20T05:05:00.000Z\": 29.0357907363,\n    \"2018-05-20T05:10:00.000Z\": 28.972519502,\n    \"2018-05-20T05:15:00.000Z\": 25.5883073669,\n    \"2018-05-20T05:20:00.000Z\": 25.7142077601,\n    \"2018-05-20T05:25:00.000Z\": 44.4557411598,\n    \"2018-05-20T05:30:00.000Z\": 61.0614822236,\n    \"2018-05-20T05:35:00.000Z\": 52.7493209614,\n    \"2018-05-20T05:40:00.000Z\": 38.4079501823,\n    \"2018-05-20T05:45:00.000Z\": 31.3086890977,\n    \"2018-05-20T05:50:00.000Z\": 79.1806006473,\n    \"2018-05-20T05:55:00.000Z\": 138.3298304464,\n    \"2018-05-20T06:00:00.000Z\": 159.0636434544,\n    \"2018-05-20T06:05:00.000Z\": 123.3056279812,\n    \"2018-05-20T06:10:00.000Z\": 40.9117923242,\n    \"2018-05-20T06:15:00.000Z\": 54.6703391987,\n    \"2018-05-20T06:20:00.000Z\": 60.1409043033,\n    \"2018-05-20T06:25:00.000Z\": 61.773021148,\n    \"2018-05-20T06:30:00.000Z\": 136.3291547746,\n    \"2018-05-20T06:35:00.000Z\": 172.0109041951,\n    \"2018-05-20T06:40:00.000Z\": 185.3083213323,\n    \"2018-05-20T06:45:00.000Z\": 197.8518333074,\n    \"2018-05-20T06:50:00.000Z\": 184.816863378,\n    \"2018-05-20T06:55:00.000Z\": 52.3640067807,\n    \"2018-05-20T07:00:00.000Z\": 30.3856767594,\n    \"2018-05-20T07:05:00.000Z\": 19.6763950118,\n    \"2018-05-20T07:10:00.000Z\": 84.8995442156,\n    \"2018-05-20T07:15:00.000Z\": 106.2051480693,\n    \"2018-05-20T07:20:00.000Z\": 169.8752300099,\n    \"2018-05-20T07:25:00.000Z\": 213.8776647446,\n    \"2018-05-20T07:30:00.000Z\": 218.137763105,\n    \"2018-05-20T07:35:00.000Z\": 211.9986058951,\n    \"2018-05-20T07:40:00.000Z\": 141.5436667966,\n    \"2018-05-20T07:45:00.000Z\": 55.0101414275,\n    \"2018-05-20T07:50:00.000Z\": 54.6697059315,\n    \"2018-05-20T07:55:00.000Z\": 108.6148802995,\n    \"2018-05-20T08:00:00.000Z\": 164.3342435021,\n    \"2018-05-20T08:05:00.000Z\": 205.9293219405,\n    \"2018-05-20T08:10:00.000Z\": 216.0155924794,\n    \"2018-05-20T08:15:00.000Z\": 219.5429889277,\n    \"2018-05-20T08:20:00.000Z\": 214.6161859555,\n    \"2018-05-20T08:25:00.000Z\": 182.517250994,\n    \"2018-05-20T08:30:00.000Z\": 62.0884876359,\n    \"2018-05-20T08:35:00.000Z\": 67.2103674858,\n    \"2018-05-20T08:40:00.000Z\": 78.5314292403,\n    \"2018-05-20T08:45:00.000Z\": 189.482915713,\n    \"2018-05-20T08:50:00.000Z\": 217.701588994,\n    \"2018-05-20T08:55:00.000Z\": 215.6707899191,\n    \"2018-05-20T09:00:00.000Z\": 220.6857971485,\n    \"2018-05-20T09:05:00.000Z\": 223.2626321138,\n    \"2018-05-20T09:10:00.000Z\": 186.0879452113,\n    \"2018-05-20T09:15:00.000Z\": 66.6061463066,\n    \"2018-05-20T09:20:00.000Z\": 71.8896721611,\n    \"2018-05-20T09:25:00.000Z\": 106.1131048244,\n    \"2018-05-20T09:30:00.000Z\": 194.2396819964,\n    \"2018-05-20T09:35:00.000Z\": 212.9194052403,\n    \"2018-05-20T09:40:00.000Z\": 228.7988558129,\n    \"2018-05-20T09:45:00.000Z\": 223.0539335965,\n    \"2018-05-20T09:50:00.000Z\": 229.3014824671,\n    \"2018-05-20T09:55:00.000Z\": 73.057370576,\n    \"2018-05-20T10:00:00.000Z\": 63.8777934173,\n    \"2018-05-20T10:05:00.000Z\": 55.7252891637,\n    \"2018-05-20T10:10:00.000Z\": 124.6033069636,\n    \"2018-05-20T10:15:00.000Z\": 208.999834057,\n    \"2018-05-20T10:20:00.000Z\": 210.5973352137,\n    \"2018-05-20T10:25:00.000Z\": 134.6987564878,\n    \"2018-05-20T10:30:00.000Z\": 80.7366860452,\n    \"2018-05-20T10:35:00.000Z\": 74.0239748251,\n    \"2018-05-20T10:40:00.000Z\": 69.6519772124,\n    \"2018-05-20T10:45:00.000Z\": 66.6507449417,\n    \"2018-05-20T10:50:00.000Z\": 63.6565231819,\n    \"2018-05-20T10:55:00.000Z\": 77.2641910553,\n    \"2018-05-20T11:00:00.000Z\": 76.3756956564,\n    \"2018-05-20T11:05:00.000Z\": 78.390474376,\n    \"2018-05-20T11:10:00.000Z\": 91.0208850327,\n    \"2018-05-20T11:15:00.000Z\": 84.8828852992,\n    \"2018-05-20T11:20:00.000Z\": 100.6171083238,\n    \"2018-05-20T11:25:00.000Z\": 121.420014114,\n    \"2018-05-20T11:30:00.000Z\": 122.7422457964,\n    \"2018-05-20T11:35:00.000Z\": 114.0672784089,\n    \"2018-05-20T11:40:00.000Z\": 124.9792048426,\n    \"2018-05-20T11:45:00.000Z\": 153.3861054222,\n    \"2018-05-20T11:50:00.000Z\": 140.2611586143,\n    \"2018-05-20T11:55:00.000Z\": 138.9443262784,\n    \"2018-05-20T12:00:00.000Z\": 148.510151628,\n    \"2018-05-20T12:05:00.000Z\": 152.9166475408,\n    \"2018-05-20T12:10:00.000Z\": 160.2447124871,\n    \"2018-05-20T12:15:00.000Z\": 159.5788094645,\n    \"2018-05-20T12:20:00.000Z\": 165.8041637338,\n    \"2018-05-20T12:25:00.000Z\": 159.285387551,\n    \"2018-05-20T12:30:00.000Z\": 165.271884833,\n    \"2018-05-20T12:35:00.000Z\": 161.3833736925,\n    \"2018-05-20T12:40:00.000Z\": 176.8410887258,\n    \"2018-05-20T12:45:00.000Z\": 180.5956340785,\n    \"2018-05-20T12:50:00.000Z\": 170.5980778735,\n    \"2018-05-20T12:55:00.000Z\": 167.2900126682,\n    \"2018-05-20T13:00:00.000Z\": 185.4767849358,\n    \"2018-05-20T13:05:00.000Z\": 179.9265264363,\n    \"2018-05-20T13:10:00.000Z\": 176.207298797,\n    \"2018-05-20T13:15:00.000Z\": 188.3835400671,\n    \"2018-05-20T13:20:00.000Z\": 195.4749511852,\n    \"2018-05-20T13:25:00.000Z\": 166.0712157493,\n    \"2018-05-20T13:30:00.000Z\": 176.8166973904,\n    \"2018-05-20T13:35:00.000Z\": 189.1987544304,\n    \"2018-05-20T13:40:00.000Z\": 183.4236375455,\n    \"2018-05-20T13:45:00.000Z\": 186.5117851915,\n    \"2018-05-20T13:50:00.000Z\": 184.9337200978,\n    \"2018-05-20T13:55:00.000Z\": 187.4601888511,\n    \"2018-05-20T14:00:00.000Z\": 189.1652389195,\n    \"2018-05-20T14:05:00.000Z\": 186.1269425153,\n    \"2018-05-20T14:10:00.000Z\": 190.0385586888,\n    \"2018-05-20T14:15:00.000Z\": 176.2308785787,\n    \"2018-05-20T14:20:00.000Z\": 170.889032631,\n    \"2018-05-20T14:25:00.000Z\": 200.3437418988,\n    \"2018-05-20T14:30:00.000Z\": 191.8904045089,\n    \"2018-05-20T14:35:00.000Z\": 189.7712383502,\n    \"2018-05-20T14:40:00.000Z\": 180.1290800151,\n    \"2018-05-20T14:45:00.000Z\": 197.1780600239,\n    \"2018-05-20T14:50:00.000Z\": 195.0832041298,\n    \"2018-05-20T14:55:00.000Z\": 175.8725668583,\n    \"2018-05-20T15:00:00.000Z\": 187.3043246389,\n    \"2018-05-20T15:05:00.000Z\": 197.2477733158,\n    \"2018-05-20T15:10:00.000Z\": 189.7663337729,\n    \"2018-05-20T15:15:00.000Z\": 179.2387550989,\n    \"2018-05-20T15:20:00.000Z\": 183.8158897523,\n    \"2018-05-20T15:25:00.000Z\": 186.5921372968,\n    \"2018-05-20T15:30:00.000Z\": 181.0236973864,\n    \"2018-05-20T15:35:00.000Z\": 173.2669536706,\n    \"2018-05-20T15:40:00.000Z\": 179.3250753491,\n    \"2018-05-20T15:45:00.000Z\": 183.2442350433,\n    \"2018-05-20T15:50:00.000Z\": 174.8351975126,\n    \"2018-05-20T15:55:00.000Z\": 177.7823510347,\n    \"2018-05-20T16:00:00.000Z\": 195.2615650293,\n    \"2018-05-20T16:05:00.000Z\": 174.7665754694,\n    \"2018-05-20T16:10:00.000Z\": 175.6502762854,\n    \"2018-05-20T16:15:00.000Z\": 180.2494148226,\n    \"2018-05-20T16:20:00.000Z\": 187.516513023,\n    \"2018-05-20T16:25:00.000Z\": 185.899972629,\n    \"2018-05-20T16:30:00.000Z\": 167.5664793106,\n    \"2018-05-20T16:35:00.000Z\": 169.6490691354,\n    \"2018-05-20T16:40:00.000Z\": 176.158768683,\n    \"2018-05-20T16:45:00.000Z\": 184.3236702768,\n    \"2018-05-20T16:50:00.000Z\": 163.8026982105,\n    \"2018-05-20T16:55:00.000Z\": 157.6914259458,\n    \"2018-05-20T17:00:00.000Z\": 166.0935360593,\n    \"2018-05-20T17:05:00.000Z\": 159.1095964847,\n    \"2018-05-20T17:10:00.000Z\": 147.7065369358,\n    \"2018-05-20T17:15:00.000Z\": 154.7057897245,\n    \"2018-05-20T17:20:00.000Z\": 168.3555509087,\n    \"2018-05-20T17:25:00.000Z\": 170.5614796039,\n    \"2018-05-20T17:30:00.000Z\": 158.4394920499,\n    \"2018-05-20T17:35:00.000Z\": 141.5043245617,\n    \"2018-05-20T17:40:00.000Z\": 163.4957902013,\n    \"2018-05-20T17:45:00.000Z\": 174.2984169626,\n    \"2018-05-20T17:50:00.000Z\": 156.5764681255,\n    \"2018-05-20T17:55:00.000Z\": 145.6017108276,\n    \"2018-05-20T18:00:00.000Z\": 147.6871890956,\n    \"2018-05-20T18:05:00.000Z\": 162.9423506747,\n    \"2018-05-20T18:10:00.000Z\": 162.8512641091,\n    \"2018-05-20T18:15:00.000Z\": 149.6910092824,\n    \"2018-05-20T18:20:00.000Z\": 140.5253960882,\n    \"2018-05-20T18:25:00.000Z\": 158.8771839914,\n    \"2018-05-20T18:30:00.000Z\": 172.6007529438,\n    \"2018-05-20T18:35:00.000Z\": 160.4501536466,\n    \"2018-05-20T18:40:00.000Z\": 144.8699494803,\n    \"2018-05-20T18:45:00.000Z\": 143.2864996159,\n    \"2018-05-20T18:50:00.000Z\": 156.0899311688,\n    \"2018-05-20T18:55:00.000Z\": 166.2063491434,\n    \"2018-05-20T19:00:00.000Z\": 154.1839333819,\n    \"2018-05-20T19:05:00.000Z\": 142.1280736423,\n    \"2018-05-20T19:10:00.000Z\": 137.0410387908,\n    \"2018-05-20T19:15:00.000Z\": 150.8775981298,\n    \"2018-05-20T19:20:00.000Z\": 154.3254832531,\n    \"2018-05-20T19:25:00.000Z\": 153.1508155345,\n    \"2018-05-20T19:30:00.000Z\": 143.9982068534,\n    \"2018-05-20T19:35:00.000Z\": 142.3341752461,\n    \"2018-05-20T19:40:00.000Z\": 151.720255615,\n    \"2018-05-20T19:45:00.000Z\": 158.2621281129,\n    \"2018-05-20T19:50:00.000Z\": 153.4968545282,\n    \"2018-05-20T19:55:00.000Z\": 143.7376693548,\n    \"2018-05-20T20:00:00.000Z\": 142.0514856047,\n    \"2018-05-20T20:05:00.000Z\": 150.8437823056,\n    \"2018-05-20T20:10:00.000Z\": 166.1271294879,\n    \"2018-05-20T20:15:00.000Z\": 150.5006327538,\n    \"2018-05-20T20:20:00.000Z\": 134.8359733416,\n    \"2018-05-20T20:25:00.000Z\": 133.4771648482,\n    \"2018-05-20T20:30:00.000Z\": 149.6004988879,\n    \"2018-05-20T20:35:00.000Z\": 154.5810230519,\n    \"2018-05-20T20:40:00.000Z\": 162.066364617,\n    \"2018-05-20T20:45:00.000Z\": 145.7448446292,\n    \"2018-05-20T20:50:00.000Z\": 131.9934783902,\n    \"2018-05-20T20:55:00.000Z\": 148.1438116264,\n    \"2018-05-20T21:00:00.000Z\": 159.0688775438,\n    \"2018-05-20T21:05:00.000Z\": 164.1180432476,\n    \"2018-05-20T21:10:00.000Z\": 149.5302407304,\n    \"2018-05-20T21:15:00.000Z\": 140.28660358,\n    \"2018-05-20T21:20:00.000Z\": 149.2851079194,\n    \"2018-05-20T21:25:00.000Z\": 165.5659893612,\n    \"2018-05-20T21:30:00.000Z\": 154.1439776518,\n    \"2018-05-20T21:35:00.000Z\": 149.4644136489,\n    \"2018-05-20T21:40:00.000Z\": 154.5941907831,\n    \"2018-05-20T21:45:00.000Z\": 164.8406319427,\n    \"2018-05-20T21:50:00.000Z\": 181.6959680527,\n    \"2018-05-20T21:55:00.000Z\": 154.7350000859,\n    \"2018-05-20T22:00:00.000Z\": 151.5230909704,\n    \"2018-05-20T22:05:00.000Z\": 160.1882851689,\n    \"2018-05-20T22:10:00.000Z\": 174.8887210965,\n    \"2018-05-20T22:15:00.000Z\": 173.587771397,\n    \"2018-05-20T22:20:00.000Z\": 165.0105987918,\n    \"2018-05-20T22:25:00.000Z\": 161.9471576448,\n    \"2018-05-20T22:30:00.000Z\": 164.6495581777,\n    \"2018-05-20T22:35:00.000Z\": 171.8843956932,\n    \"2018-05-20T22:40:00.000Z\": 177.9174520466,\n    \"2018-05-20T22:45:00.000Z\": 166.6287705491,\n    \"2018-05-20T22:50:00.000Z\": 151.8515290201,\n    \"2018-05-20T22:55:00.000Z\": 173.3088905867,\n    \"2018-05-20T23:00:00.000Z\": 180.786055938,\n    \"2018-05-20T23:05:00.000Z\": 176.1478069596,\n    \"2018-05-20T23:10:00.000Z\": 164.6055015361,\n    \"2018-05-20T23:15:00.000Z\": 165.8118961347,\n    \"2018-05-20T23:20:00.000Z\": 182.7612266921,\n    \"2018-05-20T23:25:00.000Z\": 178.1625682363,\n    \"2018-05-20T23:30:00.000Z\": 176.1401257364,\n    \"2018-05-20T23:35:00.000Z\": 160.2761683119,\n    \"2018-05-20T23:40:00.000Z\": 174.3541932561,\n    \"2018-05-20T23:45:00.000Z\": 185.1896388696,\n    \"2018-05-20T23:50:00.000Z\": 173.4366359349,\n    \"2018-05-20T23:55:00.000Z\": 162.1251562512,\n    \"2018-05-21T00:00:00.000Z\": 152.2594113395,\n    \"2018-05-21T00:05:00.000Z\": 164.8759416863,\n    \"2018-05-21T00:10:00.000Z\": 182.6967505432,\n    \"2018-05-21T00:15:00.000Z\": 173.9322883794,\n    \"2018-05-21T00:20:00.000Z\": 167.9858934981,\n    \"2018-05-21T00:25:00.000Z\": 154.8519440563,\n    \"2018-05-21T00:30:00.000Z\": 171.5228817334,\n    \"2018-05-21T00:35:00.000Z\": 181.9999215285,\n    \"2018-05-21T00:40:00.000Z\": 169.4980785854,\n    \"2018-05-21T00:45:00.000Z\": 164.5742191052,\n    \"2018-05-21T00:50:00.000Z\": 149.1684670774,\n    \"2018-05-21T00:55:00.000Z\": 160.1198995794,\n    \"2018-05-21T01:00:00.000Z\": 172.462731262,\n    \"2018-05-21T01:05:00.000Z\": 170.5161373658,\n    \"2018-05-21T01:10:00.000Z\": 152.1337734829,\n    \"2018-05-21T01:15:00.000Z\": 130.6612099559,\n    \"2018-05-21T01:20:00.000Z\": 152.2316047161,\n    \"2018-05-21T01:25:00.000Z\": 168.4448294636,\n    \"2018-05-21T01:30:00.000Z\": 170.1531364678,\n    \"2018-05-21T01:35:00.000Z\": 152.5175797995,\n    \"2018-05-21T01:40:00.000Z\": 127.6457147537,\n    \"2018-05-21T01:45:00.000Z\": 137.6715320223,\n    \"2018-05-21T01:50:00.000Z\": 165.742231698,\n    \"2018-05-21T01:55:00.000Z\": 181.8724040376,\n    \"2018-05-21T02:00:00.000Z\": 159.056580575,\n    \"2018-05-21T02:05:00.000Z\": 133.7876578796,\n    \"2018-05-21T02:10:00.000Z\": 135.2260247207,\n    \"2018-05-21T02:15:00.000Z\": 148.615568763,\n    \"2018-05-21T02:20:00.000Z\": 170.7364057672,\n    \"2018-05-21T02:25:00.000Z\": 161.5976827976,\n    \"2018-05-21T02:30:00.000Z\": 139.7862988032,\n    \"2018-05-21T02:35:00.000Z\": 137.0496843075,\n    \"2018-05-21T02:40:00.000Z\": 130.2219953094,\n    \"2018-05-21T02:45:00.000Z\": 149.4338745325,\n    \"2018-05-21T02:50:00.000Z\": 167.1641922817,\n    \"2018-05-21T02:55:00.000Z\": 145.8422497591,\n    \"2018-05-21T03:00:00.000Z\": 130.4670061942,\n    \"2018-05-21T03:05:00.000Z\": 116.312792923,\n    \"2018-05-21T03:10:00.000Z\": 110.4228534731,\n    \"2018-05-21T03:15:00.000Z\": 130.5443425156,\n    \"2018-05-21T03:20:00.000Z\": 137.5629238799,\n    \"2018-05-21T03:25:00.000Z\": 137.8296174877,\n    \"2018-05-21T03:30:00.000Z\": 128.3065165246,\n    \"2018-05-21T03:35:00.000Z\": 121.0885937611,\n    \"2018-05-21T03:40:00.000Z\": 111.2250157042,\n    \"2018-05-21T03:45:00.000Z\": 132.4450062421,\n    \"2018-05-21T03:50:00.000Z\": 127.7633559327,\n    \"2018-05-21T03:55:00.000Z\": 134.8909334032,\n    \"2018-05-21T04:00:00.000Z\": 128.446440207,\n    \"2018-05-21T04:05:00.000Z\": 110.441006872,\n    \"2018-05-21T04:10:00.000Z\": 109.700946095,\n    \"2018-05-21T04:15:00.000Z\": 114.5340437289,\n    \"2018-05-21T04:20:00.000Z\": 122.0335804153,\n    \"2018-05-21T04:25:00.000Z\": 140.3120967139,\n    \"2018-05-21T04:30:00.000Z\": 141.6490414641,\n    \"2018-05-21T04:35:00.000Z\": 129.2456715238,\n    \"2018-05-21T04:40:00.000Z\": 128.3604702735,\n    \"2018-05-21T04:45:00.000Z\": 103.6823697419,\n    \"2018-05-21T04:50:00.000Z\": 107.7692280091,\n    \"2018-05-21T04:55:00.000Z\": 105.3069016698,\n    \"2018-05-21T05:00:00.000Z\": 133.3823375377,\n    \"2018-05-21T05:05:00.000Z\": 135.5761918319,\n    \"2018-05-21T05:10:00.000Z\": 126.3400846309,\n    \"2018-05-21T05:15:00.000Z\": 116.1887040832,\n    \"2018-05-21T05:20:00.000Z\": 110.0880811292,\n    \"2018-05-21T05:25:00.000Z\": 107.804272825,\n    \"2018-05-21T05:30:00.000Z\": 126.1140477471,\n    \"2018-05-21T05:35:00.000Z\": 100.5340249354,\n    \"2018-05-21T05:40:00.000Z\": 113.0860552474,\n    \"2018-05-21T05:45:00.000Z\": 125.3068239043,\n    \"2018-05-21T05:50:00.000Z\": 120.7452754491,\n    \"2018-05-21T05:55:00.000Z\": 109.0093390122,\n    \"2018-05-21T06:00:00.000Z\": 104.4720080124,\n    \"2018-05-21T06:05:00.000Z\": 114.3773182728,\n    \"2018-05-21T06:10:00.000Z\": 235.5743866226,\n    \"2018-05-21T06:15:00.000Z\": 259.9093971669,\n    \"2018-05-21T06:20:00.000Z\": 252.2075690771,\n    \"2018-05-21T06:25:00.000Z\": 160.3976473829,\n    \"2018-05-21T06:30:00.000Z\": 138.4378069079,\n    \"2018-05-21T06:35:00.000Z\": 135.5228422482,\n    \"2018-05-21T06:40:00.000Z\": 127.1940938929,\n    \"2018-05-21T06:45:00.000Z\": 131.0889830803,\n    \"2018-05-21T06:50:00.000Z\": 246.3764762481,\n    \"2018-05-21T06:55:00.000Z\": 275.7713523003,\n    \"2018-05-21T07:00:00.000Z\": 293.7155039596,\n    \"2018-05-21T07:05:00.000Z\": 285.5505063576,\n    \"2018-05-21T07:10:00.000Z\": 146.78786506,\n    \"2018-05-21T07:15:00.000Z\": 149.8764086882,\n    \"2018-05-21T07:20:00.000Z\": 144.187013584,\n    \"2018-05-21T07:25:00.000Z\": 130.86381675,\n    \"2018-05-21T07:30:00.000Z\": 194.7438116517,\n    \"2018-05-21T07:35:00.000Z\": 272.7913552453,\n    \"2018-05-21T07:40:00.000Z\": 290.820978105,\n    \"2018-05-21T07:45:00.000Z\": 296.9505939576,\n    \"2018-05-21T07:50:00.000Z\": 298.0083885275,\n    \"2018-05-21T07:55:00.000Z\": 187.4321505365,\n    \"2018-05-21T08:00:00.000Z\": 162.0547652346,\n    \"2018-05-21T08:05:00.000Z\": 150.9500058684,\n    \"2018-05-21T08:10:00.000Z\": 177.2718457395,\n    \"2018-05-21T08:15:00.000Z\": 226.9682405716,\n    \"2018-05-21T08:20:00.000Z\": 281.6991259616,\n    \"2018-05-21T08:25:00.000Z\": 299.6170843508,\n    \"2018-05-21T08:30:00.000Z\": 294.2845290055,\n    \"2018-05-21T08:35:00.000Z\": 293.2341244794,\n    \"2018-05-21T08:40:00.000Z\": 185.7453367837,\n    \"2018-05-21T08:45:00.000Z\": 150.9503373023,\n    \"2018-05-21T08:50:00.000Z\": 151.0371469267,\n    \"2018-05-21T08:55:00.000Z\": 206.0515768125,\n    \"2018-05-21T09:00:00.000Z\": 254.9134971128,\n    \"2018-05-21T09:05:00.000Z\": 260.5309795404,\n    \"2018-05-21T09:10:00.000Z\": 283.5240895158,\n    \"2018-05-21T09:15:00.000Z\": 299.5669472092,\n    \"2018-05-21T09:20:00.000Z\": 290.4716478637,\n    \"2018-05-21T09:25:00.000Z\": 150.1792877788,\n    \"2018-05-21T09:30:00.000Z\": 153.350843163,\n    \"2018-05-21T09:35:00.000Z\": 168.3919070356,\n    \"2018-05-21T09:40:00.000Z\": 246.2511128942,\n    \"2018-05-21T09:45:00.000Z\": 272.6459016925,\n    \"2018-05-21T09:50:00.000Z\": 284.3291444312,\n    \"2018-05-21T09:55:00.000Z\": 287.8771578655,\n    \"2018-05-21T10:00:00.000Z\": 293.9291535394,\n    \"2018-05-21T10:05:00.000Z\": 148.1034467543,\n    \"2018-05-21T10:10:00.000Z\": 144.6698776958,\n    \"2018-05-21T10:15:00.000Z\": 150.4993603999,\n    \"2018-05-21T10:20:00.000Z\": 165.9184380435,\n    \"2018-05-21T10:25:00.000Z\": 234.9516814197,\n    \"2018-05-21T10:30:00.000Z\": 258.7242848345,\n    \"2018-05-21T10:35:00.000Z\": 149.5856562879,\n    \"2018-05-21T10:40:00.000Z\": 157.3995593779,\n    \"2018-05-21T10:45:00.000Z\": 163.5934703779,\n    \"2018-05-21T10:50:00.000Z\": 165.4229952016,\n    \"2018-05-21T10:55:00.000Z\": 147.402825158,\n    \"2018-05-21T11:00:00.000Z\": 147.0929068055,\n    \"2018-05-21T11:05:00.000Z\": 169.5109621667,\n    \"2018-05-21T11:10:00.000Z\": 162.7524694778,\n    \"2018-05-21T11:15:00.000Z\": 156.2755862145,\n    \"2018-05-21T11:20:00.000Z\": 165.1037874415,\n    \"2018-05-21T11:25:00.000Z\": 174.8500792849,\n    \"2018-05-21T11:30:00.000Z\": 201.1382307932,\n    \"2018-05-21T11:35:00.000Z\": 194.9702303703,\n    \"2018-05-21T11:40:00.000Z\": 186.4801486217,\n    \"2018-05-21T11:45:00.000Z\": 199.7644485453,\n    \"2018-05-21T11:50:00.000Z\": 225.0726034308,\n    \"2018-05-21T11:55:00.000Z\": 229.2145947795,\n    \"2018-05-21T12:00:00.000Z\": 222.5780094354,\n    \"2018-05-21T12:05:00.000Z\": 220.3030741961,\n    \"2018-05-21T12:10:00.000Z\": 233.3964392018,\n    \"2018-05-21T12:15:00.000Z\": 239.4059502363,\n    \"2018-05-21T12:20:00.000Z\": 240.3887803522,\n    \"2018-05-21T12:25:00.000Z\": 240.8112614065,\n    \"2018-05-21T12:30:00.000Z\": 256.5808995769,\n    \"2018-05-21T12:35:00.000Z\": 242.7919703895,\n    \"2018-05-21T12:40:00.000Z\": 238.6621344019,\n    \"2018-05-21T12:45:00.000Z\": 250.261457039,\n    \"2018-05-21T12:50:00.000Z\": 259.4516469448,\n    \"2018-05-21T12:55:00.000Z\": 247.4866188483,\n    \"2018-05-21T13:00:00.000Z\": 262.8559965981,\n    \"2018-05-21T13:05:00.000Z\": 271.1144597549,\n    \"2018-05-21T13:10:00.000Z\": 268.1243822049,\n    \"2018-05-21T13:15:00.000Z\": 252.8992999006,\n    \"2018-05-21T13:20:00.000Z\": 263.7082366234,\n    \"2018-05-21T13:25:00.000Z\": 266.4385594157,\n    \"2018-05-21T13:30:00.000Z\": 254.0656734496,\n    \"2018-05-21T13:35:00.000Z\": 261.2732814771,\n    \"2018-05-21T13:40:00.000Z\": 269.0084799247,\n    \"2018-05-21T13:45:00.000Z\": 272.3602853329,\n    \"2018-05-21T13:50:00.000Z\": 264.6174163215,\n    \"2018-05-21T13:55:00.000Z\": 273.3087959959,\n    \"2018-05-21T14:00:00.000Z\": 271.2140332534,\n    \"2018-05-21T14:05:00.000Z\": 268.8151027545,\n    \"2018-05-21T14:10:00.000Z\": 255.285584259,\n    \"2018-05-21T14:15:00.000Z\": 269.3637345526,\n    \"2018-05-21T14:20:00.000Z\": 268.1926599218,\n    \"2018-05-21T14:25:00.000Z\": 267.99650141,\n    \"2018-05-21T14:30:00.000Z\": 279.18412017,\n    \"2018-05-21T14:35:00.000Z\": 275.8955013989,\n    \"2018-05-21T14:40:00.000Z\": 266.4569053169,\n    \"2018-05-21T14:45:00.000Z\": 258.4459289038,\n    \"2018-05-21T14:50:00.000Z\": 240.515998635,\n    \"2018-05-21T14:55:00.000Z\": 236.4320345496,\n    \"2018-05-21T15:00:00.000Z\": 232.7289742452,\n    \"2018-05-21T15:05:00.000Z\": 234.8597697921,\n    \"2018-05-21T15:10:00.000Z\": 269.9023580616,\n    \"2018-05-21T15:15:00.000Z\": 316.1587352767,\n    \"2018-05-21T15:20:00.000Z\": 323.8701332699,\n    \"2018-05-21T15:25:00.000Z\": 317.1190739985,\n    \"2018-05-21T15:30:00.000Z\": 301.2711390737,\n    \"2018-05-21T15:35:00.000Z\": 273.5258666903,\n    \"2018-05-21T15:40:00.000Z\": 261.1074678772,\n    \"2018-05-21T15:45:00.000Z\": 267.2029071704,\n    \"2018-05-21T15:50:00.000Z\": 280.0055655431,\n    \"2018-05-21T15:55:00.000Z\": 262.7845262553,\n    \"2018-05-21T16:00:00.000Z\": 253.3816216091,\n    \"2018-05-21T16:05:00.000Z\": 261.568429667,\n    \"2018-05-21T16:10:00.000Z\": 275.2199153263,\n    \"2018-05-21T16:15:00.000Z\": 261.7716808722,\n    \"2018-05-21T16:20:00.000Z\": 253.6702085202,\n    \"2018-05-21T16:25:00.000Z\": 264.644546991,\n    \"2018-05-21T16:30:00.000Z\": 260.0792034028,\n    \"2018-05-21T16:35:00.000Z\": 255.6138360084,\n    \"2018-05-21T16:40:00.000Z\": 237.9523419399,\n    \"2018-05-21T16:45:00.000Z\": 254.7334032544,\n    \"2018-05-21T16:50:00.000Z\": 269.3378390459,\n    \"2018-05-21T16:55:00.000Z\": 249.3728867568,\n    \"2018-05-21T17:00:00.000Z\": 248.1575754584,\n    \"2018-05-21T17:05:00.000Z\": 246.5340665318,\n    \"2018-05-21T17:10:00.000Z\": 265.0021522274,\n    \"2018-05-21T17:15:00.000Z\": 250.1687925269,\n    \"2018-05-21T17:20:00.000Z\": 231.7427349071,\n    \"2018-05-21T17:25:00.000Z\": 252.4959783249,\n    \"2018-05-21T17:30:00.000Z\": 266.3043893095,\n    \"2018-05-21T17:35:00.000Z\": 242.5763346215,\n    \"2018-05-21T17:40:00.000Z\": 235.7665786001,\n    \"2018-05-21T17:45:00.000Z\": 243.7718278734,\n    \"2018-05-21T17:50:00.000Z\": 252.3190830758,\n    \"2018-05-21T17:55:00.000Z\": 248.5787566114,\n    \"2018-05-21T18:00:00.000Z\": 240.5047675689,\n    \"2018-05-21T18:05:00.000Z\": 232.3865041056,\n    \"2018-05-21T18:10:00.000Z\": 251.6981540088,\n    \"2018-05-21T18:15:00.000Z\": 248.9267343335,\n    \"2018-05-21T18:20:00.000Z\": 230.5404194973,\n    \"2018-05-21T18:25:00.000Z\": 242.7762844033,\n    \"2018-05-21T18:30:00.000Z\": 232.2519884073,\n    \"2018-05-21T18:35:00.000Z\": 239.7646228635,\n    \"2018-05-21T18:40:00.000Z\": 241.3671348806,\n    \"2018-05-21T18:45:00.000Z\": 230.8082371746,\n    \"2018-05-21T18:50:00.000Z\": 223.0095260547,\n    \"2018-05-21T18:55:00.000Z\": 236.5057738225,\n    \"2018-05-21T19:00:00.000Z\": 244.1521561349,\n    \"2018-05-21T19:05:00.000Z\": 229.8200184242,\n    \"2018-05-21T19:10:00.000Z\": 227.260960443,\n    \"2018-05-21T19:15:00.000Z\": 224.8377126659,\n    \"2018-05-21T19:20:00.000Z\": 227.89230623,\n    \"2018-05-21T19:25:00.000Z\": 239.8052105909,\n    \"2018-05-21T19:30:00.000Z\": 234.7738052962,\n    \"2018-05-21T19:35:00.000Z\": 227.0413327901,\n    \"2018-05-21T19:40:00.000Z\": 209.0694083257,\n    \"2018-05-21T19:45:00.000Z\": 243.4394369104,\n    \"2018-05-21T19:50:00.000Z\": 244.0213561339,\n    \"2018-05-21T19:55:00.000Z\": 241.6512902164,\n    \"2018-05-21T20:00:00.000Z\": 235.9499431139,\n    \"2018-05-21T20:05:00.000Z\": 233.8867893589,\n    \"2018-05-21T20:10:00.000Z\": 248.4678463306,\n    \"2018-05-21T20:15:00.000Z\": 250.8534584491,\n    \"2018-05-21T20:20:00.000Z\": 244.7945724698,\n    \"2018-05-21T20:25:00.000Z\": 223.9864173817,\n    \"2018-05-21T20:30:00.000Z\": 236.3576690687,\n    \"2018-05-21T20:35:00.000Z\": 252.8759042316,\n    \"2018-05-21T20:40:00.000Z\": 251.7834371473,\n    \"2018-05-21T20:45:00.000Z\": 251.7672641732,\n    \"2018-05-21T20:50:00.000Z\": 241.3963533459,\n    \"2018-05-21T20:55:00.000Z\": 230.4328128909,\n    \"2018-05-21T21:00:00.000Z\": 247.6399977861,\n    \"2018-05-21T21:05:00.000Z\": 253.7207127357,\n    \"2018-05-21T21:10:00.000Z\": 239.4657299581,\n    \"2018-05-21T21:15:00.000Z\": 247.9547043044,\n    \"2018-05-21T21:20:00.000Z\": 246.305074974,\n    \"2018-05-21T21:25:00.000Z\": 263.3165011851,\n    \"2018-05-21T21:30:00.000Z\": 249.2690772476,\n    \"2018-05-21T21:35:00.000Z\": 241.6100739807,\n    \"2018-05-21T21:40:00.000Z\": 243.4235918785,\n    \"2018-05-21T21:45:00.000Z\": 266.8562870047,\n    \"2018-05-21T21:50:00.000Z\": 266.5168016185,\n    \"2018-05-21T21:55:00.000Z\": 245.7146588239,\n    \"2018-05-21T22:00:00.000Z\": 239.4711229568,\n    \"2018-05-21T22:05:00.000Z\": 258.4958009255,\n    \"2018-05-21T22:10:00.000Z\": 268.3613431855,\n    \"2018-05-21T22:15:00.000Z\": 262.6967871798,\n    \"2018-05-21T22:20:00.000Z\": 247.5249566328,\n    \"2018-05-21T22:25:00.000Z\": 254.4802266552,\n    \"2018-05-21T22:30:00.000Z\": 271.8935426721,\n    \"2018-05-21T22:35:00.000Z\": 261.5589828459,\n    \"2018-05-21T22:40:00.000Z\": 250.4267352513,\n    \"2018-05-21T22:45:00.000Z\": 253.8074231597,\n    \"2018-05-21T22:50:00.000Z\": 277.0182034074,\n    \"2018-05-21T22:55:00.000Z\": 275.6463660401,\n    \"2018-05-21T23:00:00.000Z\": 253.2511679689,\n    \"2018-05-21T23:05:00.000Z\": 267.1565324881,\n    \"2018-05-21T23:10:00.000Z\": 270.4126473875,\n    \"2018-05-21T23:15:00.000Z\": 269.9145241413,\n    \"2018-05-21T23:20:00.000Z\": 260.0427486542,\n    \"2018-05-21T23:25:00.000Z\": 261.8064823512,\n    \"2018-05-21T23:30:00.000Z\": 266.6216156216,\n    \"2018-05-21T23:35:00.000Z\": 284.688721616,\n    \"2018-05-21T23:40:00.000Z\": 263.1994072853,\n    \"2018-05-21T23:45:00.000Z\": 271.5607869015,\n    \"2018-05-21T23:50:00.000Z\": 285.3811400046,\n    \"2018-05-21T23:55:00.000Z\": 281.9405519198,\n    \"2018-05-22T00:00:00.000Z\": 260.0894340273,\n    \"2018-05-22T00:05:00.000Z\": 250.6104664999,\n    \"2018-05-22T00:10:00.000Z\": 260.8163204059,\n    \"2018-05-22T00:15:00.000Z\": 277.4287752733,\n    \"2018-05-22T00:20:00.000Z\": 271.4001182926,\n    \"2018-05-22T00:25:00.000Z\": 250.8881918718,\n    \"2018-05-22T00:30:00.000Z\": 255.5231829841,\n    \"2018-05-22T00:35:00.000Z\": 258.1096199613,\n    \"2018-05-22T00:40:00.000Z\": 268.8494409385,\n    \"2018-05-22T00:45:00.000Z\": 262.0037381571,\n    \"2018-05-22T00:50:00.000Z\": 257.0855238447,\n    \"2018-05-22T00:55:00.000Z\": 247.2844317479,\n    \"2018-05-22T01:00:00.000Z\": 257.2944776947,\n    \"2018-05-22T01:05:00.000Z\": 272.5675702006,\n    \"2018-05-22T01:10:00.000Z\": 261.694463174,\n    \"2018-05-22T01:15:00.000Z\": 240.8498347495,\n    \"2018-05-22T01:20:00.000Z\": 245.9439936497,\n    \"2018-05-22T01:25:00.000Z\": 258.387774892,\n    \"2018-05-22T01:30:00.000Z\": 269.2886912867,\n    \"2018-05-22T01:35:00.000Z\": 261.8955542843,\n    \"2018-05-22T01:40:00.000Z\": 251.2915418634,\n    \"2018-05-22T01:45:00.000Z\": 237.4755708467,\n    \"2018-05-22T01:50:00.000Z\": 257.9397295362,\n    \"2018-05-22T01:55:00.000Z\": 266.9124394115,\n    \"2018-05-22T02:00:00.000Z\": 259.1095812604,\n    \"2018-05-22T02:05:00.000Z\": 239.1312736228,\n    \"2018-05-22T02:10:00.000Z\": 226.8252040128,\n    \"2018-05-22T02:15:00.000Z\": 239.7562523088,\n    \"2018-05-22T02:20:00.000Z\": 259.1618084356,\n    \"2018-05-22T02:25:00.000Z\": 251.9870362708,\n    \"2018-05-22T02:30:00.000Z\": 222.695188851,\n    \"2018-05-22T02:35:00.000Z\": 214.7192107025,\n    \"2018-05-22T02:40:00.000Z\": 225.2440938564,\n    \"2018-05-22T02:45:00.000Z\": 233.3238891005,\n    \"2018-05-22T02:50:00.000Z\": 252.4799835974,\n    \"2018-05-22T02:55:00.000Z\": 227.6566076947,\n    \"2018-05-22T03:00:00.000Z\": 211.2675840162,\n    \"2018-05-22T03:05:00.000Z\": 202.8194796906,\n    \"2018-05-22T03:10:00.000Z\": 201.0177535739,\n    \"2018-05-22T03:15:00.000Z\": 221.0236022647,\n    \"2018-05-22T03:20:00.000Z\": 225.1295211278,\n    \"2018-05-22T03:25:00.000Z\": 214.0598596335,\n    \"2018-05-22T03:30:00.000Z\": 210.8554415183,\n    \"2018-05-22T03:35:00.000Z\": 207.9182176868,\n    \"2018-05-22T03:40:00.000Z\": 195.2428509288,\n    \"2018-05-22T03:45:00.000Z\": 187.3339838169,\n    \"2018-05-22T03:50:00.000Z\": 209.9363325208,\n    \"2018-05-22T03:55:00.000Z\": 221.0133169503,\n    \"2018-05-22T04:00:00.000Z\": 225.7554925234,\n    \"2018-05-22T04:05:00.000Z\": 204.6003619505,\n    \"2018-05-22T04:10:00.000Z\": 206.6622865083,\n    \"2018-05-22T04:15:00.000Z\": 190.8732616037,\n    \"2018-05-22T04:20:00.000Z\": 199.5414898747,\n    \"2018-05-22T04:25:00.000Z\": 192.3027709022,\n    \"2018-05-22T04:30:00.000Z\": 226.3519300424,\n    \"2018-05-22T04:35:00.000Z\": 227.4075134562,\n    \"2018-05-22T04:40:00.000Z\": 237.5801354038,\n    \"2018-05-22T04:45:00.000Z\": 370.0233873937,\n    \"2018-05-22T04:50:00.000Z\": 476.6929263243,\n    \"2018-05-22T04:55:00.000Z\": 556.1444745173,\n    \"2018-05-22T05:00:00.000Z\": 809.9805079678,\n    \"2018-05-22T05:05:00.000Z\": 940.1002078546,\n    \"2018-05-22T05:10:00.000Z\": 922.2172570652,\n    \"2018-05-22T05:15:00.000Z\": 921.9394395256,\n    \"2018-05-22T05:20:00.000Z\": 931.1326843594,\n    \"2018-05-22T05:25:00.000Z\": 927.7988392295,\n    \"2018-05-22T05:30:00.000Z\": 924.5430977054,\n    \"2018-05-22T05:35:00.000Z\": 932.5727269319,\n    \"2018-05-22T05:40:00.000Z\": 936.4962950281,\n    \"2018-05-22T05:45:00.000Z\": 929.0260192607,\n    \"2018-05-22T05:50:00.000Z\": 926.4357356548,\n    \"2018-05-22T05:55:00.000Z\": 934.7257131637,\n    \"2018-05-22T06:00:00.000Z\": 908.4082221891,\n    \"2018-05-22T06:05:00.000Z\": 917.7112901544,\n    \"2018-05-22T06:10:00.000Z\": 924.0958121497\n    },\n    \"alert_series\": {\n    \"2018-05-19T20:50:00.000Z\": 0,\n    \"2018-05-19T20:55:00.000Z\": 0,\n    \"2018-05-19T21:00:00.000Z\": 0,\n    \"2018-05-19T21:05:00.000Z\": 0,\n    \"2018-05-19T21:10:00.000Z\": 0,\n    \"2018-05-19T21:15:00.000Z\": 0,\n    \"2018-05-19T21:20:00.000Z\": 0,\n    \"2018-05-19T21:25:00.000Z\": 0,\n    \"2018-05-19T21:30:00.000Z\": 0,\n    \"2018-05-19T21:35:00.000Z\": 0,\n    \"2018-05-19T21:40:00.000Z\": 0,\n    \"2018-05-19T21:45:00.000Z\": 0,\n    \"2018-05-19T21:50:00.000Z\": 0,\n    \"2018-05-19T21:55:00.000Z\": 0,\n    \"2018-05-19T22:00:00.000Z\": 0,\n    \"2018-05-19T22:05:00.000Z\": 0,\n    \"2018-05-19T22:10:00.000Z\": 0,\n    \"2018-05-19T22:15:00.000Z\": 0,\n    \"2018-05-19T22:20:00.000Z\": 0,\n    \"2018-05-19T22:25:00.000Z\": 0,\n    \"2018-05-19T22:30:00.000Z\": 0,\n    \"2018-05-19T22:35:00.000Z\": 0,\n    \"2018-05-19T22:40:00.000Z\": 0,\n    \"2018-05-19T22:45:00.000Z\": 0,\n    \"2018-05-19T22:50:00.000Z\": 0,\n    \"2018-05-19T22:55:00.000Z\": 0,\n    \"2018-05-19T23:00:00.000Z\": 0,\n    \"2018-05-19T23:05:00.000Z\": 0,\n    \"2018-05-19T23:10:00.000Z\": 0,\n    \"2018-05-19T23:15:00.000Z\": 0,\n    \"2018-05-19T23:20:00.000Z\": 0,\n    \"2018-05-19T23:25:00.000Z\": 0,\n    \"2018-05-19T23:30:00.000Z\": 0,\n    \"2018-05-19T23:35:00.000Z\": 0,\n    \"2018-05-19T23:40:00.000Z\": 0,\n    \"2018-05-19T23:45:00.000Z\": 0,\n    \"2018-05-19T23:50:00.000Z\": 0,\n    \"2018-05-19T23:55:00.000Z\": 0,\n    \"2018-05-20T00:00:00.000Z\": 0,\n    \"2018-05-20T00:05:00.000Z\": 0,\n    \"2018-05-20T00:10:00.000Z\": 0,\n    \"2018-05-20T00:15:00.000Z\": 0,\n    \"2018-05-20T00:20:00.000Z\": 0,\n    \"2018-05-20T00:25:00.000Z\": 0,\n    \"2018-05-20T00:30:00.000Z\": 0,\n    \"2018-05-20T00:35:00.000Z\": 0,\n    \"2018-05-20T00:40:00.000Z\": 0,\n    \"2018-05-20T00:45:00.000Z\": 0,\n    \"2018-05-20T00:50:00.000Z\": 0,\n    \"2018-05-20T00:55:00.000Z\": 0,\n    \"2018-05-20T01:00:00.000Z\": 0,\n    \"2018-05-20T01:05:00.000Z\": 0,\n    \"2018-05-20T01:10:00.000Z\": 0,\n    \"2018-05-20T01:15:00.000Z\": 0,\n    \"2018-05-20T01:20:00.000Z\": 0,\n    \"2018-05-20T01:25:00.000Z\": 0,\n    \"2018-05-20T01:30:00.000Z\": 0,\n    \"2018-05-20T01:35:00.000Z\": 0,\n    \"2018-05-20T01:40:00.000Z\": 0,\n    \"2018-05-20T01:45:00.000Z\": 0,\n    \"2018-05-20T01:50:00.000Z\": 0,\n    \"2018-05-20T01:55:00.000Z\": 0,\n    \"2018-05-20T02:00:00.000Z\": 0,\n    \"2018-05-20T02:05:00.000Z\": 0,\n    \"2018-05-20T02:10:00.000Z\": 0,\n    \"2018-05-20T02:15:00.000Z\": 0,\n    \"2018-05-20T02:20:00.000Z\": 0,\n    \"2018-05-20T02:25:00.000Z\": 0,\n    \"2018-05-20T02:30:00.000Z\": 0,\n    \"2018-05-20T02:35:00.000Z\": 0,\n    \"2018-05-20T02:40:00.000Z\": 0,\n    \"2018-05-20T02:45:00.000Z\": 0,\n    \"2018-05-20T02:50:00.000Z\": 0,\n    \"2018-05-20T02:55:00.000Z\": 0,\n    \"2018-05-20T03:00:00.000Z\": 0,\n    \"2018-05-20T03:05:00.000Z\": 0,\n    \"2018-05-20T03:10:00.000Z\": 0,\n    \"2018-05-20T03:15:00.000Z\": 0,\n    \"2018-05-20T03:20:00.000Z\": 0,\n    \"2018-05-20T03:25:00.000Z\": 0,\n    \"2018-05-20T03:30:00.000Z\": 0,\n    \"2018-05-20T03:35:00.000Z\": 0,\n    \"2018-05-20T03:40:00.000Z\": 0,\n    \"2018-05-20T03:45:00.000Z\": 0,\n    \"2018-05-20T03:50:00.000Z\": 0,\n    \"2018-05-20T03:55:00.000Z\": 0,\n    \"2018-05-20T04:00:00.000Z\": 0,\n    \"2018-05-20T04:05:00.000Z\": 0,\n    \"2018-05-20T04:10:00.000Z\": 0,\n    \"2018-05-20T04:15:00.000Z\": 0,\n    \"2018-05-20T04:20:00.000Z\": 0,\n    \"2018-05-20T04:25:00.000Z\": 0,\n    \"2018-05-20T04:30:00.000Z\": 0,\n    \"2018-05-20T04:35:00.000Z\": 0,\n    \"2018-05-20T04:40:00.000Z\": 0,\n    \"2018-05-20T04:45:00.000Z\": 0,\n    \"2018-05-20T04:50:00.000Z\": 0,\n    \"2018-05-20T04:55:00.000Z\": 0,\n    \"2018-05-20T05:00:00.000Z\": 0,\n    \"2018-05-20T05:05:00.000Z\": 0,\n    \"2018-05-20T05:10:00.000Z\": 0,\n    \"2018-05-20T05:15:00.000Z\": 0,\n    \"2018-05-20T05:20:00.000Z\": 0,\n    \"2018-05-20T05:25:00.000Z\": 1,\n    \"2018-05-20T05:30:00.000Z\": 0,\n    \"2018-05-20T05:35:00.000Z\": 0,\n    \"2018-05-20T05:40:00.000Z\": 0,\n    \"2018-05-20T05:45:00.000Z\": 0,\n    \"2018-05-20T05:50:00.000Z\": 0,\n    \"2018-05-20T05:55:00.000Z\": 0,\n    \"2018-05-20T06:00:00.000Z\": 0,\n    \"2018-05-20T06:05:00.000Z\": 0,\n    \"2018-05-20T06:10:00.000Z\": 0,\n    \"2018-05-20T06:15:00.000Z\": 0,\n    \"2018-05-20T06:20:00.000Z\": 0,\n    \"2018-05-20T06:25:00.000Z\": 0,\n    \"2018-05-20T06:30:00.000Z\": 0,\n    \"2018-05-20T06:35:00.000Z\": 0,\n    \"2018-05-20T06:40:00.000Z\": 0,\n    \"2018-05-20T06:45:00.000Z\": 0,\n    \"2018-05-20T06:50:00.000Z\": 0,\n    \"2018-05-20T06:55:00.000Z\": 0,\n    \"2018-05-20T07:00:00.000Z\": 0,\n    \"2018-05-20T07:05:00.000Z\": 0,\n    \"2018-05-20T07:10:00.000Z\": 0,\n    \"2018-05-20T07:15:00.000Z\": 0,\n    \"2018-05-20T07:20:00.000Z\": 0,\n    \"2018-05-20T07:25:00.000Z\": 0,\n    \"2018-05-20T07:30:00.000Z\": 0,\n    \"2018-05-20T07:35:00.000Z\": 0,\n    \"2018-05-20T07:40:00.000Z\": 0,\n    \"2018-05-20T07:45:00.000Z\": 0,\n    \"2018-05-20T07:50:00.000Z\": 0,\n    \"2018-05-20T07:55:00.000Z\": 0,\n    \"2018-05-20T08:00:00.000Z\": 0,\n    \"2018-05-20T08:05:00.000Z\": 0,\n    \"2018-05-20T08:10:00.000Z\": 0,\n    \"2018-05-20T08:15:00.000Z\": 0,\n    \"2018-05-20T08:20:00.000Z\": 0,\n    \"2018-05-20T08:25:00.000Z\": 0,\n    \"2018-05-20T08:30:00.000Z\": 0,\n    \"2018-05-20T08:35:00.000Z\": 0,\n    \"2018-05-20T08:40:00.000Z\": 0,\n    \"2018-05-20T08:45:00.000Z\": 0,\n    \"2018-05-20T08:50:00.000Z\": 0,\n    \"2018-05-20T08:55:00.000Z\": 0,\n    \"2018-05-20T09:00:00.000Z\": 0,\n    \"2018-05-20T09:05:00.000Z\": 0,\n    \"2018-05-20T09:10:00.000Z\": 0,\n    \"2018-05-20T09:15:00.000Z\": 0,\n    \"2018-05-20T09:20:00.000Z\": 0,\n    \"2018-05-20T09:25:00.000Z\": 0,\n    \"2018-05-20T09:30:00.000Z\": 0,\n    \"2018-05-20T09:35:00.000Z\": 0,\n    \"2018-05-20T09:40:00.000Z\": 0,\n    \"2018-05-20T09:45:00.000Z\": 0,\n    \"2018-05-20T09:50:00.000Z\": 0,\n    \"2018-05-20T09:55:00.000Z\": 0,\n    \"2018-05-20T10:00:00.000Z\": 0,\n    \"2018-05-20T10:05:00.000Z\": 0,\n    \"2018-05-20T10:10:00.000Z\": 0,\n    \"2018-05-20T10:15:00.000Z\": 0,\n    \"2018-05-20T10:20:00.000Z\": 0,\n    \"2018-05-20T10:25:00.000Z\": 0,\n    \"2018-05-20T10:30:00.000Z\": 0,\n    \"2018-05-20T10:35:00.000Z\": 0,\n    \"2018-05-20T10:40:00.000Z\": 0,\n    \"2018-05-20T10:45:00.000Z\": 0,\n    \"2018-05-20T10:50:00.000Z\": 0,\n    \"2018-05-20T10:55:00.000Z\": 0,\n    \"2018-05-20T11:00:00.000Z\": 0,\n    \"2018-05-20T11:05:00.000Z\": 0,\n    \"2018-05-20T11:10:00.000Z\": 0,\n    \"2018-05-20T11:15:00.000Z\": 0,\n    \"2018-05-20T11:20:00.000Z\": 0,\n    \"2018-05-20T11:25:00.000Z\": -1,\n    \"2018-05-20T11:30:00.000Z\": 0,\n    \"2018-05-20T11:35:00.000Z\": 0,\n    \"2018-05-20T11:40:00.000Z\": 0,\n    \"2018-05-20T11:45:00.000Z\": 0,\n    \"2018-05-20T11:50:00.000Z\": 0,\n    \"2018-05-20T11:55:00.000Z\": 0,\n    \"2018-05-20T12:00:00.000Z\": 0,\n    \"2018-05-20T12:05:00.000Z\": 0,\n    \"2018-05-20T12:10:00.000Z\": 0,\n    \"2018-05-20T12:15:00.000Z\": 0,\n    \"2018-05-20T12:20:00.000Z\": 0,\n    \"2018-05-20T12:25:00.000Z\": 0,\n    \"2018-05-20T12:30:00.000Z\": 0,\n    \"2018-05-20T12:35:00.000Z\": 0,\n    \"2018-05-20T12:40:00.000Z\": 0,\n    \"2018-05-20T12:45:00.000Z\": 0,\n    \"2018-05-20T12:50:00.000Z\": 0,\n    \"2018-05-20T12:55:00.000Z\": 0,\n    \"2018-05-20T13:00:00.000Z\": 0,\n    \"2018-05-20T13:05:00.000Z\": 0,\n    \"2018-05-20T13:10:00.000Z\": 0,\n    \"2018-05-20T13:15:00.000Z\": 0,\n    \"2018-05-20T13:20:00.000Z\": 0,\n    \"2018-05-20T13:25:00.000Z\": 0,\n    \"2018-05-20T13:30:00.000Z\": 0,\n    \"2018-05-20T13:35:00.000Z\": 0,\n    \"2018-05-20T13:40:00.000Z\": 0,\n    \"2018-05-20T13:45:00.000Z\": 0,\n    \"2018-05-20T13:50:00.000Z\": 0,\n    \"2018-05-20T13:55:00.000Z\": 0,\n    \"2018-05-20T14:00:00.000Z\": 0,\n    \"2018-05-20T14:05:00.000Z\": 0,\n    \"2018-05-20T14:10:00.000Z\": 0,\n    \"2018-05-20T14:15:00.000Z\": 0,\n    \"2018-05-20T14:20:00.000Z\": 0,\n    \"2018-05-20T14:25:00.000Z\": 0,\n    \"2018-05-20T14:30:00.000Z\": 0,\n    \"2018-05-20T14:35:00.000Z\": 0,\n    \"2018-05-20T14:40:00.000Z\": 0,\n    \"2018-05-20T14:45:00.000Z\": 0,\n    \"2018-05-20T14:50:00.000Z\": 0,\n    \"2018-05-20T14:55:00.000Z\": 0,\n    \"2018-05-20T15:00:00.000Z\": 0,\n    \"2018-05-20T15:05:00.000Z\": 0,\n    \"2018-05-20T15:10:00.000Z\": 0,\n    \"2018-05-20T15:15:00.000Z\": 0,\n    \"2018-05-20T15:20:00.000Z\": 0,\n    \"2018-05-20T15:25:00.000Z\": 0,\n    \"2018-05-20T15:30:00.000Z\": 0,\n    \"2018-05-20T15:35:00.000Z\": 0,\n    \"2018-05-20T15:40:00.000Z\": 0,\n    \"2018-05-20T15:45:00.000Z\": 0,\n    \"2018-05-20T15:50:00.000Z\": 0,\n    \"2018-05-20T15:55:00.000Z\": 0,\n    \"2018-05-20T16:00:00.000Z\": 0,\n    \"2018-05-20T16:05:00.000Z\": 0,\n    \"2018-05-20T16:10:00.000Z\": 0,\n    \"2018-05-20T16:15:00.000Z\": 0,\n    \"2018-05-20T16:20:00.000Z\": 0,\n    \"2018-05-20T16:25:00.000Z\": 0,\n    \"2018-05-20T16:30:00.000Z\": 0,\n    \"2018-05-20T16:35:00.000Z\": 0,\n    \"2018-05-20T16:40:00.000Z\": 0,\n    \"2018-05-20T16:45:00.000Z\": 0,\n    \"2018-05-20T16:50:00.000Z\": 0,\n    \"2018-05-20T16:55:00.000Z\": 0,\n    \"2018-05-20T17:00:00.000Z\": 0,\n    \"2018-05-20T17:05:00.000Z\": 0,\n    \"2018-05-20T17:10:00.000Z\": 0,\n    \"2018-05-20T17:15:00.000Z\": 0,\n    \"2018-05-20T17:20:00.000Z\": 0,\n    \"2018-05-20T17:25:00.000Z\": 0,\n    \"2018-05-20T17:30:00.000Z\": 0,\n    \"2018-05-20T17:35:00.000Z\": 0,\n    \"2018-05-20T17:40:00.000Z\": 0,\n    \"2018-05-20T17:45:00.000Z\": 0,\n    \"2018-05-20T17:50:00.000Z\": 0,\n    \"2018-05-20T17:55:00.000Z\": 0,\n    \"2018-05-20T18:00:00.000Z\": 0,\n    \"2018-05-20T18:05:00.000Z\": 0,\n    \"2018-05-20T18:10:00.000Z\": 0,\n    \"2018-05-20T18:15:00.000Z\": 0,\n    \"2018-05-20T18:20:00.000Z\": 0,\n    \"2018-05-20T18:25:00.000Z\": 0,\n    \"2018-05-20T18:30:00.000Z\": 0,\n    \"2018-05-20T18:35:00.000Z\": 0,\n    \"2018-05-20T18:40:00.000Z\": 0,\n    \"2018-05-20T18:45:00.000Z\": 0,\n    \"2018-05-20T18:50:00.000Z\": 0,\n    \"2018-05-20T18:55:00.000Z\": 0,\n    \"2018-05-20T19:00:00.000Z\": 0,\n    \"2018-05-20T19:05:00.000Z\": 0,\n    \"2018-05-20T19:10:00.000Z\": 0,\n    \"2018-05-20T19:15:00.000Z\": 0,\n    \"2018-05-20T19:20:00.000Z\": 0,\n    \"2018-05-20T19:25:00.000Z\": 0,\n    \"2018-05-20T19:30:00.000Z\": 0,\n    \"2018-05-20T19:35:00.000Z\": 0,\n    \"2018-05-20T19:40:00.000Z\": 0,\n    \"2018-05-20T19:45:00.000Z\": 0,\n    \"2018-05-20T19:50:00.000Z\": 0,\n    \"2018-05-20T19:55:00.000Z\": 0,\n    \"2018-05-20T20:00:00.000Z\": 0,\n    \"2018-05-20T20:05:00.000Z\": 0,\n    \"2018-05-20T20:10:00.000Z\": 0,\n    \"2018-05-20T20:15:00.000Z\": 0,\n    \"2018-05-20T20:20:00.000Z\": 0,\n    \"2018-05-20T20:25:00.000Z\": 0,\n    \"2018-05-20T20:30:00.000Z\": 0,\n    \"2018-05-20T20:35:00.000Z\": 0,\n    \"2018-05-20T20:40:00.000Z\": 0,\n    \"2018-05-20T20:45:00.000Z\": 0,\n    \"2018-05-20T20:50:00.000Z\": 0,\n    \"2018-05-20T20:55:00.000Z\": 0,\n    \"2018-05-20T21:00:00.000Z\": 0,\n    \"2018-05-20T21:05:00.000Z\": 0,\n    \"2018-05-20T21:10:00.000Z\": 0,\n    \"2018-05-20T21:15:00.000Z\": 0,\n    \"2018-05-20T21:20:00.000Z\": 0,\n    \"2018-05-20T21:25:00.000Z\": 0,\n    \"2018-05-20T21:30:00.000Z\": 0,\n    \"2018-05-20T21:35:00.000Z\": 0,\n    \"2018-05-20T21:40:00.000Z\": 0,\n    \"2018-05-20T21:45:00.000Z\": 0,\n    \"2018-05-20T21:50:00.000Z\": 0,\n    \"2018-05-20T21:55:00.000Z\": 0,\n    \"2018-05-20T22:00:00.000Z\": 0,\n    \"2018-05-20T22:05:00.000Z\": 0,\n    \"2018-05-20T22:10:00.000Z\": 0,\n    \"2018-05-20T22:15:00.000Z\": 0,\n    \"2018-05-20T22:20:00.000Z\": 0,\n    \"2018-05-20T22:25:00.000Z\": 0,\n    \"2018-05-20T22:30:00.000Z\": 0,\n    \"2018-05-20T22:35:00.000Z\": 0,\n    \"2018-05-20T22:40:00.000Z\": 0,\n    \"2018-05-20T22:45:00.000Z\": 0,\n    \"2018-05-20T22:50:00.000Z\": 0,\n    \"2018-05-20T22:55:00.000Z\": 0,\n    \"2018-05-20T23:00:00.000Z\": 0,\n    \"2018-05-20T23:05:00.000Z\": 0,\n    \"2018-05-20T23:10:00.000Z\": 0,\n    \"2018-05-20T23:15:00.000Z\": 0,\n    \"2018-05-20T23:20:00.000Z\": 0,\n    \"2018-05-20T23:25:00.000Z\": 0,\n    \"2018-05-20T23:30:00.000Z\": 0,\n    \"2018-05-20T23:35:00.000Z\": 0,\n    \"2018-05-20T23:40:00.000Z\": 0,\n    \"2018-05-20T23:45:00.000Z\": 0,\n    \"2018-05-20T23:50:00.000Z\": 0,\n    \"2018-05-20T23:55:00.000Z\": 0,\n    \"2018-05-21T00:00:00.000Z\": 0,\n    \"2018-05-21T00:05:00.000Z\": 0,\n    \"2018-05-21T00:10:00.000Z\": 0,\n    \"2018-05-21T00:15:00.000Z\": 0,\n    \"2018-05-21T00:20:00.000Z\": 0,\n    \"2018-05-21T00:25:00.000Z\": 0,\n    \"2018-05-21T00:30:00.000Z\": 0,\n    \"2018-05-21T00:35:00.000Z\": 0,\n    \"2018-05-21T00:40:00.000Z\": 0,\n    \"2018-05-21T00:45:00.000Z\": 0,\n    \"2018-05-21T00:50:00.000Z\": 0,\n    \"2018-05-21T00:55:00.000Z\": 0,\n    \"2018-05-21T01:00:00.000Z\": 0,\n    \"2018-05-21T01:05:00.000Z\": 0,\n    \"2018-05-21T01:10:00.000Z\": 0,\n    \"2018-05-21T01:15:00.000Z\": 0,\n    \"2018-05-21T01:20:00.000Z\": 0,\n    \"2018-05-21T01:25:00.000Z\": 0,\n    \"2018-05-21T01:30:00.000Z\": 0,\n    \"2018-05-21T01:35:00.000Z\": 0,\n    \"2018-05-21T01:40:00.000Z\": 0,\n    \"2018-05-21T01:45:00.000Z\": 0,\n    \"2018-05-21T01:50:00.000Z\": 0,\n    \"2018-05-21T01:55:00.000Z\": 0,\n    \"2018-05-21T02:00:00.000Z\": 0,\n    \"2018-05-21T02:05:00.000Z\": 0,\n    \"2018-05-21T02:10:00.000Z\": 0,\n    \"2018-05-21T02:15:00.000Z\": 0,\n    \"2018-05-21T02:20:00.000Z\": 0,\n    \"2018-05-21T02:25:00.000Z\": 0,\n    \"2018-05-21T02:30:00.000Z\": 0,\n    \"2018-05-21T02:35:00.000Z\": 0,\n    \"2018-05-21T02:40:00.000Z\": 0,\n    \"2018-05-21T02:45:00.000Z\": 0,\n    \"2018-05-21T02:50:00.000Z\": 0,\n    \"2018-05-21T02:55:00.000Z\": 0,\n    \"2018-05-21T03:00:00.000Z\": 0,\n    \"2018-05-21T03:05:00.000Z\": 0,\n    \"2018-05-21T03:10:00.000Z\": 0,\n    \"2018-05-21T03:15:00.000Z\": 0,\n    \"2018-05-21T03:20:00.000Z\": 0,\n    \"2018-05-21T03:25:00.000Z\": 0,\n    \"2018-05-21T03:30:00.000Z\": 0,\n    \"2018-05-21T03:35:00.000Z\": 0,\n    \"2018-05-21T03:40:00.000Z\": 0,\n    \"2018-05-21T03:45:00.000Z\": 0,\n    \"2018-05-21T03:50:00.000Z\": 0,\n    \"2018-05-21T03:55:00.000Z\": 0,\n    \"2018-05-21T04:00:00.000Z\": 0,\n    \"2018-05-21T04:05:00.000Z\": 0,\n    \"2018-05-21T04:10:00.000Z\": 0,\n    \"2018-05-21T04:15:00.000Z\": 0,\n    \"2018-05-21T04:20:00.000Z\": 0,\n    \"2018-05-21T04:25:00.000Z\": 0,\n    \"2018-05-21T04:30:00.000Z\": 0,\n    \"2018-05-21T04:35:00.000Z\": 0,\n    \"2018-05-21T04:40:00.000Z\": 0,\n    \"2018-05-21T04:45:00.000Z\": 0,\n    \"2018-05-21T04:50:00.000Z\": 0,\n    \"2018-05-21T04:55:00.000Z\": 0,\n    \"2018-05-21T05:00:00.000Z\": 0,\n    \"2018-05-21T05:05:00.000Z\": 0,\n    \"2018-05-21T05:10:00.000Z\": 0,\n    \"2018-05-21T05:15:00.000Z\": 0,\n    \"2018-05-21T05:20:00.000Z\": 0,\n    \"2018-05-21T05:25:00.000Z\": 0,\n    \"2018-05-21T05:30:00.000Z\": 0,\n    \"2018-05-21T05:35:00.000Z\": 0,\n    \"2018-05-21T05:40:00.000Z\": 1,\n    \"2018-05-21T05:45:00.000Z\": 0,\n    \"2018-05-21T05:50:00.000Z\": 0,\n    \"2018-05-21T05:55:00.000Z\": 0,\n    \"2018-05-21T06:00:00.000Z\": 0,\n    \"2018-05-21T06:05:00.000Z\": 0,\n    \"2018-05-21T06:10:00.000Z\": 0,\n    \"2018-05-21T06:15:00.000Z\": 0,\n    \"2018-05-21T06:20:00.000Z\": 0,\n    \"2018-05-21T06:25:00.000Z\": 0,\n    \"2018-05-21T06:30:00.000Z\": 0,\n    \"2018-05-21T06:35:00.000Z\": 0,\n    \"2018-05-21T06:40:00.000Z\": 0,\n    \"2018-05-21T06:45:00.000Z\": 0,\n    \"2018-05-21T06:50:00.000Z\": 0,\n    \"2018-05-21T06:55:00.000Z\": 0,\n    \"2018-05-21T07:00:00.000Z\": 0,\n    \"2018-05-21T07:05:00.000Z\": 0,\n    \"2018-05-21T07:10:00.000Z\": 0,\n    \"2018-05-21T07:15:00.000Z\": 0,\n    \"2018-05-21T07:20:00.000Z\": 0,\n    \"2018-05-21T07:25:00.000Z\": 0,\n    \"2018-05-21T07:30:00.000Z\": 0,\n    \"2018-05-21T07:35:00.000Z\": 0,\n    \"2018-05-21T07:40:00.000Z\": 0,\n    \"2018-05-21T07:45:00.000Z\": 0,\n    \"2018-05-21T07:50:00.000Z\": 0,\n    \"2018-05-21T07:55:00.000Z\": 0,\n    \"2018-05-21T08:00:00.000Z\": 0,\n    \"2018-05-21T08:05:00.000Z\": 0,\n    \"2018-05-21T08:10:00.000Z\": 0,\n    \"2018-05-21T08:15:00.000Z\": 0,\n    \"2018-05-21T08:20:00.000Z\": 0,\n    \"2018-05-21T08:25:00.000Z\": 0,\n    \"2018-05-21T08:30:00.000Z\": 0,\n    \"2018-05-21T08:35:00.000Z\": 0,\n    \"2018-05-21T08:40:00.000Z\": 0,\n    \"2018-05-21T08:45:00.000Z\": 0,\n    \"2018-05-21T08:50:00.000Z\": 0,\n    \"2018-05-21T08:55:00.000Z\": 0,\n    \"2018-05-21T09:00:00.000Z\": 0,\n    \"2018-05-21T09:05:00.000Z\": 0,\n    \"2018-05-21T09:10:00.000Z\": 0,\n    \"2018-05-21T09:15:00.000Z\": 0,\n    \"2018-05-21T09:20:00.000Z\": 0,\n    \"2018-05-21T09:25:00.000Z\": 0,\n    \"2018-05-21T09:30:00.000Z\": 0,\n    \"2018-05-21T09:35:00.000Z\": 0,\n    \"2018-05-21T09:40:00.000Z\": 0,\n    \"2018-05-21T09:45:00.000Z\": 0,\n    \"2018-05-21T09:50:00.000Z\": 0,\n    \"2018-05-21T09:55:00.000Z\": 0,\n    \"2018-05-21T10:00:00.000Z\": 0,\n    \"2018-05-21T10:05:00.000Z\": 0,\n    \"2018-05-21T10:10:00.000Z\": 0,\n    \"2018-05-21T10:15:00.000Z\": 0,\n    \"2018-05-21T10:20:00.000Z\": 0,\n    \"2018-05-21T10:25:00.000Z\": 0,\n    \"2018-05-21T10:30:00.000Z\": 0,\n    \"2018-05-21T10:35:00.000Z\": 0,\n    \"2018-05-21T10:40:00.000Z\": 0,\n    \"2018-05-21T10:45:00.000Z\": 0,\n    \"2018-05-21T10:50:00.000Z\": 0,\n    \"2018-05-21T10:55:00.000Z\": 0,\n    \"2018-05-21T11:00:00.000Z\": 0,\n    \"2018-05-21T11:05:00.000Z\": 0,\n    \"2018-05-21T11:10:00.000Z\": 0,\n    \"2018-05-21T11:15:00.000Z\": 0,\n    \"2018-05-21T11:20:00.000Z\": 0,\n    \"2018-05-21T11:25:00.000Z\": 0,\n    \"2018-05-21T11:30:00.000Z\": 0,\n    \"2018-05-21T11:35:00.000Z\": -1,\n    \"2018-05-21T11:40:00.000Z\": 0,\n    \"2018-05-21T11:45:00.000Z\": 0,\n    \"2018-05-21T11:50:00.000Z\": 0,\n    \"2018-05-21T11:55:00.000Z\": 0,\n    \"2018-05-21T12:00:00.000Z\": 0,\n    \"2018-05-21T12:05:00.000Z\": 0,\n    \"2018-05-21T12:10:00.000Z\": 0,\n    \"2018-05-21T12:15:00.000Z\": 0,\n    \"2018-05-21T12:20:00.000Z\": 0,\n    \"2018-05-21T12:25:00.000Z\": 0,\n    \"2018-05-21T12:30:00.000Z\": 0,\n    \"2018-05-21T12:35:00.000Z\": 0,\n    \"2018-05-21T12:40:00.000Z\": 0,\n    \"2018-05-21T12:45:00.000Z\": 0,\n    \"2018-05-21T12:50:00.000Z\": 0,\n    \"2018-05-21T12:55:00.000Z\": 0,\n    \"2018-05-21T13:00:00.000Z\": 0,\n    \"2018-05-21T13:05:00.000Z\": 0,\n    \"2018-05-21T13:10:00.000Z\": 0,\n    \"2018-05-21T13:15:00.000Z\": 0,\n    \"2018-05-21T13:20:00.000Z\": 0,\n    \"2018-05-21T13:25:00.000Z\": 0,\n    \"2018-05-21T13:30:00.000Z\": 0,\n    \"2018-05-21T13:35:00.000Z\": 0,\n    \"2018-05-21T13:40:00.000Z\": 0,\n    \"2018-05-21T13:45:00.000Z\": 0,\n    \"2018-05-21T13:50:00.000Z\": 0,\n    \"2018-05-21T13:55:00.000Z\": 0,\n    \"2018-05-21T14:00:00.000Z\": 0,\n    \"2018-05-21T14:05:00.000Z\": 0,\n    \"2018-05-21T14:10:00.000Z\": 0,\n    \"2018-05-21T14:15:00.000Z\": 0,\n    \"2018-05-21T14:20:00.000Z\": 0,\n    \"2018-05-21T14:25:00.000Z\": 0,\n    \"2018-05-21T14:30:00.000Z\": 0,\n    \"2018-05-21T14:35:00.000Z\": 0,\n    \"2018-05-21T14:40:00.000Z\": 0,\n    \"2018-05-21T14:45:00.000Z\": 0,\n    \"2018-05-21T14:50:00.000Z\": 0,\n    \"2018-05-21T14:55:00.000Z\": 0,\n    \"2018-05-21T15:00:00.000Z\": 0,\n    \"2018-05-21T15:05:00.000Z\": 0,\n    \"2018-05-21T15:10:00.000Z\": 0,\n    \"2018-05-21T15:15:00.000Z\": 0,\n    \"2018-05-21T15:20:00.000Z\": 0,\n    \"2018-05-21T15:25:00.000Z\": 0,\n    \"2018-05-21T15:30:00.000Z\": 0,\n    \"2018-05-21T15:35:00.000Z\": 0,\n    \"2018-05-21T15:40:00.000Z\": 0,\n    \"2018-05-21T15:45:00.000Z\": 0,\n    \"2018-05-21T15:50:00.000Z\": 0,\n    \"2018-05-21T15:55:00.000Z\": 0,\n    \"2018-05-21T16:00:00.000Z\": 0,\n    \"2018-05-21T16:05:00.000Z\": 0,\n    \"2018-05-21T16:10:00.000Z\": 0,\n    \"2018-05-21T16:15:00.000Z\": 0,\n    \"2018-05-21T16:20:00.000Z\": 0,\n    \"2018-05-21T16:25:00.000Z\": 0,\n    \"2018-05-21T16:30:00.000Z\": 0,\n    \"2018-05-21T16:35:00.000Z\": 0,\n    \"2018-05-21T16:40:00.000Z\": 0,\n    \"2018-05-21T16:45:00.000Z\": 0,\n    \"2018-05-21T16:50:00.000Z\": 0,\n    \"2018-05-21T16:55:00.000Z\": 0,\n    \"2018-05-21T17:00:00.000Z\": 0,\n    \"2018-05-21T17:05:00.000Z\": 0,\n    \"2018-05-21T17:10:00.000Z\": 0,\n    \"2018-05-21T17:15:00.000Z\": 0,\n    \"2018-05-21T17:20:00.000Z\": 0,\n    \"2018-05-21T17:25:00.000Z\": 0,\n    \"2018-05-21T17:30:00.000Z\": 0,\n    \"2018-05-21T17:35:00.000Z\": 0,\n    \"2018-05-21T17:40:00.000Z\": 0,\n    \"2018-05-21T17:45:00.000Z\": 0,\n    \"2018-05-21T17:50:00.000Z\": 0,\n    \"2018-05-21T17:55:00.000Z\": 0,\n    \"2018-05-21T18:00:00.000Z\": 0,\n    \"2018-05-21T18:05:00.000Z\": 0,\n    \"2018-05-21T18:10:00.000Z\": 0,\n    \"2018-05-21T18:15:00.000Z\": 0,\n    \"2018-05-21T18:20:00.000Z\": 0,\n    \"2018-05-21T18:25:00.000Z\": 0,\n    \"2018-05-21T18:30:00.000Z\": 0,\n    \"2018-05-21T18:35:00.000Z\": 0,\n    \"2018-05-21T18:40:00.000Z\": 0,\n    \"2018-05-21T18:45:00.000Z\": 0,\n    \"2018-05-21T18:50:00.000Z\": 0,\n    \"2018-05-21T18:55:00.000Z\": 0,\n    \"2018-05-21T19:00:00.000Z\": 0,\n    \"2018-05-21T19:05:00.000Z\": 0,\n    \"2018-05-21T19:10:00.000Z\": 0,\n    \"2018-05-21T19:15:00.000Z\": 0,\n    \"2018-05-21T19:20:00.000Z\": 0,\n    \"2018-05-21T19:25:00.000Z\": 0,\n    \"2018-05-21T19:30:00.000Z\": 0,\n    \"2018-05-21T19:35:00.000Z\": 0,\n    \"2018-05-21T19:40:00.000Z\": 0,\n    \"2018-05-21T19:45:00.000Z\": 0,\n    \"2018-05-21T19:50:00.000Z\": 0,\n    \"2018-05-21T19:55:00.000Z\": 0,\n    \"2018-05-21T20:00:00.000Z\": 0,\n    \"2018-05-21T20:05:00.000Z\": 0,\n    \"2018-05-21T20:10:00.000Z\": 0,\n    \"2018-05-21T20:15:00.000Z\": 0,\n    \"2018-05-21T20:20:00.000Z\": 0,\n    \"2018-05-21T20:25:00.000Z\": 0,\n    \"2018-05-21T20:30:00.000Z\": 0,\n    \"2018-05-21T20:35:00.000Z\": 0,\n    \"2018-05-21T20:40:00.000Z\": 0,\n    \"2018-05-21T20:45:00.000Z\": 0,\n    \"2018-05-21T20:50:00.000Z\": 0,\n    \"2018-05-21T20:55:00.000Z\": 0,\n    \"2018-05-21T21:00:00.000Z\": 0,\n    \"2018-05-21T21:05:00.000Z\": 0,\n    \"2018-05-21T21:10:00.000Z\": 0,\n    \"2018-05-21T21:15:00.000Z\": 0,\n    \"2018-05-21T21:20:00.000Z\": 0,\n    \"2018-05-21T21:25:00.000Z\": 0,\n    \"2018-05-21T21:30:00.000Z\": 0,\n    \"2018-05-21T21:35:00.000Z\": 0,\n    \"2018-05-21T21:40:00.000Z\": 0,\n    \"2018-05-21T21:45:00.000Z\": 0,\n    \"2018-05-21T21:50:00.000Z\": 0,\n    \"2018-05-21T21:55:00.000Z\": 0,\n    \"2018-05-21T22:00:00.000Z\": 0,\n    \"2018-05-21T22:05:00.000Z\": 0,\n    \"2018-05-21T22:10:00.000Z\": 0,\n    \"2018-05-21T22:15:00.000Z\": 0,\n    \"2018-05-21T22:20:00.000Z\": 0,\n    \"2018-05-21T22:25:00.000Z\": 0,\n    \"2018-05-21T22:30:00.000Z\": 0,\n    \"2018-05-21T22:35:00.000Z\": 0,\n    \"2018-05-21T22:40:00.000Z\": 0,\n    \"2018-05-21T22:45:00.000Z\": 0,\n    \"2018-05-21T22:50:00.000Z\": 0,\n    \"2018-05-21T22:55:00.000Z\": 0,\n    \"2018-05-21T23:00:00.000Z\": 0,\n    \"2018-05-21T23:05:00.000Z\": 0,\n    \"2018-05-21T23:10:00.000Z\": 0,\n    \"2018-05-21T23:15:00.000Z\": 0,\n    \"2018-05-21T23:20:00.000Z\": 0,\n    \"2018-05-21T23:25:00.000Z\": 0,\n    \"2018-05-21T23:30:00.000Z\": 0,\n    \"2018-05-21T23:35:00.000Z\": 0,\n    \"2018-05-21T23:40:00.000Z\": 0,\n    \"2018-05-21T23:45:00.000Z\": 0,\n    \"2018-05-21T23:50:00.000Z\": 0,\n    \"2018-05-21T23:55:00.000Z\": 0,\n    \"2018-05-22T00:00:00.000Z\": 0,\n    \"2018-05-22T00:05:00.000Z\": 0,\n    \"2018-05-22T00:10:00.000Z\": 0,\n    \"2018-05-22T00:15:00.000Z\": 0,\n    \"2018-05-22T00:20:00.000Z\": 0,\n    \"2018-05-22T00:25:00.000Z\": 0,\n    \"2018-05-22T00:30:00.000Z\": 0,\n    \"2018-05-22T00:35:00.000Z\": 0,\n    \"2018-05-22T00:40:00.000Z\": 0,\n    \"2018-05-22T00:45:00.000Z\": 0,\n    \"2018-05-22T00:50:00.000Z\": 0,\n    \"2018-05-22T00:55:00.000Z\": 0,\n    \"2018-05-22T01:00:00.000Z\": 0,\n    \"2018-05-22T01:05:00.000Z\": 0,\n    \"2018-05-22T01:10:00.000Z\": 0,\n    \"2018-05-22T01:15:00.000Z\": 0,\n    \"2018-05-22T01:20:00.000Z\": 0,\n    \"2018-05-22T01:25:00.000Z\": 0,\n    \"2018-05-22T01:30:00.000Z\": 0,\n    \"2018-05-22T01:35:00.000Z\": 0,\n    \"2018-05-22T01:40:00.000Z\": 0,\n    \"2018-05-22T01:45:00.000Z\": 0,\n    \"2018-05-22T01:50:00.000Z\": 0,\n    \"2018-05-22T01:55:00.000Z\": 0,\n    \"2018-05-22T02:00:00.000Z\": 0,\n    \"2018-05-22T02:05:00.000Z\": 0,\n    \"2018-05-22T02:10:00.000Z\": 0,\n    \"2018-05-22T02:15:00.000Z\": 0,\n    \"2018-05-22T02:20:00.000Z\": 0,\n    \"2018-05-22T02:25:00.000Z\": 0,\n    \"2018-05-22T02:30:00.000Z\": 0,\n    \"2018-05-22T02:35:00.000Z\": 0,\n    \"2018-05-22T02:40:00.000Z\": 0,\n    \"2018-05-22T02:45:00.000Z\": 0,\n    \"2018-05-22T02:50:00.000Z\": 0,\n    \"2018-05-22T02:55:00.000Z\": 0,\n    \"2018-05-22T03:00:00.000Z\": 0,\n    \"2018-05-22T03:05:00.000Z\": 0,\n    \"2018-05-22T03:10:00.000Z\": 0,\n    \"2018-05-22T03:15:00.000Z\": 0,\n    \"2018-05-22T03:20:00.000Z\": 0,\n    \"2018-05-22T03:25:00.000Z\": 0,\n    \"2018-05-22T03:30:00.000Z\": 0,\n    \"2018-05-22T03:35:00.000Z\": 0,\n    \"2018-05-22T03:40:00.000Z\": 0,\n    \"2018-05-22T03:45:00.000Z\": 0,\n    \"2018-05-22T03:50:00.000Z\": 0,\n    \"2018-05-22T03:55:00.000Z\": 0,\n    \"2018-05-22T04:00:00.000Z\": 0,\n    \"2018-05-22T04:05:00.000Z\": 0,\n    \"2018-05-22T04:10:00.000Z\": 0,\n    \"2018-05-22T04:15:00.000Z\": 0,\n    \"2018-05-22T04:20:00.000Z\": 0,\n    \"2018-05-22T04:25:00.000Z\": 0,\n    \"2018-05-22T04:30:00.000Z\": 0,\n    \"2018-05-22T04:35:00.000Z\": 0,\n    \"2018-05-22T04:40:00.000Z\": 0\n}\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nimport plotly.graph_objects as go\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef alerts_time_intervals(value_series, alert_indicator_series):\n\n    min_timestamp, max_timestamp = value_series.index.min(), value_series.index.max()\n    only_starts_and_ends = alert_indicator_series[\n        alert_indicator_series != 0\n    ].sort_index()\n\n    # add start to first alert if necessary\n    if len(only_starts_and_ends) > 0 and only_starts_and_ends.iloc[0] == -1:\n        if min_timestamp < only_starts_and_ends.index.min():\n            # add first entry 1\n            only_starts_and_ends[min_timestamp] = 1\n        else:\n            raise ValueError(\n                \"value_series must have smaller timestamps if first non-zero entry of alert_indicator_series is -1. Otherwise no start for the first alert can be found!\"\n            )\n\n    only_starts_and_ends = only_starts_and_ends.sort_index()\n\n    # add end to last alert if necessary\n    if len(only_starts_and_ends) > 0 and only_starts_and_ends.iloc[-1] == 1:\n        if max_timestamp > only_starts_and_ends.index.min():\n            # add first entry 1\n            only_starts_and_ends[max_timestamp] = -1\n        else:\n            raise ValueError(\n                \"value_series must have greater timestamps if last non-zero entry of alert_indicator_series is 1. Otherwise no end for the last alert can be found!\"\n            )\n\n    return only_starts_and_ends.sort_index()\n\n\ndef plot_series_and_alerts(series, alert_indicator_series):\n\n    series_to_plot = series.sort_index()\n    fig = go.Figure(\n        [go.Scatter(x=series_to_plot.index, y=series_to_plot, mode=\"lines\")]\n    )\n\n    max_val, min_val = series.max(), series.min()\n\n    alert_intervals = alerts_time_intervals(series, alert_indicator_series)\n\n    alerts_df = alert_intervals.to_frame(name=\"starts\")\n    alerts_df[\"start_timestamps\"] = alerts_df.index\n    alerts_df[\"ends\"] = alerts_df[\"starts\"].shift(-1)\n    alerts_df[\"end_timestamps\"] = alerts_df[\"start_timestamps\"].shift(-1)\n    alerts_df = alerts_df[alerts_df[\"starts\"] == 1][\n        [\"start_timestamps\", \"end_timestamps\"]\n    ]\n\n    for ind, row in alerts_df.iterrows():\n        start, end = row[\"start_timestamps\"], row[\"end_timestamps\"]\n        fig.add_shape(\n            type=\"rect\",\n            x0=start,\n            y0=min_val,\n            x1=end,\n            y1=max_val,\n            line={\"color\": \"rgb(251, 40, 0)\", \"width\": 1},\n            fillcolor=\"rgba(251, 40, 0, 0.4)\",\n        )\n\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    }\n    if series.name is not None:\n        layout_opts[\"yaxis_title\"] = series.name\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series\": DataType.Series, \"alert_series\": DataType.Series},\n    outputs={\"alert_plot\": DataType.PlotlyJson},\n    name=\"Timeseries and Alerts Plot\",\n    description=\"Plotting a single timeseries and alerts into same figure\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"95c006e4-5050-7722-6717-d1c6be2ba890\",\n    revision_group_id=\"95c006e4-5050-7722-6717-d1c6be2ba890\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.492254+00:00\"\n)\ndef main(*, series, alert_series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"alert_plot\": plotly_fig_to_json_dict(\n            plot_series_and_alerts(series, alert_series)\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "607d77a9-5f98-b787-2987-fccb9d0a7843",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "554b29fa-2965-7063-5be1-229202673085",
          "name": "alert_series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "83af48bc-135e-9def-a5cf-e9a2f233f03f",
          "name": "alert_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "f7530499-51b2-dd01-0d21-c24ee6f8c37e",
    "revision_group_id": "f7530499-51b2-dd01-0d21-c24ee6f8c37e",
    "name": "Contour Plot",
    "description": "A simple contour plot",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.096890+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Contour Plot\n\n## Description\nThis component creates a simple contour plot.\n\n## Inputs\n* **x** (Pandas Series): The series with the values for the x coordinates.\n* **y** (Pandas Series): The series with the values for the y coordinates.\n* **z** (Pandas Series): The function values for the contour plot. Must be of length **len(x)*len(y)**.\n\n## Outputs\n* **contour_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nGenerates a simple contour plot of the **z** values over **x** and **y** with most plot settings set automatically.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"x\": [1,2,3],\n\t\"y\": [1,2,3],\n\t\"z\": [1,2,3,4,5,6,0,8,9]\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.graph_objects as go\n\n\nimport plotly.io as pio\n\npio.templates.default = None\n\nsns_colorscale = [\n    [0.0, \"#3f7f93\"],  # cmap = sns.diverging_palette(220, 10, as_cmap = True)\n    [0.071, \"#5890a1\"],\n    [0.143, \"#72a1b0\"],\n    [0.214, \"#8cb3bf\"],\n    [0.286, \"#a7c5cf\"],\n    [0.357, \"#c0d6dd\"],\n    [0.429, \"#dae8ec\"],\n    [0.5, \"#f2f2f2\"],\n    [0.571, \"#f7d7d9\"],\n    [0.643, \"#f2bcc0\"],\n    [0.714, \"#eda3a9\"],\n    [0.786, \"#e8888f\"],\n    [0.857, \"#e36e76\"],\n    [0.929, \"#de535e\"],\n    [1.0, \"#d93a46\"],\n]\n\n\ndef contour_plot(x, y, z):\n    fig = go.Figure(\n        data=go.Contour(\n            z=z.values.reshape(-1, len(x)), x=x, y=y  # horizontal axis  # vertical axis\n        ),\n        layout=go.Layout(\n            # title_text=title,\n            # title_x=0.5,\n            width=440,\n            height=400,\n            xaxis_showgrid=False,\n            yaxis_showgrid=False,\n        ),\n    )\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"x\": DataType.Series, \"y\": DataType.Series, \"z\": DataType.Series},\n    outputs={\"contour_plot\": DataType.PlotlyJson},\n    name=\"Contour Plot\",\n    description=\"A simple contour plot\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"f7530499-51b2-dd01-0d21-c24ee6f8c37e\",\n    revision_group_id=\"f7530499-51b2-dd01-0d21-c24ee6f8c37e\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.096890+00:00\"\n)\ndef main(*, x, y, z):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"contour_plot\": plotly_fig_to_json_dict(contour_plot(x, y, z))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "829cbd05-7a33-c931-b16e-a105f9a7c885",
          "name": "x",
          "data_type": "SERIES"
        },
        {
          "id": "54e9008c-0451-9e1c-c334-31e3887a4b07",
          "name": "y",
          "data_type": "SERIES"
        },
        {
          "id": "455f7a00-c731-b2ba-ee84-8d8b567bd50e",
          "name": "z",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "53dff70b-364f-e5b7-fbb4-c293a5d2f339",
          "name": "contour_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "5dc42708-34fd-ab82-bf2c-307fd66ad749",
    "revision_group_id": "5dc42708-34fd-ab82-bf2c-307fd66ad749",
    "name": "Two Timeseries with Two Y Axes Plot",
    "description": "Two timeseries in the same plot with each having its own y axis",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.612315+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Two Timeseries with Two Y Axes Plot\n\n## Description\nPlotting of two timeseries in the same plot, each with its own y axis.\n\n## Inputs\n* **series_1** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n* **series_2** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n\n## Outputs\n* **comparison_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots both incoming timeseries into the same figure using Plotly, giving each its own individually scaled y axis.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"series_1\": {\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t\t},\n\t\"series_2\": {\n    \"2019-11-29T01:00:00.000Z\": 4.1332,\n    \"2019-11-29T02:00:00.000Z\": 3.759,\n    \"2019-11-29T03:00:00.000Z\": 2.9662,\n    \"2019-11-29T04:00:00.000Z\": 4.1332,\n    \"2019-11-29T05:00:00.000Z\": 4.1083,\n    \"2019-11-29T06:00:00.000Z\": 4.1072,\n    \"2019-11-29T07:00:00.000Z\": 3.92,\n    \"2019-11-29T08:00:00.000Z\": 4.8322,\n    \"2019-11-29T09:00:00.000Z\": 2.8422,\n    \"2019-11-29T10:00:00.000Z\": 4.7473,\n    \"2019-11-29T11:00:00.000Z\": 4.4142,\n    \"2019-11-29T12:00:00.000Z\": 4.4403,\n    \"2019-11-29T13:00:00.000Z\": 4.475,\n    \"2019-11-29T14:00:00.000Z\": 5,\n    \"2019-11-29T15:00:00.000Z\": 5.4763,\n    \"2019-11-29T16:00:00.000Z\": 5,\n    \"2019-11-29T17:00:00.000Z\": 5,\n    \"2019-11-29T18:00:00.000Z\": 7,\n    \"2019-11-29T19:00:00.000Z\": 5,\n    \"2019-11-29T20:00:00.000Z\": 5,\n    \"2019-11-29T21:00:00.000Z\": 6,\n    \"2019-11-29T22:00:00.000Z\": 5,\n    \"2019-11-29T23:00:00.000Z\": 5,\n    \"2019-11-30T01:00:00.000Z\": 3.7918,\n    \"2019-11-30T02:00:00.000Z\": 2.34,\n    \"2019-11-30T03:00:00.000Z\": 3.2648,\n    \"2019-11-30T04:00:00.000Z\": 3.112,\n    \"2019-11-30T05:00:00.000Z\": 4,\n    \"2019-11-30T06:00:00.000Z\": 3.312,\n    \"2019-11-30T07:00:00.000Z\": 4,\n    \"2019-11-30T08:00:00.000Z\": 5,\n    \"2019-11-30T09:00:00.000Z\": 4.3663,\n    \"2019-11-30T10:00:00.000Z\": 4.1262,\n    \"2019-11-30T11:00:00.000Z\": 3.7471,\n    \"2019-11-30T12:00:00.000Z\": 4,\n    \"2019-11-30T13:00:00.000Z\": 4,\n    \"2019-11-30T14:00:00.000Z\": 4,\n    \"2019-11-30T15:00:00.000Z\": 4.5\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef timeseries_comparison_plot(\n    series_1: pd.Series,\n    series_2: pd.Series,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n    # Only thing I figured is - I could do this\n\n    s1 = series_1.sort_index()\n\n    fig.add_scatter(\n        x=s1.index,\n        y=s1,\n        mode=\"lines\",\n        name=s1.name if s1.name else \"series_1\",\n        secondary_y=False,\n    )  # Not what is desired - need a line\n\n    s2 = series_2.sort_index()\n\n    fig.add_scatter(\n        x=s2.index,\n        y=s2,\n        mode=\"lines\",\n        name=s2.name if s2.name else \"series_2\",\n        secondary_y=True,\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(\n        title_text=series_1.name if series_1.name is not None else \"series_1\",\n        secondary_y=False,\n    )\n    fig.update_yaxes(\n        title_text=series_2.name if series_2.name is not None else \"series_2\",\n        secondary_y=True,\n    )\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series_1\": DataType.Series, \"series_2\": DataType.Series},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Two Timeseries with Two Y Axes Plot\",\n    description=\"Two timeseries in the same plot with each having its own y axis\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"5dc42708-34fd-ab82-bf2c-307fd66ad749\",\n    revision_group_id=\"5dc42708-34fd-ab82-bf2c-307fd66ad749\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.612315+00:00\"\n)\ndef main(*, series_1, series_2):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(timeseries_comparison_plot(series_1, series_2))\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "9510b309-8dcf-c3fc-b7b1-0f1e44e775f4",
          "name": "series_1",
          "data_type": "SERIES"
        },
        {
          "id": "e3a6d38c-ff01-f859-011e-2be50d03a498",
          "name": "series_2",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "fcc6dc33-541f-0bb4-8543-e3ff36f2eb02",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "8debf23e-54e3-5fa1-bb57-6d41058c66b7",
    "revision_group_id": "8debf23e-54e3-5fa1-bb57-6d41058c66b7",
    "name": "Correlation Matrix Heatmap Plot",
    "description": "Plotting a correlation matrix as a heatmap",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.006048+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Correlation Matrix Heatmap Plot\n\n## Description\nPlotting a correlation matrix as a heatmap.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): Correlation will be computed for its columns.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component generates a correlation matrix heatmap displaying correlation between the dataframe columns.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"dataframe\": {\n    \"a\": [1,2,3,4,5,6,7],\n    \"b\": [7,6,5,4,3,2,1],\n    \"c\": [3,2,3,4,3,3,9],\n    \"d\": [1,2,4,4,1,1,1],\n    \"e\": [1,3,4,4,0,1,1],\n    \"f\": [2,2,4,4,2,1,1]\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.graph_objects as go\n\n\nimport plotly.io as pio\n\npio.templates.default = None\n\nsns_colorscale = [\n    [0.0, \"#3f7f93\"],  # cmap = sns.diverging_palette(220, 10, as_cmap = True)\n    [0.071, \"#5890a1\"],\n    [0.143, \"#72a1b0\"],\n    [0.214, \"#8cb3bf\"],\n    [0.286, \"#a7c5cf\"],\n    [0.357, \"#c0d6dd\"],\n    [0.429, \"#dae8ec\"],\n    [0.5, \"#f2f2f2\"],\n    [0.571, \"#f7d7d9\"],\n    [0.643, \"#f2bcc0\"],\n    [0.714, \"#eda3a9\"],\n    [0.786, \"#e8888f\"],\n    [0.857, \"#e36e76\"],\n    [0.929, \"#de535e\"],\n    [1.0, \"#d93a46\"],\n]\n\n\ndef correlation_heatmap(dataframe):\n    corr_df = dataframe.corr()\n\n    heat = go.Heatmap(\n        z=corr_df.values,\n        x=corr_df.columns,\n        y=corr_df.columns,\n        xgap=1,\n        ygap=1,\n        colorscale=sns_colorscale,\n        colorbar_thickness=20,\n        colorbar_ticklen=3,\n        hovertext=corr_df.astype(str),\n        hoverinfo=\"text\",\n    )\n\n    title = \"Correlation Matrix Heatmap\"\n\n    layout = go.Layout(\n        # title_text=title,\n        # title_x=0.5,\n        width=440,\n        height=400,\n        xaxis_showgrid=False,\n        yaxis_showgrid=False,\n        yaxis_autorange=\"reversed\",\n    )\n\n    fig = go.Figure(data=[heat], layout=layout)\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Correlation Matrix Heatmap Plot\",\n    description=\"Plotting a correlation matrix as a heatmap\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"8debf23e-54e3-5fa1-bb57-6d41058c66b7\",\n    revision_group_id=\"8debf23e-54e3-5fa1-bb57-6d41058c66b7\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.006048+00:00\"\n)\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(correlation_heatmap(dataframe))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "38fdfd24-a76e-6296-606e-73495727eaa0",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "dd24f709-50f3-f9d5-94f6-ac9b0d403275",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "3b2fe728-5f36-64be-3963-df83918ff8a9",
    "revision_group_id": "3b2fe728-5f36-64be-3963-df83918ff8a9",
    "name": "Pie Chart Plot",
    "description": "Plotting a pie chart",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.046948+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pie Chart Plot\n\n## Description\nPlotting a pie chart.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): The input data. \n* **value_column** (String): The column of which the values will be summed up in order to determine the groups relative fractions of this sum. \n\tThis column of dataframe should consist of float values.\n* **group_column** (String): The column used to group the values. \n\tThis should be a string valued or a categorical column.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results\n\n## Details\nThe component generates a Pie chart using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"group_column\": \"group\",\n\t\"value_column\": \"value\",\n\t\"dataframe\": {\n    \"group\": [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"b\"],\n    \"value\": [2, 3, 2, 4, 4, 4, 4]\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef plotly_pie_chart_plot(\n    dataframe: pd.DataFrame,\n    values_column_name: str,\n    groups_column_name: str,\n    traces_opts: dict = {},\n    layout_opts: dict = {\"height\": 300, \"width\": 300},\n    pie_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a pie chart plot Plotly figure\n    \n    Expects a dataframe, a values_column_name selecting the column\n    in the dataframe to sum up. Then groups_column_name selects the groups\n    of values whose relative fraction of the sum should be shown in the Pie Chart.\n    \n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = px.pie(\n        dataframe, values=values_column_name, names=groups_column_name, **pie_opts\n    )\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(**traces_opts)  # set line color?\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame, \"value_column\": DataType.String, \"group_column\": DataType.String},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Pie Chart Plot\",\n    description=\"Plotting a pie chart\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"3b2fe728-5f36-64be-3963-df83918ff8a9\",\n    revision_group_id=\"3b2fe728-5f36-64be-3963-df83918ff8a9\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.046948+00:00\"\n)\ndef main(*, dataframe, value_column, group_column):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(\n            plotly_pie_chart_plot(dataframe, value_column, group_column)\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "bc8b441a-9d32-f9ab-eb7e-5a19688039d2",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        },
        {
          "id": "f586c1eb-6943-45cc-b828-fc1c30515b9a",
          "name": "value_column",
          "data_type": "STRING"
        },
        {
          "id": "03280c10-5cf8-0e47-9e23-3b06b7388168",
          "name": "group_column",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "2ba3fb5f-4be0-f48a-3124-894113466b62",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "a408a19b-70fd-5a16-958c-193d678c2c2b",
    "revision_group_id": "a408a19b-70fd-5a16-958c-193d678c2c2b",
    "name": "2D Scatter Plot colored by Index",
    "description": "Plotting two series into the plane using index for coloring points",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.703530+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# 2D Scatter Plot colored by Index\n\n## Description\nPlot 2D data coloring using the index.\n\n## Inputs\n* **x** (Pandas Series): Entries must be numeric. The series with the values for the x coordinates.\n* **y** (Pandas Series): Entries must be numeric. The series with the values for the y coordinates.\n\n## Outputs\n* **scatter_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming series into a scatter plot, such that the values of the **x** series are used as x coordinates and the values of the **y** series are used as y coordinates. The resulting index of putting both series together into a DataFrame is used to color the data points. Coloring method is inferred from the dtype of the index.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"x\": {\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t},\n\t\"y\": {\n    \"2019-11-29T01:00:00.000Z\": 10.7533,\n    \"2019-11-29T02:00:00.000Z\": 10.759,\n    \"2019-11-29T03:00:00.000Z\": 9.9662,\n    \"2019-11-29T04:00:00.000Z\": 11.1332,\n    \"2019-11-29T05:00:00.000Z\": 11.0083,\n    \"2019-11-29T06:00:00.000Z\": 11.1072,\n    \"2019-11-29T07:00:00.000Z\": 11.1222,\n    \"2019-11-29T08:00:00.000Z\": 11.1322,\n    \"2019-11-29T09:00:00.000Z\": 11.1422,\n    \"2019-11-29T10:00:00.000Z\": 11.7473,\n    \"2019-11-29T11:00:00.000Z\": 11.4142,\n    \"2019-11-29T12:00:00.000Z\": 11.4403,\n    \"2019-11-29T13:00:00.000Z\": 11.475,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 13,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 13,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.7918,\n    \"2019-11-30T02:00:00.000Z\": 10.34,\n    \"2019-11-30T03:00:00.000Z\": 10.2648,\n    \"2019-11-30T04:00:00.000Z\": 10.112,\n    \"2019-11-30T05:00:00.000Z\": 11,\n    \"2019-11-30T06:00:00.000Z\": 10.312,\n    \"2019-11-30T07:00:00.000Z\": 11,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 11,\n    \"2019-11-30T13:00:00.000Z\": 11,\n    \"2019-11-30T14:00:00.000Z\": 11,\n    \"2019-11-30T15:00:00.000Z\": 11.5\n    }\n}\n```\n",
    "content": "from typing import Optional\n\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\nimport plotly.express as px\n\n\ndef color_scatter_plot(\n    series1: pd.Series,\n    series2: pd.Series,\n    color_series: Optional[pd.Series] = None,\n    traces_opts: dict = {\"line_color\": \"#1199bb\"},\n    layout_opts: dict = {\n        \"xaxis_title\": \"x\",\n        \"yaxis_title\": \"y\",\n        \"autosize\": True,\n        \"height\": 400,\n    },\n    line_opts: dict = {},\n):\n    \"\"\"Colored 2D Scatter Plot\n    \n    If no color_series is provided, the index will be used.\n    \n    Assumes that both series are of same / similar index.\n    \n    Automatically handles the dtype of the color_series (or index), that\n    is datetime will be converted to total_seconds from minimum timestamp,\n    and distinguishes between numeric versus categorical values.\n    \"\"\"\n\n    df = pd.DataFrame({\"x\": series1, \"y\": series2})\n\n    if color_series is None:\n        if pd.api.types.is_datetime64_any_dtype(df.index):\n            df[\"timestamps\"] = pd.Series(df.index, index=df.index)\n            df[\"seconds_from_start\"] = (\n                df.timestamps - df.timestamps.min()\n            ).dt.total_seconds()\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=\"seconds_from_start\",\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n\n        elif pd.api.types.is_numeric_dtype(df.index):\n            df[\"index\"] = pd.Series(df.index, index=df.index)\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=\"index\",\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n        else:\n            raise ValueError(\"Index is not of a dtype that allows coloring from it\")\n    else:\n        color_col_name = \"color\" if color_series.name is None else color_series.name\n        df[color_col_name] = color_series\n\n        if pd.api.types.is_datetime64_any_dtype(color_series):\n            df[color_col_name] = (\n                df[color_col_name] - df[color_col_name].min()\n            ).dt.total_seconds()\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=color_col_name,\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n\n        elif pd.api.types.is_numeric_dtype(color_series):\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=color_col_name,\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n\n        elif pd.api.types.is_categorical_dtype(\n            color_series\n        ) or pd.api.types.is_string_dtype(color_series):\n            fig = px.scatter(df, x=\"x\", y=\"y\", color=color_col_name)\n        else:\n            raise ValueError(\"Index is not of a dtype that allows coloring from it\")\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\ndef color_df_scatter_plot(df, x, y, color_col=None):\n    \"\"\"Wrapper for dataframes\"\"\"\n    return color_scatter_plot(\n        df[x], df[y], color_series=df[color_col] if color_col is not None else None\n    )\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"x\": DataType.Series, \"y\": DataType.Series},\n    outputs={\"scatter_plot\": DataType.PlotlyJson},\n    name=\"2D Scatter Plot colored by Index\",\n    description=\"Plotting two series into the plane using index for coloring points\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"a408a19b-70fd-5a16-958c-193d678c2c2b\",\n    revision_group_id=\"a408a19b-70fd-5a16-958c-193d678c2c2b\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.703530+00:00\"\n)\ndef main(*, x, y):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"scatter_plot\": plotly_fig_to_json_dict(color_scatter_plot(x, y))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "2e61e06b-a7dc-6ea6-efb7-dc7bf68890b8",
          "name": "x",
          "data_type": "SERIES"
        },
        {
          "id": "050d0420-21c8-8560-7f97-40f2f93cb9d3",
          "name": "y",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "66990a60-30fa-7a61-65f6-0c6a27636b83",
          "name": "scatter_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "3160c5a1-0cfb-7396-739a-a106c2a3e130",
    "revision_group_id": "3160c5a1-0cfb-7396-739a-a106c2a3e130",
    "name": "Timeseries Substitution Plot",
    "description": "Apply a substitution to a timeseries and plot the results together with ignored, replaced and new values",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.721225+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeseries Substitution Plot\n\n## Description\nApply a substitution to a timeseries and plot the results together with ignored, replaced and new values marked.\n\n## Inputs\n* **raw_values** (Pandas Series): The original (raw) values. Entries should be numeric and Index should be a DateTime Index.\n* **substitution_series** (Pandas Series): The substitution series containing replacement and new values as well as null/NaN values where original values should be ignored.\n\n## Outputs\n* **substituted_ts_plot** (Plotly Json): The plot showing the substituted (new) timeseries and additionally marks for the replaced values, ignored values and added values.\n\n## Details\nUse this component to see how a substitution is applied. Substitution allows to\n* replace existing values\n* add new values\n* ignore original values\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"raw_values\": {\n    \"2020-07-01T00:00:00Z\": 0,\n    \"2020-07-02T00:00:00Z\": 17,\n    \"2020-07-03T00:00:00Z\": 18,\n    \"2020-07-04T00:00:00Z\": 3,\n    \"2020-07-04T08:00:00Z\": 15,\n    \"2020-07-04T14:00:00Z\": 16,\n    \"2020-07-04T18:00:00Z\": 19,\n    \"2020-07-07T00:00:00Z\": 6,\n    \"2020-07-08T00:00:00Z\": 7\n\t\t},\n\t\"substitution_series\": {\n    \"2020-07-02T00:00:00Z\": 1.0,\n    \"2020-07-03T00:00:00Z\": 2.0,\n    \"2020-07-04T08:00:00Z\": null,\n    \"2020-07-04T14:00:00Z\": null,\n    \"2020-07-04T18:00:00Z\": null,\n    \"2020-07-05T00:00:00Z\": 4,\n    \"2020-07-06T00:00:00Z\": 5,\n    \"2020-07-09T00:00:00Z\": 18.0,\n    \"2020-07-10T00:00:00Z\": 19.0\n    \t\t}\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef handle_substitutions(original_series, substitution_series):\n    \"\"\"Applies substituion series on raw values\n    \n    The substitution series can contain\n    * replacement values (at indices occuring in original)\n    * new values (values at indices not in original)\n    * null values at indices in original marking values for invalidation (ignoring)\n    \n    Returns a tuple of pandas Series objects\n        (completely_handled, replaced_values, replacements, new_values, ignored_values)    \"\"\"\n\n    new = original_series.copy()\n    deleted = new.loc[substitution_series.isnull().reindex(new.index, fill_value=False)]\n\n    kept_before_replacing = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=True)\n    ]\n\n    replaced_originals = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=False)\n    ]\n\n    replacements = substitution_series.reindex(original_series.index).dropna()\n\n    new_values = substitution_series.loc[\n        ~substitution_series.index.isin(original_series.index)\n    ]\n\n    completely_handled_series = new.copy()\n    completely_handled_series = completely_handled_series.loc[\n        substitution_series.notnull().reindex(\n            completely_handled_series.index, fill_value=True\n        )\n    ]\n    completely_handled_series.update(substitution_series)\n    completely_handled_series = pd.concat([completely_handled_series, new_values])\n\n    return (\n        completely_handled_series.sort_index(),\n        replaced_originals,\n        replacements,\n        new_values,\n        deleted,\n    )\n\n\ndef substituted_data_plot(\n    raw_values: pd.Series,\n    substitutions: pd.Series,\n    message_series: pd.Series = None,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n\n    s1 = raw_values.sort_index()\n    s1 = s1.loc[~s1.index.duplicated(keep=\"first\")]\n\n    s2 = substitutions.sort_index()\n    s2 = s2.loc[~s2.index.duplicated(keep=\"first\")]\n\n    completely_handled_series, replaced_originals, replacements, new_values, deleted = handle_substitutions(\n        s1, s2\n    )\n\n    fig.add_scatter(\n        x=completely_handled_series.index,\n        y=completely_handled_series,\n        mode=\"markers+lines\",\n        name=raw_values.name + \"_substituted\"\n        if raw_values.name\n        else \"raw_values_substituted\",\n        line_color=\"blue\",\n        opacity=0.6,\n    )  # Not what is desired - need a line\n\n    fig.add_scatter(\n        x=replaced_originals.index,\n        y=replaced_originals,\n        mode=\"markers\",\n        name=\"replaced raw values\",\n        line_color=\"orange\",\n        marker=dict(size=10, opacity=0.6),\n    )  # Not what is desired - need a line\n\n    fig.add_scatter(\n        x=deleted.index,\n        y=deleted,\n        mode=\"markers\",\n        name=\"ignored raw values\",\n        line_color=\"red\",\n        marker=dict(symbol=\"x\", size=10, opacity=0.6),\n    )  # Not what is desired - need a line\n\n    fig.add_scatter(\n        x=new_values.index,\n        y=new_values,\n        mode=\"markers\",\n        name=\"added values\",\n        line_color=\"green\",\n        marker=dict(symbol=\"cross\", size=10, opacity=0.6),\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"raw_values\": DataType.Series, \"substitution_series\": DataType.Series},\n    outputs={\"substituted_ts_plot\": DataType.PlotlyJson},\n    name=\"Timeseries Substitution Plot\",\n    description=\"Apply a substitution to a timeseries and plot the results together with ignored, replaced and new values\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"3160c5a1-0cfb-7396-739a-a106c2a3e130\",\n    revision_group_id=\"3160c5a1-0cfb-7396-739a-a106c2a3e130\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.721225+00:00\"\n)\ndef main(*, raw_values, substitution_series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"substituted_ts_plot\": plotly_fig_to_json_dict(\n            substituted_data_plot(raw_values, substitution_series)\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "85ffd7a5-3cd5-0c23-a21c-969ee4f97bea",
          "name": "raw_values",
          "data_type": "SERIES"
        },
        {
          "id": "46fe5379-1e3d-12c4-7929-5ed3fcd8a5c6",
          "name": "substitution_series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "c756773d-5e8a-6ee6-4c64-ea44f26b2336",
          "name": "substituted_ts_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "58e793bf-1aa7-316c-bc8a-f34a435fc8f0",
    "revision_group_id": "58e793bf-1aa7-316c-bc8a-f34a435fc8f0",
    "name": "Timeseries DataFrame Plot with multiple Y Axes",
    "description": "Plotting a dataframe of multiple timeseries with multiple Y axes",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.782009+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeseries DataFrame Plot with multiple Y Axes\n\n## Description\nPlotting a dataframe with multiple X and Y axes.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming **dataframe** using Plotly such that each column gets its own y axis. Each y axis can be individually moved and scaled. Furthermore for each column a separate x axis is drawn and can be individually moved and scaled. A use case for this component is a dataframe having a datetimeindex and columns which one wants to compare timeshifted or even \"warped\" indiviudally along the x axis against each other.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"dataframe\": {\n    \"pH a\": {\n        \"2019-11-29T01:00:00.000Z\": 10.533,\n        \"2019-11-29T02:00:00.000Z\": 10.559,\n        \"2019-11-29T03:00:00.000Z\": 9.7662,\n        \"2019-11-29T04:00:00.000Z\": 11.2332,\n        \"2019-11-29T05:00:00.000Z\": 11.0683,\n        \"2019-11-29T06:00:00.000Z\": 11.2072,\n        \"2019-11-29T07:00:00.000Z\": 11.1522,\n        \"2019-11-29T08:00:00.000Z\": 11.1522,\n        \"2019-11-29T09:00:00.000Z\": 11.1522,\n        \"2019-11-29T10:00:00.000Z\": 11.4473,\n        \"2019-11-29T11:00:00.000Z\": 11.3142,\n        \"2019-11-29T12:00:00.000Z\": 11.3403,\n        \"2019-11-29T13:00:00.000Z\": 11.375,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 12,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 12,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.8918,\n        \"2019-11-30T02:00:00.000Z\": 10.64,\n        \"2019-11-30T03:00:00.000Z\": 10.5648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 12,\n        \"2019-11-30T06:00:00.000Z\": 10.912,\n        \"2019-11-30T07:00:00.000Z\": 12,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 12,\n        \"2019-11-30T13:00:00.000Z\": 12,\n        \"2019-11-30T14:00:00.000Z\": 12,\n        \"2019-11-30T15:00:00.000Z\": 12\n    },\n    \"pH b\": {\n        \"2019-11-29T01:00:00.000Z\": 10.7533,\n        \"2019-11-29T02:00:00.000Z\": 10.759,\n        \"2019-11-29T03:00:00.000Z\": 9.9662,\n        \"2019-11-29T04:00:00.000Z\": 11.1332,\n        \"2019-11-29T05:00:00.000Z\": 11.0083,\n        \"2019-11-29T06:00:00.000Z\": 11.1072,\n        \"2019-11-29T07:00:00.000Z\": 11.1222,\n        \"2019-11-29T08:00:00.000Z\": 11.1322,\n        \"2019-11-29T09:00:00.000Z\": 11.1422,\n        \"2019-11-29T10:00:00.000Z\": 11.7473,\n        \"2019-11-29T11:00:00.000Z\": 11.4142,\n        \"2019-11-29T12:00:00.000Z\": 11.4403,\n        \"2019-11-29T13:00:00.000Z\": 11.475,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 13,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 13,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.7918,\n        \"2019-11-30T02:00:00.000Z\": 10.34,\n        \"2019-11-30T03:00:00.000Z\": 10.2648,\n        \"2019-11-30T04:00:00.000Z\": 10.112,\n        \"2019-11-30T05:00:00.000Z\": 11,\n        \"2019-11-30T06:00:00.000Z\": 10.312,\n        \"2019-11-30T07:00:00.000Z\": 11,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 11,\n        \"2019-11-30T13:00:00.000Z\": 11,\n        \"2019-11-30T14:00:00.000Z\": 11,\n        \"2019-11-30T15:00:00.000Z\": 11.5\n    },\n    \"pH c\": {\n        \"2019-11-29T01:00:00.000Z\": 9.7533,\n        \"2019-11-29T02:00:00.000Z\": 8.759,\n        \"2019-11-29T03:00:00.000Z\": 9.1662,\n        \"2019-11-29T04:00:00.000Z\": 11.0332,\n        \"2019-11-29T05:00:00.000Z\": 11.0033,\n        \"2019-11-29T06:00:00.000Z\": 11.0172,\n        \"2019-11-29T07:00:00.000Z\": 11.0122,\n        \"2019-11-29T08:00:00.000Z\": 11.0222,\n        \"2019-11-29T09:00:00.000Z\": 11.0422,\n        \"2019-11-29T10:00:00.000Z\": 11.0273,\n        \"2019-11-29T11:00:00.000Z\": 11.1242,\n        \"2019-11-29T12:00:00.000Z\": 11.1703,\n        \"2019-11-29T13:00:00.000Z\": 11.035,\n        \"2019-11-29T14:00:00.000Z\": 12.1,\n        \"2019-11-29T15:00:00.000Z\": 11.2763,\n        \"2019-11-29T16:00:00.000Z\": 12.05,\n        \"2019-11-29T17:00:00.000Z\": 12.3,\n        \"2019-11-29T18:00:00.000Z\": 12.82,\n        \"2019-11-29T19:00:00.000Z\": 12.8,\n        \"2019-11-29T20:00:00.000Z\": 12.7,\n        \"2019-11-29T21:00:00.000Z\": 13.77,\n        \"2019-11-29T22:00:00.000Z\": 12.3,\n        \"2019-11-29T23:00:00.000Z\": 12.32,\n        \"2019-11-30T01:00:00.000Z\": 11.6918,\n        \"2019-11-30T02:00:00.000Z\": 11.22,\n        \"2019-11-30T03:00:00.000Z\": 11.0648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 11.04,\n        \"2019-11-30T06:00:00.000Z\": 10.87,\n        \"2019-11-30T07:00:00.000Z\": 10.98,\n        \"2019-11-30T08:00:00.000Z\": 11.63,\n        \"2019-11-30T09:00:00.000Z\": 11.222,\n        \"2019-11-30T10:00:00.000Z\": 11.111,\n        \"2019-11-30T11:00:00.000Z\": 10.7676,\n        \"2019-11-30T12:00:00.000Z\": 10.8787,\n        \"2019-11-30T13:00:00.000Z\": 10.8889,\n        \"2019-11-30T14:00:00.000Z\": 10.9101,\n        \"2019-11-30T15:00:00.000Z\": 10.989\n    }\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef compute_plot_positions(\n    num_y_axes, horizontal_relative_space_per_y_axis=0.06, side=\"left\"\n):\n    \"\"\"\n    returns tuple plot_area_x_ratio, y_positions\n\n    First assumes that a y axis horizontally fits into 5% of the total figure width\n    and tries to reserve enough horizontal space to match that exactly up to a limit\n    of reserving half the available width.\n\n    If that is not possible it reserves exactly 0.5 times the total width and\n    uniformly arranges the y axis positions (now having less than 5% horizontal space\n    and therefore maybe overlapping)\n\n    horizontal_relative_space_per_y_axis:\n        a value 0f 0.07 for is quite okay for half of a HD screen.\n        its too much for a full hd screen but still acceptable\n    \"\"\"\n\n    hor_ratio = horizontal_relative_space_per_y_axis\n\n    if num_y_axes * hor_ratio < 0.5:\n        positions = [\n            1 - x * hor_ratio - hor_ratio * (side == \"right\") for x in range(num_y_axes)\n        ]\n        plot_area_x_ratio = 1 - num_y_axes * hor_ratio\n\n    else:\n        plot_area_x_ratio = 0.5\n        positions = [1 - x * 0.5 / num_y_axes for x in range(num_y_axes)]\n    return plot_area_x_ratio, positions\n\n\ndef multi_series_with_multi_yaxis(df):\n    \"\"\"One y_axis for each column of input dataframe\"\"\"\n\n    plotly_data = []\n    plotly_layout = plotly.graph_objs.Layout()\n\n    colors = px.colors.qualitative.Plotly\n\n    sep_ratio, positions = compute_plot_positions(len(df.columns), side=\"right\")\n\n    # your layout goes here\n    layout_kwargs = {\n        # \"title\": \"y-axes in loop\",\n        \"xaxis\": {\"domain\": [0, sep_ratio]},\n        \"height\": 200,\n    }\n\n    for i, col in enumerate(df.columns):\n        # we define our layout keys by string concatenation\n        # * (i > 0) is just to get rid of the if i > 0 statement\n        axis_name = \"yaxis\" + str(i + 1) * (i > 0)\n        yaxis = \"y\" + str(i + 1) * (i > 0)\n        plotly_data.append(\n            plotly.graph_objs.Scatter(\n                x=df.index,\n                y=df[col],\n                name=col,\n                line=dict(\n                    color=colors[i % len(colors)]\n                    # , width=4, dash=\"dash\"\n                ),\n            )\n        )\n\n        layout_kwargs[axis_name] = {  #'range': [0, i + 0.1],\n            \"position\": positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"right\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n        }\n\n        plotly_data[i][\"yaxis\"] = yaxis\n        if i > 0:\n            layout_kwargs[axis_name][\"overlaying\"] = \"y\"\n\n    fig = plotly.graph_objs.Figure(\n        data=plotly_data, layout=plotly.graph_objs.Layout(**layout_kwargs)\n    )\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Timeseries DataFrame Plot with multiple Y Axes\",\n    description=\"Plotting a dataframe of multiple timeseries with multiple Y axes\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"58e793bf-1aa7-316c-bc8a-f34a435fc8f0\",\n    revision_group_id=\"58e793bf-1aa7-316c-bc8a-f34a435fc8f0\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.782009+00:00\"\n)\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(multi_series_with_multi_yaxis(dataframe))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "c011bcc7-5179-4913-f99a-379008401489",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "b10e8a92-7d2a-789c-cd5d-4abfaa17a14a",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "096c6181-4ba5-0ee7-361a-3c32eee8c0c2",
    "revision_group_id": "096c6181-4ba5-0ee7-361a-3c32eee8c0c2",
    "name": "2D Grid Generator",
    "description": "Generates 2 dimensional grids",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.783091+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# 2D Grid Generator\n\n## Description\nGenerates 2 dimensional grids, useful for visualization.\n\n## Inputs\n* **x_min** (Float): The minimum x value.\n* **x_max** (Float): The maximum x value.\n* **y_min** (Float): The minimum y value.\n* **y_max** (Float): The maximum y value.\n* **n** (Integer): The number of values in the corresponding grid will be n^2.\n\n## Outputs\n* **x_values** (Pandas Series): All x values of the generated grid as one long series (repeated for each row).\n* **y_values** (Pandas Series): All y values of the generated grid as one long series (repeated for each column).\n* **x_indices** (Pandas Series): The x values of the generated grid (only once).\n* **y_indices** (Pandas Series): The y values of the generated grid (only once).\n\n## Details\nGenerates an n times n sized grid of values evenly spaced out between minimum and maximum values for each axis. This is useful for visualization, especially to get data for contour plots.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\nimport numpy as np\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"x_min\": DataType.Float, \"x_max\": DataType.Float, \"y_min\": DataType.Float, \"y_max\": DataType.Float, \"n\": DataType.Integer},\n    outputs={\"x_values\": DataType.Series, \"y_values\": DataType.Series, \"x_indices\": DataType.Series, \"y_indices\": DataType.Series},\n    name=\"2D Grid Generator\",\n    description=\"Generates 2 dimensional grids\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"096c6181-4ba5-0ee7-361a-3c32eee8c0c2\",\n    revision_group_id=\"096c6181-4ba5-0ee7-361a-3c32eee8c0c2\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.783091+00:00\"\n)\ndef main(*, x_min, x_max, y_min, y_max, n):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    xs = np.linspace(x_min, x_max, n)\n    ys = np.linspace(y_min, y_max, n)\n    xx, yy = np.meshgrid(xs, ys)\n\n    return {\n        \"x_values\": pd.Series(xx.ravel(), name=\"x\"),\n        \"y_values\": pd.Series(yy.ravel(), name=\"y\"),\n        \"x_indices\": pd.Series(xs, name=\"x\"),\n        \"y_indices\": pd.Series(ys, name=\"y\"),\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "4ef2610a-4321-004c-aee8-5cbf87ac1a49",
          "name": "x_min",
          "data_type": "FLOAT"
        },
        {
          "id": "02a7f8f6-0fb5-5a65-12d7-a21d61cdd271",
          "name": "x_max",
          "data_type": "FLOAT"
        },
        {
          "id": "b3492592-b3e8-caaa-a4d4-4670d110d7f0",
          "name": "y_min",
          "data_type": "FLOAT"
        },
        {
          "id": "80fb9d9d-d926-8cb6-6a41-777ba806f6ea",
          "name": "y_max",
          "data_type": "FLOAT"
        },
        {
          "id": "64245bba-7e81-ef0a-941d-2f9b5b43d044",
          "name": "n",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "597905f3-db79-f46b-db04-dc22cdadf449",
          "name": "x_values",
          "data_type": "SERIES"
        },
        {
          "id": "38be3a38-8761-fc80-cab0-da2c12f4a9c8",
          "name": "y_values",
          "data_type": "SERIES"
        },
        {
          "id": "474c27a3-df58-7b9f-ff7e-d57a2e416fb9",
          "name": "x_indices",
          "data_type": "SERIES"
        },
        {
          "id": "0e368818-fdfb-6796-a463-8bd9d5ff03e5",
          "name": "y_indices",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "daed7280-7013-3be1-41c0-65e4628e0e1d",
    "revision_group_id": "daed7280-7013-3be1-41c0-65e4628e0e1d",
    "name": "Compare Timeshifted Timeseries",
    "description": "Use a slider to timeshift one timeseries to compare with another",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.298224+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Compare Timeshifted Timeseries\n\n## Description\nUse a slider to timeshift one timeseries to compare it with another.\n\n## Inputs\n* **series** (Pandas Series): Entries must be numeric and Index should be a DateTime Index. This is the timeseries that is fix and will not be shifted.\n* **series_shiftable** (Pandas Series): Entries must be numeric and Index should be a DateTime Index. This is the Series that can be timeshifted via the provided slider.\n* **freq** (String): A frequency specifier specifying the base value of timeshifts. Example values are \"D\" (a calendar day), \"H\" (hour) or \"M\" (month). For possible values confer the relevant [Pandas documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases).\n* **freq_factor** (Integer): A factor attached to the frequency specifier such that both together define the step size of the possible timeshifts. For example a freq_factor of 7 and a frequency of \"D\" lead to timeshift steps of length 7 days.\n* **max_shifts_past** (Integer): Must be nonnegative. How many steps the slider allows to shift into the past.\n* **max_shifts_future** (Integer): Must be nonnegative. How many steps the slider allows to shift into the future.\n\n## Outputs\n* **comparison_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots both incoming timeseries into the same figure using Plotly. Additionally there is a slider that allows to timeshift the timeseries going into input **series_shiftable** by certain steps. Step size is determined by **freq** and **freq_factor**, for example the combination \"d\" and 7 of these inputs leads to each step being 7 days. The **max_shifts_past** and **max_shifts_future** parameters determine how many steps the slider allows to timeshift into each respective time direction.\n\nNote that for each step a copy of the **series_shiftable** timeseries data is stored in the plot -- leading to possibly a lot of data in the output plot if used thoughtlessly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"freq\": \"d\",\n\t\"freq_factor\": 7,\n\t\"max_shifts_future\": 10,\n\t\"max_shifts_past\": 10,\n\t\"series_shiftable\": {\n    \"2019-11-25T01:00:00.000Z\": 7.787,\n    \"2019-11-25T02:00:00.000Z\": 7.4427,\n    \"2019-11-25T03:00:00.000Z\": 7.8189,\n    \"2019-11-25T04:00:00.000Z\": 7.4774,\n    \"2019-11-25T05:00:00.000Z\": 7.9578,\n    \"2019-11-25T06:00:00.000Z\": 7.8738,\n    \"2019-11-25T07:00:00.000Z\": 8.3802,\n    \"2019-11-25T08:00:00.000Z\": 8.1719,\n    \"2019-11-25T09:00:00.000Z\": 7.5064,\n    \"2019-11-25T10:00:00.000Z\": 8.1632,\n    \"2019-11-25T11:00:00.000Z\": 8.088,\n    \"2019-11-25T12:00:00.000Z\": 7.9578,\n    \"2019-11-25T13:00:00.000Z\": 7.6424,\n    \"2019-11-25T14:00:00.000Z\": 7.7841,\n    \"2019-11-25T15:00:00.000Z\": 7.6308,\n    \"2019-11-25T16:00:00.000Z\": 7.5932,\n    \"2019-11-25T17:00:00.000Z\": 7.5064,\n    \"2019-11-25T18:00:00.000Z\": 8.1343,\n    \"2019-11-25T19:00:00.000Z\": 8.305,\n    \"2019-11-25T20:00:00.000Z\": 8.0503,\n    \"2019-11-25T21:00:00.000Z\": 8.0012,\n    \"2019-11-25T22:00:00.000Z\": 8.0012,\n    \"2019-11-25T23:00:00.000Z\": 8.0069,\n    \"2019-11-26T01:00:00.000Z\": 7.8941,\n    \"2019-11-26T02:00:00.000Z\": 7.8825,\n    \"2019-11-26T03:00:00.000Z\": 7.6944,\n    \"2019-11-26T04:00:00.000Z\": 8.0301,\n    \"2019-11-26T05:00:00.000Z\": 8.088,\n    \"2019-11-26T06:00:00.000Z\": 8.0648,\n    \"2019-11-26T07:00:00.000Z\": 7.9867,\n    \"2019-11-26T08:00:00.000Z\": 7.8507,\n    \"2019-11-26T09:00:00.000Z\": 7.8565,\n    \"2019-11-26T10:00:00.000Z\": 7.9722,\n    \"2019-11-26T11:00:00.000Z\": 8.0446,\n    \"2019-11-26T12:00:00.000Z\": 8.1748,\n    \"2019-11-26T13:00:00.000Z\": 7.8362,\n    \"2019-11-26T14:00:00.000Z\": 8.0648,\n    \"2019-11-26T15:00:00.000Z\": 8.0793,\n    \"2019-11-26T16:00:00.000Z\": 8.088,\n    \"2019-11-26T17:00:00.000Z\": 8.0793,\n    \"2019-11-26T18:00:00.000Z\": 8.0532,\n    \"2019-11-26T19:00:00.000Z\": 8.0677,\n    \"2019-11-26T20:00:00.000Z\": 8.0475,\n    \"2019-11-26T21:00:00.000Z\": 8.0156,\n    \"2019-11-26T22:00:00.000Z\": 7.9635,\n    \"2019-11-26T23:00:00.000Z\": 7.8854,\n    \"2019-11-27T01:00:00.000Z\": 7.7813,\n    \"2019-11-27T02:00:00.000Z\": 8.0243,\n    \"2019-11-27T03:00:00.000Z\": 8.195,\n    \"2019-11-27T04:00:00.000Z\": 8.1632,\n    \"2019-11-27T05:00:00.000Z\": 8.0272,\n    \"2019-11-27T06:00:00.000Z\": 7.9983,\n    \"2019-11-27T07:00:00.000Z\": 8.1574,\n    \"2019-11-27T08:00:00.000Z\": 8.2095,\n    \"2019-11-27T09:00:00.000Z\": 8.3079,\n    \"2019-11-27T10:00:00.000Z\": 8.331,\n    \"2019-11-27T11:00:00.000Z\": 8.3166,\n    \"2019-11-27T12:00:00.000Z\": 8.3426,\n    \"2019-11-27T13:00:00.000Z\": 8.3802,\n    \"2019-11-27T14:00:00.000Z\": 8.386,\n    \"2019-11-27T15:00:00.000Z\": 8.2703,\n    \"2019-11-27T16:00:00.000Z\": 8.3021,\n    \"2019-11-27T17:00:00.000Z\": 8.2442,\n    \"2019-11-27T18:00:00.000Z\": 8.1892,\n    \"2019-11-27T19:00:00.000Z\": 8.2269,\n    \"2019-11-27T20:00:00.000Z\": 8.3079,\n    \"2019-11-27T21:00:00.000Z\": 8.386,\n    \"2019-11-27T22:00:00.000Z\": 8.6146,\n    \"2019-11-27T23:00:00.000Z\": 8.5538,\n    \"2019-11-28T01:00:00.000Z\": 8.713,\n    \"2019-11-28T02:00:00.000Z\": 8.7072,\n    \"2019-11-28T03:00:00.000Z\": 8.739,\n    \"2019-11-28T04:00:00.000Z\": 8.765,\n    \"2019-11-28T05:00:00.000Z\": 8.794,\n    \"2019-11-28T06:00:00.000Z\": 8.7998,\n    \"2019-11-28T07:00:00.000Z\": 8.7824,\n    \"2019-11-28T08:00:00.000Z\": 8.8171,\n    \"2019-11-28T09:00:00.000Z\": 8.8519,\n    \"2019-11-28T10:00:00.000Z\": 9.5926,\n    \"2019-11-28T11:00:00.000Z\": 10.1858,\n    \"2019-11-28T12:00:00.000Z\": 9.9716,\n    \"2019-11-28T13:00:00.000Z\": 9.4334,\n    \"2019-11-28T14:00:00.000Z\": 9.3814,\n    \"2019-11-28T15:00:00.000Z\": 10.3478,\n    \"2019-11-28T16:00:00.000Z\": 9.6013,\n    \"2019-11-28T17:00:00.000Z\": 10.912,\n    \"2019-11-28T18:00:00.000Z\": 10.64,\n    \"2019-11-28T19:00:00.000Z\": 10.9873,\n    \"2019-11-28T20:00:00.000Z\": 11.1522,\n    \"2019-11-28T21:00:00.000Z\": 11.1233,\n    \"2019-11-28T22:00:00.000Z\": 11.1493,\n    \"2019-11-28T23:00:00.000Z\": 10.9149,\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t},\n\t\"series\": {\n    \"2019-10-01T15:00:00.000Z\": 8.6464,\n    \"2019-10-01T16:00:00.000Z\": 8.6377,\n    \"2019-10-01T17:00:00.000Z\": 8.6348,\n    \"2019-10-01T18:00:00.000Z\": 8.6291,\n    \"2019-10-01T19:00:00.000Z\": 8.6291,\n    \"2019-10-01T20:00:00.000Z\": 8.6291,\n    \"2019-10-01T21:00:00.000Z\": 8.6233,\n    \"2019-10-01T22:00:00.000Z\": 8.6233,\n    \"2019-10-01T23:00:00.000Z\": 8.6175,\n    \"2019-10-02T01:00:00.000Z\": 8.6175,\n    \"2019-10-02T02:00:00.000Z\": 8.6175,\n    \"2019-10-02T03:00:00.000Z\": 8.6175,\n    \"2019-10-02T04:00:00.000Z\": 8.6117,\n    \"2019-10-02T05:00:00.000Z\": 8.6117,\n    \"2019-10-02T06:00:00.000Z\": 8.6001,\n    \"2019-10-02T07:00:00.000Z\": 8.5943,\n    \"2019-10-02T08:00:00.000Z\": 8.5856,\n    \"2019-10-02T09:00:00.000Z\": 8.577,\n    \"2019-10-02T10:00:00.000Z\": 8.6175,\n    \"2019-10-02T11:00:00.000Z\": 8.5741,\n    \"2019-10-02T12:00:00.000Z\": 8.5654,\n    \"2019-10-02T13:00:00.000Z\": 8.5625,\n    \"2019-10-02T14:00:00.000Z\": 8.5509,\n    \"2019-10-02T15:00:00.000Z\": 8.5422,\n    \"2019-10-02T16:00:00.000Z\": 8.5596,\n    \"2019-10-02T17:00:00.000Z\": 8.5856,\n    \"2019-10-02T18:00:00.000Z\": 8.5885,\n    \"2019-10-02T19:00:00.000Z\": 8.5914,\n    \"2019-10-02T20:00:00.000Z\": 8.5885,\n    \"2019-10-02T21:00:00.000Z\": 8.5856,\n    \"2019-10-02T22:00:00.000Z\": 8.5856,\n    \"2019-10-02T23:00:00.000Z\": 8.577,\n    \"2019-10-03T01:00:00.000Z\": 8.5712,\n    \"2019-10-03T02:00:00.000Z\": 8.5683,\n    \"2019-10-03T03:00:00.000Z\": 8.5596,\n    \"2019-10-03T04:00:00.000Z\": 8.5509,\n    \"2019-10-03T05:00:00.000Z\": 8.5538,\n    \"2019-10-03T06:00:00.000Z\": 8.548,\n    \"2019-10-03T07:00:00.000Z\": 8.5422,\n    \"2019-10-03T08:00:00.000Z\": 8.5365,\n    \"2019-10-03T09:00:00.000Z\": 8.5307,\n    \"2019-10-03T10:00:00.000Z\": 8.5278,\n    \"2019-10-03T11:00:00.000Z\": 8.5307,\n    \"2019-10-03T12:00:00.000Z\": 8.5365,\n    \"2019-10-03T13:00:00.000Z\": 8.5307,\n    \"2019-10-03T14:00:00.000Z\": 8.5307,\n    \"2019-10-03T15:00:00.000Z\": 8.5307,\n    \"2019-10-03T16:00:00.000Z\": 8.5278,\n    \"2019-10-03T17:00:00.000Z\": 8.5249,\n    \"2019-10-03T18:00:00.000Z\": 8.5249,\n    \"2019-10-03T19:00:00.000Z\": 8.5191,\n    \"2019-10-03T20:00:00.000Z\": 8.5191,\n    \"2019-10-03T21:00:00.000Z\": 8.5191,\n    \"2019-10-03T22:00:00.000Z\": 8.5191,\n    \"2019-10-03T23:00:00.000Z\": 8.5104,\n    \"2019-10-04T01:00:00.000Z\": 8.5104,\n    \"2019-10-04T02:00:00.000Z\": 8.5104,\n    \"2019-10-04T03:00:00.000Z\": 8.5046,\n    \"2019-10-04T04:00:00.000Z\": 8.4988,\n    \"2019-10-04T05:00:00.000Z\": 8.4988,\n    \"2019-10-04T06:00:00.000Z\": 8.4931,\n    \"2019-10-04T07:00:00.000Z\": 8.4844,\n    \"2019-10-04T08:00:00.000Z\": 8.4902,\n    \"2019-10-04T09:00:00.000Z\": 8.4468,\n    \"2019-10-04T10:00:00.000Z\": 8.4728,\n    \"2019-10-04T11:00:00.000Z\": 8.4815,\n    \"2019-10-04T12:00:00.000Z\": 8.4612,\n    \"2019-10-04T13:00:00.000Z\": 8.5075,\n    \"2019-10-04T14:00:00.000Z\": 8.4815,\n    \"2019-10-04T15:00:00.000Z\": 8.4902,\n    \"2019-10-04T16:00:00.000Z\": 8.548,\n    \"2019-10-04T17:00:00.000Z\": 8.5422,\n    \"2019-10-04T18:00:00.000Z\": 8.5509,\n    \"2019-10-04T19:00:00.000Z\": 8.5509,\n    \"2019-10-04T20:00:00.000Z\": 8.5509,\n    \"2019-10-04T21:00:00.000Z\": 8.5567,\n    \"2019-10-04T22:00:00.000Z\": 8.5307,\n    \"2019-10-04T23:00:00.000Z\": 8.5596,\n    \"2019-10-05T01:00:00.000Z\": 8.5712,\n    \"2019-10-05T02:00:00.000Z\": 8.5741,\n    \"2019-10-05T03:00:00.000Z\": 8.5712,\n    \"2019-10-05T04:00:00.000Z\": 8.5596,\n    \"2019-10-05T05:00:00.000Z\": 8.5654,\n    \"2019-10-05T06:00:00.000Z\": 8.5654,\n    \"2019-10-05T07:00:00.000Z\": 8.5654,\n    \"2019-10-05T08:00:00.000Z\": 8.5625,\n    \"2019-10-05T09:00:00.000Z\": 8.5625,\n    \"2019-10-05T10:00:00.000Z\": 8.548,\n    \"2019-10-05T11:00:00.000Z\": 8.5596,\n    \"2019-10-05T12:00:00.000Z\": 8.5596,\n    \"2019-10-05T13:00:00.000Z\": 8.5394,\n    \"2019-10-05T14:00:00.000Z\": 8.548,\n    \"2019-10-05T15:00:00.000Z\": 8.5538,\n    \"2019-10-05T16:00:00.000Z\": 8.5596,\n    \"2019-10-05T17:00:00.000Z\": 8.5596,\n    \"2019-10-05T18:00:00.000Z\": 8.5538,\n    \"2019-10-05T19:00:00.000Z\": 8.5596,\n    \"2019-10-05T20:00:00.000Z\": 8.5451,\n    \"2019-10-05T21:00:00.000Z\": 8.5394,\n    \"2019-10-05T22:00:00.000Z\": 8.5336,\n    \"2019-10-05T23:00:00.000Z\": 8.522,\n    \"2019-10-06T01:00:00.000Z\": 8.522,\n    \"2019-10-06T02:00:00.000Z\": 8.5104,\n    \"2019-10-06T03:00:00.000Z\": 8.5046,\n    \"2019-10-06T04:00:00.000Z\": 8.4988,\n    \"2019-10-06T05:00:00.000Z\": 8.5017,\n    \"2019-10-06T06:00:00.000Z\": 8.4844,\n    \"2019-10-06T07:00:00.000Z\": 8.4699,\n    \"2019-10-06T08:00:00.000Z\": 8.4641,\n    \"2019-10-06T09:00:00.000Z\": 8.4583,\n    \"2019-10-06T10:00:00.000Z\": 8.4525,\n    \"2019-10-06T11:00:00.000Z\": 8.4381,\n    \"2019-10-06T12:00:00.000Z\": 8.4294,\n    \"2019-10-06T13:00:00.000Z\": 8.4265,\n    \"2019-10-06T14:00:00.000Z\": 8.4178,\n    \"2019-10-06T15:00:00.000Z\": 8.4149,\n    \"2019-10-06T16:00:00.000Z\": 8.412,\n    \"2019-10-06T17:00:00.000Z\": 8.412,\n    \"2019-10-06T18:00:00.000Z\": 8.4091,\n    \"2019-10-06T19:00:00.000Z\": 8.4063,\n    \"2019-10-06T20:00:00.000Z\": 8.412,\n    \"2019-10-06T21:00:00.000Z\": 8.3889,\n    \"2019-10-06T22:00:00.000Z\": 8.4063,\n    \"2019-10-06T23:00:00.000Z\": 8.4063,\n    \"2019-10-07T01:00:00.000Z\": 8.4005,\n    \"2019-10-07T02:00:00.000Z\": 8.3976,\n    \"2019-10-07T03:00:00.000Z\": 8.3918,\n    \"2019-10-07T04:00:00.000Z\": 8.3889,\n    \"2019-10-07T05:00:00.000Z\": 8.386,\n    \"2019-10-07T06:00:00.000Z\": 8.3802,\n    \"2019-10-07T07:00:00.000Z\": 8.3628,\n    \"2019-10-07T08:00:00.000Z\": 8.3715,\n    \"2019-10-07T09:00:00.000Z\": 8.3657,\n    \"2019-10-07T10:00:00.000Z\": 8.36,\n    \"2019-10-07T11:00:00.000Z\": 8.3542,\n    \"2019-10-07T12:00:00.000Z\": 8.3455,\n    \"2019-10-07T13:00:00.000Z\": 8.36,\n    \"2019-10-07T14:00:00.000Z\": 8.3513,\n    \"2019-10-07T15:00:00.000Z\": 8.36,\n    \"2019-10-07T16:00:00.000Z\": 8.3571,\n    \"2019-10-07T17:00:00.000Z\": 8.36,\n    \"2019-10-07T18:00:00.000Z\": 8.3628,\n    \"2019-10-07T19:00:00.000Z\": 8.36,\n    \"2019-10-07T20:00:00.000Z\": 8.3657,\n    \"2019-10-07T21:00:00.000Z\": 8.3571,\n    \"2019-10-07T22:00:00.000Z\": 8.3657,\n    \"2019-10-07T23:00:00.000Z\": 8.3744,\n    \"2019-10-08T01:00:00.000Z\": 8.3773,\n    \"2019-10-08T02:00:00.000Z\": 8.3744,\n    \"2019-10-08T03:00:00.000Z\": 8.3744,\n    \"2019-10-08T04:00:00.000Z\": 8.3744,\n    \"2019-10-08T05:00:00.000Z\": 8.3773,\n    \"2019-10-08T06:00:00.000Z\": 8.3773,\n    \"2019-10-08T07:00:00.000Z\": 8.3802,\n    \"2019-10-08T08:00:00.000Z\": 8.3773,\n    \"2019-10-08T09:00:00.000Z\": 8.36,\n    \"2019-10-08T10:00:00.000Z\": 8.3628,\n    \"2019-10-08T11:00:00.000Z\": 8.4034,\n    \"2019-10-08T12:00:00.000Z\": 8.3744,\n    \"2019-10-08T13:00:00.000Z\": 8.4005,\n    \"2019-10-08T14:00:00.000Z\": 8.4294,\n    \"2019-10-08T15:00:00.000Z\": 8.3802,\n    \"2019-10-08T16:00:00.000Z\": 8.4294,\n    \"2019-10-08T17:00:00.000Z\": 8.4699,\n    \"2019-10-08T18:00:00.000Z\": 8.4902,\n    \"2019-10-08T19:00:00.000Z\": 8.4931,\n    \"2019-10-08T20:00:00.000Z\": 8.4902,\n    \"2019-10-08T21:00:00.000Z\": 8.4902,\n    \"2019-10-08T22:00:00.000Z\": 8.4873,\n    \"2019-10-08T23:00:00.000Z\": 8.4902,\n    \"2019-10-09T01:00:00.000Z\": 8.4873,\n    \"2019-10-09T02:00:00.000Z\": 8.4902,\n    \"2019-10-09T03:00:00.000Z\": 8.4902,\n    \"2019-10-09T04:00:00.000Z\": 8.4902,\n    \"2019-10-09T05:00:00.000Z\": 8.4902,\n    \"2019-10-09T06:00:00.000Z\": 8.4902,\n    \"2019-10-09T07:00:00.000Z\": 8.4902,\n    \"2019-10-09T08:00:00.000Z\": 8.4873,\n    \"2019-10-09T09:00:00.000Z\": 8.4873,\n    \"2019-10-09T10:00:00.000Z\": 8.522,\n    \"2019-10-09T11:00:00.000Z\": 8.5422,\n    \"2019-10-09T12:00:00.000Z\": 8.5509,\n    \"2019-10-09T13:00:00.000Z\": 8.5885,\n    \"2019-10-09T14:00:00.000Z\": 8.6088,\n    \"2019-10-09T15:00:00.000Z\": 8.6233,\n    \"2019-10-09T16:00:00.000Z\": 8.6319,\n    \"2019-10-09T17:00:00.000Z\": 8.6291,\n    \"2019-10-09T18:00:00.000Z\": 8.6464,\n    \"2019-10-09T19:00:00.000Z\": 8.6522,\n    \"2019-10-09T20:00:00.000Z\": 8.6522,\n    \"2019-10-09T21:00:00.000Z\": 8.6551,\n    \"2019-10-09T22:00:00.000Z\": 8.658,\n    \"2019-10-09T23:00:00.000Z\": 8.6638,\n    \"2019-10-10T01:00:00.000Z\": 8.6522,\n    \"2019-10-10T02:00:00.000Z\": 8.6725,\n    \"2019-10-10T03:00:00.000Z\": 8.6753,\n    \"2019-10-10T04:00:00.000Z\": 8.6609,\n    \"2019-10-10T05:00:00.000Z\": 8.6146,\n    \"2019-10-10T06:00:00.000Z\": 8.6522,\n    \"2019-10-10T07:00:00.000Z\": 8.6696,\n    \"2019-10-10T08:00:00.000Z\": 8.6725,\n    \"2019-10-10T09:00:00.000Z\": 8.6725,\n    \"2019-10-10T10:00:00.000Z\": 8.6811,\n    \"2019-10-10T11:00:00.000Z\": 8.684,\n    \"2019-10-10T12:00:00.000Z\": 8.684,\n    \"2019-10-10T13:00:00.000Z\": 8.6782,\n    \"2019-10-10T14:00:00.000Z\": 8.6609,\n    \"2019-10-10T15:00:00.000Z\": 8.6609,\n    \"2019-10-10T16:00:00.000Z\": 8.6059,\n    \"2019-10-10T17:00:00.000Z\": 8.6117,\n    \"2019-10-10T18:00:00.000Z\": 8.6175,\n    \"2019-10-10T19:00:00.000Z\": 8.6638,\n    \"2019-10-10T20:00:00.000Z\": 8.6667,\n    \"2019-10-10T21:00:00.000Z\": 8.6725,\n    \"2019-10-10T22:00:00.000Z\": 8.6753,\n    \"2019-10-10T23:00:00.000Z\": 8.6811,\n    \"2019-10-11T01:00:00.000Z\": 8.6782,\n    \"2019-10-11T02:00:00.000Z\": 8.684,\n    \"2019-10-11T03:00:00.000Z\": 8.6811,\n    \"2019-10-11T04:00:00.000Z\": 8.6782,\n    \"2019-10-11T05:00:00.000Z\": 8.6725,\n    \"2019-10-11T06:00:00.000Z\": 8.6262,\n    \"2019-10-11T07:00:00.000Z\": 8.6667,\n    \"2019-10-11T08:00:00.000Z\": 8.6667,\n    \"2019-10-11T09:00:00.000Z\": 8.6725,\n    \"2019-10-11T10:00:00.000Z\": 8.6725,\n    \"2019-10-11T11:00:00.000Z\": 8.6725,\n    \"2019-10-11T12:00:00.000Z\": 8.6725,\n    \"2019-10-11T13:00:00.000Z\": 8.6233,\n    \"2019-10-11T14:00:00.000Z\": 8.6319,\n    \"2019-10-11T15:00:00.000Z\": 8.6725,\n    \"2019-10-11T16:00:00.000Z\": 8.6753,\n    \"2019-10-11T17:00:00.000Z\": 8.6753,\n    \"2019-10-11T18:00:00.000Z\": 8.6782,\n    \"2019-10-11T19:00:00.000Z\": 8.6811,\n    \"2019-10-11T20:00:00.000Z\": 8.6811,\n    \"2019-10-11T21:00:00.000Z\": 8.6811,\n    \"2019-10-11T22:00:00.000Z\": 8.6782,\n    \"2019-10-11T23:00:00.000Z\": 8.6348,\n    \"2019-10-12T01:00:00.000Z\": 8.6811,\n    \"2019-10-12T02:00:00.000Z\": 8.684,\n    \"2019-10-12T03:00:00.000Z\": 8.6696,\n    \"2019-10-12T04:00:00.000Z\": 8.6811,\n    \"2019-10-12T05:00:00.000Z\": 8.6869,\n    \"2019-10-12T06:00:00.000Z\": 8.684,\n    \"2019-10-12T07:00:00.000Z\": 8.684,\n    \"2019-10-12T08:00:00.000Z\": 8.6782,\n    \"2019-10-12T09:00:00.000Z\": 8.6782,\n    \"2019-10-12T10:00:00.000Z\": 8.6753,\n    \"2019-10-12T11:00:00.000Z\": 8.6377,\n    \"2019-10-12T12:00:00.000Z\": 8.6406,\n    \"2019-10-12T13:00:00.000Z\": 8.6782,\n    \"2019-10-12T14:00:00.000Z\": 8.6782,\n    \"2019-10-12T15:00:00.000Z\": 8.6811,\n    \"2019-10-12T16:00:00.000Z\": 8.6811,\n    \"2019-10-12T17:00:00.000Z\": 8.6811,\n    \"2019-10-12T18:00:00.000Z\": 8.6782,\n    \"2019-10-12T19:00:00.000Z\": 8.6811,\n    \"2019-10-12T20:00:00.000Z\": 8.6811,\n    \"2019-10-12T21:00:00.000Z\": 8.6811,\n    \"2019-10-12T22:00:00.000Z\": 8.684,\n    \"2019-10-12T23:00:00.000Z\": 8.6782,\n    \"2019-10-13T01:00:00.000Z\": 8.6782,\n    \"2019-10-13T02:00:00.000Z\": 8.6725,\n    \"2019-10-13T03:00:00.000Z\": 8.6782,\n    \"2019-10-13T04:00:00.000Z\": 8.6869,\n    \"2019-10-13T05:00:00.000Z\": 8.6869,\n    \"2019-10-13T06:00:00.000Z\": 8.6898,\n    \"2019-10-13T07:00:00.000Z\": 8.6898,\n    \"2019-10-13T08:00:00.000Z\": 8.6898,\n    \"2019-10-13T09:00:00.000Z\": 8.6927,\n    \"2019-10-13T10:00:00.000Z\": 8.6927,\n    \"2019-10-13T11:00:00.000Z\": 8.6956,\n    \"2019-10-13T12:00:00.000Z\": 8.7014,\n    \"2019-10-13T13:00:00.000Z\": 8.7043,\n    \"2019-10-13T14:00:00.000Z\": 8.7072,\n    \"2019-10-13T15:00:00.000Z\": 8.7101,\n    \"2019-10-13T16:00:00.000Z\": 8.7188,\n    \"2019-10-13T17:00:00.000Z\": 8.7332,\n    \"2019-10-13T18:00:00.000Z\": 8.739,\n    \"2019-10-13T19:00:00.000Z\": 8.7535,\n    \"2019-10-13T20:00:00.000Z\": 8.7622,\n    \"2019-10-13T21:00:00.000Z\": 8.7708,\n    \"2019-10-13T22:00:00.000Z\": 8.7766,\n    \"2019-10-13T23:00:00.000Z\": 8.7824,\n    \"2019-10-14T01:00:00.000Z\": 8.7882,\n    \"2019-10-14T02:00:00.000Z\": 8.794,\n    \"2019-10-14T03:00:00.000Z\": 8.7882,\n    \"2019-10-14T04:00:00.000Z\": 8.7882,\n    \"2019-10-14T05:00:00.000Z\": 8.794,\n    \"2019-10-14T06:00:00.000Z\": 8.794,\n    \"2019-10-14T07:00:00.000Z\": 8.794,\n    \"2019-10-14T08:00:00.000Z\": 8.7969,\n    \"2019-10-14T09:00:00.000Z\": 8.7998,\n    \"2019-10-14T10:00:00.000Z\": 8.7998,\n    \"2019-10-14T11:00:00.000Z\": 8.7998,\n    \"2019-10-14T12:00:00.000Z\": 8.7969,\n    \"2019-10-14T13:00:00.000Z\": 8.7998,\n    \"2019-10-14T14:00:00.000Z\": 8.794,\n    \"2019-10-14T15:00:00.000Z\": 8.8084,\n    \"2019-10-14T16:00:00.000Z\": 8.8113,\n    \"2019-10-14T17:00:00.000Z\": 8.8056,\n    \"2019-10-14T18:00:00.000Z\": 8.8056,\n    \"2019-10-14T19:00:00.000Z\": 8.8056,\n    \"2019-10-14T20:00:00.000Z\": 8.8027,\n    \"2019-10-14T21:00:00.000Z\": 8.8056,\n    \"2019-10-14T22:00:00.000Z\": 8.8027,\n    \"2019-10-14T23:00:00.000Z\": 8.8142,\n    \"2019-10-15T01:00:00.000Z\": 8.8142,\n    \"2019-10-15T02:00:00.000Z\": 8.82,\n    \"2019-10-15T03:00:00.000Z\": 8.8229,\n    \"2019-10-15T04:00:00.000Z\": 8.8229,\n    \"2019-10-15T05:00:00.000Z\": 8.8345,\n    \"2019-10-15T06:00:00.000Z\": 8.8316,\n    \"2019-10-15T07:00:00.000Z\": 8.8229,\n    \"2019-10-15T08:00:00.000Z\": 8.8171,\n    \"2019-10-15T09:00:00.000Z\": 8.8229,\n    \"2019-10-15T10:00:00.000Z\": 8.82,\n    \"2019-10-15T11:00:00.000Z\": 8.8142,\n    \"2019-10-15T12:00:00.000Z\": 8.8142,\n    \"2019-10-15T13:00:00.000Z\": 8.8171,\n    \"2019-10-15T14:00:00.000Z\": 8.8258,\n    \"2019-10-15T15:00:00.000Z\": 8.82,\n    \"2019-10-15T16:00:00.000Z\": 8.8287,\n    \"2019-10-15T17:00:00.000Z\": 8.8229,\n    \"2019-10-15T18:00:00.000Z\": 8.8142,\n    \"2019-10-15T19:00:00.000Z\": 8.8113,\n    \"2019-10-15T20:00:00.000Z\": 8.8084,\n    \"2019-10-15T21:00:00.000Z\": 8.8142,\n    \"2019-10-15T22:00:00.000Z\": 8.8084,\n    \"2019-10-15T23:00:00.000Z\": 8.7824,\n    \"2019-10-16T01:00:00.000Z\": 8.7708,\n    \"2019-10-16T02:00:00.000Z\": 8.794,\n    \"2019-10-16T03:00:00.000Z\": 8.8027,\n    \"2019-10-16T04:00:00.000Z\": 8.7708,\n    \"2019-10-16T05:00:00.000Z\": 8.7969,\n    \"2019-10-16T06:00:00.000Z\": 8.8171,\n    \"2019-10-16T07:00:00.000Z\": 8.8113,\n    \"2019-10-16T08:00:00.000Z\": 8.8171,\n    \"2019-10-16T09:00:00.000Z\": 8.8084,\n    \"2019-10-16T10:00:00.000Z\": 8.7766,\n    \"2019-10-16T11:00:00.000Z\": 8.7679,\n    \"2019-10-16T12:00:00.000Z\": 8.713,\n    \"2019-10-16T13:00:00.000Z\": 8.6464,\n    \"2019-10-16T14:00:00.000Z\": 8.6725,\n    \"2019-10-16T15:00:00.000Z\": 8.6696,\n    \"2019-10-16T16:00:00.000Z\": 8.6319,\n    \"2019-10-16T17:00:00.000Z\": 8.6638,\n    \"2019-10-16T18:00:00.000Z\": 8.7072,\n    \"2019-10-16T19:00:00.000Z\": 8.7159,\n    \"2019-10-16T20:00:00.000Z\": 8.7216,\n    \"2019-10-16T21:00:00.000Z\": 8.7477,\n    \"2019-10-16T22:00:00.000Z\": 8.7506,\n    \"2019-10-16T23:00:00.000Z\": 8.765,\n    \"2019-10-17T01:00:00.000Z\": 8.7824,\n    \"2019-10-17T02:00:00.000Z\": 8.7708,\n    \"2019-10-17T03:00:00.000Z\": 8.7679,\n    \"2019-10-17T04:00:00.000Z\": 8.794,\n    \"2019-10-17T05:00:00.000Z\": 8.7998,\n    \"2019-10-17T06:00:00.000Z\": 8.7911,\n    \"2019-10-17T07:00:00.000Z\": 8.7882,\n    \"2019-10-17T08:00:00.000Z\": 8.765,\n    \"2019-10-17T09:00:00.000Z\": 8.7448,\n    \"2019-10-17T10:00:00.000Z\": 8.6898,\n    \"2019-10-17T11:00:00.000Z\": 8.6782,\n    \"2019-10-17T12:00:00.000Z\": 8.5567,\n    \"2019-10-17T13:00:00.000Z\": 8.5741,\n    \"2019-10-17T14:00:00.000Z\": 8.603,\n    \"2019-10-17T15:00:00.000Z\": 8.5943,\n    \"2019-10-17T16:00:00.000Z\": 8.6117,\n    \"2019-10-17T17:00:00.000Z\": 8.6088,\n    \"2019-10-17T18:00:00.000Z\": 8.6088,\n    \"2019-10-17T19:00:00.000Z\": 8.6059,\n    \"2019-10-17T20:00:00.000Z\": 8.5972,\n    \"2019-10-17T21:00:00.000Z\": 8.6088,\n    \"2019-10-17T22:00:00.000Z\": 8.6175,\n    \"2019-10-17T23:00:00.000Z\": 8.6146,\n    \"2019-10-18T01:00:00.000Z\": 8.6059,\n    \"2019-10-18T02:00:00.000Z\": 8.6204,\n    \"2019-10-18T03:00:00.000Z\": 8.6233,\n    \"2019-10-18T04:00:00.000Z\": 8.6262,\n    \"2019-10-18T05:00:00.000Z\": 8.6262,\n    \"2019-10-18T06:00:00.000Z\": 8.6233,\n    \"2019-10-18T07:00:00.000Z\": 8.603,\n    \"2019-10-18T08:00:00.000Z\": 8.6262,\n    \"2019-10-18T09:00:00.000Z\": 8.6233,\n    \"2019-10-18T10:00:00.000Z\": 8.603,\n    \"2019-10-18T11:00:00.000Z\": 8.6464,\n    \"2019-10-18T12:00:00.000Z\": 8.6667,\n    \"2019-10-18T13:00:00.000Z\": 8.6956,\n    \"2019-10-18T14:00:00.000Z\": 8.7159,\n    \"2019-10-18T15:00:00.000Z\": 8.7188,\n    \"2019-10-18T16:00:00.000Z\": 8.7188,\n    \"2019-10-18T17:00:00.000Z\": 8.7303,\n    \"2019-10-18T18:00:00.000Z\": 8.7361,\n    \"2019-10-18T19:00:00.000Z\": 8.7361,\n    \"2019-10-18T20:00:00.000Z\": 8.7332,\n    \"2019-10-18T21:00:00.000Z\": 8.7245,\n    \"2019-10-18T22:00:00.000Z\": 8.7188,\n    \"2019-10-18T23:00:00.000Z\": 8.7159,\n    \"2019-10-19T01:00:00.000Z\": 8.7072,\n    \"2019-10-19T02:00:00.000Z\": 8.6985,\n    \"2019-10-19T03:00:00.000Z\": 8.6782,\n    \"2019-10-19T04:00:00.000Z\": 8.6898,\n    \"2019-10-19T05:00:00.000Z\": 8.6811,\n    \"2019-10-19T06:00:00.000Z\": 8.6725,\n    \"2019-10-19T07:00:00.000Z\": 8.6696,\n    \"2019-10-19T08:00:00.000Z\": 8.6667,\n    \"2019-10-19T09:00:00.000Z\": 8.6551,\n    \"2019-10-19T10:00:00.000Z\": 8.6464,\n    \"2019-10-19T11:00:00.000Z\": 8.6406,\n    \"2019-10-19T12:00:00.000Z\": 8.6406,\n    \"2019-10-19T13:00:00.000Z\": 8.6377,\n    \"2019-10-19T14:00:00.000Z\": 8.6348,\n    \"2019-10-19T15:00:00.000Z\": 8.6348,\n    \"2019-10-19T16:00:00.000Z\": 8.6059,\n    \"2019-10-19T17:00:00.000Z\": 8.6175,\n    \"2019-10-19T18:00:00.000Z\": 8.6319,\n    \"2019-10-19T19:00:00.000Z\": 8.6262,\n    \"2019-10-19T20:00:00.000Z\": 8.6204,\n    \"2019-10-19T21:00:00.000Z\": 8.6204,\n    \"2019-10-19T22:00:00.000Z\": 8.6204,\n    \"2019-10-19T23:00:00.000Z\": 8.6204,\n    \"2019-10-20T01:00:00.000Z\": 8.6146,\n    \"2019-10-20T02:00:00.000Z\": 8.6088,\n    \"2019-10-20T03:00:00.000Z\": 8.6088,\n    \"2019-10-20T04:00:00.000Z\": 8.6059,\n    \"2019-10-20T05:00:00.000Z\": 8.6001,\n    \"2019-10-20T06:00:00.000Z\": 8.5972,\n    \"2019-10-20T07:00:00.000Z\": 8.5828,\n    \"2019-10-20T08:00:00.000Z\": 8.5856,\n    \"2019-10-20T09:00:00.000Z\": 8.5799,\n    \"2019-10-20T10:00:00.000Z\": 8.5856,\n    \"2019-10-20T11:00:00.000Z\": 8.5856,\n    \"2019-10-20T12:00:00.000Z\": 8.5828,\n    \"2019-10-20T13:00:00.000Z\": 8.5799,\n    \"2019-10-20T14:00:00.000Z\": 8.577,\n    \"2019-10-20T15:00:00.000Z\": 8.5712,\n    \"2019-10-20T16:00:00.000Z\": 8.5422,\n    \"2019-10-20T17:00:00.000Z\": 8.5625,\n    \"2019-10-20T18:00:00.000Z\": 8.5654,\n    \"2019-10-20T19:00:00.000Z\": 8.5625,\n    \"2019-10-20T20:00:00.000Z\": 8.5567,\n    \"2019-10-20T21:00:00.000Z\": 8.5538,\n    \"2019-10-20T22:00:00.000Z\": 8.5509,\n    \"2019-10-20T23:00:00.000Z\": 8.5451,\n    \"2019-10-21T01:00:00.000Z\": 8.5422,\n    \"2019-10-21T02:00:00.000Z\": 8.5422,\n    \"2019-10-21T03:00:00.000Z\": 8.5394,\n    \"2019-10-21T04:00:00.000Z\": 8.5336,\n    \"2019-10-21T05:00:00.000Z\": 8.5365,\n    \"2019-10-21T06:00:00.000Z\": 8.5365,\n    \"2019-10-21T07:00:00.000Z\": 8.5365,\n    \"2019-10-21T08:00:00.000Z\": 8.5365,\n    \"2019-10-21T09:00:00.000Z\": 8.5307,\n    \"2019-10-21T10:00:00.000Z\": 8.4699,\n    \"2019-10-21T11:00:00.000Z\": 8.4873,\n    \"2019-10-21T12:00:00.000Z\": 8.4988,\n    \"2019-10-21T13:00:00.000Z\": 8.5017,\n    \"2019-10-21T14:00:00.000Z\": 8.5017,\n    \"2019-10-21T15:00:00.000Z\": 8.5046,\n    \"2019-10-21T16:00:00.000Z\": 8.5075,\n    \"2019-10-21T17:00:00.000Z\": 8.5075,\n    \"2019-10-21T18:00:00.000Z\": 8.4902,\n    \"2019-10-21T19:00:00.000Z\": 8.4902,\n    \"2019-10-21T20:00:00.000Z\": 8.4959,\n    \"2019-10-21T21:00:00.000Z\": 8.4959,\n    \"2019-10-21T22:00:00.000Z\": 8.4931,\n    \"2019-10-21T23:00:00.000Z\": 8.4959,\n    \"2019-10-22T01:00:00.000Z\": 8.4873,\n    \"2019-10-22T02:00:00.000Z\": 8.4873,\n    \"2019-10-22T03:00:00.000Z\": 8.4873,\n    \"2019-10-22T04:00:00.000Z\": 8.4873,\n    \"2019-10-22T05:00:00.000Z\": 8.4873,\n    \"2019-10-22T06:00:00.000Z\": 8.4786,\n    \"2019-10-22T07:00:00.000Z\": 8.4786,\n    \"2019-10-22T08:00:00.000Z\": 8.467,\n    \"2019-10-22T09:00:00.000Z\": 8.522,\n    \"2019-10-22T10:00:00.000Z\": 8.5683,\n    \"2019-10-22T11:00:00.000Z\": 8.577,\n    \"2019-10-22T12:00:00.000Z\": 8.5828,\n    \"2019-10-22T13:00:00.000Z\": 8.5885,\n    \"2019-10-22T14:00:00.000Z\": 8.5799,\n    \"2019-10-22T15:00:00.000Z\": 8.5741,\n    \"2019-10-22T16:00:00.000Z\": 8.5712,\n    \"2019-10-22T17:00:00.000Z\": 8.5741,\n    \"2019-10-22T18:00:00.000Z\": 8.5683,\n    \"2019-10-22T19:00:00.000Z\": 8.5712,\n    \"2019-10-22T20:00:00.000Z\": 8.5683,\n    \"2019-10-22T21:00:00.000Z\": 8.5683,\n    \"2019-10-22T22:00:00.000Z\": 8.5654,\n    \"2019-10-22T23:00:00.000Z\": 8.5654,\n    \"2019-10-23T01:00:00.000Z\": 8.5625,\n    \"2019-10-23T02:00:00.000Z\": 8.5596,\n    \"2019-10-23T03:00:00.000Z\": 8.5596,\n    \"2019-10-23T04:00:00.000Z\": 8.5596,\n    \"2019-10-23T05:00:00.000Z\": 8.5596,\n    \"2019-10-23T06:00:00.000Z\": 8.548,\n    \"2019-10-23T07:00:00.000Z\": 8.548,\n    \"2019-10-23T08:00:00.000Z\": 8.5394,\n    \"2019-10-23T09:00:00.000Z\": 8.5394,\n    \"2019-10-23T10:00:00.000Z\": 8.5394,\n    \"2019-10-23T11:00:00.000Z\": 8.5336,\n    \"2019-10-23T12:00:00.000Z\": 8.5625,\n    \"2019-10-23T13:00:00.000Z\": 8.5683,\n    \"2019-10-23T14:00:00.000Z\": 8.5712,\n    \"2019-10-23T15:00:00.000Z\": 8.4728,\n    \"2019-10-23T16:00:00.000Z\": 8.4844,\n    \"2019-10-23T17:00:00.000Z\": 8.4815,\n    \"2019-10-23T18:00:00.000Z\": 8.5017,\n    \"2019-10-23T19:00:00.000Z\": 8.5104,\n    \"2019-10-23T20:00:00.000Z\": 8.5162,\n    \"2019-10-23T21:00:00.000Z\": 8.522,\n    \"2019-10-23T22:00:00.000Z\": 8.5162,\n    \"2019-10-23T23:00:00.000Z\": 8.5278,\n    \"2019-10-24T01:00:00.000Z\": 8.5162,\n    \"2019-10-24T02:00:00.000Z\": 8.5307,\n    \"2019-10-24T03:00:00.000Z\": 8.5394,\n    \"2019-10-24T04:00:00.000Z\": 8.5394,\n    \"2019-10-24T05:00:00.000Z\": 8.548,\n    \"2019-10-24T06:00:00.000Z\": 8.5075,\n    \"2019-10-24T07:00:00.000Z\": 8.5538,\n    \"2019-10-24T08:00:00.000Z\": 8.5741,\n    \"2019-10-24T09:00:00.000Z\": 8.5828,\n    \"2019-10-24T10:00:00.000Z\": 8.5914,\n    \"2019-10-24T11:00:00.000Z\": 8.5856,\n    \"2019-10-24T12:00:00.000Z\": 8.5914,\n    \"2019-10-24T13:00:00.000Z\": 8.5972,\n    \"2019-10-24T14:00:00.000Z\": 8.5972,\n    \"2019-10-24T15:00:00.000Z\": 8.6001,\n    \"2019-10-24T16:00:00.000Z\": 8.6088,\n    \"2019-10-24T17:00:00.000Z\": 8.6117,\n    \"2019-10-24T18:00:00.000Z\": 8.6175,\n    \"2019-10-24T19:00:00.000Z\": 8.6175,\n    \"2019-10-24T20:00:00.000Z\": 8.603,\n    \"2019-10-24T21:00:00.000Z\": 8.6059,\n    \"2019-10-24T22:00:00.000Z\": 8.603,\n    \"2019-10-24T23:00:00.000Z\": 8.6088,\n    \"2019-10-25T01:00:00.000Z\": 8.6117,\n    \"2019-10-25T02:00:00.000Z\": 8.6175,\n    \"2019-10-25T03:00:00.000Z\": 8.6146,\n    \"2019-10-25T04:00:00.000Z\": 8.6146,\n    \"2019-10-25T05:00:00.000Z\": 8.603,\n    \"2019-10-25T06:00:00.000Z\": 8.5683,\n    \"2019-10-25T07:00:00.000Z\": 8.5683,\n    \"2019-10-25T08:00:00.000Z\": 8.5625,\n    \"2019-10-25T09:00:00.000Z\": 8.5654,\n    \"2019-10-25T10:00:00.000Z\": 8.5741,\n    \"2019-10-25T11:00:00.000Z\": 8.5712,\n    \"2019-10-25T12:00:00.000Z\": 8.5654,\n    \"2019-10-25T13:00:00.000Z\": 8.5625,\n    \"2019-10-25T14:00:00.000Z\": 8.5596,\n    \"2019-10-25T15:00:00.000Z\": 8.5712,\n    \"2019-10-25T16:00:00.000Z\": 8.5654,\n    \"2019-10-25T17:00:00.000Z\": 8.5828,\n    \"2019-10-25T18:00:00.000Z\": 8.6001,\n    \"2019-10-25T19:00:00.000Z\": 8.5914,\n    \"2019-10-25T20:00:00.000Z\": 8.5914,\n    \"2019-10-25T21:00:00.000Z\": 8.5856,\n    \"2019-10-25T22:00:00.000Z\": 8.5914,\n    \"2019-10-25T23:00:00.000Z\": 8.5828,\n    \"2019-10-26T01:00:00.000Z\": 8.5914,\n    \"2019-10-26T02:00:00.000Z\": 8.5741,\n    \"2019-10-26T03:00:00.000Z\": 8.5943,\n    \"2019-10-26T04:00:00.000Z\": 8.5828,\n    \"2019-10-26T05:00:00.000Z\": 8.5885,\n    \"2019-10-26T06:00:00.000Z\": 8.5914,\n    \"2019-10-26T07:00:00.000Z\": 8.5943,\n    \"2019-10-26T08:00:00.000Z\": 8.5943,\n    \"2019-10-26T09:00:00.000Z\": 8.5943,\n    \"2019-10-26T10:00:00.000Z\": 8.5943,\n    \"2019-10-26T11:00:00.000Z\": 8.577,\n    \"2019-10-26T12:00:00.000Z\": 8.5972,\n    \"2019-10-26T13:00:00.000Z\": 8.6001,\n    \"2019-10-26T14:00:00.000Z\": 8.6146,\n    \"2019-10-26T15:00:00.000Z\": 8.6117,\n    \"2019-10-26T16:00:00.000Z\": 8.6001,\n    \"2019-10-26T17:00:00.000Z\": 8.5596,\n    \"2019-10-26T18:00:00.000Z\": 8.5509,\n    \"2019-10-26T19:00:00.000Z\": 8.5422,\n    \"2019-10-26T20:00:00.000Z\": 8.5336,\n    \"2019-10-26T21:00:00.000Z\": 8.5278,\n    \"2019-10-26T22:00:00.000Z\": 8.5278,\n    \"2019-10-26T23:00:00.000Z\": 8.5683,\n    \"2019-10-27T01:00:00.000Z\": 8.5712,\n    \"2019-10-27T02:00:00.000Z\": 8.5741,\n    \"2019-10-27T03:00:00.000Z\": 8.5741,\n    \"2019-10-27T04:00:00.000Z\": 8.5828,\n    \"2019-10-27T05:00:00.000Z\": 8.548,\n    \"2019-10-27T06:00:00.000Z\": 8.5741,\n    \"2019-10-27T07:00:00.000Z\": 8.5712,\n    \"2019-10-27T08:00:00.000Z\": 8.5509,\n    \"2019-10-27T09:00:00.000Z\": 8.5741,\n    \"2019-10-27T10:00:00.000Z\": 8.5741,\n    \"2019-10-27T11:00:00.000Z\": 8.5712,\n    \"2019-10-27T12:00:00.000Z\": 8.5712,\n    \"2019-10-27T13:00:00.000Z\": 8.5914,\n    \"2019-10-27T14:00:00.000Z\": 8.577,\n    \"2019-10-27T15:00:00.000Z\": 8.5741,\n    \"2019-10-27T16:00:00.000Z\": 8.5799,\n    \"2019-10-27T17:00:00.000Z\": 8.5828,\n    \"2019-10-27T18:00:00.000Z\": 8.5828,\n    \"2019-10-27T19:00:00.000Z\": 8.577,\n    \"2019-10-27T20:00:00.000Z\": 8.5625,\n    \"2019-10-27T21:00:00.000Z\": 8.5394,\n    \"2019-10-27T22:00:00.000Z\": 8.5509,\n    \"2019-10-27T23:00:00.000Z\": 8.5451,\n    \"2019-10-28T01:00:00.000Z\": 8.5394,\n    \"2019-10-28T02:00:00.000Z\": 8.5365,\n    \"2019-10-28T03:00:00.000Z\": 8.5191,\n    \"2019-10-28T04:00:00.000Z\": 8.5191,\n    \"2019-10-28T05:00:00.000Z\": 8.5046,\n    \"2019-10-28T06:00:00.000Z\": 8.4959,\n    \"2019-10-28T07:00:00.000Z\": 8.4873,\n    \"2019-10-28T08:00:00.000Z\": 8.4873,\n    \"2019-10-28T09:00:00.000Z\": 8.467,\n    \"2019-10-28T10:00:00.000Z\": 8.4525,\n    \"2019-10-28T11:00:00.000Z\": 8.4468,\n    \"2019-10-28T12:00:00.000Z\": 8.4381,\n    \"2019-10-28T13:00:00.000Z\": 8.4005,\n    \"2019-10-28T14:00:00.000Z\": 8.3773,\n    \"2019-10-28T15:00:00.000Z\": 8.3686,\n    \"2019-10-28T16:00:00.000Z\": 8.3657,\n    \"2019-10-28T17:00:00.000Z\": 8.3571,\n    \"2019-10-28T18:00:00.000Z\": 8.3831,\n    \"2019-10-28T19:00:00.000Z\": 8.3744,\n    \"2019-10-28T20:00:00.000Z\": 8.3686,\n    \"2019-10-28T21:00:00.000Z\": 8.36,\n    \"2019-10-28T22:00:00.000Z\": 8.3571,\n    \"2019-10-28T23:00:00.000Z\": 8.3513,\n    \"2019-10-29T01:00:00.000Z\": 8.3455,\n    \"2019-10-29T02:00:00.000Z\": 8.3368,\n    \"2019-10-29T03:00:00.000Z\": 8.3455,\n    \"2019-10-29T04:00:00.000Z\": 8.3455,\n    \"2019-10-29T05:00:00.000Z\": 8.3571,\n    \"2019-10-29T06:00:00.000Z\": 8.3513,\n    \"2019-10-29T07:00:00.000Z\": 8.3455,\n    \"2019-10-29T08:00:00.000Z\": 8.3397,\n    \"2019-10-29T09:00:00.000Z\": 8.3368,\n    \"2019-10-29T10:00:00.000Z\": 8.6522,\n    \"2019-10-29T11:00:00.000Z\": 8.6377,\n    \"2019-10-29T12:00:00.000Z\": 8.6638,\n    \"2019-10-29T13:00:00.000Z\": 8.6204,\n    \"2019-10-29T14:00:00.000Z\": 8.5943,\n    \"2019-10-29T15:00:00.000Z\": 8.6435,\n    \"2019-10-29T16:00:00.000Z\": 8.6522,\n    \"2019-10-29T17:00:00.000Z\": 8.6667,\n    \"2019-10-29T18:00:00.000Z\": 8.6638,\n    \"2019-10-29T19:00:00.000Z\": 8.6493,\n    \"2019-10-29T20:00:00.000Z\": 8.6493,\n    \"2019-10-29T21:00:00.000Z\": 8.6146,\n    \"2019-10-29T22:00:00.000Z\": 8.5885,\n    \"2019-10-29T23:00:00.000Z\": 8.6319,\n    \"2019-10-30T01:00:00.000Z\": 8.6233,\n    \"2019-10-30T02:00:00.000Z\": 8.6262,\n    \"2019-10-30T03:00:00.000Z\": 8.6493,\n    \"2019-10-30T04:00:00.000Z\": 8.6175,\n    \"2019-10-30T05:00:00.000Z\": 8.5856,\n    \"2019-10-30T06:00:00.000Z\": 8.6291,\n    \"2019-10-30T07:00:00.000Z\": 8.6348,\n    \"2019-10-30T08:00:00.000Z\": 8.5914,\n    \"2019-10-30T09:00:00.000Z\": 8.577,\n    \"2019-10-30T10:00:00.000Z\": 8.603,\n    \"2019-10-30T11:00:00.000Z\": 8.658,\n    \"2019-10-30T12:00:00.000Z\": 8.6204,\n    \"2019-10-30T13:00:00.000Z\": 8.6001,\n    \"2019-10-30T14:00:00.000Z\": 8.6233,\n    \"2019-10-30T15:00:00.000Z\": 8.658,\n    \"2019-10-30T16:00:00.000Z\": 8.6464,\n    \"2019-10-30T17:00:00.000Z\": 8.6319,\n    \"2019-10-30T18:00:00.000Z\": 8.6204,\n    \"2019-10-30T19:00:00.000Z\": 8.5972,\n    \"2019-10-30T20:00:00.000Z\": 8.5914,\n    \"2019-10-30T21:00:00.000Z\": 8.5712,\n    \"2019-10-30T22:00:00.000Z\": 8.5307,\n    \"2019-10-30T23:00:00.000Z\": 8.5596,\n    \"2019-10-31T01:00:00.000Z\": 8.577,\n    \"2019-10-31T02:00:00.000Z\": 8.5885,\n    \"2019-10-31T03:00:00.000Z\": 8.5799,\n    \"2019-10-31T04:00:00.000Z\": 8.5336,\n    \"2019-10-31T05:00:00.000Z\": 8.5683,\n    \"2019-10-31T06:00:00.000Z\": 8.5625,\n    \"2019-10-31T07:00:00.000Z\": 8.5712,\n    \"2019-10-31T08:00:00.000Z\": 8.5567,\n    \"2019-10-31T09:00:00.000Z\": 8.5046,\n    \"2019-10-31T10:00:00.000Z\": 8.5422,\n    \"2019-10-31T11:00:00.000Z\": 8.5394,\n    \"2019-10-31T12:00:00.000Z\": 8.5162,\n    \"2019-10-31T13:00:00.000Z\": 8.4641,\n    \"2019-10-31T14:00:00.000Z\": 8.4815,\n    \"2019-10-31T15:00:00.000Z\": 8.5162,\n    \"2019-10-31T16:00:00.000Z\": 8.5104,\n    \"2019-10-31T17:00:00.000Z\": 8.4902,\n    \"2019-10-31T18:00:00.000Z\": 8.4873,\n    \"2019-10-31T19:00:00.000Z\": 8.4873,\n    \"2019-10-31T20:00:00.000Z\": 8.4554,\n    \"2019-10-31T21:00:00.000Z\": 8.4612,\n    \"2019-10-31T22:00:00.000Z\": 8.4497,\n    \"2019-10-31T23:00:00.000Z\": 8.4699,\n    \"2019-11-01T01:00:00.000Z\": 8.4525,\n    \"2019-11-01T02:00:00.000Z\": 8.4931,\n    \"2019-11-01T03:00:00.000Z\": 8.4699,\n    \"2019-11-01T04:00:00.000Z\": 8.4381,\n    \"2019-11-01T05:00:00.000Z\": 8.4583,\n    \"2019-11-01T06:00:00.000Z\": 8.4294,\n    \"2019-11-01T07:00:00.000Z\": 8.4757,\n    \"2019-11-01T08:00:00.000Z\": 8.4757,\n    \"2019-11-01T09:00:00.000Z\": 8.4381,\n    \"2019-11-01T10:00:00.000Z\": 8.4583,\n    \"2019-11-01T11:00:00.000Z\": 8.4728,\n    \"2019-11-01T12:00:00.000Z\": 8.4786,\n    \"2019-11-01T13:00:00.000Z\": 8.4554,\n    \"2019-11-01T14:00:00.000Z\": 8.4294,\n    \"2019-11-01T15:00:00.000Z\": 8.4728,\n    \"2019-11-01T16:00:00.000Z\": 8.4902,\n    \"2019-11-01T17:00:00.000Z\": 8.4786,\n    \"2019-11-01T18:00:00.000Z\": 8.4757,\n    \"2019-11-01T19:00:00.000Z\": 8.4786,\n    \"2019-11-01T20:00:00.000Z\": 8.4757,\n    \"2019-11-01T21:00:00.000Z\": 8.4525,\n    \"2019-11-01T22:00:00.000Z\": 8.4554,\n    \"2019-11-01T23:00:00.000Z\": 8.4902,\n    \"2019-11-02T01:00:00.000Z\": 8.4815,\n    \"2019-11-02T02:00:00.000Z\": 8.4786,\n    \"2019-11-02T03:00:00.000Z\": 8.4873,\n    \"2019-11-02T04:00:00.000Z\": 8.4699,\n    \"2019-11-02T05:00:00.000Z\": 8.4352,\n    \"2019-11-02T06:00:00.000Z\": 8.4525,\n    \"2019-11-02T07:00:00.000Z\": 8.4699,\n    \"2019-11-02T08:00:00.000Z\": 8.467,\n    \"2019-11-02T09:00:00.000Z\": 8.4757,\n    \"2019-11-02T10:00:00.000Z\": 8.4757,\n    \"2019-11-02T11:00:00.000Z\": 8.4844,\n    \"2019-11-02T12:00:00.000Z\": 8.4786,\n    \"2019-11-02T13:00:00.000Z\": 8.4554,\n    \"2019-11-02T14:00:00.000Z\": 8.4988,\n    \"2019-11-02T15:00:00.000Z\": 8.4902,\n    \"2019-11-02T16:00:00.000Z\": 8.4959,\n    \"2019-11-02T17:00:00.000Z\": 8.4959,\n    \"2019-11-02T18:00:00.000Z\": 8.4959,\n    \"2019-11-02T19:00:00.000Z\": 8.4873,\n    \"2019-11-02T20:00:00.000Z\": 8.4757,\n    \"2019-11-02T21:00:00.000Z\": 8.4959,\n    \"2019-11-02T22:00:00.000Z\": 8.4757,\n    \"2019-11-02T23:00:00.000Z\": 8.4931,\n    \"2019-11-03T01:00:00.000Z\": 8.4844,\n    \"2019-11-03T02:00:00.000Z\": 8.5075,\n    \"2019-11-03T03:00:00.000Z\": 8.5104,\n    \"2019-11-03T04:00:00.000Z\": 8.5133,\n    \"2019-11-03T05:00:00.000Z\": 8.4988,\n    \"2019-11-03T06:00:00.000Z\": 8.4641,\n    \"2019-11-03T07:00:00.000Z\": 8.4959,\n    \"2019-11-03T08:00:00.000Z\": 8.5162,\n    \"2019-11-03T09:00:00.000Z\": 8.548,\n    \"2019-11-03T10:00:00.000Z\": 8.5336,\n    \"2019-11-03T11:00:00.000Z\": 8.5654,\n    \"2019-11-03T12:00:00.000Z\": 8.5509,\n    \"2019-11-03T13:00:00.000Z\": 8.5654,\n    \"2019-11-03T14:00:00.000Z\": 8.5567,\n    \"2019-11-03T15:00:00.000Z\": 8.5596,\n    \"2019-11-03T16:00:00.000Z\": 8.577,\n    \"2019-11-03T17:00:00.000Z\": 8.5741,\n    \"2019-11-03T18:00:00.000Z\": 8.577,\n    \"2019-11-03T19:00:00.000Z\": 8.5828,\n    \"2019-11-03T20:00:00.000Z\": 8.5712,\n    \"2019-11-03T21:00:00.000Z\": 8.5654,\n    \"2019-11-03T22:00:00.000Z\": 8.5856,\n    \"2019-11-03T23:00:00.000Z\": 8.5741,\n    \"2019-11-04T01:00:00.000Z\": 8.5943,\n    \"2019-11-04T02:00:00.000Z\": 8.6001,\n    \"2019-11-04T03:00:00.000Z\": 8.6175,\n    \"2019-11-04T04:00:00.000Z\": 8.6117,\n    \"2019-11-04T05:00:00.000Z\": 8.6117,\n    \"2019-11-04T06:00:00.000Z\": 8.6233,\n    \"2019-11-04T07:00:00.000Z\": 8.6319,\n    \"2019-11-04T08:00:00.000Z\": 8.6175,\n    \"2019-11-04T09:00:00.000Z\": 8.6001,\n    \"2019-11-04T10:00:00.000Z\": 8.6175,\n    \"2019-11-04T11:00:00.000Z\": 8.6406,\n    \"2019-11-04T12:00:00.000Z\": 8.6175,\n    \"2019-11-04T13:00:00.000Z\": 8.6088,\n    \"2019-11-04T14:00:00.000Z\": 8.6377,\n    \"2019-11-04T15:00:00.000Z\": 8.6319,\n    \"2019-11-04T16:00:00.000Z\": 8.6435,\n    \"2019-11-04T17:00:00.000Z\": 8.6435,\n    \"2019-11-04T18:00:00.000Z\": 8.6464,\n    \"2019-11-04T19:00:00.000Z\": 8.6319,\n    \"2019-11-04T20:00:00.000Z\": 8.6146,\n    \"2019-11-04T21:00:00.000Z\": 8.6464,\n    \"2019-11-04T22:00:00.000Z\": 8.6406,\n    \"2019-11-04T23:00:00.000Z\": 8.6175,\n    \"2019-11-05T01:00:00.000Z\": 8.6464,\n    \"2019-11-05T02:00:00.000Z\": 8.6551,\n    \"2019-11-05T03:00:00.000Z\": 8.6464,\n    \"2019-11-05T04:00:00.000Z\": 8.6464,\n    \"2019-11-05T05:00:00.000Z\": 8.6377,\n    \"2019-11-05T06:00:00.000Z\": 8.6667,\n    \"2019-11-05T07:00:00.000Z\": 8.6551,\n    \"2019-11-05T08:00:00.000Z\": 8.6551,\n    \"2019-11-05T09:00:00.000Z\": 8.6435,\n    \"2019-11-05T10:00:00.000Z\": 8.6493,\n    \"2019-11-05T11:00:00.000Z\": 8.6696,\n    \"2019-11-05T12:00:00.000Z\": 8.6464,\n    \"2019-11-05T13:00:00.000Z\": 8.6319,\n    \"2019-11-05T14:00:00.000Z\": 8.6551,\n    \"2019-11-05T15:00:00.000Z\": 8.6667,\n    \"2019-11-05T16:00:00.000Z\": 8.6725,\n    \"2019-11-05T17:00:00.000Z\": 8.6638,\n    \"2019-11-05T18:00:00.000Z\": 8.6725,\n    \"2019-11-05T19:00:00.000Z\": 8.6725,\n    \"2019-11-05T20:00:00.000Z\": 8.6696,\n    \"2019-11-05T21:00:00.000Z\": 8.6464,\n    \"2019-11-05T22:00:00.000Z\": 8.6638,\n    \"2019-11-05T23:00:00.000Z\": 8.6435,\n    \"2019-11-06T01:00:00.000Z\": 8.6609,\n    \"2019-11-06T02:00:00.000Z\": 8.6667,\n    \"2019-11-06T03:00:00.000Z\": 8.6725,\n    \"2019-11-06T04:00:00.000Z\": 8.6725,\n    \"2019-11-06T05:00:00.000Z\": 8.6638,\n    \"2019-11-06T06:00:00.000Z\": 8.6522,\n    \"2019-11-06T07:00:00.000Z\": 8.6725,\n    \"2019-11-06T08:00:00.000Z\": 8.6638,\n    \"2019-11-06T09:00:00.000Z\": 8.6377,\n    \"2019-11-06T10:00:00.000Z\": 8.6551,\n    \"2019-11-06T11:00:00.000Z\": 8.658,\n    \"2019-11-06T12:00:00.000Z\": 8.6406,\n    \"2019-11-06T13:00:00.000Z\": 8.658,\n    \"2019-11-06T14:00:00.000Z\": 8.6146,\n    \"2019-11-06T15:00:00.000Z\": 8.5885,\n    \"2019-11-06T16:00:00.000Z\": 8.6638,\n    \"2019-11-06T17:00:00.000Z\": 8.658,\n    \"2019-11-06T18:00:00.000Z\": 8.6638,\n    \"2019-11-06T19:00:00.000Z\": 8.6609,\n    \"2019-11-06T20:00:00.000Z\": 8.6638,\n    \"2019-11-06T21:00:00.000Z\": 8.6319,\n    \"2019-11-06T22:00:00.000Z\": 8.6348,\n    \"2019-11-06T23:00:00.000Z\": 8.6464,\n    \"2019-11-07T01:00:00.000Z\": 8.6435,\n    \"2019-11-07T02:00:00.000Z\": 8.6551,\n    \"2019-11-07T03:00:00.000Z\": 8.6377,\n    \"2019-11-07T04:00:00.000Z\": 8.6522,\n    \"2019-11-07T05:00:00.000Z\": 8.6175,\n    \"2019-11-07T06:00:00.000Z\": 8.6319,\n    \"2019-11-07T07:00:00.000Z\": 8.6377,\n    \"2019-11-07T08:00:00.000Z\": 8.6001,\n    \"2019-11-07T09:00:00.000Z\": 8.5828,\n    \"2019-11-07T10:00:00.000Z\": 8.5712,\n    \"2019-11-07T11:00:00.000Z\": 7.2141,\n    \"2019-11-07T12:00:00.000Z\": 7.3125,\n    \"2019-11-07T13:00:00.000Z\": 7.2865,\n    \"2019-11-07T14:00:00.000Z\": 7.3125,\n    \"2019-11-07T15:00:00.000Z\": 7.2807,\n    \"2019-11-07T16:00:00.000Z\": 7.3241,\n    \"2019-11-07T17:00:00.000Z\": 7.3154,\n    \"2019-11-07T18:00:00.000Z\": 7.2922,\n    \"2019-11-07T19:00:00.000Z\": 7.2865,\n    \"2019-11-07T20:00:00.000Z\": 7.3038,\n    \"2019-11-07T21:00:00.000Z\": 7.2575,\n    \"2019-11-07T22:00:00.000Z\": 7.2951,\n    \"2019-11-07T23:00:00.000Z\": 7.2199,\n    \"2019-11-08T01:00:00.000Z\": 7.2054,\n    \"2019-11-08T02:00:00.000Z\": 7.2199,\n    \"2019-11-08T03:00:00.000Z\": 7.1128,\n    \"2019-11-08T04:00:00.000Z\": 7.1823,\n    \"2019-11-08T05:00:00.000Z\": 7.1071,\n    \"2019-11-08T06:00:00.000Z\": 7.2112,\n    \"2019-11-08T07:00:00.000Z\": 7.2083,\n    \"2019-11-08T08:00:00.000Z\": 7.2662,\n    \"2019-11-08T09:00:00.000Z\": 7.1765,\n    \"2019-11-08T10:00:00.000Z\": 7.2083,\n    \"2019-11-08T11:00:00.000Z\": 7.1563,\n    \"2019-11-08T12:00:00.000Z\": 7.2228,\n    \"2019-11-08T13:00:00.000Z\": 7.2025,\n    \"2019-11-08T14:00:00.000Z\": 7.1852,\n    \"2019-11-08T15:00:00.000Z\": 7.1823,\n    \"2019-11-08T16:00:00.000Z\": 7.1997,\n    \"2019-11-08T17:00:00.000Z\": 7.191,\n    \"2019-11-08T18:00:00.000Z\": 7.1997,\n    \"2019-11-08T19:00:00.000Z\": 7.1765,\n    \"2019-11-08T20:00:00.000Z\": 7.1823,\n    \"2019-11-08T21:00:00.000Z\": 7.1389,\n    \"2019-11-08T22:00:00.000Z\": 7.1534,\n    \"2019-11-08T23:00:00.000Z\": 7.1244,\n    \"2019-11-09T01:00:00.000Z\": 7.136,\n    \"2019-11-09T02:00:00.000Z\": 7.162,\n    \"2019-11-09T03:00:00.000Z\": 7.162,\n    \"2019-11-09T04:00:00.000Z\": 7.1649,\n    \"2019-11-09T05:00:00.000Z\": 7.1071,\n    \"2019-11-09T06:00:00.000Z\": 7.1302,\n    \"2019-11-09T07:00:00.000Z\": 7.0608,\n    \"2019-11-09T08:00:00.000Z\": 7.1244,\n    \"2019-11-09T09:00:00.000Z\": 7.0463,\n    \"2019-11-09T10:00:00.000Z\": 7.1273,\n    \"2019-11-09T11:00:00.000Z\": 7.1013,\n    \"2019-11-09T12:00:00.000Z\": 7.1534,\n    \"2019-11-09T13:00:00.000Z\": 7.1563,\n    \"2019-11-09T14:00:00.000Z\": 7.1389,\n    \"2019-11-09T15:00:00.000Z\": 7.0984,\n    \"2019-11-09T16:00:00.000Z\": 7.1244,\n    \"2019-11-09T17:00:00.000Z\": 7.0984,\n    \"2019-11-09T18:00:00.000Z\": 7.1273,\n    \"2019-11-09T19:00:00.000Z\": 7.081,\n    \"2019-11-09T20:00:00.000Z\": 7.081,\n    \"2019-11-09T21:00:00.000Z\": 7.0087,\n    \"2019-11-09T22:00:00.000Z\": 7.0405,\n    \"2019-11-09T23:00:00.000Z\": 6.9797,\n    \"2019-11-10T01:00:00.000Z\": 6.9711,\n    \"2019-11-10T02:00:00.000Z\": 7,\n    \"2019-11-10T03:00:00.000Z\": 7.0608,\n    \"2019-11-10T04:00:00.000Z\": 7.0376,\n    \"2019-11-10T05:00:00.000Z\": 6.9508,\n    \"2019-11-10T06:00:00.000Z\": 7.026,\n    \"2019-11-10T07:00:00.000Z\": 6.9074,\n    \"2019-11-10T08:00:00.000Z\": 7.0376,\n    \"2019-11-10T09:00:00.000Z\": 6.9797,\n    \"2019-11-10T10:00:00.000Z\": 6.8322,\n    \"2019-11-10T11:00:00.000Z\": 7,\n    \"2019-11-10T12:00:00.000Z\": 7.0174,\n    \"2019-11-10T13:00:00.000Z\": 7.0174,\n    \"2019-11-10T14:00:00.000Z\": 6.9682,\n    \"2019-11-10T15:00:00.000Z\": 6.9826,\n    \"2019-11-10T16:00:00.000Z\": 6.9769,\n    \"2019-11-10T17:00:00.000Z\": 7.0087,\n    \"2019-11-10T18:00:00.000Z\": 6.9826,\n    \"2019-11-10T19:00:00.000Z\": 7.0116,\n    \"2019-11-10T20:00:00.000Z\": 6.9769,\n    \"2019-11-10T21:00:00.000Z\": 6.9595,\n    \"2019-11-10T22:00:00.000Z\": 6.9277,\n    \"2019-11-10T23:00:00.000Z\": 6.9334,\n    \"2019-11-11T01:00:00.000Z\": 6.919,\n    \"2019-11-11T02:00:00.000Z\": 6.9219,\n    \"2019-11-11T03:00:00.000Z\": 6.9363,\n    \"2019-11-11T04:00:00.000Z\": 6.945,\n    \"2019-11-11T05:00:00.000Z\": 6.8061,\n    \"2019-11-11T06:00:00.000Z\": 6.9074,\n    \"2019-11-11T07:00:00.000Z\": 6.9595,\n    \"2019-11-11T08:00:00.000Z\": 6.9797,\n    \"2019-11-11T09:00:00.000Z\": 6.9537,\n    \"2019-11-11T10:00:00.000Z\": 6.9248,\n    \"2019-11-11T11:00:00.000Z\": 6.9421,\n    \"2019-11-11T12:00:00.000Z\": 6.9074,\n    \"2019-11-11T13:00:00.000Z\": 6.7338,\n    \"2019-11-11T14:00:00.000Z\": 6.8872,\n    \"2019-11-11T15:00:00.000Z\": 6.8987,\n    \"2019-11-11T16:00:00.000Z\": 6.945,\n    \"2019-11-11T17:00:00.000Z\": 6.9711,\n    \"2019-11-11T18:00:00.000Z\": 6.945,\n    \"2019-11-11T19:00:00.000Z\": 6.9421,\n    \"2019-11-11T20:00:00.000Z\": 6.9161,\n    \"2019-11-11T21:00:00.000Z\": 6.9363,\n    \"2019-11-11T22:00:00.000Z\": 6.8727,\n    \"2019-11-11T23:00:00.000Z\": 6.9479,\n    \"2019-11-12T01:00:00.000Z\": 7.0087,\n    \"2019-11-12T02:00:00.000Z\": 6.9508,\n    \"2019-11-12T03:00:00.000Z\": 7,\n    \"2019-11-12T04:00:00.000Z\": 6.9682,\n    \"2019-11-12T05:00:00.000Z\": 6.9363,\n    \"2019-11-12T06:00:00.000Z\": 6.9074,\n    \"2019-11-12T07:00:00.000Z\": 6.9566,\n    \"2019-11-12T08:00:00.000Z\": 6.9537,\n    \"2019-11-12T09:00:00.000Z\": 6.8785,\n    \"2019-11-12T10:00:00.000Z\": 6.9306,\n    \"2019-11-12T11:00:00.000Z\": 6.9566,\n    \"2019-11-12T12:00:00.000Z\": 6.9508,\n    \"2019-11-12T13:00:00.000Z\": 6.945,\n    \"2019-11-12T14:00:00.000Z\": 6.9508,\n    \"2019-11-12T15:00:00.000Z\": 6.9537,\n    \"2019-11-12T16:00:00.000Z\": 6.9942,\n    \"2019-11-12T17:00:00.000Z\": 6.974,\n    \"2019-11-12T18:00:00.000Z\": 6.9537,\n    \"2019-11-12T19:00:00.000Z\": 6.9566,\n    \"2019-11-12T20:00:00.000Z\": 6.9769,\n    \"2019-11-12T21:00:00.000Z\": 6.9334,\n    \"2019-11-12T22:00:00.000Z\": 6.9392,\n    \"2019-11-12T23:00:00.000Z\": 6.9248,\n    \"2019-11-13T01:00:00.000Z\": 6.9277,\n    \"2019-11-13T02:00:00.000Z\": 6.9884,\n    \"2019-11-13T03:00:00.000Z\": 7.0174,\n    \"2019-11-13T04:00:00.000Z\": 6.9219,\n    \"2019-11-13T05:00:00.000Z\": 6.8872,\n    \"2019-11-13T06:00:00.000Z\": 6.9537,\n    \"2019-11-13T07:00:00.000Z\": 6.9363,\n    \"2019-11-13T08:00:00.000Z\": 6.9479,\n    \"2019-11-13T09:00:00.000Z\": 6.8524,\n    \"2019-11-13T10:00:00.000Z\": 6.8872,\n    \"2019-11-13T11:00:00.000Z\": 6.8785,\n    \"2019-11-13T12:00:00.000Z\": 6.9334,\n    \"2019-11-13T13:00:00.000Z\": 6.8466,\n    \"2019-11-13T14:00:00.000Z\": 6.838,\n    \"2019-11-13T15:00:00.000Z\": 6.9161,\n    \"2019-11-13T16:00:00.000Z\": 6.9363,\n    \"2019-11-13T17:00:00.000Z\": 6.9566,\n    \"2019-11-13T18:00:00.000Z\": 6.9421,\n    \"2019-11-13T19:00:00.000Z\": 6.8958,\n    \"2019-11-13T20:00:00.000Z\": 6.8785,\n    \"2019-11-13T21:00:00.000Z\": 6.8785,\n    \"2019-11-13T22:00:00.000Z\": 6.8958,\n    \"2019-11-13T23:00:00.000Z\": 6.89,\n    \"2019-11-14T01:00:00.000Z\": 6.9074,\n    \"2019-11-14T02:00:00.000Z\": 6.9508,\n    \"2019-11-14T03:00:00.000Z\": 6.9508,\n    \"2019-11-14T04:00:00.000Z\": 6.9132,\n    \"2019-11-14T05:00:00.000Z\": 6.8524,\n    \"2019-11-14T06:00:00.000Z\": 6.9074,\n    \"2019-11-14T07:00:00.000Z\": 6.9334,\n    \"2019-11-14T08:00:00.000Z\": 6.8582,\n    \"2019-11-14T09:00:00.000Z\": 6.8438,\n    \"2019-11-14T10:00:00.000Z\": 6.8785,\n    \"2019-11-14T11:00:00.000Z\": 6.8264,\n    \"2019-11-14T12:00:00.000Z\": 6.7975,\n    \"2019-11-14T13:00:00.000Z\": 6.7541,\n    \"2019-11-14T14:00:00.000Z\": 6.7598,\n    \"2019-11-14T15:00:00.000Z\": 6.7975,\n    \"2019-11-14T16:00:00.000Z\": 6.8409,\n    \"2019-11-14T17:00:00.000Z\": 6.8727,\n    \"2019-11-14T18:00:00.000Z\": 6.8466,\n    \"2019-11-14T19:00:00.000Z\": 6.838,\n    \"2019-11-14T20:00:00.000Z\": 6.8351,\n    \"2019-11-14T21:00:00.000Z\": 6.7975,\n    \"2019-11-14T22:00:00.000Z\": 6.7396,\n    \"2019-11-14T23:00:00.000Z\": 6.7541,\n    \"2019-11-15T01:00:00.000Z\": 6.8235,\n    \"2019-11-15T02:00:00.000Z\": 6.8524,\n    \"2019-11-15T03:00:00.000Z\": 6.8872,\n    \"2019-11-15T04:00:00.000Z\": 6.8351,\n    \"2019-11-15T05:00:00.000Z\": 6.7975,\n    \"2019-11-15T06:00:00.000Z\": 6.7917,\n    \"2019-11-15T07:00:00.000Z\": 6.8322,\n    \"2019-11-15T08:00:00.000Z\": 6.8553,\n    \"2019-11-15T09:00:00.000Z\": 6.8148,\n    \"2019-11-15T10:00:00.000Z\": 6.7078,\n    \"2019-11-15T11:00:00.000Z\": 6.7975,\n    \"2019-11-15T12:00:00.000Z\": 6.8235,\n    \"2019-11-15T13:00:00.000Z\": 6.7193,\n    \"2019-11-15T14:00:00.000Z\": 6.7946,\n    \"2019-11-15T15:00:00.000Z\": 6.8032,\n    \"2019-11-15T16:00:00.000Z\": 6.8524,\n    \"2019-11-15T17:00:00.000Z\": 6.8264,\n    \"2019-11-15T18:00:00.000Z\": 6.7975,\n    \"2019-11-15T19:00:00.000Z\": 6.7859,\n    \"2019-11-15T20:00:00.000Z\": 6.7598,\n    \"2019-11-15T21:00:00.000Z\": 6.6817,\n    \"2019-11-15T22:00:00.000Z\": 6.7714,\n    \"2019-11-15T23:00:00.000Z\": 6.7164,\n    \"2019-11-16T01:00:00.000Z\": 6.7425,\n    \"2019-11-16T02:00:00.000Z\": 6.8409,\n    \"2019-11-16T03:00:00.000Z\": 6.8438,\n    \"2019-11-16T04:00:00.000Z\": 6.8061,\n    \"2019-11-16T05:00:00.000Z\": 6.7164,\n    \"2019-11-16T06:00:00.000Z\": 6.7743,\n    \"2019-11-16T07:00:00.000Z\": 6.702,\n    \"2019-11-16T08:00:00.000Z\": 6.7888,\n    \"2019-11-16T09:00:00.000Z\": 6.7251,\n    \"2019-11-16T10:00:00.000Z\": 6.7946,\n    \"2019-11-16T11:00:00.000Z\": 6.8409,\n    \"2019-11-16T12:00:00.000Z\": 6.8351,\n    \"2019-11-16T13:00:00.000Z\": 6.809,\n    \"2019-11-16T14:00:00.000Z\": 6.8032,\n    \"2019-11-16T15:00:00.000Z\": 6.8148,\n    \"2019-11-16T16:00:00.000Z\": 6.8148,\n    \"2019-11-16T17:00:00.000Z\": 6.8206,\n    \"2019-11-16T18:00:00.000Z\": 6.809,\n    \"2019-11-16T19:00:00.000Z\": 6.7685,\n    \"2019-11-16T20:00:00.000Z\": 6.6846,\n    \"2019-11-16T21:00:00.000Z\": 6.7454,\n    \"2019-11-16T22:00:00.000Z\": 6.6846,\n    \"2019-11-16T23:00:00.000Z\": 6.7483,\n    \"2019-11-17T01:00:00.000Z\": 6.783,\n    \"2019-11-17T02:00:00.000Z\": 6.7975,\n    \"2019-11-17T03:00:00.000Z\": 6.8264,\n    \"2019-11-17T04:00:00.000Z\": 6.7975,\n    \"2019-11-17T05:00:00.000Z\": 6.7222,\n    \"2019-11-17T06:00:00.000Z\": 6.7598,\n    \"2019-11-17T07:00:00.000Z\": 6.7049,\n    \"2019-11-17T08:00:00.000Z\": 6.7975,\n    \"2019-11-17T09:00:00.000Z\": 6.7772,\n    \"2019-11-17T10:00:00.000Z\": 6.6412,\n    \"2019-11-17T11:00:00.000Z\": 6.7801,\n    \"2019-11-17T12:00:00.000Z\": 6.7685,\n    \"2019-11-17T13:00:00.000Z\": 6.7049,\n    \"2019-11-17T14:00:00.000Z\": 6.6644,\n    \"2019-11-17T15:00:00.000Z\": 6.7396,\n    \"2019-11-17T16:00:00.000Z\": 6.7772,\n    \"2019-11-17T17:00:00.000Z\": 6.7888,\n    \"2019-11-17T18:00:00.000Z\": 6.7772,\n    \"2019-11-17T19:00:00.000Z\": 6.7598,\n    \"2019-11-17T20:00:00.000Z\": 6.7251,\n    \"2019-11-17T21:00:00.000Z\": 6.6933,\n    \"2019-11-17T22:00:00.000Z\": 6.7598,\n    \"2019-11-17T23:00:00.000Z\": 6.702,\n    \"2019-11-18T01:00:00.000Z\": 6.7338,\n    \"2019-11-18T02:00:00.000Z\": 6.7685,\n    \"2019-11-18T03:00:00.000Z\": 6.7367,\n    \"2019-11-18T04:00:00.000Z\": 6.8148,\n    \"2019-11-18T05:00:00.000Z\": 6.7801,\n    \"2019-11-18T06:00:00.000Z\": 6.7367,\n    \"2019-11-18T07:00:00.000Z\": 6.7627,\n    \"2019-11-18T08:00:00.000Z\": 6.7772,\n    \"2019-11-18T09:00:00.000Z\": 6.7425,\n    \"2019-11-18T10:00:00.000Z\": 6.7367,\n    \"2019-11-18T11:00:00.000Z\": 6.7425,\n    \"2019-11-18T12:00:00.000Z\": 6.7975,\n    \"2019-11-18T13:00:00.000Z\": 6.8032,\n    \"2019-11-18T14:00:00.000Z\": 6.7801,\n    \"2019-11-18T15:00:00.000Z\": 6.7222,\n    \"2019-11-18T16:00:00.000Z\": 6.7627,\n    \"2019-11-18T17:00:00.000Z\": 6.809,\n    \"2019-11-18T18:00:00.000Z\": 6.7714,\n    \"2019-11-18T19:00:00.000Z\": 6.7714,\n    \"2019-11-18T20:00:00.000Z\": 6.7483,\n    \"2019-11-18T21:00:00.000Z\": 6.6875,\n    \"2019-11-18T22:00:00.000Z\": 6.7627,\n    \"2019-11-18T23:00:00.000Z\": 6.7164,\n    \"2019-11-19T01:00:00.000Z\": 6.7888,\n    \"2019-11-19T02:00:00.000Z\": 6.8495,\n    \"2019-11-19T03:00:00.000Z\": 6.8264,\n    \"2019-11-19T04:00:00.000Z\": 6.7598,\n    \"2019-11-19T05:00:00.000Z\": 6.7338,\n    \"2019-11-19T06:00:00.000Z\": 6.7946,\n    \"2019-11-19T07:00:00.000Z\": 6.8206,\n    \"2019-11-19T08:00:00.000Z\": 6.7946,\n    \"2019-11-19T09:00:00.000Z\": 6.7598,\n    \"2019-11-19T10:00:00.000Z\": 6.7743,\n    \"2019-11-19T11:00:00.000Z\": 6.7888,\n    \"2019-11-19T12:00:00.000Z\": 6.8061,\n    \"2019-11-19T13:00:00.000Z\": 6.7367,\n    \"2019-11-19T14:00:00.000Z\": 6.8264,\n    \"2019-11-19T15:00:00.000Z\": 6.8235,\n    \"2019-11-19T16:00:00.000Z\": 6.7946,\n    \"2019-11-19T17:00:00.000Z\": 6.8061,\n    \"2019-11-19T18:00:00.000Z\": 6.838,\n    \"2019-11-19T19:00:00.000Z\": 6.8553,\n    \"2019-11-19T20:00:00.000Z\": 6.8003,\n    \"2019-11-19T21:00:00.000Z\": 6.7251,\n    \"2019-11-19T22:00:00.000Z\": 6.7598,\n    \"2019-11-19T23:00:00.000Z\": 6.7627,\n    \"2019-11-20T01:00:00.000Z\": 6.8177,\n    \"2019-11-20T02:00:00.000Z\": 6.8148,\n    \"2019-11-20T03:00:00.000Z\": 6.7975,\n    \"2019-11-20T04:00:00.000Z\": 6.7888,\n    \"2019-11-20T05:00:00.000Z\": 6.7309,\n    \"2019-11-20T06:00:00.000Z\": 6.7483,\n    \"2019-11-20T07:00:00.000Z\": 6.8148,\n    \"2019-11-20T08:00:00.000Z\": 6.7396,\n    \"2019-11-20T09:00:00.000Z\": 6.6701,\n    \"2019-11-20T10:00:00.000Z\": 5.6516,\n    \"2019-11-20T11:00:00.000Z\": 5.6516,\n    \"2019-11-20T12:00:00.000Z\": 5.5475,\n    \"2019-11-20T13:00:00.000Z\": 5.7095,\n    \"2019-11-20T14:00:00.000Z\": 5.7095,\n    \"2019-11-20T15:00:00.000Z\": 5.7066,\n    \"2019-11-20T16:00:00.000Z\": 6.0509,\n    \"2019-11-20T17:00:00.000Z\": 5.967,\n    \"2019-11-20T18:00:00.000Z\": 6.4039,\n    \"2019-11-20T19:00:00.000Z\": 6.919,\n    \"2019-11-20T20:00:00.000Z\": 7.1071,\n    \"2019-11-20T21:00:00.000Z\": 6.5486,\n    \"2019-11-20T22:00:00.000Z\": 6.4676,\n    \"2019-11-20T23:00:00.000Z\": 6.8409,\n    \"2019-11-21T01:00:00.000Z\": 6.8206,\n    \"2019-11-21T02:00:00.000Z\": 6.8785,\n    \"2019-11-21T03:00:00.000Z\": 6.864,\n    \"2019-11-21T04:00:00.000Z\": 7.3935,\n    \"2019-11-21T05:00:00.000Z\": 7.1997,\n    \"2019-11-21T06:00:00.000Z\": 7.3877,\n    \"2019-11-21T07:00:00.000Z\": 7.3009,\n    \"2019-11-21T08:00:00.000Z\": 6.9682,\n    \"2019-11-21T09:00:00.000Z\": 7.2054,\n    \"2019-11-21T10:00:00.000Z\": 7.1765,\n    \"2019-11-21T11:00:00.000Z\": 7.2286,\n    \"2019-11-21T12:00:00.000Z\": 7.6163,\n    \"2019-11-21T13:00:00.000Z\": 7.4398,\n    \"2019-11-21T14:00:00.000Z\": 6.7743,\n    \"2019-11-21T15:00:00.000Z\": 7.434,\n    \"2019-11-21T16:00:00.000Z\": 7.3993,\n    \"2019-11-21T17:00:00.000Z\": 7.3646,\n    \"2019-11-21T18:00:00.000Z\": 7.2228,\n    \"2019-11-21T19:00:00.000Z\": 6.9913,\n    \"2019-11-21T20:00:00.000Z\": 7.0492,\n    \"2019-11-21T21:00:00.000Z\": 7.0984,\n    \"2019-11-21T22:00:00.000Z\": 7.1707,\n    \"2019-11-21T23:00:00.000Z\": 7.1505,\n    \"2019-11-22T01:00:00.000Z\": 7.5671,\n    \"2019-11-22T02:00:00.000Z\": 7.272,\n    \"2019-11-22T03:00:00.000Z\": 7.1794,\n    \"2019-11-22T04:00:00.000Z\": 7.3588,\n    \"2019-11-22T05:00:00.000Z\": 7.1852,\n    \"2019-11-22T06:00:00.000Z\": 7.1215,\n    \"2019-11-22T07:00:00.000Z\": 7.8131,\n    \"2019-11-22T08:00:00.000Z\": 7.6019,\n    \"2019-11-22T09:00:00.000Z\": 7.7639,\n    \"2019-11-22T10:00:00.000Z\": 7.6192,\n    \"2019-11-22T11:00:00.000Z\": 7.5932,\n    \"2019-11-22T12:00:00.000Z\": 7.6655,\n    \"2019-11-22T13:00:00.000Z\": 7.6453,\n    \"2019-11-22T14:00:00.000Z\": 7.9057,\n    \"2019-11-22T15:00:00.000Z\": 7.4977,\n    \"2019-11-22T16:00:00.000Z\": 7.4398,\n    \"2019-11-22T17:00:00.000Z\": 7.6076,\n    \"2019-11-22T18:00:00.000Z\": 7.434,\n    \"2019-11-22T19:00:00.000Z\": 7.4919,\n    \"2019-11-22T20:00:00.000Z\": 8.0677,\n    \"2019-11-22T21:00:00.000Z\": 7.7407,\n    \"2019-11-22T22:00:00.000Z\": 7.5816,\n    \"2019-11-22T23:00:00.000Z\": 8.1863,\n    \"2019-11-23T01:00:00.000Z\": 7.5295,\n    \"2019-11-23T02:00:00.000Z\": 8.0098,\n    \"2019-11-23T03:00:00.000Z\": 7.5295,\n    \"2019-11-23T04:00:00.000Z\": 7.6453,\n    \"2019-11-23T05:00:00.000Z\": 7.515,\n    \"2019-11-23T06:00:00.000Z\": 7.5093,\n    \"2019-11-23T07:00:00.000Z\": 7.4659,\n    \"2019-11-23T08:00:00.000Z\": 7.5729,\n    \"2019-11-23T09:00:00.000Z\": 7.5266,\n    \"2019-11-23T10:00:00.000Z\": 7.7378,\n    \"2019-11-23T11:00:00.000Z\": 7.842,\n    \"2019-11-23T12:00:00.000Z\": 7.8507,\n    \"2019-11-23T13:00:00.000Z\": 7.9635,\n    \"2019-11-23T14:00:00.000Z\": 7.9462,\n    \"2019-11-23T15:00:00.000Z\": 7.952,\n    \"2019-11-23T16:00:00.000Z\": 7.8449,\n    \"2019-11-23T17:00:00.000Z\": 7.9404,\n    \"2019-11-23T18:00:00.000Z\": 7.9983,\n    \"2019-11-23T19:00:00.000Z\": 7.9491,\n    \"2019-11-23T20:00:00.000Z\": 8.0069,\n    \"2019-11-23T21:00:00.000Z\": 8.0735,\n    \"2019-11-23T22:00:00.000Z\": 8.0417,\n    \"2019-11-23T23:00:00.000Z\": 7.816,\n    \"2019-11-24T01:00:00.000Z\": 7.8623,\n    \"2019-11-24T02:00:00.000Z\": 7.8449,\n    \"2019-11-24T03:00:00.000Z\": 7.8275,\n    \"2019-11-24T04:00:00.000Z\": 7.787,\n    \"2019-11-24T05:00:00.000Z\": 7.8362,\n    \"2019-11-24T06:00:00.000Z\": 7.7668,\n    \"2019-11-24T07:00:00.000Z\": 7.5932,\n    \"2019-11-24T08:00:00.000Z\": 7.6568,\n    \"2019-11-24T09:00:00.000Z\": 7.4659,\n    \"2019-11-24T10:00:00.000Z\": 7.5035,\n    \"2019-11-24T11:00:00.000Z\": 7.5816,\n    \"2019-11-24T12:00:00.000Z\": 7.6076,\n    \"2019-11-24T13:00:00.000Z\": 7.599,\n    \"2019-11-24T14:00:00.000Z\": 7.6568,\n    \"2019-11-24T15:00:00.000Z\": 7.625,\n    \"2019-11-24T16:00:00.000Z\": 7.6308,\n    \"2019-11-24T17:00:00.000Z\": 7.7147,\n    \"2019-11-24T18:00:00.000Z\": 7.5006,\n    \"2019-11-24T19:00:00.000Z\": 7.4716,\n    \"2019-11-24T20:00:00.000Z\": 7.4919,\n    \"2019-11-24T21:00:00.000Z\": 7.3646,\n    \"2019-11-24T22:00:00.000Z\": 7.3964,\n    \"2019-11-24T23:00:00.000Z\": 7.4919,\n    \"2019-11-25T01:00:00.000Z\": 7.787,\n    \"2019-11-25T02:00:00.000Z\": 7.4427,\n    \"2019-11-25T03:00:00.000Z\": 7.8189,\n    \"2019-11-25T04:00:00.000Z\": 7.4774,\n    \"2019-11-25T05:00:00.000Z\": 7.9578,\n    \"2019-11-25T06:00:00.000Z\": 7.8738,\n    \"2019-11-25T07:00:00.000Z\": 8.3802,\n    \"2019-11-25T08:00:00.000Z\": 8.1719,\n    \"2019-11-25T09:00:00.000Z\": 7.5064,\n    \"2019-11-25T10:00:00.000Z\": 8.1632,\n    \"2019-11-25T11:00:00.000Z\": 8.088,\n    \"2019-11-25T12:00:00.000Z\": 7.9578,\n    \"2019-11-25T13:00:00.000Z\": 7.6424,\n    \"2019-11-25T14:00:00.000Z\": 7.7841,\n    \"2019-11-25T15:00:00.000Z\": 7.6308,\n    \"2019-11-25T16:00:00.000Z\": 7.5932,\n    \"2019-11-25T17:00:00.000Z\": 7.5064,\n    \"2019-11-25T18:00:00.000Z\": 8.1343,\n    \"2019-11-25T19:00:00.000Z\": 8.305,\n    \"2019-11-25T20:00:00.000Z\": 8.0503,\n    \"2019-11-25T21:00:00.000Z\": 8.0012,\n    \"2019-11-25T22:00:00.000Z\": 8.0012,\n    \"2019-11-25T23:00:00.000Z\": 8.0069,\n    \"2019-11-26T01:00:00.000Z\": 7.8941,\n    \"2019-11-26T02:00:00.000Z\": 7.8825,\n    \"2019-11-26T03:00:00.000Z\": 7.6944,\n    \"2019-11-26T04:00:00.000Z\": 8.0301,\n    \"2019-11-26T05:00:00.000Z\": 8.088,\n    \"2019-11-26T06:00:00.000Z\": 8.0648,\n    \"2019-11-26T07:00:00.000Z\": 7.9867,\n    \"2019-11-26T08:00:00.000Z\": 7.8507,\n    \"2019-11-26T09:00:00.000Z\": 7.8565,\n    \"2019-11-26T10:00:00.000Z\": 7.9722,\n    \"2019-11-26T11:00:00.000Z\": 8.0446,\n    \"2019-11-26T12:00:00.000Z\": 8.1748,\n    \"2019-11-26T13:00:00.000Z\": 7.8362,\n    \"2019-11-26T14:00:00.000Z\": 8.0648,\n    \"2019-11-26T15:00:00.000Z\": 8.0793,\n    \"2019-11-26T16:00:00.000Z\": 8.088,\n    \"2019-11-26T17:00:00.000Z\": 8.0793,\n    \"2019-11-26T18:00:00.000Z\": 8.0532,\n    \"2019-11-26T19:00:00.000Z\": 8.0677,\n    \"2019-11-26T20:00:00.000Z\": 8.0475,\n    \"2019-11-26T21:00:00.000Z\": 8.0156,\n    \"2019-11-26T22:00:00.000Z\": 7.9635,\n    \"2019-11-26T23:00:00.000Z\": 7.8854,\n    \"2019-11-27T01:00:00.000Z\": 7.7813,\n    \"2019-11-27T02:00:00.000Z\": 8.0243,\n    \"2019-11-27T03:00:00.000Z\": 8.195,\n    \"2019-11-27T04:00:00.000Z\": 8.1632,\n    \"2019-11-27T05:00:00.000Z\": 8.0272,\n    \"2019-11-27T06:00:00.000Z\": 7.9983,\n    \"2019-11-27T07:00:00.000Z\": 8.1574,\n    \"2019-11-27T08:00:00.000Z\": 8.2095,\n    \"2019-11-27T09:00:00.000Z\": 8.3079,\n    \"2019-11-27T10:00:00.000Z\": 8.331,\n    \"2019-11-27T11:00:00.000Z\": 8.3166,\n    \"2019-11-27T12:00:00.000Z\": 8.3426,\n    \"2019-11-27T13:00:00.000Z\": 8.3802,\n    \"2019-11-27T14:00:00.000Z\": 8.386,\n    \"2019-11-27T15:00:00.000Z\": 8.2703,\n    \"2019-11-27T16:00:00.000Z\": 8.3021,\n    \"2019-11-27T17:00:00.000Z\": 8.2442,\n    \"2019-11-27T18:00:00.000Z\": 8.1892,\n    \"2019-11-27T19:00:00.000Z\": 8.2269,\n    \"2019-11-27T20:00:00.000Z\": 8.3079,\n    \"2019-11-27T21:00:00.000Z\": 8.386,\n    \"2019-11-27T22:00:00.000Z\": 8.6146,\n    \"2019-11-27T23:00:00.000Z\": 8.5538,\n    \"2019-11-28T01:00:00.000Z\": 8.713,\n    \"2019-11-28T02:00:00.000Z\": 8.7072,\n    \"2019-11-28T03:00:00.000Z\": 8.739,\n    \"2019-11-28T04:00:00.000Z\": 8.765,\n    \"2019-11-28T05:00:00.000Z\": 8.794,\n    \"2019-11-28T06:00:00.000Z\": 8.7998,\n    \"2019-11-28T07:00:00.000Z\": 8.7824,\n    \"2019-11-28T08:00:00.000Z\": 8.8171,\n    \"2019-11-28T09:00:00.000Z\": 8.8519,\n    \"2019-11-28T10:00:00.000Z\": 9.5926,\n    \"2019-11-28T11:00:00.000Z\": 10.1858,\n    \"2019-11-28T12:00:00.000Z\": 9.9716,\n    \"2019-11-28T13:00:00.000Z\": 9.4334,\n    \"2019-11-28T14:00:00.000Z\": 9.3814,\n    \"2019-11-28T15:00:00.000Z\": 10.3478,\n    \"2019-11-28T16:00:00.000Z\": 9.6013,\n    \"2019-11-28T17:00:00.000Z\": 10.912,\n    \"2019-11-28T18:00:00.000Z\": 10.64,\n    \"2019-11-28T19:00:00.000Z\": 10.9873,\n    \"2019-11-28T20:00:00.000Z\": 11.1522,\n    \"2019-11-28T21:00:00.000Z\": 11.1233,\n    \"2019-11-28T22:00:00.000Z\": 11.1493,\n    \"2019-11-28T23:00:00.000Z\": 10.9149,\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t}\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef timeseries_comparison_plot(\n    series_1: pd.Series,\n    series_2: pd.Series,\n    freq,\n    freq_factor,\n    max_shifts_past,\n    max_shifts_future,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 480,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n    if max_shifts_past < 0 or max_shifts_future < 0:\n        raise ValueError(\"Shift maxima values must be greater equal zero.\")\n\n    fig = Figure()\n\n    s1 = series_1.sort_index()\n\n    fig.add_scatter(\n        x=s1.index,\n        y=s1,\n        mode=\"lines\",\n        name=s1.name if (s1.name and s1.name != \"measurement\") else \"series\",\n    )\n\n    s2 = series_2.sort_index()\n\n    for step in np.arange(-max_shifts_past, max_shifts_future, 1):\n        shifted = s2.copy()\n        shifted.index = shifted.index.shift(periods=step * freq_factor, freq=freq)\n        fig.add_scatter(\n            x=shifted.index,\n            y=shifted,\n            mode=\"lines\",\n            name=shifted.name\n            if (shifted.name and shifted.name != \"measurement\")\n            else \"series_shiftable\",\n            visible=False,\n        )\n\n    fig.data[max_shifts_past + 1].visible = True  # start somewhere\n\n    steps = []\n    for i in range(len(fig.data)):\n        step = dict(\n            method=\"update\",\n            args=[\n                {\"visible\": [False] * (len(fig.data))},\n                {\n                    \"title\": f\"Shifted by x times frequency {freq_factor}{freq}: \"\n                    + str(i - max_shifts_past - 1)\n                },\n            ],  # layout attribute\n        )\n        step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"\n        step[\"args\"][0][\"visible\"][0] = True\n        step[\"label\"] = str(i - max_shifts_past - 1)\n        steps.append(step)\n\n    sliders = [\n        dict(\n            active=max_shifts_past,\n            currentvalue={\n                \"prefix\": f\"Shifted by x times frequency {freq_factor}{freq}: \"\n            },\n            pad={\"t\": 80, \"b\": 10},\n            steps=steps[1:],\n        )\n    ]\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=40, t=30, pad=10))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    fig.update_layout(sliders=sliders)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series\": DataType.Series, \"series_shiftable\": DataType.Series, \"freq\": DataType.String, \"freq_factor\": DataType.Integer, \"max_shifts_past\": DataType.Integer, \"max_shifts_future\": DataType.Integer},\n    outputs={\"comparison_plot\": DataType.PlotlyJson},\n    name=\"Compare Timeshifted Timeseries\",\n    description=\"Use a slider to timeshift one timeseries to compare with another\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"daed7280-7013-3be1-41c0-65e4628e0e1d\",\n    revision_group_id=\"daed7280-7013-3be1-41c0-65e4628e0e1d\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.298224+00:00\"\n)\ndef main(*, series, series_shiftable, freq, freq_factor, max_shifts_past, max_shifts_future):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"comparison_plot\": plotly_fig_to_json_dict(\n            timeseries_comparison_plot(\n                series,\n                series_shiftable,\n                freq,\n                freq_factor,\n                max_shifts_past,\n                max_shifts_future,\n            )\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "105c728f-7e02-f7ce-60e5-aba4e0625094",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "9433aef9-4751-5114-345e-79dfcc427268",
          "name": "series_shiftable",
          "data_type": "SERIES"
        },
        {
          "id": "8fc11cb1-16ad-5053-a187-cb4fb5af31ce",
          "name": "freq",
          "data_type": "STRING"
        },
        {
          "id": "00041bd7-41a1-4c4e-e129-b491ec028e8a",
          "name": "freq_factor",
          "data_type": "INT"
        },
        {
          "id": "9733a691-3271-74d1-fdb0-7b613e599420",
          "name": "max_shifts_past",
          "data_type": "INT"
        },
        {
          "id": "c8a2d3fd-6b49-c1b0-4d46-fbe5c4d156d4",
          "name": "max_shifts_future",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "c3d55f42-2827-2899-9bb0-c1537171a8cc",
          "name": "comparison_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "ff2392cb-b0ff-4672-803f-4fb44ecca5b5",
    "revision_group_id": "02836778-e7d9-4352-952d-9927f34b58fe",
    "name": "Band Filter Plot",
    "description": "Plotting a band filter dataframe",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-11-24T16:55:17.221127+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Band Filter Plot\n\n## Description\nThis component visualizes calculated band filter statistics. These statistics include the median and median absolute deviation (MAD) for a moving window.\n\n## Inputs\n* **band_filter_dataframe** (Pandas DataFrame): The band filter statistics to be plotted including the original values, the calculated statistics and the filter mask.\n\n## Outputs\n* **band_filter_plot** (Plotly JSON): The generated Plotly JSON. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThis component visualizes a band filter using the calculated statistics. The input dataframe **band_filter_dataframe** needs to have timestamps as indices. In addition it needs to have the following columns:\n* *value* (Float): Series for which the statistics were calculated.\n* *band_center* (Float): Calculated center of the band.\n* *rolling_deviation* (Float): Calculated deviation of the band. These values equal half the width of the band.\n* *filter_mask* (Boolean): Information if a datapoint is an inlier or outlier. False equals outlier.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"band_filter_dataframe\": {\n        \"values\": {\n            \"2022-01-01T00:00:00.000Z\":1.058,\n            \"2022-01-01T00:20:48.000Z\":0.699,\n            \"2022-01-01T00:41:37.000Z\":1.08,\n            \"2022-01-01T01:02:26.000Z\":1.054,\n            \"2022-01-01T01:23:15.000Z\":0.763,\n            \"2022-01-01T01:44:04.000Z\":1.034,\n            \"2022-01-01T02:04:53.000Z\":0.965,\n            \"2022-01-01T02:25:42.000Z\":0.601,\n            \"2022-01-01T02:46:31.000Z\":0.933,\n            \"2022-01-01T03:07:20.000Z\":1.081,\n            \"2022-01-01T03:28:09.000Z\":2.1,\n            \"2022-01-01T03:48:58.000Z\":0.988,\n            \"2022-01-01T04:09:47.000Z\":0.741,\n            \"2022-01-01T04:30:36.000Z\":0.647,\n            \"2022-01-01T04:51:25.000Z\":0.556,\n            \"2022-01-01T05:12:14.000Z\":0.453,\n            \"2022-01-01T05:33:03.000Z\":1.009,\n            \"2022-01-01T05:53:52.000Z\":1.72,\n            \"2022-01-01T06:14:41.000Z\":1.002,\n            \"2022-01-01T06:56:19.000Z\":0.857,\n            \"2022-01-01T07:17:08.000Z\":0.864,\n            \"2022-01-01T07:37:57.000Z\":0.606,\n            \"2022-01-01T07:58:46.000Z\":0.899,\n            \"2022-01-01T08:40:24.000Z\":0.62,\n            \"2022-01-01T10:03:40.000Z\":0.721,\n            \"2022-01-01T10:24:29.000Z\":1.193,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":2.06,\n            \"2022-01-01T11:26:56.000Z\":0.68,\n            \"2022-01-01T11:47:45.000Z\":1.136,\n            \"2022-01-01T12:08:34.000Z\":0.62,\n            \"2022-01-01T12:29:23.000Z\":0.946,\n            \"2022-01-01T12:50:12.000Z\":0.746,\n            \"2022-01-01T13:11:01.000Z\":0.833,\n            \"2022-01-01T13:31:50.000Z\":0.857,\n            \"2022-01-01T14:13:28.000Z\":0.947,\n            \"2022-01-01T14:34:17.000Z\":0.841,\n            \"2022-01-01T14:55:06.000Z\":0.668,\n            \"2022-01-01T15:15:55.000Z\":0.675,\n            \"2022-01-01T15:36:44.000Z\":0.84,\n            \"2022-01-01T15:57:33.000Z\":0.821,\n            \"2022-01-01T16:18:22.000Z\":0.625,\n            \"2022-01-01T16:39:11.000Z\":1.155,\n            \"2022-01-01T17:00:00.000Z\":0.968\n        },\n        \"band_center\":{\n            \"2022-01-01T00:41:37.000Z\":0.9995,\n            \"2022-01-01T01:02:26.000Z\":1.034,\n            \"2022-01-01T01:23:15.000Z\":1.011,\n            \"2022-01-01T01:44:04.000Z\":0.988,\n            \"2022-01-01T02:04:53.000Z\":0.9765,\n            \"2022-01-01T02:25:42.000Z\":0.965,\n            \"2022-01-01T02:46:31.000Z\":0.949,\n            \"2022-01-01T03:07:20.000Z\":0.949,\n            \"2022-01-01T03:28:09.000Z\":0.949,\n            \"2022-01-01T03:48:58.000Z\":0.9765,\n            \"2022-01-01T04:09:47.000Z\":0.965,\n            \"2022-01-01T04:30:36.000Z\":0.933,\n            \"2022-01-01T04:51:25.000Z\":0.933,\n            \"2022-01-01T05:12:14.000Z\":0.864,\n            \"2022-01-01T05:33:03.000Z\":0.864,\n            \"2022-01-01T05:53:52.000Z\":0.8605,\n            \"2022-01-01T06:14:41.000Z\":0.799,\n            \"2022-01-01T06:56:19.000Z\":0.8605,\n            \"2022-01-01T10:03:40.000Z\":0.866,\n            \"2022-01-01T10:24:29.000Z\":0.7895,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":0.833,\n            \"2022-01-01T11:26:56.000Z\":0.833,\n            \"2022-01-01T11:47:45.000Z\":0.845,\n            \"2022-01-01T12:08:34.000Z\":0.841,\n            \"2022-01-01T12:29:23.000Z\":0.841,\n            \"2022-01-01T12:50:12.000Z\":0.833,\n            \"2022-01-01T13:11:01.000Z\":0.84,\n            \"2022-01-01T13:31:50.000Z\":0.833,\n            \"2022-01-01T14:13:28.000Z\":0.833,\n            \"2022-01-01T14:34:17.000Z\":0.84,\n            \"2022-01-01T14:55:06.000Z\":0.8365,\n            \"2022-01-01T15:15:55.000Z\":0.84,\n            \"2022-01-01T15:36:44.000Z\":0.8405\n        },\n        \"rolling_deviation\":{\n            \"2022-01-01T00:41:37.000Z\":0.511497,\n            \"2022-01-01T01:02:26.000Z\":0.511497,\n            \"2022-01-01T01:23:15.000Z\":0.511497,\n            \"2022-01-01T01:44:04.000Z\":0.511497,\n            \"2022-01-01T02:04:53.000Z\":0.511497,\n            \"2022-01-01T02:25:42.000Z\":0.5159448,\n            \"2022-01-01T02:46:31.000Z\":0.7072002,\n            \"2022-01-01T03:07:20.000Z\":0.7072002,\n            \"2022-01-01T03:28:09.000Z\":0.8762166,\n            \"2022-01-01T03:48:58.000Z\":0.756126,\n            \"2022-01-01T04:09:47.000Z\":0.9963072,\n            \"2022-01-01T04:30:36.000Z\":0.8539776,\n            \"2022-01-01T04:51:25.000Z\":0.6582744,\n            \"2022-01-01T05:12:14.000Z\":0.9651726,\n            \"2022-01-01T05:33:03.000Z\":0.644931,\n            \"2022-01-01T05:53:52.000Z\":0.644931,\n            \"2022-01-01T06:14:41.000Z\":0.8272908,\n            \"2022-01-01T06:56:19.000Z\":0.8650971,\n            \"2022-01-01T10:03:40.000Z\":0.9607248,\n            \"2022-01-01T10:24:29.000Z\":0.7249914,\n            \"2022-01-01T10:45:18.000Z\":0.6805134,\n            \"2022-01-01T11:06:07.000Z\":0.511497,\n            \"2022-01-01T11:26:56.000Z\":0.511497,\n            \"2022-01-01T11:47:45.000Z\":0.511497,\n            \"2022-01-01T12:08:34.000Z\":0.511497,\n            \"2022-01-01T12:29:23.000Z\":0.511497,\n            \"2022-01-01T12:50:12.000Z\":0.511497,\n            \"2022-01-01T13:11:01.000Z\":0.511497,\n            \"2022-01-01T13:31:50.000Z\":0.511497,\n            \"2022-01-01T14:13:28.000Z\":0.511497,\n            \"2022-01-01T14:34:17.000Z\":0.511497,\n            \"2022-01-01T14:55:06.000Z\":0.511497,\n            \"2022-01-01T15:15:55.000Z\":0.511497,\n            \"2022-01-01T15:36:44.000Z\":0.5203926\n        },\n        \"filter_mask\":{\n            \"2022-01-01T00:00:00.000Z\":true,\n            \"2022-01-01T00:20:48.000Z\":true,\n            \"2022-01-01T00:41:37.000Z\":true,\n            \"2022-01-01T01:02:26.000Z\":true,\n            \"2022-01-01T01:23:15.000Z\":true,\n            \"2022-01-01T01:44:04.000Z\":true,\n            \"2022-01-01T02:04:53.000Z\":true,\n            \"2022-01-01T02:25:42.000Z\":true,\n            \"2022-01-01T02:46:31.000Z\":true,\n            \"2022-01-01T03:07:20.000Z\":true,\n            \"2022-01-01T03:28:09.000Z\":false,\n            \"2022-01-01T03:48:58.000Z\":true,\n            \"2022-01-01T04:09:47.000Z\":true,\n            \"2022-01-01T04:30:36.000Z\":true,\n            \"2022-01-01T04:51:25.000Z\":true,\n            \"2022-01-01T05:12:14.000Z\":true,\n            \"2022-01-01T05:33:03.000Z\":true,\n            \"2022-01-01T05:53:52.000Z\":false,\n            \"2022-01-01T06:14:41.000Z\":true,\n            \"2022-01-01T06:56:19.000Z\":true,\n            \"2022-01-01T07:17:08.000Z\":true,\n            \"2022-01-01T07:37:57.000Z\":true,\n            \"2022-01-01T07:58:46.000Z\":true,\n            \"2022-01-01T08:40:24.000Z\":true,\n            \"2022-01-01T10:03:40.000Z\":true,\n            \"2022-01-01T10:24:29.000Z\":true,\n            \"2022-01-01T10:45:18.000Z\":true,\n            \"2022-01-01T11:06:07.000Z\":false,\n            \"2022-01-01T11:26:56.000Z\":true,\n            \"2022-01-01T11:47:45.000Z\":true,\n            \"2022-01-01T12:08:34.000Z\":true,\n            \"2022-01-01T12:29:23.000Z\":true,\n            \"2022-01-01T12:50:12.000Z\":true,\n            \"2022-01-01T13:11:01.000Z\":true,\n            \"2022-01-01T13:31:50.000Z\":true,\n            \"2022-01-01T14:13:28.000Z\":true,\n            \"2022-01-01T14:34:17.000Z\":true,\n            \"2022-01-01T14:55:06.000Z\":true,\n            \"2022-01-01T15:15:55.000Z\":true,\n            \"2022-01-01T15:36:44.000Z\":true,\n            \"2022-01-01T15:57:33.000Z\":true,\n            \"2022-01-01T16:18:22.000Z\":true,\n            \"2022-01-01T16:39:11.000Z\":true,\n            \"2022-01-01T17:00:00.000Z\":true\n        }\n    }\n}\n```",
    "content": "from hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef band_filter_plot(\n    band_filter_dataframe: pd.DataFrame,\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n) -> Figure:\n    \"\"\"Create a band filter Plotly figure\n\n    band_filter_dataframe (Pandas DataFrame): DataFrame with the band filter statistics\n        to be plotted including the series (column name: values), the calculated statistics\n        (column name: band_center, column name: rolling_deviation) and the filter mask\n        (column name: filter_mask).\n    layout_opts (Dictionary): Layout options for the plot.\n\n    Returns: Plotly figure object.\n    \"\"\"\n    fig = Figure()\n\n    # Add the data points and mark the outliers.\n    fig.add_scatter(\n        x=band_filter_dataframe.index[\n            band_filter_dataframe[\"filter_mask\"] == False\n        ],\n        y=band_filter_dataframe[\"values\"][\n            band_filter_dataframe[\"filter_mask\"] == False\n        ],\n        mode=\"markers\",\n        name=\"Outlier\",\n        marker_color=\"red\",\n    )\n    fig.add_scatter(\n        x=band_filter_dataframe.index[\n            band_filter_dataframe[\"filter_mask\"] == True\n        ],\n        y=band_filter_dataframe[\"values\"][\n            band_filter_dataframe[\"filter_mask\"] == True\n        ],\n        mode=\"markers\",\n        name=\"Inlier\",\n        marker_color=\"slategray\",\n    )\n\n    # Add the band center.\n    fig.add_scatter(\n        x=band_filter_dataframe.index,\n        y=band_filter_dataframe[\"band_center\"],\n        name=\"Moving Window Median\",\n        line_color=\"limegreen\",\n    )\n\n    # Add the limits.\n    fig.add_scatter(\n        x=band_filter_dataframe.index,\n        y=band_filter_dataframe[\"band_center\"]\n        + band_filter_dataframe[\"rolling_deviation\"],\n        name=\"Upper limit\",\n        line_color=\"orange\",\n    )\n    fig.add_scatter(\n        x=band_filter_dataframe.index,\n        y=band_filter_dataframe[\"band_center\"]\n        - band_filter_dataframe[\"rolling_deviation\"],\n        name=\"Lower limit\",\n        line_color=\"orange\",\n    )\n\n    # Set the layout.\n    fig.update_layout(**layout_opts)\n\n    # Set the margins.\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"band_filter_dataframe\": \"DATAFRAME\",\n    },\n    \"outputs\": {\n        \"band_filter_plot\": \"PLOTLYJSON\",\n    },\n    \"name\": \"Band Filter Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plotting a band filter dataframe\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"ff2392cb-b0ff-4672-803f-4fb44ecca5b5\",\n    \"revision_group_id\": \"02836778-e7d9-4352-952d-9927f34b58fe\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-11-24T16:55:17.221127+00:00\",\n}\n\n\ndef main(*, band_filter_dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"band_filter_plot\": plotly_fig_to_json_dict(\n            band_filter_plot(band_filter_dataframe)\n        )\n    }",
    "io_interface": {
      "inputs": [
        {
          "id": "1393fcf7-0562-4b47-b655-144e3dac4106",
          "name": "band_filter_dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "a36ab320-ae3d-48f0-b57c-5e541e987615",
          "name": "band_filter_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "band_filter_dataframe",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"values\": {\n        \"2022-01-01T00:00:00.000Z\":1.058,\n        \"2022-01-01T00:20:48.000Z\":0.699,\n        \"2022-01-01T00:41:37.000Z\":1.08,\n        \"2022-01-01T01:02:26.000Z\":1.054,\n        \"2022-01-01T01:23:15.000Z\":0.763,\n        \"2022-01-01T01:44:04.000Z\":1.034,\n        \"2022-01-01T02:04:53.000Z\":0.965,\n        \"2022-01-01T02:25:42.000Z\":0.601,\n        \"2022-01-01T02:46:31.000Z\":0.933,\n        \"2022-01-01T03:07:20.000Z\":1.081,\n        \"2022-01-01T03:28:09.000Z\":2.1,\n        \"2022-01-01T03:48:58.000Z\":0.988,\n        \"2022-01-01T04:09:47.000Z\":0.741,\n        \"2022-01-01T04:30:36.000Z\":0.647,\n        \"2022-01-01T04:51:25.000Z\":0.556,\n        \"2022-01-01T05:12:14.000Z\":0.453,\n        \"2022-01-01T05:33:03.000Z\":1.009,\n        \"2022-01-01T05:53:52.000Z\":1.72,\n        \"2022-01-01T06:14:41.000Z\":1.002,\n        \"2022-01-01T06:56:19.000Z\":0.857,\n        \"2022-01-01T07:17:08.000Z\":0.864,\n        \"2022-01-01T07:37:57.000Z\":0.606,\n        \"2022-01-01T07:58:46.000Z\":0.899,\n        \"2022-01-01T08:40:24.000Z\":0.62,\n        \"2022-01-01T10:03:40.000Z\":0.721,\n        \"2022-01-01T10:24:29.000Z\":1.193,\n        \"2022-01-01T10:45:18.000Z\":0.833,\n        \"2022-01-01T11:06:07.000Z\":2.06,\n        \"2022-01-01T11:26:56.000Z\":0.68,\n        \"2022-01-01T11:47:45.000Z\":1.136,\n        \"2022-01-01T12:08:34.000Z\":0.62,\n        \"2022-01-01T12:29:23.000Z\":0.946,\n        \"2022-01-01T12:50:12.000Z\":0.746,\n        \"2022-01-01T13:11:01.000Z\":0.833,\n        \"2022-01-01T13:31:50.000Z\":0.857,\n        \"2022-01-01T14:13:28.000Z\":0.947,\n        \"2022-01-01T14:34:17.000Z\":0.841,\n        \"2022-01-01T14:55:06.000Z\":0.668,\n        \"2022-01-01T15:15:55.000Z\":0.675,\n        \"2022-01-01T15:36:44.000Z\":0.84,\n        \"2022-01-01T15:57:33.000Z\":0.821,\n        \"2022-01-01T16:18:22.000Z\":0.625,\n        \"2022-01-01T16:39:11.000Z\":1.155,\n        \"2022-01-01T17:00:00.000Z\":0.968\n    },\n    \"band_center\":{\n        \"2022-01-01T00:41:37.000Z\":0.9995,\n        \"2022-01-01T01:02:26.000Z\":1.034,\n        \"2022-01-01T01:23:15.000Z\":1.011,\n        \"2022-01-01T01:44:04.000Z\":0.988,\n        \"2022-01-01T02:04:53.000Z\":0.9765,\n        \"2022-01-01T02:25:42.000Z\":0.965,\n        \"2022-01-01T02:46:31.000Z\":0.949,\n        \"2022-01-01T03:07:20.000Z\":0.949,\n        \"2022-01-01T03:28:09.000Z\":0.949,\n        \"2022-01-01T03:48:58.000Z\":0.9765,\n        \"2022-01-01T04:09:47.000Z\":0.965,\n        \"2022-01-01T04:30:36.000Z\":0.933,\n        \"2022-01-01T04:51:25.000Z\":0.933,\n        \"2022-01-01T05:12:14.000Z\":0.864,\n        \"2022-01-01T05:33:03.000Z\":0.864,\n        \"2022-01-01T05:53:52.000Z\":0.8605,\n        \"2022-01-01T06:14:41.000Z\":0.799,\n        \"2022-01-01T06:56:19.000Z\":0.8605,\n        \"2022-01-01T10:03:40.000Z\":0.866,\n        \"2022-01-01T10:24:29.000Z\":0.7895,\n        \"2022-01-01T10:45:18.000Z\":0.833,\n        \"2022-01-01T11:06:07.000Z\":0.833,\n        \"2022-01-01T11:26:56.000Z\":0.833,\n        \"2022-01-01T11:47:45.000Z\":0.845,\n        \"2022-01-01T12:08:34.000Z\":0.841,\n        \"2022-01-01T12:29:23.000Z\":0.841,\n        \"2022-01-01T12:50:12.000Z\":0.833,\n        \"2022-01-01T13:11:01.000Z\":0.84,\n        \"2022-01-01T13:31:50.000Z\":0.833,\n        \"2022-01-01T14:13:28.000Z\":0.833,\n        \"2022-01-01T14:34:17.000Z\":0.84,\n        \"2022-01-01T14:55:06.000Z\":0.8365,\n        \"2022-01-01T15:15:55.000Z\":0.84,\n        \"2022-01-01T15:36:44.000Z\":0.8405\n    },\n    \"rolling_deviation\":{\n        \"2022-01-01T00:41:37.000Z\":0.511497,\n        \"2022-01-01T01:02:26.000Z\":0.511497,\n        \"2022-01-01T01:23:15.000Z\":0.511497,\n        \"2022-01-01T01:44:04.000Z\":0.511497,\n        \"2022-01-01T02:04:53.000Z\":0.511497,\n        \"2022-01-01T02:25:42.000Z\":0.5159448,\n        \"2022-01-01T02:46:31.000Z\":0.7072002,\n        \"2022-01-01T03:07:20.000Z\":0.7072002,\n        \"2022-01-01T03:28:09.000Z\":0.8762166,\n        \"2022-01-01T03:48:58.000Z\":0.756126,\n        \"2022-01-01T04:09:47.000Z\":0.9963072,\n        \"2022-01-01T04:30:36.000Z\":0.8539776,\n        \"2022-01-01T04:51:25.000Z\":0.6582744,\n        \"2022-01-01T05:12:14.000Z\":0.9651726,\n        \"2022-01-01T05:33:03.000Z\":0.644931,\n        \"2022-01-01T05:53:52.000Z\":0.644931,\n        \"2022-01-01T06:14:41.000Z\":0.8272908,\n        \"2022-01-01T06:56:19.000Z\":0.8650971,\n        \"2022-01-01T10:03:40.000Z\":0.9607248,\n        \"2022-01-01T10:24:29.000Z\":0.7249914,\n        \"2022-01-01T10:45:18.000Z\":0.6805134,\n        \"2022-01-01T11:06:07.000Z\":0.511497,\n        \"2022-01-01T11:26:56.000Z\":0.511497,\n        \"2022-01-01T11:47:45.000Z\":0.511497,\n        \"2022-01-01T12:08:34.000Z\":0.511497,\n        \"2022-01-01T12:29:23.000Z\":0.511497,\n        \"2022-01-01T12:50:12.000Z\":0.511497,\n        \"2022-01-01T13:11:01.000Z\":0.511497,\n        \"2022-01-01T13:31:50.000Z\":0.511497,\n        \"2022-01-01T14:13:28.000Z\":0.511497,\n        \"2022-01-01T14:34:17.000Z\":0.511497,\n        \"2022-01-01T14:55:06.000Z\":0.511497,\n        \"2022-01-01T15:15:55.000Z\":0.511497,\n        \"2022-01-01T15:36:44.000Z\":0.5203926\n    },\n    \"filter_mask\":{\n        \"2022-01-01T00:00:00.000Z\":true,\n        \"2022-01-01T00:20:48.000Z\":true,\n        \"2022-01-01T00:41:37.000Z\":true,\n        \"2022-01-01T01:02:26.000Z\":true,\n        \"2022-01-01T01:23:15.000Z\":true,\n        \"2022-01-01T01:44:04.000Z\":true,\n        \"2022-01-01T02:04:53.000Z\":true,\n        \"2022-01-01T02:25:42.000Z\":true,\n        \"2022-01-01T02:46:31.000Z\":true,\n        \"2022-01-01T03:07:20.000Z\":true,\n        \"2022-01-01T03:28:09.000Z\":false,\n        \"2022-01-01T03:48:58.000Z\":true,\n        \"2022-01-01T04:09:47.000Z\":true,\n        \"2022-01-01T04:30:36.000Z\":true,\n        \"2022-01-01T04:51:25.000Z\":true,\n        \"2022-01-01T05:12:14.000Z\":true,\n        \"2022-01-01T05:33:03.000Z\":true,\n        \"2022-01-01T05:53:52.000Z\":false,\n        \"2022-01-01T06:14:41.000Z\":true,\n        \"2022-01-01T06:56:19.000Z\":true,\n        \"2022-01-01T07:17:08.000Z\":true,\n        \"2022-01-01T07:37:57.000Z\":true,\n        \"2022-01-01T07:58:46.000Z\":true,\n        \"2022-01-01T08:40:24.000Z\":true,\n        \"2022-01-01T10:03:40.000Z\":true,\n        \"2022-01-01T10:24:29.000Z\":true,\n        \"2022-01-01T10:45:18.000Z\":true,\n        \"2022-01-01T11:06:07.000Z\":false,\n        \"2022-01-01T11:26:56.000Z\":true,\n        \"2022-01-01T11:47:45.000Z\":true,\n        \"2022-01-01T12:08:34.000Z\":true,\n        \"2022-01-01T12:29:23.000Z\":true,\n        \"2022-01-01T12:50:12.000Z\":true,\n        \"2022-01-01T13:11:01.000Z\":true,\n        \"2022-01-01T13:31:50.000Z\":true,\n        \"2022-01-01T14:13:28.000Z\":true,\n        \"2022-01-01T14:34:17.000Z\":true,\n        \"2022-01-01T14:55:06.000Z\":true,\n        \"2022-01-01T15:15:55.000Z\":true,\n        \"2022-01-01T15:36:44.000Z\":true,\n        \"2022-01-01T15:57:33.000Z\":true,\n        \"2022-01-01T16:18:22.000Z\":true,\n        \"2022-01-01T16:39:11.000Z\":true,\n        \"2022-01-01T17:00:00.000Z\":true\n    }\n}"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "16d6e587-25ea-d0df-f514-da9fef66ad80",
    "revision_group_id": "16d6e587-25ea-d0df-f514-da9fef66ad80",
    "name": "Timeseries DataFrame Plot",
    "description": "Plotting a dataframe of multiple timeseries",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.452518+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeseries DataFrame Plot\n\n## Description\nPlotting a dataframe of multiple timeseries.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): Entries must be numeric and Index should be a DateTime Index. \n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming timeseries using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"dataframe\": {\n    \"pH a\": {\n        \"2019-11-29T01:00:00.000Z\": 10.533,\n        \"2019-11-29T02:00:00.000Z\": 10.559,\n        \"2019-11-29T03:00:00.000Z\": 9.7662,\n        \"2019-11-29T04:00:00.000Z\": 11.2332,\n        \"2019-11-29T05:00:00.000Z\": 11.0683,\n        \"2019-11-29T06:00:00.000Z\": 11.2072,\n        \"2019-11-29T07:00:00.000Z\": 11.1522,\n        \"2019-11-29T08:00:00.000Z\": 11.1522,\n        \"2019-11-29T09:00:00.000Z\": 11.1522,\n        \"2019-11-29T10:00:00.000Z\": 11.4473,\n        \"2019-11-29T11:00:00.000Z\": 11.3142,\n        \"2019-11-29T12:00:00.000Z\": 11.3403,\n        \"2019-11-29T13:00:00.000Z\": 11.375,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 12,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 12,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.8918,\n        \"2019-11-30T02:00:00.000Z\": 10.64,\n        \"2019-11-30T03:00:00.000Z\": 10.5648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 12,\n        \"2019-11-30T06:00:00.000Z\": 10.912,\n        \"2019-11-30T07:00:00.000Z\": 12,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 12,\n        \"2019-11-30T13:00:00.000Z\": 12,\n        \"2019-11-30T14:00:00.000Z\": 12,\n        \"2019-11-30T15:00:00.000Z\": 12\n    },\n    \"pH b\": {\n        \"2019-11-29T01:00:00.000Z\": 10.7533,\n        \"2019-11-29T02:00:00.000Z\": 10.759,\n        \"2019-11-29T03:00:00.000Z\": 9.9662,\n        \"2019-11-29T04:00:00.000Z\": 11.1332,\n        \"2019-11-29T05:00:00.000Z\": 11.0083,\n        \"2019-11-29T06:00:00.000Z\": 11.1072,\n        \"2019-11-29T07:00:00.000Z\": 11.1222,\n        \"2019-11-29T08:00:00.000Z\": 11.1322,\n        \"2019-11-29T09:00:00.000Z\": 11.1422,\n        \"2019-11-29T10:00:00.000Z\": 11.7473,\n        \"2019-11-29T11:00:00.000Z\": 11.4142,\n        \"2019-11-29T12:00:00.000Z\": 11.4403,\n        \"2019-11-29T13:00:00.000Z\": 11.475,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 13,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 13,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.7918,\n        \"2019-11-30T02:00:00.000Z\": 10.34,\n        \"2019-11-30T03:00:00.000Z\": 10.2648,\n        \"2019-11-30T04:00:00.000Z\": 10.112,\n        \"2019-11-30T05:00:00.000Z\": 11,\n        \"2019-11-30T06:00:00.000Z\": 10.312,\n        \"2019-11-30T07:00:00.000Z\": 11,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 11,\n        \"2019-11-30T13:00:00.000Z\": 11,\n        \"2019-11-30T14:00:00.000Z\": 11,\n        \"2019-11-30T15:00:00.000Z\": 11.5\n    },\n    \"pH c\": {\n        \"2019-11-29T01:00:00.000Z\": 9.7533,\n        \"2019-11-29T02:00:00.000Z\": 8.759,\n        \"2019-11-29T03:00:00.000Z\": 9.1662,\n        \"2019-11-29T04:00:00.000Z\": 11.0332,\n        \"2019-11-29T05:00:00.000Z\": 11.0033,\n        \"2019-11-29T06:00:00.000Z\": 11.0172,\n        \"2019-11-29T07:00:00.000Z\": 11.0122,\n        \"2019-11-29T08:00:00.000Z\": 11.0222,\n        \"2019-11-29T09:00:00.000Z\": 11.0422,\n        \"2019-11-29T10:00:00.000Z\": 11.0273,\n        \"2019-11-29T11:00:00.000Z\": 11.1242,\n        \"2019-11-29T12:00:00.000Z\": 11.1703,\n        \"2019-11-29T13:00:00.000Z\": 11.035,\n        \"2019-11-29T14:00:00.000Z\": 12.1,\n        \"2019-11-29T15:00:00.000Z\": 11.2763,\n        \"2019-11-29T16:00:00.000Z\": 12.05,\n        \"2019-11-29T17:00:00.000Z\": 12.3,\n        \"2019-11-29T18:00:00.000Z\": 12.82,\n        \"2019-11-29T19:00:00.000Z\": 12.8,\n        \"2019-11-29T20:00:00.000Z\": 12.7,\n        \"2019-11-29T21:00:00.000Z\": 13.77,\n        \"2019-11-29T22:00:00.000Z\": 12.3,\n        \"2019-11-29T23:00:00.000Z\": 12.32,\n        \"2019-11-30T01:00:00.000Z\": 11.6918,\n        \"2019-11-30T02:00:00.000Z\": 11.22,\n        \"2019-11-30T03:00:00.000Z\": 11.0648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 11.04,\n        \"2019-11-30T06:00:00.000Z\": 10.87,\n        \"2019-11-30T07:00:00.000Z\": 10.98,\n        \"2019-11-30T08:00:00.000Z\": 11.63,\n        \"2019-11-30T09:00:00.000Z\": 11.222,\n        \"2019-11-30T10:00:00.000Z\": 11.111,\n        \"2019-11-30T11:00:00.000Z\": 10.7676,\n        \"2019-11-30T12:00:00.000Z\": 10.8787,\n        \"2019-11-30T13:00:00.000Z\": 10.8889,\n        \"2019-11-30T14:00:00.000Z\": 10.9101,\n        \"2019-11-30T15:00:00.000Z\": 10.989\n    }\n    }\n}\n```\n",
    "content": "# test\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef multi_plotly_timeseries_plot(\n    dataframe: pd.DataFrame,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n\n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n    columns = list(dataframe.keys())\n\n    df = dataframe\n    if set(columns) == set([\"timestamp\", \"value\", \"metric\"]):\n        for metric in df[\"metric\"].values:\n            value_series = pd.Series(\n                (df[\"value\"][df[\"metric\"] == metric]).values,\n                index=(df[\"timestamp\"][df[\"metric\"] == metric]).values,\n                name=metric,\n            ).sort_index()\n            fig.add_scatter(\n                x=value_series.index, y=value_series.values, mode=\"lines\", name=metric\n            )\n    else:\n        to_plot_df = dataframe.sort_index()\n\n        # Only thing I figured is - I could do this\n        for key in columns:\n            fig.add_scatter(\n                x=to_plot_df.index, y=to_plot_df[key], mode=\"lines\", name=key\n            )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Timeseries DataFrame Plot\",\n    description=\"Plotting a dataframe of multiple timeseries\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"16d6e587-25ea-d0df-f514-da9fef66ad80\",\n    revision_group_id=\"16d6e587-25ea-d0df-f514-da9fef66ad80\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.452518+00:00\"\n)\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(multi_plotly_timeseries_plot(dataframe))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "ff22a376-752f-9a5f-899e-601d6e341c72",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "c0d410fa-e324-7d06-186a-8096b4aa4468",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "216f03cb-eec8-1907-f980-1df6abc2fb5b",
    "revision_group_id": "216f03cb-eec8-1907-f980-1df6abc2fb5b",
    "name": "2D Scatter Plot colored by other Series",
    "description": "Plotting two series into the plane using a third Series for coloring points",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.963869+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# 2D Scatter Plot colored by other Series\n\n## Description\nPlot 2D data coloring with a third series.\n\n## Inputs\n* **x** (Pandas Series): Entries must be numeric. The series with the values for the x coordinates.\n* **y** (Pandas Series): Entries must be numeric. The series with the values for the y coordinates.\n* **color** (Pandas Series): The series used for coloring.\n\n## Outputs\n* **scatter_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming series into a scatter plot, such that the values of the **x** series are used as x coordinates and the values of the **y** series are used as y coordinates. A third Series is used to color the data points. Coloring method is inferred from the dtype of the series.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"x\": {\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t},\n\t\"y\": {\n    \"2019-11-29T01:00:00.000Z\": 10.7533,\n    \"2019-11-29T02:00:00.000Z\": 10.759,\n    \"2019-11-29T03:00:00.000Z\": 9.9662,\n    \"2019-11-29T04:00:00.000Z\": 11.1332,\n    \"2019-11-29T05:00:00.000Z\": 11.0083,\n    \"2019-11-29T06:00:00.000Z\": 11.1072,\n    \"2019-11-29T07:00:00.000Z\": 11.1222,\n    \"2019-11-29T08:00:00.000Z\": 11.1322,\n    \"2019-11-29T09:00:00.000Z\": 11.1422,\n    \"2019-11-29T10:00:00.000Z\": 11.7473,\n    \"2019-11-29T11:00:00.000Z\": 11.4142,\n    \"2019-11-29T12:00:00.000Z\": 11.4403,\n    \"2019-11-29T13:00:00.000Z\": 11.475,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 13,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 13,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.7918,\n    \"2019-11-30T02:00:00.000Z\": 10.34,\n    \"2019-11-30T03:00:00.000Z\": 10.2648,\n    \"2019-11-30T04:00:00.000Z\": 10.112,\n    \"2019-11-30T05:00:00.000Z\": 11,\n    \"2019-11-30T06:00:00.000Z\": 10.312,\n    \"2019-11-30T07:00:00.000Z\": 11,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 11,\n    \"2019-11-30T13:00:00.000Z\": 11,\n    \"2019-11-30T14:00:00.000Z\": 11,\n    \"2019-11-30T15:00:00.000Z\": 11.5\n    }\n}\n```\n",
    "content": "from typing import Optional\n\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\nimport plotly.express as px\n\n\ndef color_scatter_plot(\n    series1: pd.Series,\n    series2: pd.Series,\n    color_series: Optional[pd.Series] = None,\n    traces_opts: dict = {\"line_color\": \"#1199bb\"},\n    layout_opts: dict = {\n        \"xaxis_title\": \"x\",\n        \"yaxis_title\": \"y\",\n        \"autosize\": True,\n        \"height\": 400,\n    },\n    line_opts: dict = {},\n):\n    \"\"\"Colored 2D Scatter Plot\n    \n    If no color_series is provided, the index will be used.\n    \n    Assumes that both series are of same / similar index.\n    \n    Automatically handles the dtype of the color_series (or index), that\n    is datetime will be converted to total_seconds from minimum timestamp,\n    and distinguishes between numeric versus categorical values.\n    \"\"\"\n\n    df = pd.DataFrame({\"x\": series1, \"y\": series2})\n\n    if color_series is None:\n        if pd.api.types.is_datetime64_any_dtype(df.index):\n            df[\"timestamps\"] = pd.Series(df.index, index=df.index)\n            df[\"seconds_from_start\"] = (\n                df.timestamps - df.timestamps.min()\n            ).dt.total_seconds()\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=\"seconds_from_start\",\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n\n        elif pd.api.types.is_numeric_dtype(df.index):\n            df[\"index\"] = pd.Series(df.index, index=df.index)\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=\"index\",\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n        else:\n            raise ValueError(\"Index is not of a dtype that allows coloring from it\")\n    else:\n        color_col_name = \"color\" if color_series.name is None else color_series.name\n        df[color_col_name] = color_series\n\n        if pd.api.types.is_datetime64_any_dtype(color_series):\n            df[color_col_name] = (\n                df[color_col_name] - df[color_col_name].min()\n            ).dt.total_seconds()\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=color_col_name,\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n\n        elif pd.api.types.is_numeric_dtype(color_series):\n            fig = px.scatter(\n                df,\n                x=\"x\",\n                y=\"y\",\n                color=color_col_name,\n                color_continuous_scale=px.colors.sequential.Plasma,\n            )\n\n        elif pd.api.types.is_categorical_dtype(\n            color_series\n        ) or pd.api.types.is_string_dtype(color_series):\n            fig = px.scatter(df, x=\"x\", y=\"y\", color=color_col_name)\n        else:\n            raise ValueError(\"Index is not of a dtype that allows coloring from it\")\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\ndef color_df_scatter_plot(df, x, y, color_col=None):\n    \"\"\"Wrapper for dataframes\"\"\"\n    return color_scatter_plot(\n        df[x], df[y], color_series=df[color_col] if color_col is not None else None\n    )\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"x\": DataType.Series, \"y\": DataType.Series, \"color\": DataType.Series},\n    outputs={\"scatter_plot\": DataType.PlotlyJson},\n    name=\"2D Scatter Plot colored by other Series\",\n    description=\"Plotting two series into the plane using a third Series for coloring points\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"216f03cb-eec8-1907-f980-1df6abc2fb5b\",\n    revision_group_id=\"216f03cb-eec8-1907-f980-1df6abc2fb5b\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.963869+00:00\"\n)\ndef main(*, x, y, color):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"scatter_plot\": plotly_fig_to_json_dict(\n            color_scatter_plot(x, y, color_series=color)\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "b98360cf-4089-2150-0e06-f434221f1f97",
          "name": "x",
          "data_type": "SERIES"
        },
        {
          "id": "ec8b14c7-7add-de01-e9e4-303970121c27",
          "name": "y",
          "data_type": "SERIES"
        },
        {
          "id": "bebaf4b0-22cf-4d95-0b9f-edc173542f8f",
          "name": "color",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "599dd929-2009-4bf8-d924-7b0c3386dcec",
          "name": "scatter_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "9c3f88ce-1311-241e-18b7-acf7d3f5a051",
    "revision_group_id": "9c3f88ce-1311-241e-18b7-acf7d3f5a051",
    "name": "Univariate Linear RUL Regression Result Plot",
    "description": "Plot results of linear regression for remaining useful life on univariate timeseries",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.903645+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Univariate Linear RUL Regression Result Plot\n\n## Description\nPlot results of linear regression for remaining useful life on univariate timeseries.\n\n## Inputs\n* **limit_violation_prediction_timestamp** (String): The timestamp at which the limit will be reached.\n* **limit** (Float): The limit for RUL, that is the value at which one assumes malfunction to start happening.\n* **base_series** (Pandas Series): The input values to train the model. Values should be floats and index should be a datetime index.\n* **predictions**: (Pandas Series): The predictions of the model. Values should be floats and index should be a datetime index.\n\n## Outputs\n* **rul_regression_result_plot** (Plotly Jsont): The generated Plotly Json. \n\n## Details\nCan be used to plot the results of the corresponding RUL Regression component.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef timeseries_comparison_plot(\n    series_1: pd.Series,\n    series_2: pd.Series,\n    limit_violation_timestamp: str,\n    limit: float,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n    # Only thing I figured is - I could do this\n\n    s1 = series_1.sort_index()\n\n    fig.add_scatter(\n        x=s1.index, y=s1, mode=\"lines\", name=s1.name if s1.name else \"series_1\"\n    )  # Not what is desired - need a line\n\n    s2 = series_2.sort_index()\n\n    fig.add_scatter(\n        x=s2.index, y=s2, mode=\"lines\", name=s2.name if s2.name else \"series_2\"\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    vline_y_min = np.min([series_1.min(), series_2.min(), limit])\n    vline_y_max = np.max([series_1.max(), series_2.max(), limit])\n\n    hline_x_min = np.min([series_1.index.min(), series_2.index.min()])\n    hline_x_max = np.max([series_1.index.max(), series_2.index.max()])\n\n    fig.update_layout(\n        shapes=(\n            [\n                dict(\n                    type=\"line\",\n                    yref=\"y\",\n                    y0=vline_y_min,\n                    y1=vline_y_max,\n                    xref=\"x\",\n                    x0=limit_violation_timestamp,\n                    x1=limit_violation_timestamp,\n                )\n            ]\n            if limit_violation_timestamp is not None\n            else []\n        )\n        + [\n            dict(\n                type=\"line\",\n                yref=\"y\",\n                y0=limit,\n                y1=limit,\n                xref=\"x\",\n                x0=hline_x_min,\n                x1=hline_x_max,\n                line={\"color\": \"red\", \"width\": 1},\n            )\n        ]\n    )\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"limit_violation_prediction_timestamp\": DataType.String, \"limit\": DataType.Float, \"base_series\": DataType.Series, \"predictions\": DataType.Series},\n    outputs={\"rul_regression_result_plot\": DataType.PlotlyJson},\n    name=\"Univariate Linear RUL Regression Result Plot\",\n    description=\"Plot results of linear regression for remaining useful life on univariate timeseries\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"9c3f88ce-1311-241e-18b7-acf7d3f5a051\",\n    revision_group_id=\"9c3f88ce-1311-241e-18b7-acf7d3f5a051\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.903645+00:00\"\n)\ndef main(*, limit_violation_prediction_timestamp, limit, base_series, predictions):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"rul_regression_result_plot\": plotly_fig_to_json_dict(\n            timeseries_comparison_plot(\n                base_series, predictions, limit_violation_prediction_timestamp, limit\n            )\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "e2f270a0-3c80-9f57-776e-ecc396268ac1",
          "name": "limit_violation_prediction_timestamp",
          "data_type": "STRING"
        },
        {
          "id": "c53283a0-82e6-c162-6d79-1acc92206950",
          "name": "limit",
          "data_type": "FLOAT"
        },
        {
          "id": "64734a41-f66b-9394-b961-44dd0b5e74f1",
          "name": "base_series",
          "data_type": "SERIES"
        },
        {
          "id": "120f0e00-3ee6-743b-22a9-b0f1481c7b60",
          "name": "predictions",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "aebbc55f-1e4a-c035-bbd0-2475307536c9",
          "name": "rul_regression_result_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "db80c471-924f-af19-e97b-06de42af6a30",
    "revision_group_id": "db80c471-924f-af19-e97b-06de42af6a30",
    "name": "DataFrame Plot with multiple X and Y Axes",
    "description": "Plotting a dataframe with multiple X and Y axes",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.857289+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeseries DataFrame Plot with multiple Y Axes\n\n## Description\nPlotting a dataframe of multiple timeseries with multiple Y axes.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): Entries must be numeric and Index should be a DateTime Index.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming **dataframe** using Plotly such that each column gets its own y axis. Each y axis can be individually moved and scaled.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"dataframe\": {\n    \"pH a\": {\n        \"2019-11-29T01:00:00.000Z\": 10.533,\n        \"2019-11-29T02:00:00.000Z\": 10.559,\n        \"2019-11-29T03:00:00.000Z\": 9.7662,\n        \"2019-11-29T04:00:00.000Z\": 11.2332,\n        \"2019-11-29T05:00:00.000Z\": 11.0683,\n        \"2019-11-29T06:00:00.000Z\": 11.2072,\n        \"2019-11-29T07:00:00.000Z\": 11.1522,\n        \"2019-11-29T08:00:00.000Z\": 11.1522,\n        \"2019-11-29T09:00:00.000Z\": 11.1522,\n        \"2019-11-29T10:00:00.000Z\": 11.4473,\n        \"2019-11-29T11:00:00.000Z\": 11.3142,\n        \"2019-11-29T12:00:00.000Z\": 11.3403,\n        \"2019-11-29T13:00:00.000Z\": 11.375,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 12,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 12,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.8918,\n        \"2019-11-30T02:00:00.000Z\": 10.64,\n        \"2019-11-30T03:00:00.000Z\": 10.5648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 12,\n        \"2019-11-30T06:00:00.000Z\": 10.912,\n        \"2019-11-30T07:00:00.000Z\": 12,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 12,\n        \"2019-11-30T13:00:00.000Z\": 12,\n        \"2019-11-30T14:00:00.000Z\": 12,\n        \"2019-11-30T15:00:00.000Z\": 12\n    },\n    \"pH b\": {\n        \"2019-11-29T01:00:00.000Z\": 10.7533,\n        \"2019-11-29T02:00:00.000Z\": 10.759,\n        \"2019-11-29T03:00:00.000Z\": 9.9662,\n        \"2019-11-29T04:00:00.000Z\": 11.1332,\n        \"2019-11-29T05:00:00.000Z\": 11.0083,\n        \"2019-11-29T06:00:00.000Z\": 11.1072,\n        \"2019-11-29T07:00:00.000Z\": 11.1222,\n        \"2019-11-29T08:00:00.000Z\": 11.1322,\n        \"2019-11-29T09:00:00.000Z\": 11.1422,\n        \"2019-11-29T10:00:00.000Z\": 11.7473,\n        \"2019-11-29T11:00:00.000Z\": 11.4142,\n        \"2019-11-29T12:00:00.000Z\": 11.4403,\n        \"2019-11-29T13:00:00.000Z\": 11.475,\n        \"2019-11-29T14:00:00.000Z\": 12,\n        \"2019-11-29T15:00:00.000Z\": 11.4763,\n        \"2019-11-29T16:00:00.000Z\": 12,\n        \"2019-11-29T17:00:00.000Z\": 12,\n        \"2019-11-29T18:00:00.000Z\": 13,\n        \"2019-11-29T19:00:00.000Z\": 12,\n        \"2019-11-29T20:00:00.000Z\": 12,\n        \"2019-11-29T21:00:00.000Z\": 13,\n        \"2019-11-29T22:00:00.000Z\": 12,\n        \"2019-11-29T23:00:00.000Z\": 12,\n        \"2019-11-30T01:00:00.000Z\": 10.7918,\n        \"2019-11-30T02:00:00.000Z\": 10.34,\n        \"2019-11-30T03:00:00.000Z\": 10.2648,\n        \"2019-11-30T04:00:00.000Z\": 10.112,\n        \"2019-11-30T05:00:00.000Z\": 11,\n        \"2019-11-30T06:00:00.000Z\": 10.312,\n        \"2019-11-30T07:00:00.000Z\": 11,\n        \"2019-11-30T08:00:00.000Z\": 12,\n        \"2019-11-30T09:00:00.000Z\": 11.3663,\n        \"2019-11-30T10:00:00.000Z\": 11.1262,\n        \"2019-11-30T11:00:00.000Z\": 10.7471,\n        \"2019-11-30T12:00:00.000Z\": 11,\n        \"2019-11-30T13:00:00.000Z\": 11,\n        \"2019-11-30T14:00:00.000Z\": 11,\n        \"2019-11-30T15:00:00.000Z\": 11.5\n    },\n    \"pH c\": {\n        \"2019-11-29T01:00:00.000Z\": 9.7533,\n        \"2019-11-29T02:00:00.000Z\": 8.759,\n        \"2019-11-29T03:00:00.000Z\": 9.1662,\n        \"2019-11-29T04:00:00.000Z\": 11.0332,\n        \"2019-11-29T05:00:00.000Z\": 11.0033,\n        \"2019-11-29T06:00:00.000Z\": 11.0172,\n        \"2019-11-29T07:00:00.000Z\": 11.0122,\n        \"2019-11-29T08:00:00.000Z\": 11.0222,\n        \"2019-11-29T09:00:00.000Z\": 11.0422,\n        \"2019-11-29T10:00:00.000Z\": 11.0273,\n        \"2019-11-29T11:00:00.000Z\": 11.1242,\n        \"2019-11-29T12:00:00.000Z\": 11.1703,\n        \"2019-11-29T13:00:00.000Z\": 11.035,\n        \"2019-11-29T14:00:00.000Z\": 12.1,\n        \"2019-11-29T15:00:00.000Z\": 11.2763,\n        \"2019-11-29T16:00:00.000Z\": 12.05,\n        \"2019-11-29T17:00:00.000Z\": 12.3,\n        \"2019-11-29T18:00:00.000Z\": 12.82,\n        \"2019-11-29T19:00:00.000Z\": 12.8,\n        \"2019-11-29T20:00:00.000Z\": 12.7,\n        \"2019-11-29T21:00:00.000Z\": 13.77,\n        \"2019-11-29T22:00:00.000Z\": 12.3,\n        \"2019-11-29T23:00:00.000Z\": 12.32,\n        \"2019-11-30T01:00:00.000Z\": 11.6918,\n        \"2019-11-30T02:00:00.000Z\": 11.22,\n        \"2019-11-30T03:00:00.000Z\": 11.0648,\n        \"2019-11-30T04:00:00.000Z\": 10.912,\n        \"2019-11-30T05:00:00.000Z\": 11.04,\n        \"2019-11-30T06:00:00.000Z\": 10.87,\n        \"2019-11-30T07:00:00.000Z\": 10.98,\n        \"2019-11-30T08:00:00.000Z\": 11.63,\n        \"2019-11-30T09:00:00.000Z\": 11.222,\n        \"2019-11-30T10:00:00.000Z\": 11.111,\n        \"2019-11-30T11:00:00.000Z\": 10.7676,\n        \"2019-11-30T12:00:00.000Z\": 10.8787,\n        \"2019-11-30T13:00:00.000Z\": 10.8889,\n        \"2019-11-30T14:00:00.000Z\": 10.9101,\n        \"2019-11-30T15:00:00.000Z\": 10.989\n    }\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef compute_plot_positions(\n    num_x_axes,\n    num_y_axes,\n    horizontal_relative_space_per_y_axis=0.06,\n    vertical_relative_space_per_x_axis=0.09,\n    y_axes_side=\"left\",\n    x_axes_side=\"bottom\",\n):\n    \"\"\"\n    returns tuple plot_area_x_ratio, y_positions\n\n    First assumes that a y axis horizontally fits into 5% of the total figure width\n    and tries to reserve enough horizontal space to match that exactly up to a limit\n    of reserving half the available width.\n\n    If that is not possible it reserves exactly 0.5 times the total width and\n    uniformly arranges the y axis positions (now having less than 5% horizontal space\n    and therefore maybe overlapping)\n\n    horizontal_relative_space_per_y_axis:\n        a value 0f 0.07 for is quite okay for half of a HD screen.\n        its too much for a full hd screen but still acceptable\n    \"\"\"\n\n    hor_ratio = horizontal_relative_space_per_y_axis\n\n    if num_y_axes * hor_ratio < 0.5:\n        x_positions = [\n            1 - x * hor_ratio - hor_ratio * (y_axes_side == \"right\")\n            for x in range(num_y_axes)\n        ]\n        plot_area_x_ratio = 1 - num_y_axes * hor_ratio\n\n    else:\n        plot_area_x_ratio = 0.5\n        x_positions = [1 - x * 0.5 / num_y_axes for x in range(num_y_axes)]\n\n    ver_ratio = vertical_relative_space_per_x_axis\n\n    if num_x_axes * ver_ratio < 0.5:\n        y_positions = [\n            1 - y * ver_ratio - ver_ratio * (x_axes_side == \"bottom\")\n            for y in range(num_x_axes)\n        ]\n        plot_area_y_ratio = 1 - num_x_axes * ver_ratio\n\n    else:\n        plot_area_y_ratio = 0.5\n        y_positions = [1 - y * 0.5 / num_x_axes for y in range(num_x_axes)]\n\n    return plot_area_y_ratio, y_positions, plot_area_x_ratio, x_positions\n\n\ndef multi_series_with_multi_yaxis(df):\n    \"\"\"One y_axis for each column of input dataframe\"\"\"\n\n    plotly_data = []\n    plotly_layout = plotly.graph_objs.Layout()\n\n    colors = px.colors.qualitative.Plotly\n\n    y_sep_ratio, y_positions, x_sep_ratio, x_positions = compute_plot_positions(\n        len(df.columns), len(df.columns), y_axes_side=\"right\", x_axes_side=\"bottom\"\n    )\n\n    print(y_sep_ratio, y_positions, x_sep_ratio, x_positions)\n\n    # your layout goes here\n    layout_kwargs = {\n        # \"title\": \"y-axes in loop\",\n        # \"xaxis\": {\"domain\": [0, x_sep_ratio]},\n        \"height\": 400,\n    }\n\n    for i, col in enumerate(df.columns):\n        # we define our layout keys by string concatenation\n        # * (i > 0) is just to get rid of the if i > 0 statement\n        yaxis_name = \"yaxis\" + str(i + 1) * (i > 0)\n        xaxis_name = \"xaxis\" + str(i + 1) * (i > 0)\n        yaxis = \"y\" + str(i + 1) * (i > 0)\n        xaxis = \"x\" + str(i + 1) * (i > 0)\n        plotly_data.append(\n            plotly.graph_objs.Scatter(\n                x=df.index,\n                y=df[col],\n                name=col,\n                opacity=0.8,\n                line=dict(\n                    color=colors[i % len(colors)]\n                    # , width=4, dash=\"dash\"\n                ),\n            )\n        )\n\n        layout_kwargs[yaxis_name] = {  #'range': [0, i + 0.1],\n            \"position\": x_positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"right\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True,\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n            \"domain\": [1.0 - y_sep_ratio, 1.0],\n        }\n\n        layout_kwargs[xaxis_name] = {  #'range': [0, i + 0.1],\n            \"position\": 1 - y_positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"bottom\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True,\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n            \"domain\": [0, x_sep_ratio],\n        }\n\n        plotly_data[i][\"yaxis\"] = yaxis\n        plotly_data[i][\"xaxis\"] = xaxis\n        if i > 0:\n            layout_kwargs[yaxis_name][\"overlaying\"] = \"y\"\n            layout_kwargs[xaxis_name][\"overlaying\"] = \"x\"\n\n    fig = plotly.graph_objs.Figure(\n        data=plotly_data, layout=plotly.graph_objs.Layout(**layout_kwargs)\n    )\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"DataFrame Plot with multiple X and Y Axes\",\n    description=\"Plotting a dataframe with multiple X and Y axes\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"db80c471-924f-af19-e97b-06de42af6a30\",\n    revision_group_id=\"db80c471-924f-af19-e97b-06de42af6a30\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.857289+00:00\"\n)\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(multi_series_with_multi_yaxis(dataframe))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "dfec09e3-eaf7-fa9a-21b2-f9b3c5deb423",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "4a853c42-54e7-9e0f-81ec-aaeb2056c806",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "9f55f116-f22a-c94b-42b4-1f7c184da3bf",
    "revision_group_id": "9f55f116-f22a-c94b-42b4-1f7c184da3bf",
    "name": "Vertical Bar Plot",
    "description": "Plotting a series of values as vertical bars",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.915458+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Vertical Bar Plot\n\n## Description\nPlotting a series of values as vertical bars.\n\n## Inputs\n* **series** (Pandas Series): Entries must be numeric and Index should consist of what you may want to see below the bars on the x axis, e.g. strings denoting the bars.\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming series of values as vertical bars.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"series\": {\n\t\t\"NRW\": 2,\n\t\t\"BW\": 10,\n\t\t\"HE\": 9.8,\n\t\t\"BAY\": 0.2,\n\t\t\"TH\": 3.5,\n\t\t\"BER\": 4.7,\n\t\t\"NS\": 4.2,\n\t\t\"BRE\": 1.0,\n\t\t\"HAM\": 11.2,\n\t\t\"MV\": 12.9\n\t\t}\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef plotly_bar_plot(\n    value_series: pd.Series,\n    traces_opts: dict = {},\n    layout_opts: dict = {\"autosize\": True, \"height\": 200},\n    bar_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a vertical bar plot Plotly figure\n    \n    Expects a series of values (the bar lengths) and uses the series index\n    to denote the bars on the x axis. Works best if the index consists of\n    strings.\n    \n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    df = pd.DataFrame(\n        {\"values\": value_series, \"x\": value_series.index}, index=value_series.index\n    )\n    fig = px.bar(df, x=\"x\", y=\"values\", **bar_opts)\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series\": DataType.Series},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Vertical Bar Plot\",\n    description=\"Plotting a series of values as vertical bars\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"9f55f116-f22a-c94b-42b4-1f7c184da3bf\",\n    revision_group_id=\"9f55f116-f22a-c94b-42b4-1f7c184da3bf\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.915458+00:00\"\n)\ndef main(*, series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(plotly_bar_plot(series))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "2e11c6e7-2a2f-eca5-0507-954ecb6f3329",
          "name": "series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "9ab59d8b-9927-3664-dc40-ab9924e91e88",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "eb46db4e-aab5-4f93-8330-9423f0a2a34a",
    "revision_group_id": "f8c5e505-bb87-4814-bf77-6ce1698851ff",
    "name": "Moving Window Aggregated Timeseries Plot",
    "description": "Plot a time window based aggregated timeseries and the original timeseries",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-11-24T13:30:23.468744+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving Window Aggregated Timeseries Plot\n\n## Description\nThis component plots a time window based aggregated timeseries, e.g. based on mean or median, and the original timeseries.\n\n## Inputs\n* **original_timeseries** (Pandas Series): Series to perform the moving mean calculation on.\n* **aggregated_timeseries** (Pandas Series): Series to perform the moving mean calculation on.\n* **window_size** (String): Time span of each window. Can be either a pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string.\n* **interval_type** (String): The string must be one of \"left_closed\", \"right_open\", \"right_closed\", \"left_open\", \"closed\", or \"open\". In case a datapoint is on the left or right border of a window, this option determines if it belongs to that window or not, but potentially a neighbouring window.\n* **label_position** (String): The string must be either \"left\", \"center\", or \"right\". This option determines which timestamp is provided to represent the window for the corresponding mean in the output time series.\n* **plotting_mode** (String): The string must be either \"lines\" or \"dots_and_windows\". This option specifies how the data and aggregate timeseries are visualized\n\n## Outputs\n* **plot** (Plotly JSON): The generated Plotly JSON. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe **window_size**, **closed**, and **label_position** parameters should be the same as those used to calculate the **aggregated_timeseries** based on the **original_timeseries**. These may not have been explicitly specified, so it may be necessary to look up the default values for the method used.\n\nIf the **plotting_mode** is set to 'lines' the window mean values as well as the datapoints are displayed as lines or if it is set to 'dots_and_windows' they are displayed by individual markers together with the windows for which the mean values have been calculated. In that case:\n* The **window_size** is indicated by plotting lines of the corresponding horizontal length at the position of each aggregation value.\n* The **interval_type** specifies which sides of the windows are closed, which is indicated by horizontal triangles at the edges of this line, pointing inward.\n* A dot indicates the position of the timestamp along the line corresponding to the aggregation value corresponding to **label_position**. Technically, the line is placed relative to the dot according to this information, which can be important when looking for reasons for unexpected results.\n* A dot indicates the position of the timestamp along the line corresponding to the aggregation value of **label_position**. Technically, the line is placed relative to the point according to this information, which can be important when looking for reasons for unexpected results.\n\nIf NaN values are present in the **aggregated_timeseries**, these will be dropped before plotting.\n\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"original_timeseries\": {\n        \"2022-12-06 23:17:14+00:00\": 14.360453,\n        \"2022-12-06 23:18:14+00:00\": 14.872439,\n        \"2022-12-06 23:19:14+00:00\": 15.803046,\n        \"2022-12-06 23:20:14+00:00\": 13.661063,\n        \"2022-12-06 23:21:14+00:00\": 14.969653,\n        \"2022-12-06 23:22:14+00:00\": 13.530460,\n        \"2022-12-06 23:23:14+00:00\": 14.009814,\n        \"2022-12-06 23:24:14+00:00\": 13.708907,\n        \"2022-12-06 23:25:14+00:00\": 15.119281,\n        \"2022-12-06 23:26:14+00:00\": 15.666053,\n        \"2022-12-06 23:27:14+00:00\": 15.488811,\n        \"2022-12-06 23:28:14+00:00\": 15.515572,\n        \"2022-12-06 23:29:14+00:00\": 14.767891,\n        \"2022-12-06 23:30:14+00:00\": 13.726783,\n        \"2022-12-06 23:31:14+00:00\": 14.997352,\n        \"2022-12-06 23:32:14+00:00\": 13.015161,\n        \"2022-12-06 23:33:14+00:00\": 15.079884,\n        \"2022-12-06 23:34:14+00:00\": 15.001638,\n        \"2022-12-06 23:35:14+00:00\": 16.035476,\n        \"2022-12-06 23:36:14+00:00\": 14.545874,\n        \"2022-12-06 23:37:14+00:00\": 13.970260,\n        \"2022-12-06 23:38:14+00:00\": 15.045999,\n        \"2022-12-06 23:39:14+00:00\": 13.824304,\n        \"2022-12-06 23:40:14+00:00\": 13.620449,\n        \"2022-12-06 23:41:14+00:00\": 15.146005,\n        \"2022-12-06 23:42:14+00:00\": 14.796941,\n        \"2022-12-06 23:43:14+00:00\": 17.036046,\n        \"2022-12-06 23:44:14+00:00\": 14.976151,\n        \"2022-12-06 23:45:14+00:00\": 14.637615,\n        \"2022-12-06 23:46:14+00:00\": 15.195011,\n        \"2022-12-06 23:47:14+00:00\": 14.082022,\n        \"2022-12-06 23:48:14+00:00\": 15.311653,\n        \"2022-12-06 23:49:14+00:00\": 15.534084,\n        \"2022-12-06 23:50:14+00:00\": 15.020099,\n        \"2022-12-06 23:51:14+00:00\": 14.020416,\n        \"2022-12-06 23:52:14+00:00\": 13.779699,\n        \"2022-12-06 23:53:14+00:00\": 14.407253,\n        \"2022-12-06 23:54:14+00:00\": 15.180839,\n        \"2022-12-06 23:55:14+00:00\": 14.618573,\n        \"2022-12-06 23:56:14+00:00\": 14.194774,\n        \"2022-12-06 23:57:14+00:00\": 14.653221,\n        \"2022-12-06 23:58:14+00:00\": 14.911146,\n        \"2022-12-06 23:59:14+00:00\": 14.951289,\n        \"2022-12-07 00:00:14+00:00\": 15.005731,\n        \"2022-12-07 00:01:14+00:00\": 15.708401,\n        \"2022-12-07 00:02:14+00:00\": 13.605439,\n        \"2022-12-07 00:03:14+00:00\": 14.620927,\n        \"2022-12-07 00:04:14+00:00\": 15.181250,\n        \"2022-12-07 00:05:14+00:00\": 13.912724,\n        \"2022-12-07 00:06:14+00:00\": 14.060204\n    },\n    aggregated_timeseries\": {\n        \"2022-12-06T23:22:30.000Z\":14.5261166667,\n        \"2022-12-06T23:37:30.000Z\":15.3292983333,\n        \"2022-12-06T23:52:30.000Z\":13.96039,\n        \"2022-12-07T00:07:30.000Z\":14.91716,\n        \"2022-12-07T00:22:30.000Z\":14.2458843333,\n        \"2022-12-07T00:37:30.000Z\":15.0975393333,\n        \"2022-12-07T00:52:30.000Z\":14.9696723333,\n        \"2022-12-07T01:07:30.000Z\":14.636221,\n        \"2022-12-07T01:22:30.000Z\":13.2423086667,\n        \"2022-12-07T01:37:30.000Z\":14.0745546667,\n        \"2022-12-07T01:52:30.000Z\":14.487968,\n        \"2022-12-07T02:07:30.000Z\":15.2930623333,\n        \"2022-12-07T02:22:30.000Z\":14.722309,\n        \"2022-12-07T02:37:30.000Z\":14.6024093333,\n        \"2022-12-07T02:52:30.000Z\":14.740198,\n        \"2022-12-07T03:07:30.000Z\":13.832052,\n        \"2022-12-07T03:22:30.000Z\":14.4311765\n    },\n    \"window_size\": \"15min\",\n    \"interval_type\": \"left_closed\",\n    \"label_position\": \"center\",\n    \"plotting_mode\": \"dots_and_windows\"\n}\n```",
    "content": "from typing import Literal\n\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom pandas.tseries.frequencies import to_offset\n\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\ndef freqstr2timedelta(freqstr: str) -> pd.Timedelta:\n    \"\"\"Transform frequency string to Pandas Timedelta.\"\"\"\n    try:\n        return pd.to_timedelta(freqstr)\n    except ValueError:\n        return pd.to_timedelta(to_offset(freqstr))\n\n\npio.templates.default = None\n\n\ndef timeseries_and_aggregate_plot(\n    original_timeseries: pd.Series,\n    aggregated_timeseries: pd.Series,\n    window_size: pd.Timedelta,\n    interval_type: Literal[\"left_closed\", \"right_open\", \"right_closed\", \"left_open\", \"closed\", \"open\"],\n    label_position: str,\n    plotting_mode: Literal[\"lines\", \"dots_and_windows\"] = \"dots_and_windows\",\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n) -> go.Figure:\n    fig = go.Figure()\n\n    marker_size = 6\n    data_color = \"gray\"\n    aggr_color = \"mediumvioletred\"\n    line_width = 2\n\n    aggregated_timeseries_for_plotting = aggregated_timeseries.dropna()\n    \n    # Add markers for data timeseries.\n    fig.add_trace(\n        go.Scatter(\n            x=original_timeseries.index,\n            y=original_timeseries.values,\n            **{\"mode\": \"markers\", \"marker\": dict(color=data_color)}\n            if plotting_mode == \"dots_and_windows\"\n            else {\"mode\": \"lines\", \"line_color\": data_color},\n            name=\"original timeseries\",\n        ),\n    )\n\n    # Add markers for the aggregate timeseries.\n    fig.add_trace(\n        go.Scatter(\n            x=aggregated_timeseries_for_plotting.index,\n            y=aggregated_timeseries_for_plotting.values,\n            **{\"mode\": \"markers\", \"marker\": dict(size=marker_size, color=aggr_color)}\n            if plotting_mode == \"dots_and_windows\"\n            else {\"mode\": \"lines\", \"line_color\": aggr_color},\n            name=\"aggregated timeseries\",\n        ),\n    )\n\n    if plotting_mode == \"dots_and_windows\":\n        # Determine start and end point positions relative to the label positions.\n        x0_offset = pd.Timedelta(0)\n        x1_offset = pd.Timedelta(0)\n        if label_position == \"left\":\n            x1_offset = window_size\n        elif label_position == \"right\":\n            x0_offset = window_size\n        else:  # label_position == \"center\"\n            x0_offset = window_size / 2\n            x1_offset = window_size / 2\n\n        # Add markers to show if the left side of the window is closed\n        if interval_type in [\"left_closed\", \"right_open\", \"closed\"]:\n            fig.add_trace(\n                go.Scatter(\n                    x=aggregated_timeseries_for_plotting.index - x0_offset,\n                    y=aggregated_timeseries_for_plotting.values,\n                    mode=\"markers\",\n                    marker=dict(\n                        size=marker_size + 2,\n                        color=aggr_color,\n                        symbol=8,\n                    ),\n                    name=\"left closed\",\n                ),\n            )\n\n        # Add markers to show if the right side of the window is closed\n        if interval_type in [\"right_closed\", \"left_open\", \"closed\"]:\n            fig.add_trace(\n                go.Scatter(\n                    x=aggregated_timeseries_for_plotting.index + x1_offset,\n                    y=aggregated_timeseries_for_plotting.values,\n                    mode=\"markers\",\n                    marker=dict(\n                        size=marker_size + 2,\n                        color=aggr_color,\n                        symbol=7,\n                    ),\n                    name=\"right closed\",\n                ),\n            )\n\n        # Add lines for each window indicating the window size\n        for index, value in aggregated_timeseries_for_plotting.items():\n            fig.add_shape(\n                type=\"line\",\n                x0=index - x0_offset,\n                x1=index + x1_offset,\n                y0=value,\n                y1=value,\n                line=dict(color=aggr_color, width=line_width),\n                name=\"window size\",\n            )\n\n    # Set the layout.\n    fig.update_layout(**layout_opts)\n\n    # Set margins.\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# # ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"original_timeseries\": \"SERIES\",\n        \"aggregated_timeseries\": \"SERIES\",\n        \"window_size\": \"STRING\",\n        \"interval_type\": \"STRING\",\n        \"label_position\": \"STRING\",\n        \"plotting_mode\": \"STRING\",\n    },\n    \"outputs\": {\n        \"plot\": \"PLOTLYJSON\",\n    },\n    \"name\": \"Moving Window Aggregated Timeseries Plot\",\n    \"category\": \"Visualization\",\n    \"description\": \"Plot a time window based aggregated timeseries and the original timeseries\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"eb46db4e-aab5-4f93-8330-9423f0a2a34a\",\n    \"revision_group_id\": \"f8c5e505-bb87-4814-bf77-6ce1698851ff\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-11-24T13:30:23.468744+00:00\",\n}\n\n\ndef main(*, original_timeseries, aggregated_timeseries, window_size, interval_type, label_position, plotting_mode):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(\n            timeseries_and_aggregate_plot(\n                original_timeseries=original_timeseries,\n                aggregated_timeseries=aggregated_timeseries,\n                window_size=freqstr2timedelta(window_size),\n                interval_type=interval_type,\n                label_position=label_position,\n                plotting_mode=plotting_mode,\n            )\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "0f92fa34-ee3d-4e3c-927d-4f82a9bb7afd",
          "name": "original_timeseries",
          "data_type": "SERIES"
        },
        {
          "id": "6c8f83ee-3c55-45be-b893-72c0301ee355",
          "name": "aggregated_timeseries",
          "data_type": "SERIES"
        },
        {
          "id": "93d14beb-1ec6-4c16-9954-797cc91ec152",
          "name": "window_size",
          "data_type": "STRING"
        },
        {
          "id": "a306bb25-1271-4d8c-b3d5-9f4db23807d9",
          "name": "interval_type",
          "data_type": "STRING"
        },
        {
          "id": "629d3bfb-3e54-49d6-ba48-7959a5482139",
          "name": "label_position",
          "data_type": "STRING"
        },
        {
          "id": "6276625e-33a2-4e01-8b55-0c452e5c46ac",
          "name": "plotting_mode",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "5c3b2c95-872a-4d08-91ff-a847532af488",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "original_timeseries",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2022-12-06 23:17:14+00:00\": 14.360248,\n    \"2022-12-06 23:22:14+00:00\": 14.473486,\n    \"2022-12-06 23:27:14+00:00\": 14.744616,\n    \"2022-12-06 23:32:14+00:00\": 15.729985,\n    \"2022-12-06 23:37:14+00:00\": 14.945974,\n    \"2022-12-06 23:42:14+00:00\": 15.311936,\n    \"2022-12-06 23:47:14+00:00\": 13.721003,\n    \"2022-12-06 23:52:14+00:00\": 14.616136,\n    \"2022-12-06 23:57:14+00:00\": 13.544031,\n    \"2022-12-07 00:02:14+00:00\": 14.823713,\n    \"2022-12-07 00:07:14+00:00\": 15.258110,\n    \"2022-12-07 00:12:14+00:00\": 14.669657,\n    \"2022-12-07 00:17:14+00:00\": 13.963869,\n    \"2022-12-07 00:22:14+00:00\": 14.962489,\n    \"2022-12-07 00:27:14+00:00\": 13.811295,\n    \"2022-12-07 00:32:14+00:00\": 14.672031,\n    \"2022-12-07 00:37:14+00:00\": 15.038961,\n    \"2022-12-07 00:42:14+00:00\": 15.581626,\n    \"2022-12-07 00:47:14+00:00\": 15.183799,\n    \"2022-12-07 00:52:14+00:00\": 14.859828,\n    \"2022-12-07 00:57:14+00:00\": 14.865390,\n    \"2022-12-07 01:02:14+00:00\": 14.221285,\n    \"2022-12-07 01:07:14+00:00\": 14.225866,\n    \"2022-12-07 01:12:14+00:00\": 15.461512,\n    \"2022-12-07 01:17:14+00:00\": 12.252256,\n    \"2022-12-07 01:22:14+00:00\": 13.686977,\n    \"2022-12-07 01:27:14+00:00\": 13.787693,\n    \"2022-12-07 01:32:14+00:00\": 14.528163,\n    \"2022-12-07 01:37:14+00:00\": 14.218455,\n    \"2022-12-07 01:42:14+00:00\": 13.477046,\n    \"2022-12-07 01:47:14+00:00\": 13.925391,\n    \"2022-12-07 01:52:14+00:00\": 14.947494,\n    \"2022-12-07 01:57:14+00:00\": 14.591019,\n    \"2022-12-07 02:02:14+00:00\": 15.930415,\n    \"2022-12-07 02:07:14+00:00\": 15.072922,\n    \"2022-12-07 02:12:14+00:00\": 14.875850,\n    \"2022-12-07 02:17:14+00:00\": 15.044753,\n    \"2022-12-07 02:22:14+00:00\": 15.525060,\n    \"2022-12-07 02:27:14+00:00\": 13.597114,\n    \"2022-12-07 02:32:14+00:00\": 14.499883,\n    \"2022-12-07 02:37:14+00:00\": 14.095923,\n    \"2022-12-07 02:42:14+00:00\": 15.211422,\n    \"2022-12-07 02:47:14+00:00\": 14.847283,\n    \"2022-12-07 02:52:14+00:00\": 15.036699,\n    \"2022-12-07 02:57:14+00:00\": 14.336612,\n    \"2022-12-07 03:02:14+00:00\": 14.517888,\n    \"2022-12-07 03:07:14+00:00\": 13.787849,\n    \"2022-12-07 03:12:14+00:00\": 13.190419,\n    \"2022-12-07 03:17:14+00:00\": 15.435615,\n    \"2022-12-07 03:22:14+00:00\": 13.426738\n}"
          }
        },
        {
          "workflow_input_name": "aggregated_timeseries",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2022-12-06T23:22:30.000Z\": 14.5261166667,\n    \"2022-12-06T23:37:30.000Z\": 15.3292983333,\n    \"2022-12-06T23:52:30.000Z\": 13.96039,\n    \"2022-12-07T00:07:30.000Z\": 14.91716,\n    \"2022-12-07T00:22:30.000Z\": 14.2458843333,\n    \"2022-12-07T00:37:30.000Z\": 15.0975393333,\n    \"2022-12-07T00:52:30.000Z\": 14.9696723333,\n    \"2022-12-07T01:07:30.000Z\": 14.636221,\n    \"2022-12-07T01:22:30.000Z\": 13.2423086667,\n    \"2022-12-07T01:37:30.000Z\": 14.0745546667,\n    \"2022-12-07T01:52:30.000Z\": 14.487968,\n    \"2022-12-07T02:07:30.000Z\": 15.2930623333,\n    \"2022-12-07T02:22:30.000Z\": 14.722309,\n    \"2022-12-07T02:37:30.000Z\": 14.6024093333,\n    \"2022-12-07T02:52:30.000Z\": 14.740198,\n    \"2022-12-07T03:07:30.000Z\": 13.832052,\n    \"2022-12-07T03:22:30.000Z\": 14.4311765\n}"
          }
        },
        {
          "workflow_input_name": "window_size",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "15min"
          }
        },
        {
          "workflow_input_name": "interval_type",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "left_closed"
          }
        },
        {
          "workflow_input_name": "label_position",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "center"
          }
        },
        {
          "workflow_input_name": "plotting_mode",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "dots_and_windows"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "4e5115a2-2a45-4156-6f54-ff66c176daea",
    "revision_group_id": "4e5115a2-2a45-4156-6f54-ff66c176daea",
    "name": "Timeseries Plot with multiple movable X and Y Axes",
    "description": "Plots timeseries data with movable and resizable own y and x axes for every timeseries",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.343634+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "As input this component expects a dataframe of the shape\n```\n{\n    \"value\": [\n        1.0,\n        1.2,\n        0.5,\n        1.9,\n        1.3,\n        0.2,\n        1.5,\n        1.7,\n        0.1\n    ],\n    \"metric\": [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"a\",\n        \"b\",\n        \"c\",\n        \"a\",\n        \"b\",\n        \"c\"\n    ],\n    \"timestamp\": [\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\"\n    ]\n}\n```\n\n, i.e. it contains multiple timeseries distinguished by an identifier in a \"metric\" column.\n",
    "content": "\n\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef compute_plot_positions(\n    num_x_axes,\n    num_y_axes,\n    horizontal_relative_space_per_y_axis=0.06,\n    vertical_relative_space_per_x_axis=0.16,\n    y_axes_side=\"left\",\n    x_axes_side=\"bottom\",\n):\n    \"\"\"\n    returns tuple plot_area_x_ratio, y_positions\n\n    First assumes that a y axis horizontally fits into 5% of the total figure width\n    and tries to reserve enough horizontal space to match that exactly up to a limit\n    of reserving half the available width.\n\n    If that is not possible it reserves exactly 0.5 times the total width and\n    uniformly arranges the y axis positions (now having less than 5% horizontal space\n    and therefore maybe overlapping)\n\n    horizontal_relative_space_per_y_axis:\n        a value 0f 0.07 for is quite okay for half of a HD screen.\n        its too much for a full hd screen but still acceptable\n    \"\"\"\n\n    hor_ratio = horizontal_relative_space_per_y_axis\n\n    if num_y_axes * hor_ratio < 0.5:\n        x_positions = [\n            1 - x * hor_ratio - hor_ratio * (y_axes_side == \"right\")\n            for x in range(num_y_axes)\n        ]\n        plot_area_x_ratio = 1 - num_y_axes * hor_ratio\n\n    else:\n        plot_area_x_ratio = 0.5\n        x_positions = [1 - x * 0.5 / num_y_axes for x in range(num_y_axes)]\n\n    ver_ratio = vertical_relative_space_per_x_axis\n\n    if num_x_axes * ver_ratio < 0.5:\n        y_positions = [\n            1 - y * ver_ratio - ver_ratio * (x_axes_side == \"bottom\")\n            for y in range(num_x_axes)\n        ]\n        plot_area_y_ratio = 1 - num_x_axes * ver_ratio\n\n    else:\n        plot_area_y_ratio = 0.5\n        y_positions = [1 - y * 0.5 / num_x_axes for y in range(num_x_axes)]\n\n    return plot_area_y_ratio, y_positions, plot_area_x_ratio, x_positions\n\n\ndef multi_series_with_multi_yaxis(df, value_col, group_col):\n    \"\"\"One y_axis for each group of the input dataframe\"\"\"\n\n    plotly_data = []\n    plotly_layout = plotly.graph_objs.Layout()\n\n    colors = px.colors.qualitative.Plotly\n\n    groups = df[group_col].unique().tolist()\n\n    y_sep_ratio, y_positions, x_sep_ratio, x_positions = compute_plot_positions(\n        len(groups), len(groups), y_axes_side=\"right\", x_axes_side=\"bottom\"\n    )\n\n    print(y_sep_ratio, y_positions, x_sep_ratio, x_positions)\n\n    # your layout goes here\n    layout_kwargs = {\n        # \"title\": \"y-axes in loop\",\n        # \"xaxis\": {\"domain\": [0, x_sep_ratio]},\n        # \"height\": 200,\n    }\n\n    for i, col in enumerate(groups):\n        # we define our layout keys by string concatenation\n        # * (i > 0) is just to get rid of the if i > 0 statement\n        yaxis_name = \"yaxis\" + str(i + 1) * (i > 0)\n        xaxis_name = \"xaxis\" + str(i + 1) * (i > 0)\n        yaxis = \"y\" + str(i + 1) * (i > 0)\n        xaxis = \"x\" + str(i + 1) * (i > 0)\n\n        group_df = df[df[group_col] == col].sort_values(\"timestamp\")\n\n        value_series = group_df[value_col]\n        if \"timestamp\" in df.columns:\n            timestamps = group_df[\"timestamp\"]\n        else:\n            timestamps = value_series.index\n        # raise ValueError(value_series)\n\n        plotly_data.append(\n            plotly.graph_objs.Scatter(\n                x=timestamps,\n                y=value_series,\n                name=col,\n                opacity=0.8,\n                line=dict(\n                    color=colors[i % len(colors)]\n                    # , width=4, dash=\"dash\"\n                ),\n            )\n        )\n\n        layout_kwargs[yaxis_name] = {  #'range': [0, i + 0.1],\n            \"position\": x_positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"right\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True,\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n            \"domain\": [1.0 - y_sep_ratio, 1.0],\n        }\n\n        layout_kwargs[xaxis_name] = {  #'range': [0, i + 0.1],\n            \"position\": 1 - y_positions[i],\n            # \"automargin\":True,\n            # \"anchor\":\"free\",\n            \"side\": \"bottom\",  # which side of the anchor\n            # \"title\": col,\n            # \"titlefont\": dict(color=colors[i % len(colors)], size=12),\n            \"tickfont\": dict(color=colors[i % len(colors)], size=12),\n            # \"title_standoff\":0.0,\n            \"showline\": True,  # axis line\n            \"linecolor\": colors[i % len(colors)],  # axis line color\n            \"showgrid\": True,\n            # \"gridcolor\": colors[i % len(colors)] # color of gridlines for this axis\n            \"domain\": [0, x_sep_ratio],\n        }\n\n        plotly_data[i][\"yaxis\"] = yaxis\n        plotly_data[i][\"xaxis\"] = xaxis\n        if i > 0:\n            layout_kwargs[yaxis_name][\"overlaying\"] = \"y\"\n            layout_kwargs[xaxis_name][\"overlaying\"] = \"x\"\n\n    fig = plotly.graph_objs.Figure(\n        data=plotly_data, layout=plotly.graph_objs.Layout(**layout_kwargs)\n    )\n    fig.update_layout(margin=dict(l=10, r=10, b=10, t=30, pad=0))\n    fig.update_layout(\n        autosize=True,\n        showlegend=False,\n        hovermode=\"closest\",\n    )\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Timeseries Plot with multiple movable X and Y Axes\",\n    description=\"Plots timeseries data with movable and resizable own y and x axes for every timeseries\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"4e5115a2-2a45-4156-6f54-ff66c176daea\",\n    revision_group_id=\"4e5115a2-2a45-4156-6f54-ff66c176daea\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.343634+00:00\"\n)\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"plot\": plotly_fig_to_json_dict(\n            multi_series_with_multi_yaxis(dataframe, \"value\", \"metric\")\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "7ca708c9-3cff-a55d-9a92-6ffa6e79cf91",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "45389948-b720-eb24-638d-af77b6ffeab6",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
    "revision_group_id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
    "name": "Single Timeseries Plot",
    "description": "Plotting a single timeseries",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.537411+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Single Timeseries Plot\n\n## Description\nPlotting a single timeseries with Plotly.\n\n## Inputs\n* **series** (Pandas Series): Entries must be numeric and Index should be a DateTime Index. \n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots the incoming **series** using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"series\": {\n    \"2019-10-01T15:00:00.000Z\": 8.6464,\n    \"2019-10-01T16:00:00.000Z\": 8.6377,\n    \"2019-10-01T17:00:00.000Z\": 8.6348,\n    \"2019-10-01T18:00:00.000Z\": 8.6291,\n    \"2019-10-01T19:00:00.000Z\": 8.6291,\n    \"2019-10-01T20:00:00.000Z\": 8.6291,\n    \"2019-10-01T21:00:00.000Z\": 8.6233,\n    \"2019-10-01T22:00:00.000Z\": 8.6233,\n    \"2019-10-01T23:00:00.000Z\": 8.6175,\n    \"2019-10-02T01:00:00.000Z\": 8.6175,\n    \"2019-10-02T02:00:00.000Z\": 8.6175,\n    \"2019-10-02T03:00:00.000Z\": 8.6175,\n    \"2019-10-02T04:00:00.000Z\": 8.6117,\n    \"2019-10-02T05:00:00.000Z\": 8.6117,\n    \"2019-10-02T06:00:00.000Z\": 8.6001,\n    \"2019-10-02T07:00:00.000Z\": 8.5943,\n    \"2019-10-02T08:00:00.000Z\": 8.5856,\n    \"2019-10-02T09:00:00.000Z\": 8.577,\n    \"2019-10-02T10:00:00.000Z\": 8.6175,\n    \"2019-10-02T11:00:00.000Z\": 8.5741,\n    \"2019-10-02T12:00:00.000Z\": 8.5654,\n    \"2019-10-02T13:00:00.000Z\": 8.5625,\n    \"2019-10-02T14:00:00.000Z\": 8.5509,\n    \"2019-10-02T15:00:00.000Z\": 8.5422,\n    \"2019-10-02T16:00:00.000Z\": 8.5596,\n    \"2019-10-02T17:00:00.000Z\": 8.5856,\n    \"2019-10-02T18:00:00.000Z\": 8.5885,\n    \"2019-10-02T19:00:00.000Z\": 8.5914,\n    \"2019-10-02T20:00:00.000Z\": 8.5885,\n    \"2019-10-02T21:00:00.000Z\": 8.5856,\n    \"2019-10-02T22:00:00.000Z\": 8.5856,\n    \"2019-10-02T23:00:00.000Z\": 8.577,\n    \"2019-10-03T01:00:00.000Z\": 8.5712,\n    \"2019-10-03T02:00:00.000Z\": 8.5683,\n    \"2019-10-03T03:00:00.000Z\": 8.5596,\n    \"2019-10-03T04:00:00.000Z\": 8.5509,\n    \"2019-10-03T05:00:00.000Z\": 8.5538,\n    \"2019-10-03T06:00:00.000Z\": 8.548,\n    \"2019-10-03T07:00:00.000Z\": 8.5422,\n    \"2019-10-03T08:00:00.000Z\": 8.5365,\n    \"2019-10-03T09:00:00.000Z\": 8.5307,\n    \"2019-10-03T10:00:00.000Z\": 8.5278,\n    \"2019-10-03T11:00:00.000Z\": 8.5307,\n    \"2019-10-03T12:00:00.000Z\": 8.5365,\n    \"2019-10-03T13:00:00.000Z\": 8.5307,\n    \"2019-10-03T14:00:00.000Z\": 8.5307,\n    \"2019-10-03T15:00:00.000Z\": 8.5307,\n    \"2019-10-03T16:00:00.000Z\": 8.5278,\n    \"2019-10-03T17:00:00.000Z\": 8.5249,\n    \"2019-10-03T18:00:00.000Z\": 8.5249,\n    \"2019-10-03T19:00:00.000Z\": 8.5191,\n    \"2019-10-03T20:00:00.000Z\": 8.5191,\n    \"2019-10-03T21:00:00.000Z\": 8.5191,\n    \"2019-10-03T22:00:00.000Z\": 8.5191,\n    \"2019-10-03T23:00:00.000Z\": 8.5104,\n    \"2019-10-04T01:00:00.000Z\": 8.5104,\n    \"2019-10-04T02:00:00.000Z\": 8.5104,\n    \"2019-10-04T03:00:00.000Z\": 8.5046,\n    \"2019-10-04T04:00:00.000Z\": 8.4988,\n    \"2019-10-04T05:00:00.000Z\": 8.4988,\n    \"2019-10-04T06:00:00.000Z\": 8.4931,\n    \"2019-10-04T07:00:00.000Z\": 8.4844,\n    \"2019-10-04T08:00:00.000Z\": 8.4902,\n    \"2019-10-04T09:00:00.000Z\": 8.4468,\n    \"2019-10-04T10:00:00.000Z\": 8.4728,\n    \"2019-10-04T11:00:00.000Z\": 8.4815,\n    \"2019-10-04T12:00:00.000Z\": 8.4612,\n    \"2019-10-04T13:00:00.000Z\": 8.5075,\n    \"2019-10-04T14:00:00.000Z\": 8.4815,\n    \"2019-10-04T15:00:00.000Z\": 8.4902,\n    \"2019-10-04T16:00:00.000Z\": 8.548,\n    \"2019-10-04T17:00:00.000Z\": 8.5422,\n    \"2019-10-04T18:00:00.000Z\": 8.5509,\n    \"2019-10-04T19:00:00.000Z\": 8.5509,\n    \"2019-10-04T20:00:00.000Z\": 8.5509,\n    \"2019-10-04T21:00:00.000Z\": 8.5567,\n    \"2019-10-04T22:00:00.000Z\": 8.5307,\n    \"2019-10-04T23:00:00.000Z\": 8.5596,\n    \"2019-10-05T01:00:00.000Z\": 8.5712,\n    \"2019-10-05T02:00:00.000Z\": 8.5741,\n    \"2019-10-05T03:00:00.000Z\": 8.5712,\n    \"2019-10-05T04:00:00.000Z\": 8.5596,\n    \"2019-10-05T05:00:00.000Z\": 8.5654,\n    \"2019-10-05T06:00:00.000Z\": 8.5654,\n    \"2019-10-05T07:00:00.000Z\": 8.5654,\n    \"2019-10-05T08:00:00.000Z\": 8.5625,\n    \"2019-10-05T09:00:00.000Z\": 8.5625,\n    \"2019-10-05T10:00:00.000Z\": 8.548,\n    \"2019-10-05T11:00:00.000Z\": 8.5596,\n    \"2019-10-05T12:00:00.000Z\": 8.5596,\n    \"2019-10-05T13:00:00.000Z\": 8.5394,\n    \"2019-10-05T14:00:00.000Z\": 8.548,\n    \"2019-10-05T15:00:00.000Z\": 8.5538,\n    \"2019-10-05T16:00:00.000Z\": 8.5596,\n    \"2019-10-05T17:00:00.000Z\": 8.5596,\n    \"2019-10-05T18:00:00.000Z\": 8.5538,\n    \"2019-10-05T19:00:00.000Z\": 8.5596,\n    \"2019-10-05T20:00:00.000Z\": 8.5451,\n    \"2019-10-05T21:00:00.000Z\": 8.5394,\n    \"2019-10-05T22:00:00.000Z\": 8.5336,\n    \"2019-10-05T23:00:00.000Z\": 8.522,\n    \"2019-10-06T01:00:00.000Z\": 8.522,\n    \"2019-10-06T02:00:00.000Z\": 8.5104,\n    \"2019-10-06T03:00:00.000Z\": 8.5046,\n    \"2019-10-06T04:00:00.000Z\": 8.4988,\n    \"2019-10-06T05:00:00.000Z\": 8.5017,\n    \"2019-10-06T06:00:00.000Z\": 8.4844,\n    \"2019-10-06T07:00:00.000Z\": 8.4699,\n    \"2019-10-06T08:00:00.000Z\": 8.4641,\n    \"2019-10-06T09:00:00.000Z\": 8.4583,\n    \"2019-10-06T10:00:00.000Z\": 8.4525,\n    \"2019-10-06T11:00:00.000Z\": 8.4381,\n    \"2019-10-06T12:00:00.000Z\": 8.4294,\n    \"2019-10-06T13:00:00.000Z\": 8.4265,\n    \"2019-10-06T14:00:00.000Z\": 8.4178,\n    \"2019-10-06T15:00:00.000Z\": 8.4149,\n    \"2019-10-06T16:00:00.000Z\": 8.412,\n    \"2019-10-06T17:00:00.000Z\": 8.412,\n    \"2019-10-06T18:00:00.000Z\": 8.4091,\n    \"2019-10-06T19:00:00.000Z\": 8.4063,\n    \"2019-10-06T20:00:00.000Z\": 8.412,\n    \"2019-10-06T21:00:00.000Z\": 8.3889,\n    \"2019-10-06T22:00:00.000Z\": 8.4063,\n    \"2019-10-06T23:00:00.000Z\": 8.4063,\n    \"2019-10-07T01:00:00.000Z\": 8.4005,\n    \"2019-10-07T02:00:00.000Z\": 8.3976,\n    \"2019-10-07T03:00:00.000Z\": 8.3918,\n    \"2019-10-07T04:00:00.000Z\": 8.3889,\n    \"2019-10-07T05:00:00.000Z\": 8.386,\n    \"2019-10-07T06:00:00.000Z\": 8.3802,\n    \"2019-10-07T07:00:00.000Z\": 8.3628,\n    \"2019-10-07T08:00:00.000Z\": 8.3715,\n    \"2019-10-07T09:00:00.000Z\": 8.3657,\n    \"2019-10-07T10:00:00.000Z\": 8.36,\n    \"2019-10-07T11:00:00.000Z\": 8.3542,\n    \"2019-10-07T12:00:00.000Z\": 8.3455,\n    \"2019-10-07T13:00:00.000Z\": 8.36,\n    \"2019-10-07T14:00:00.000Z\": 8.3513,\n    \"2019-10-07T15:00:00.000Z\": 8.36,\n    \"2019-10-07T16:00:00.000Z\": 8.3571,\n    \"2019-10-07T17:00:00.000Z\": 8.36,\n    \"2019-10-07T18:00:00.000Z\": 8.3628,\n    \"2019-10-07T19:00:00.000Z\": 8.36,\n    \"2019-10-07T20:00:00.000Z\": 8.3657,\n    \"2019-10-07T21:00:00.000Z\": 8.3571,\n    \"2019-10-07T22:00:00.000Z\": 8.3657,\n    \"2019-10-07T23:00:00.000Z\": 8.3744,\n    \"2019-10-08T01:00:00.000Z\": 8.3773,\n    \"2019-10-08T02:00:00.000Z\": 8.3744,\n    \"2019-10-08T03:00:00.000Z\": 8.3744,\n    \"2019-10-08T04:00:00.000Z\": 8.3744,\n    \"2019-10-08T05:00:00.000Z\": 8.3773,\n    \"2019-10-08T06:00:00.000Z\": 8.3773,\n    \"2019-10-08T07:00:00.000Z\": 8.3802,\n    \"2019-10-08T08:00:00.000Z\": 8.3773,\n    \"2019-10-08T09:00:00.000Z\": 8.36,\n    \"2019-10-08T10:00:00.000Z\": 8.3628,\n    \"2019-10-08T11:00:00.000Z\": 8.4034,\n    \"2019-10-08T12:00:00.000Z\": 8.3744,\n    \"2019-10-08T13:00:00.000Z\": 8.4005,\n    \"2019-10-08T14:00:00.000Z\": 8.4294,\n    \"2019-10-08T15:00:00.000Z\": 8.3802,\n    \"2019-10-08T16:00:00.000Z\": 8.4294,\n    \"2019-10-08T17:00:00.000Z\": 8.4699,\n    \"2019-10-08T18:00:00.000Z\": 8.4902,\n    \"2019-10-08T19:00:00.000Z\": 8.4931,\n    \"2019-10-08T20:00:00.000Z\": 8.4902,\n    \"2019-10-08T21:00:00.000Z\": 8.4902,\n    \"2019-10-08T22:00:00.000Z\": 8.4873,\n    \"2019-10-08T23:00:00.000Z\": 8.4902,\n    \"2019-10-09T01:00:00.000Z\": 8.4873,\n    \"2019-10-09T02:00:00.000Z\": 8.4902,\n    \"2019-10-09T03:00:00.000Z\": 8.4902,\n    \"2019-10-09T04:00:00.000Z\": 8.4902,\n    \"2019-10-09T05:00:00.000Z\": 8.4902,\n    \"2019-10-09T06:00:00.000Z\": 8.4902,\n    \"2019-10-09T07:00:00.000Z\": 8.4902,\n    \"2019-10-09T08:00:00.000Z\": 8.4873,\n    \"2019-10-09T09:00:00.000Z\": 8.4873,\n    \"2019-10-09T10:00:00.000Z\": 8.522,\n    \"2019-10-09T11:00:00.000Z\": 8.5422,\n    \"2019-10-09T12:00:00.000Z\": 8.5509,\n    \"2019-10-09T13:00:00.000Z\": 8.5885,\n    \"2019-10-09T14:00:00.000Z\": 8.6088,\n    \"2019-10-09T15:00:00.000Z\": 8.6233,\n    \"2019-10-09T16:00:00.000Z\": 8.6319,\n    \"2019-10-09T17:00:00.000Z\": 8.6291,\n    \"2019-10-09T18:00:00.000Z\": 8.6464,\n    \"2019-10-09T19:00:00.000Z\": 8.6522,\n    \"2019-10-09T20:00:00.000Z\": 8.6522,\n    \"2019-10-09T21:00:00.000Z\": 8.6551,\n    \"2019-10-09T22:00:00.000Z\": 8.658,\n    \"2019-10-09T23:00:00.000Z\": 8.6638,\n    \"2019-10-10T01:00:00.000Z\": 8.6522,\n    \"2019-10-10T02:00:00.000Z\": 8.6725,\n    \"2019-10-10T03:00:00.000Z\": 8.6753,\n    \"2019-10-10T04:00:00.000Z\": 8.6609,\n    \"2019-10-10T05:00:00.000Z\": 8.6146,\n    \"2019-10-10T06:00:00.000Z\": 8.6522,\n    \"2019-10-10T07:00:00.000Z\": 8.6696,\n    \"2019-10-10T08:00:00.000Z\": 8.6725,\n    \"2019-10-10T09:00:00.000Z\": 8.6725,\n    \"2019-10-10T10:00:00.000Z\": 8.6811,\n    \"2019-10-10T11:00:00.000Z\": 8.684,\n    \"2019-10-10T12:00:00.000Z\": 8.684,\n    \"2019-10-10T13:00:00.000Z\": 8.6782,\n    \"2019-10-10T14:00:00.000Z\": 8.6609,\n    \"2019-10-10T15:00:00.000Z\": 8.6609,\n    \"2019-10-10T16:00:00.000Z\": 8.6059,\n    \"2019-10-10T17:00:00.000Z\": 8.6117,\n    \"2019-10-10T18:00:00.000Z\": 8.6175,\n    \"2019-10-10T19:00:00.000Z\": 8.6638,\n    \"2019-10-10T20:00:00.000Z\": 8.6667,\n    \"2019-10-10T21:00:00.000Z\": 8.6725,\n    \"2019-10-10T22:00:00.000Z\": 8.6753,\n    \"2019-10-10T23:00:00.000Z\": 8.6811,\n    \"2019-10-11T01:00:00.000Z\": 8.6782,\n    \"2019-10-11T02:00:00.000Z\": 8.684,\n    \"2019-10-11T03:00:00.000Z\": 8.6811,\n    \"2019-10-11T04:00:00.000Z\": 8.6782,\n    \"2019-10-11T05:00:00.000Z\": 8.6725,\n    \"2019-10-11T06:00:00.000Z\": 8.6262,\n    \"2019-10-11T07:00:00.000Z\": 8.6667,\n    \"2019-10-11T08:00:00.000Z\": 8.6667,\n    \"2019-10-11T09:00:00.000Z\": 8.6725,\n    \"2019-10-11T10:00:00.000Z\": 8.6725,\n    \"2019-10-11T11:00:00.000Z\": 8.6725,\n    \"2019-10-11T12:00:00.000Z\": 8.6725,\n    \"2019-10-11T13:00:00.000Z\": 8.6233,\n    \"2019-10-11T14:00:00.000Z\": 8.6319,\n    \"2019-10-11T15:00:00.000Z\": 8.6725,\n    \"2019-10-11T16:00:00.000Z\": 8.6753,\n    \"2019-10-11T17:00:00.000Z\": 8.6753,\n    \"2019-10-11T18:00:00.000Z\": 8.6782,\n    \"2019-10-11T19:00:00.000Z\": 8.6811,\n    \"2019-10-11T20:00:00.000Z\": 8.6811,\n    \"2019-10-11T21:00:00.000Z\": 8.6811,\n    \"2019-10-11T22:00:00.000Z\": 8.6782,\n    \"2019-10-11T23:00:00.000Z\": 8.6348,\n    \"2019-10-12T01:00:00.000Z\": 8.6811,\n    \"2019-10-12T02:00:00.000Z\": 8.684,\n    \"2019-10-12T03:00:00.000Z\": 8.6696,\n    \"2019-10-12T04:00:00.000Z\": 8.6811,\n    \"2019-10-12T05:00:00.000Z\": 8.6869,\n    \"2019-10-12T06:00:00.000Z\": 8.684,\n    \"2019-10-12T07:00:00.000Z\": 8.684,\n    \"2019-10-12T08:00:00.000Z\": 8.6782,\n    \"2019-10-12T09:00:00.000Z\": 8.6782,\n    \"2019-10-12T10:00:00.000Z\": 8.6753,\n    \"2019-10-12T11:00:00.000Z\": 8.6377,\n    \"2019-10-12T12:00:00.000Z\": 8.6406,\n    \"2019-10-12T13:00:00.000Z\": 8.6782,\n    \"2019-10-12T14:00:00.000Z\": 8.6782,\n    \"2019-10-12T15:00:00.000Z\": 8.6811,\n    \"2019-10-12T16:00:00.000Z\": 8.6811,\n    \"2019-10-12T17:00:00.000Z\": 8.6811,\n    \"2019-10-12T18:00:00.000Z\": 8.6782,\n    \"2019-10-12T19:00:00.000Z\": 8.6811,\n    \"2019-10-12T20:00:00.000Z\": 8.6811,\n    \"2019-10-12T21:00:00.000Z\": 8.6811,\n    \"2019-10-12T22:00:00.000Z\": 8.684,\n    \"2019-10-12T23:00:00.000Z\": 8.6782,\n    \"2019-10-13T01:00:00.000Z\": 8.6782,\n    \"2019-10-13T02:00:00.000Z\": 8.6725,\n    \"2019-10-13T03:00:00.000Z\": 8.6782,\n    \"2019-10-13T04:00:00.000Z\": 8.6869,\n    \"2019-10-13T05:00:00.000Z\": 8.6869,\n    \"2019-10-13T06:00:00.000Z\": 8.6898,\n    \"2019-10-13T07:00:00.000Z\": 8.6898,\n    \"2019-10-13T08:00:00.000Z\": 8.6898,\n    \"2019-10-13T09:00:00.000Z\": 8.6927,\n    \"2019-10-13T10:00:00.000Z\": 8.6927,\n    \"2019-10-13T11:00:00.000Z\": 8.6956,\n    \"2019-10-13T12:00:00.000Z\": 8.7014,\n    \"2019-10-13T13:00:00.000Z\": 8.7043,\n    \"2019-10-13T14:00:00.000Z\": 8.7072,\n    \"2019-10-13T15:00:00.000Z\": 8.7101,\n    \"2019-10-13T16:00:00.000Z\": 8.7188,\n    \"2019-10-13T17:00:00.000Z\": 8.7332,\n    \"2019-10-13T18:00:00.000Z\": 8.739,\n    \"2019-10-13T19:00:00.000Z\": 8.7535,\n    \"2019-10-13T20:00:00.000Z\": 8.7622,\n    \"2019-10-13T21:00:00.000Z\": 8.7708,\n    \"2019-10-13T22:00:00.000Z\": 8.7766,\n    \"2019-10-13T23:00:00.000Z\": 8.7824,\n    \"2019-10-14T01:00:00.000Z\": 8.7882,\n    \"2019-10-14T02:00:00.000Z\": 8.794,\n    \"2019-10-14T03:00:00.000Z\": 8.7882,\n    \"2019-10-14T04:00:00.000Z\": 8.7882,\n    \"2019-10-14T05:00:00.000Z\": 8.794,\n    \"2019-10-14T06:00:00.000Z\": 8.794,\n    \"2019-10-14T07:00:00.000Z\": 8.794,\n    \"2019-10-14T08:00:00.000Z\": 8.7969,\n    \"2019-10-14T09:00:00.000Z\": 8.7998,\n    \"2019-10-14T10:00:00.000Z\": 8.7998,\n    \"2019-10-14T11:00:00.000Z\": 8.7998,\n    \"2019-10-14T12:00:00.000Z\": 8.7969,\n    \"2019-10-14T13:00:00.000Z\": 8.7998,\n    \"2019-10-14T14:00:00.000Z\": 8.794,\n    \"2019-10-14T15:00:00.000Z\": 8.8084,\n    \"2019-10-14T16:00:00.000Z\": 8.8113,\n    \"2019-10-14T17:00:00.000Z\": 8.8056,\n    \"2019-10-14T18:00:00.000Z\": 8.8056,\n    \"2019-10-14T19:00:00.000Z\": 8.8056,\n    \"2019-10-14T20:00:00.000Z\": 8.8027,\n    \"2019-10-14T21:00:00.000Z\": 8.8056,\n    \"2019-10-14T22:00:00.000Z\": 8.8027,\n    \"2019-10-14T23:00:00.000Z\": 8.8142,\n    \"2019-10-15T01:00:00.000Z\": 8.8142,\n    \"2019-10-15T02:00:00.000Z\": 8.82,\n    \"2019-10-15T03:00:00.000Z\": 8.8229,\n    \"2019-10-15T04:00:00.000Z\": 8.8229,\n    \"2019-10-15T05:00:00.000Z\": 8.8345,\n    \"2019-10-15T06:00:00.000Z\": 8.8316,\n    \"2019-10-15T07:00:00.000Z\": 8.8229,\n    \"2019-10-15T08:00:00.000Z\": 8.8171,\n    \"2019-10-15T09:00:00.000Z\": 8.8229,\n    \"2019-10-15T10:00:00.000Z\": 8.82,\n    \"2019-10-15T11:00:00.000Z\": 8.8142,\n    \"2019-10-15T12:00:00.000Z\": 8.8142,\n    \"2019-10-15T13:00:00.000Z\": 8.8171,\n    \"2019-10-15T14:00:00.000Z\": 8.8258,\n    \"2019-10-15T15:00:00.000Z\": 8.82,\n    \"2019-10-15T16:00:00.000Z\": 8.8287,\n    \"2019-10-15T17:00:00.000Z\": 8.8229,\n    \"2019-10-15T18:00:00.000Z\": 8.8142,\n    \"2019-10-15T19:00:00.000Z\": 8.8113,\n    \"2019-10-15T20:00:00.000Z\": 8.8084,\n    \"2019-10-15T21:00:00.000Z\": 8.8142,\n    \"2019-10-15T22:00:00.000Z\": 8.8084,\n    \"2019-10-15T23:00:00.000Z\": 8.7824,\n    \"2019-10-16T01:00:00.000Z\": 8.7708,\n    \"2019-10-16T02:00:00.000Z\": 8.794,\n    \"2019-10-16T03:00:00.000Z\": 8.8027,\n    \"2019-10-16T04:00:00.000Z\": 8.7708,\n    \"2019-10-16T05:00:00.000Z\": 8.7969,\n    \"2019-10-16T06:00:00.000Z\": 8.8171,\n    \"2019-10-16T07:00:00.000Z\": 8.8113,\n    \"2019-10-16T08:00:00.000Z\": 8.8171,\n    \"2019-10-16T09:00:00.000Z\": 8.8084,\n    \"2019-10-16T10:00:00.000Z\": 8.7766,\n    \"2019-10-16T11:00:00.000Z\": 8.7679,\n    \"2019-10-16T12:00:00.000Z\": 8.713,\n    \"2019-10-16T13:00:00.000Z\": 8.6464,\n    \"2019-10-16T14:00:00.000Z\": 8.6725,\n    \"2019-10-16T15:00:00.000Z\": 8.6696,\n    \"2019-10-16T16:00:00.000Z\": 8.6319,\n    \"2019-10-16T17:00:00.000Z\": 8.6638,\n    \"2019-10-16T18:00:00.000Z\": 8.7072,\n    \"2019-10-16T19:00:00.000Z\": 8.7159,\n    \"2019-10-16T20:00:00.000Z\": 8.7216,\n    \"2019-10-16T21:00:00.000Z\": 8.7477,\n    \"2019-10-16T22:00:00.000Z\": 8.7506,\n    \"2019-10-16T23:00:00.000Z\": 8.765,\n    \"2019-10-17T01:00:00.000Z\": 8.7824,\n    \"2019-10-17T02:00:00.000Z\": 8.7708,\n    \"2019-10-17T03:00:00.000Z\": 8.7679,\n    \"2019-10-17T04:00:00.000Z\": 8.794,\n    \"2019-10-17T05:00:00.000Z\": 8.7998,\n    \"2019-10-17T06:00:00.000Z\": 8.7911,\n    \"2019-10-17T07:00:00.000Z\": 8.7882,\n    \"2019-10-17T08:00:00.000Z\": 8.765,\n    \"2019-10-17T09:00:00.000Z\": 8.7448,\n    \"2019-10-17T10:00:00.000Z\": 8.6898,\n    \"2019-10-17T11:00:00.000Z\": 8.6782,\n    \"2019-10-17T12:00:00.000Z\": 8.5567,\n    \"2019-10-17T13:00:00.000Z\": 8.5741,\n    \"2019-10-17T14:00:00.000Z\": 8.603,\n    \"2019-10-17T15:00:00.000Z\": 8.5943,\n    \"2019-10-17T16:00:00.000Z\": 8.6117,\n    \"2019-10-17T17:00:00.000Z\": 8.6088,\n    \"2019-10-17T18:00:00.000Z\": 8.6088,\n    \"2019-10-17T19:00:00.000Z\": 8.6059,\n    \"2019-10-17T20:00:00.000Z\": 8.5972,\n    \"2019-10-17T21:00:00.000Z\": 8.6088,\n    \"2019-10-17T22:00:00.000Z\": 8.6175,\n    \"2019-10-17T23:00:00.000Z\": 8.6146,\n    \"2019-10-18T01:00:00.000Z\": 8.6059,\n    \"2019-10-18T02:00:00.000Z\": 8.6204,\n    \"2019-10-18T03:00:00.000Z\": 8.6233,\n    \"2019-10-18T04:00:00.000Z\": 8.6262,\n    \"2019-10-18T05:00:00.000Z\": 8.6262,\n    \"2019-10-18T06:00:00.000Z\": 8.6233,\n    \"2019-10-18T07:00:00.000Z\": 8.603,\n    \"2019-10-18T08:00:00.000Z\": 8.6262,\n    \"2019-10-18T09:00:00.000Z\": 8.6233,\n    \"2019-10-18T10:00:00.000Z\": 8.603,\n    \"2019-10-18T11:00:00.000Z\": 8.6464,\n    \"2019-10-18T12:00:00.000Z\": 8.6667,\n    \"2019-10-18T13:00:00.000Z\": 8.6956,\n    \"2019-10-18T14:00:00.000Z\": 8.7159,\n    \"2019-10-18T15:00:00.000Z\": 8.7188,\n    \"2019-10-18T16:00:00.000Z\": 8.7188,\n    \"2019-10-18T17:00:00.000Z\": 8.7303,\n    \"2019-10-18T18:00:00.000Z\": 8.7361,\n    \"2019-10-18T19:00:00.000Z\": 8.7361,\n    \"2019-10-18T20:00:00.000Z\": 8.7332,\n    \"2019-10-18T21:00:00.000Z\": 8.7245,\n    \"2019-10-18T22:00:00.000Z\": 8.7188,\n    \"2019-10-18T23:00:00.000Z\": 8.7159,\n    \"2019-10-19T01:00:00.000Z\": 8.7072,\n    \"2019-10-19T02:00:00.000Z\": 8.6985,\n    \"2019-10-19T03:00:00.000Z\": 8.6782,\n    \"2019-10-19T04:00:00.000Z\": 8.6898,\n    \"2019-10-19T05:00:00.000Z\": 8.6811,\n    \"2019-10-19T06:00:00.000Z\": 8.6725,\n    \"2019-10-19T07:00:00.000Z\": 8.6696,\n    \"2019-10-19T08:00:00.000Z\": 8.6667,\n    \"2019-10-19T09:00:00.000Z\": 8.6551,\n    \"2019-10-19T10:00:00.000Z\": 8.6464,\n    \"2019-10-19T11:00:00.000Z\": 8.6406,\n    \"2019-10-19T12:00:00.000Z\": 8.6406,\n    \"2019-10-19T13:00:00.000Z\": 8.6377,\n    \"2019-10-19T14:00:00.000Z\": 8.6348,\n    \"2019-10-19T15:00:00.000Z\": 8.6348,\n    \"2019-10-19T16:00:00.000Z\": 8.6059,\n    \"2019-10-19T17:00:00.000Z\": 8.6175,\n    \"2019-10-19T18:00:00.000Z\": 8.6319,\n    \"2019-10-19T19:00:00.000Z\": 8.6262,\n    \"2019-10-19T20:00:00.000Z\": 8.6204,\n    \"2019-10-19T21:00:00.000Z\": 8.6204,\n    \"2019-10-19T22:00:00.000Z\": 8.6204,\n    \"2019-10-19T23:00:00.000Z\": 8.6204,\n    \"2019-10-20T01:00:00.000Z\": 8.6146,\n    \"2019-10-20T02:00:00.000Z\": 8.6088,\n    \"2019-10-20T03:00:00.000Z\": 8.6088,\n    \"2019-10-20T04:00:00.000Z\": 8.6059,\n    \"2019-10-20T05:00:00.000Z\": 8.6001,\n    \"2019-10-20T06:00:00.000Z\": 8.5972,\n    \"2019-10-20T07:00:00.000Z\": 8.5828,\n    \"2019-10-20T08:00:00.000Z\": 8.5856,\n    \"2019-10-20T09:00:00.000Z\": 8.5799,\n    \"2019-10-20T10:00:00.000Z\": 8.5856,\n    \"2019-10-20T11:00:00.000Z\": 8.5856,\n    \"2019-10-20T12:00:00.000Z\": 8.5828,\n    \"2019-10-20T13:00:00.000Z\": 8.5799,\n    \"2019-10-20T14:00:00.000Z\": 8.577,\n    \"2019-10-20T15:00:00.000Z\": 8.5712,\n    \"2019-10-20T16:00:00.000Z\": 8.5422,\n    \"2019-10-20T17:00:00.000Z\": 8.5625,\n    \"2019-10-20T18:00:00.000Z\": 8.5654,\n    \"2019-10-20T19:00:00.000Z\": 8.5625,\n    \"2019-10-20T20:00:00.000Z\": 8.5567,\n    \"2019-10-20T21:00:00.000Z\": 8.5538,\n    \"2019-10-20T22:00:00.000Z\": 8.5509,\n    \"2019-10-20T23:00:00.000Z\": 8.5451,\n    \"2019-10-21T01:00:00.000Z\": 8.5422,\n    \"2019-10-21T02:00:00.000Z\": 8.5422,\n    \"2019-10-21T03:00:00.000Z\": 8.5394,\n    \"2019-10-21T04:00:00.000Z\": 8.5336,\n    \"2019-10-21T05:00:00.000Z\": 8.5365,\n    \"2019-10-21T06:00:00.000Z\": 8.5365,\n    \"2019-10-21T07:00:00.000Z\": 8.5365,\n    \"2019-10-21T08:00:00.000Z\": 8.5365,\n    \"2019-10-21T09:00:00.000Z\": 8.5307,\n    \"2019-10-21T10:00:00.000Z\": 8.4699,\n    \"2019-10-21T11:00:00.000Z\": 8.4873,\n    \"2019-10-21T12:00:00.000Z\": 8.4988,\n    \"2019-10-21T13:00:00.000Z\": 8.5017,\n    \"2019-10-21T14:00:00.000Z\": 8.5017,\n    \"2019-10-21T15:00:00.000Z\": 8.5046,\n    \"2019-10-21T16:00:00.000Z\": 8.5075,\n    \"2019-10-21T17:00:00.000Z\": 8.5075,\n    \"2019-10-21T18:00:00.000Z\": 8.4902,\n    \"2019-10-21T19:00:00.000Z\": 8.4902,\n    \"2019-10-21T20:00:00.000Z\": 8.4959,\n    \"2019-10-21T21:00:00.000Z\": 8.4959,\n    \"2019-10-21T22:00:00.000Z\": 8.4931,\n    \"2019-10-21T23:00:00.000Z\": 8.4959,\n    \"2019-10-22T01:00:00.000Z\": 8.4873,\n    \"2019-10-22T02:00:00.000Z\": 8.4873,\n    \"2019-10-22T03:00:00.000Z\": 8.4873,\n    \"2019-10-22T04:00:00.000Z\": 8.4873,\n    \"2019-10-22T05:00:00.000Z\": 8.4873,\n    \"2019-10-22T06:00:00.000Z\": 8.4786,\n    \"2019-10-22T07:00:00.000Z\": 8.4786,\n    \"2019-10-22T08:00:00.000Z\": 8.467,\n    \"2019-10-22T09:00:00.000Z\": 8.522,\n    \"2019-10-22T10:00:00.000Z\": 8.5683,\n    \"2019-10-22T11:00:00.000Z\": 8.577,\n    \"2019-10-22T12:00:00.000Z\": 8.5828,\n    \"2019-10-22T13:00:00.000Z\": 8.5885,\n    \"2019-10-22T14:00:00.000Z\": 8.5799,\n    \"2019-10-22T15:00:00.000Z\": 8.5741,\n    \"2019-10-22T16:00:00.000Z\": 8.5712,\n    \"2019-10-22T17:00:00.000Z\": 8.5741,\n    \"2019-10-22T18:00:00.000Z\": 8.5683,\n    \"2019-10-22T19:00:00.000Z\": 8.5712,\n    \"2019-10-22T20:00:00.000Z\": 8.5683,\n    \"2019-10-22T21:00:00.000Z\": 8.5683,\n    \"2019-10-22T22:00:00.000Z\": 8.5654,\n    \"2019-10-22T23:00:00.000Z\": 8.5654,\n    \"2019-10-23T01:00:00.000Z\": 8.5625,\n    \"2019-10-23T02:00:00.000Z\": 8.5596,\n    \"2019-10-23T03:00:00.000Z\": 8.5596,\n    \"2019-10-23T04:00:00.000Z\": 8.5596,\n    \"2019-10-23T05:00:00.000Z\": 8.5596,\n    \"2019-10-23T06:00:00.000Z\": 8.548,\n    \"2019-10-23T07:00:00.000Z\": 8.548,\n    \"2019-10-23T08:00:00.000Z\": 8.5394,\n    \"2019-10-23T09:00:00.000Z\": 8.5394,\n    \"2019-10-23T10:00:00.000Z\": 8.5394,\n    \"2019-10-23T11:00:00.000Z\": 8.5336,\n    \"2019-10-23T12:00:00.000Z\": 8.5625,\n    \"2019-10-23T13:00:00.000Z\": 8.5683,\n    \"2019-10-23T14:00:00.000Z\": 8.5712,\n    \"2019-10-23T15:00:00.000Z\": 8.4728,\n    \"2019-10-23T16:00:00.000Z\": 8.4844,\n    \"2019-10-23T17:00:00.000Z\": 8.4815,\n    \"2019-10-23T18:00:00.000Z\": 8.5017,\n    \"2019-10-23T19:00:00.000Z\": 8.5104,\n    \"2019-10-23T20:00:00.000Z\": 8.5162,\n    \"2019-10-23T21:00:00.000Z\": 8.522,\n    \"2019-10-23T22:00:00.000Z\": 8.5162,\n    \"2019-10-23T23:00:00.000Z\": 8.5278,\n    \"2019-10-24T01:00:00.000Z\": 8.5162,\n    \"2019-10-24T02:00:00.000Z\": 8.5307,\n    \"2019-10-24T03:00:00.000Z\": 8.5394,\n    \"2019-10-24T04:00:00.000Z\": 8.5394,\n    \"2019-10-24T05:00:00.000Z\": 8.548,\n    \"2019-10-24T06:00:00.000Z\": 8.5075,\n    \"2019-10-24T07:00:00.000Z\": 8.5538,\n    \"2019-10-24T08:00:00.000Z\": 8.5741,\n    \"2019-10-24T09:00:00.000Z\": 8.5828,\n    \"2019-10-24T10:00:00.000Z\": 8.5914,\n    \"2019-10-24T11:00:00.000Z\": 8.5856,\n    \"2019-10-24T12:00:00.000Z\": 8.5914,\n    \"2019-10-24T13:00:00.000Z\": 8.5972,\n    \"2019-10-24T14:00:00.000Z\": 8.5972,\n    \"2019-10-24T15:00:00.000Z\": 8.6001,\n    \"2019-10-24T16:00:00.000Z\": 8.6088,\n    \"2019-10-24T17:00:00.000Z\": 8.6117,\n    \"2019-10-24T18:00:00.000Z\": 8.6175,\n    \"2019-10-24T19:00:00.000Z\": 8.6175,\n    \"2019-10-24T20:00:00.000Z\": 8.603,\n    \"2019-10-24T21:00:00.000Z\": 8.6059,\n    \"2019-10-24T22:00:00.000Z\": 8.603,\n    \"2019-10-24T23:00:00.000Z\": 8.6088,\n    \"2019-10-25T01:00:00.000Z\": 8.6117,\n    \"2019-10-25T02:00:00.000Z\": 8.6175,\n    \"2019-10-25T03:00:00.000Z\": 8.6146,\n    \"2019-10-25T04:00:00.000Z\": 8.6146,\n    \"2019-10-25T05:00:00.000Z\": 8.603,\n    \"2019-10-25T06:00:00.000Z\": 8.5683,\n    \"2019-10-25T07:00:00.000Z\": 8.5683,\n    \"2019-10-25T08:00:00.000Z\": 8.5625,\n    \"2019-10-25T09:00:00.000Z\": 8.5654,\n    \"2019-10-25T10:00:00.000Z\": 8.5741,\n    \"2019-10-25T11:00:00.000Z\": 8.5712,\n    \"2019-10-25T12:00:00.000Z\": 8.5654,\n    \"2019-10-25T13:00:00.000Z\": 8.5625,\n    \"2019-10-25T14:00:00.000Z\": 8.5596,\n    \"2019-10-25T15:00:00.000Z\": 8.5712,\n    \"2019-10-25T16:00:00.000Z\": 8.5654,\n    \"2019-10-25T17:00:00.000Z\": 8.5828,\n    \"2019-10-25T18:00:00.000Z\": 8.6001,\n    \"2019-10-25T19:00:00.000Z\": 8.5914,\n    \"2019-10-25T20:00:00.000Z\": 8.5914,\n    \"2019-10-25T21:00:00.000Z\": 8.5856,\n    \"2019-10-25T22:00:00.000Z\": 8.5914,\n    \"2019-10-25T23:00:00.000Z\": 8.5828,\n    \"2019-10-26T01:00:00.000Z\": 8.5914,\n    \"2019-10-26T02:00:00.000Z\": 8.5741,\n    \"2019-10-26T03:00:00.000Z\": 8.5943,\n    \"2019-10-26T04:00:00.000Z\": 8.5828,\n    \"2019-10-26T05:00:00.000Z\": 8.5885,\n    \"2019-10-26T06:00:00.000Z\": 8.5914,\n    \"2019-10-26T07:00:00.000Z\": 8.5943,\n    \"2019-10-26T08:00:00.000Z\": 8.5943,\n    \"2019-10-26T09:00:00.000Z\": 8.5943,\n    \"2019-10-26T10:00:00.000Z\": 8.5943,\n    \"2019-10-26T11:00:00.000Z\": 8.577,\n    \"2019-10-26T12:00:00.000Z\": 8.5972,\n    \"2019-10-26T13:00:00.000Z\": 8.6001,\n    \"2019-10-26T14:00:00.000Z\": 8.6146,\n    \"2019-10-26T15:00:00.000Z\": 8.6117,\n    \"2019-10-26T16:00:00.000Z\": 8.6001,\n    \"2019-10-26T17:00:00.000Z\": 8.5596,\n    \"2019-10-26T18:00:00.000Z\": 8.5509,\n    \"2019-10-26T19:00:00.000Z\": 8.5422,\n    \"2019-10-26T20:00:00.000Z\": 8.5336,\n    \"2019-10-26T21:00:00.000Z\": 8.5278,\n    \"2019-10-26T22:00:00.000Z\": 8.5278,\n    \"2019-10-26T23:00:00.000Z\": 8.5683,\n    \"2019-10-27T01:00:00.000Z\": 8.5712,\n    \"2019-10-27T02:00:00.000Z\": 8.5741,\n    \"2019-10-27T03:00:00.000Z\": 8.5741,\n    \"2019-10-27T04:00:00.000Z\": 8.5828,\n    \"2019-10-27T05:00:00.000Z\": 8.548,\n    \"2019-10-27T06:00:00.000Z\": 8.5741,\n    \"2019-10-27T07:00:00.000Z\": 8.5712,\n    \"2019-10-27T08:00:00.000Z\": 8.5509,\n    \"2019-10-27T09:00:00.000Z\": 8.5741,\n    \"2019-10-27T10:00:00.000Z\": 8.5741,\n    \"2019-10-27T11:00:00.000Z\": 8.5712,\n    \"2019-10-27T12:00:00.000Z\": 8.5712,\n    \"2019-10-27T13:00:00.000Z\": 8.5914,\n    \"2019-10-27T14:00:00.000Z\": 8.577,\n    \"2019-10-27T15:00:00.000Z\": 8.5741,\n    \"2019-10-27T16:00:00.000Z\": 8.5799,\n    \"2019-10-27T17:00:00.000Z\": 8.5828,\n    \"2019-10-27T18:00:00.000Z\": 8.5828,\n    \"2019-10-27T19:00:00.000Z\": 8.577,\n    \"2019-10-27T20:00:00.000Z\": 8.5625,\n    \"2019-10-27T21:00:00.000Z\": 8.5394,\n    \"2019-10-27T22:00:00.000Z\": 8.5509,\n    \"2019-10-27T23:00:00.000Z\": 8.5451,\n    \"2019-10-28T01:00:00.000Z\": 8.5394,\n    \"2019-10-28T02:00:00.000Z\": 8.5365,\n    \"2019-10-28T03:00:00.000Z\": 8.5191,\n    \"2019-10-28T04:00:00.000Z\": 8.5191,\n    \"2019-10-28T05:00:00.000Z\": 8.5046,\n    \"2019-10-28T06:00:00.000Z\": 8.4959,\n    \"2019-10-28T07:00:00.000Z\": 8.4873,\n    \"2019-10-28T08:00:00.000Z\": 8.4873,\n    \"2019-10-28T09:00:00.000Z\": 8.467,\n    \"2019-10-28T10:00:00.000Z\": 8.4525,\n    \"2019-10-28T11:00:00.000Z\": 8.4468,\n    \"2019-10-28T12:00:00.000Z\": 8.4381,\n    \"2019-10-28T13:00:00.000Z\": 8.4005,\n    \"2019-10-28T14:00:00.000Z\": 8.3773,\n    \"2019-10-28T15:00:00.000Z\": 8.3686,\n    \"2019-10-28T16:00:00.000Z\": 8.3657,\n    \"2019-10-28T17:00:00.000Z\": 8.3571,\n    \"2019-10-28T18:00:00.000Z\": 8.3831,\n    \"2019-10-28T19:00:00.000Z\": 8.3744,\n    \"2019-10-28T20:00:00.000Z\": 8.3686,\n    \"2019-10-28T21:00:00.000Z\": 8.36,\n    \"2019-10-28T22:00:00.000Z\": 8.3571,\n    \"2019-10-28T23:00:00.000Z\": 8.3513,\n    \"2019-10-29T01:00:00.000Z\": 8.3455,\n    \"2019-10-29T02:00:00.000Z\": 8.3368,\n    \"2019-10-29T03:00:00.000Z\": 8.3455,\n    \"2019-10-29T04:00:00.000Z\": 8.3455,\n    \"2019-10-29T05:00:00.000Z\": 8.3571,\n    \"2019-10-29T06:00:00.000Z\": 8.3513,\n    \"2019-10-29T07:00:00.000Z\": 8.3455,\n    \"2019-10-29T08:00:00.000Z\": 8.3397,\n    \"2019-10-29T09:00:00.000Z\": 8.3368,\n    \"2019-10-29T10:00:00.000Z\": 8.6522,\n    \"2019-10-29T11:00:00.000Z\": 8.6377,\n    \"2019-10-29T12:00:00.000Z\": 8.6638,\n    \"2019-10-29T13:00:00.000Z\": 8.6204,\n    \"2019-10-29T14:00:00.000Z\": 8.5943,\n    \"2019-10-29T15:00:00.000Z\": 8.6435,\n    \"2019-10-29T16:00:00.000Z\": 8.6522,\n    \"2019-10-29T17:00:00.000Z\": 8.6667,\n    \"2019-10-29T18:00:00.000Z\": 8.6638,\n    \"2019-10-29T19:00:00.000Z\": 8.6493,\n    \"2019-10-29T20:00:00.000Z\": 8.6493,\n    \"2019-10-29T21:00:00.000Z\": 8.6146,\n    \"2019-10-29T22:00:00.000Z\": 8.5885,\n    \"2019-10-29T23:00:00.000Z\": 8.6319,\n    \"2019-10-30T01:00:00.000Z\": 8.6233,\n    \"2019-10-30T02:00:00.000Z\": 8.6262,\n    \"2019-10-30T03:00:00.000Z\": 8.6493,\n    \"2019-10-30T04:00:00.000Z\": 8.6175,\n    \"2019-10-30T05:00:00.000Z\": 8.5856,\n    \"2019-10-30T06:00:00.000Z\": 8.6291,\n    \"2019-10-30T07:00:00.000Z\": 8.6348,\n    \"2019-10-30T08:00:00.000Z\": 8.5914,\n    \"2019-10-30T09:00:00.000Z\": 8.577,\n    \"2019-10-30T10:00:00.000Z\": 8.603,\n    \"2019-10-30T11:00:00.000Z\": 8.658,\n    \"2019-10-30T12:00:00.000Z\": 8.6204,\n    \"2019-10-30T13:00:00.000Z\": 8.6001,\n    \"2019-10-30T14:00:00.000Z\": 8.6233,\n    \"2019-10-30T15:00:00.000Z\": 8.658,\n    \"2019-10-30T16:00:00.000Z\": 8.6464,\n    \"2019-10-30T17:00:00.000Z\": 8.6319,\n    \"2019-10-30T18:00:00.000Z\": 8.6204,\n    \"2019-10-30T19:00:00.000Z\": 8.5972,\n    \"2019-10-30T20:00:00.000Z\": 8.5914,\n    \"2019-10-30T21:00:00.000Z\": 8.5712,\n    \"2019-10-30T22:00:00.000Z\": 8.5307,\n    \"2019-10-30T23:00:00.000Z\": 8.5596,\n    \"2019-10-31T01:00:00.000Z\": 8.577,\n    \"2019-10-31T02:00:00.000Z\": 8.5885,\n    \"2019-10-31T03:00:00.000Z\": 8.5799,\n    \"2019-10-31T04:00:00.000Z\": 8.5336,\n    \"2019-10-31T05:00:00.000Z\": 8.5683,\n    \"2019-10-31T06:00:00.000Z\": 8.5625,\n    \"2019-10-31T07:00:00.000Z\": 8.5712,\n    \"2019-10-31T08:00:00.000Z\": 8.5567,\n    \"2019-10-31T09:00:00.000Z\": 8.5046,\n    \"2019-10-31T10:00:00.000Z\": 8.5422,\n    \"2019-10-31T11:00:00.000Z\": 8.5394,\n    \"2019-10-31T12:00:00.000Z\": 8.5162,\n    \"2019-10-31T13:00:00.000Z\": 8.4641,\n    \"2019-10-31T14:00:00.000Z\": 8.4815,\n    \"2019-10-31T15:00:00.000Z\": 8.5162,\n    \"2019-10-31T16:00:00.000Z\": 8.5104,\n    \"2019-10-31T17:00:00.000Z\": 8.4902,\n    \"2019-10-31T18:00:00.000Z\": 8.4873,\n    \"2019-10-31T19:00:00.000Z\": 8.4873,\n    \"2019-10-31T20:00:00.000Z\": 8.4554,\n    \"2019-10-31T21:00:00.000Z\": 8.4612,\n    \"2019-10-31T22:00:00.000Z\": 8.4497,\n    \"2019-10-31T23:00:00.000Z\": 8.4699,\n    \"2019-11-01T01:00:00.000Z\": 8.4525,\n    \"2019-11-01T02:00:00.000Z\": 8.4931,\n    \"2019-11-01T03:00:00.000Z\": 8.4699,\n    \"2019-11-01T04:00:00.000Z\": 8.4381,\n    \"2019-11-01T05:00:00.000Z\": 8.4583,\n    \"2019-11-01T06:00:00.000Z\": 8.4294,\n    \"2019-11-01T07:00:00.000Z\": 8.4757,\n    \"2019-11-01T08:00:00.000Z\": 8.4757,\n    \"2019-11-01T09:00:00.000Z\": 8.4381,\n    \"2019-11-01T10:00:00.000Z\": 8.4583,\n    \"2019-11-01T11:00:00.000Z\": 8.4728,\n    \"2019-11-01T12:00:00.000Z\": 8.4786,\n    \"2019-11-01T13:00:00.000Z\": 8.4554,\n    \"2019-11-01T14:00:00.000Z\": 8.4294,\n    \"2019-11-01T15:00:00.000Z\": 8.4728,\n    \"2019-11-01T16:00:00.000Z\": 8.4902,\n    \"2019-11-01T17:00:00.000Z\": 8.4786,\n    \"2019-11-01T18:00:00.000Z\": 8.4757,\n    \"2019-11-01T19:00:00.000Z\": 8.4786,\n    \"2019-11-01T20:00:00.000Z\": 8.4757,\n    \"2019-11-01T21:00:00.000Z\": 8.4525,\n    \"2019-11-01T22:00:00.000Z\": 8.4554,\n    \"2019-11-01T23:00:00.000Z\": 8.4902,\n    \"2019-11-02T01:00:00.000Z\": 8.4815,\n    \"2019-11-02T02:00:00.000Z\": 8.4786,\n    \"2019-11-02T03:00:00.000Z\": 8.4873,\n    \"2019-11-02T04:00:00.000Z\": 8.4699,\n    \"2019-11-02T05:00:00.000Z\": 8.4352,\n    \"2019-11-02T06:00:00.000Z\": 8.4525,\n    \"2019-11-02T07:00:00.000Z\": 8.4699,\n    \"2019-11-02T08:00:00.000Z\": 8.467,\n    \"2019-11-02T09:00:00.000Z\": 8.4757,\n    \"2019-11-02T10:00:00.000Z\": 8.4757,\n    \"2019-11-02T11:00:00.000Z\": 8.4844,\n    \"2019-11-02T12:00:00.000Z\": 8.4786,\n    \"2019-11-02T13:00:00.000Z\": 8.4554,\n    \"2019-11-02T14:00:00.000Z\": 8.4988,\n    \"2019-11-02T15:00:00.000Z\": 8.4902,\n    \"2019-11-02T16:00:00.000Z\": 8.4959,\n    \"2019-11-02T17:00:00.000Z\": 8.4959,\n    \"2019-11-02T18:00:00.000Z\": 8.4959,\n    \"2019-11-02T19:00:00.000Z\": 8.4873,\n    \"2019-11-02T20:00:00.000Z\": 8.4757,\n    \"2019-11-02T21:00:00.000Z\": 8.4959,\n    \"2019-11-02T22:00:00.000Z\": 8.4757,\n    \"2019-11-02T23:00:00.000Z\": 8.4931,\n    \"2019-11-03T01:00:00.000Z\": 8.4844,\n    \"2019-11-03T02:00:00.000Z\": 8.5075,\n    \"2019-11-03T03:00:00.000Z\": 8.5104,\n    \"2019-11-03T04:00:00.000Z\": 8.5133,\n    \"2019-11-03T05:00:00.000Z\": 8.4988,\n    \"2019-11-03T06:00:00.000Z\": 8.4641,\n    \"2019-11-03T07:00:00.000Z\": 8.4959,\n    \"2019-11-03T08:00:00.000Z\": 8.5162,\n    \"2019-11-03T09:00:00.000Z\": 8.548,\n    \"2019-11-03T10:00:00.000Z\": 8.5336,\n    \"2019-11-03T11:00:00.000Z\": 8.5654,\n    \"2019-11-03T12:00:00.000Z\": 8.5509,\n    \"2019-11-03T13:00:00.000Z\": 8.5654,\n    \"2019-11-03T14:00:00.000Z\": 8.5567,\n    \"2019-11-03T15:00:00.000Z\": 8.5596,\n    \"2019-11-03T16:00:00.000Z\": 8.577,\n    \"2019-11-03T17:00:00.000Z\": 8.5741,\n    \"2019-11-03T18:00:00.000Z\": 8.577,\n    \"2019-11-03T19:00:00.000Z\": 8.5828,\n    \"2019-11-03T20:00:00.000Z\": 8.5712,\n    \"2019-11-03T21:00:00.000Z\": 8.5654,\n    \"2019-11-03T22:00:00.000Z\": 8.5856,\n    \"2019-11-03T23:00:00.000Z\": 8.5741,\n    \"2019-11-04T01:00:00.000Z\": 8.5943,\n    \"2019-11-04T02:00:00.000Z\": 8.6001,\n    \"2019-11-04T03:00:00.000Z\": 8.6175,\n    \"2019-11-04T04:00:00.000Z\": 8.6117,\n    \"2019-11-04T05:00:00.000Z\": 8.6117,\n    \"2019-11-04T06:00:00.000Z\": 8.6233,\n    \"2019-11-04T07:00:00.000Z\": 8.6319,\n    \"2019-11-04T08:00:00.000Z\": 8.6175,\n    \"2019-11-04T09:00:00.000Z\": 8.6001,\n    \"2019-11-04T10:00:00.000Z\": 8.6175,\n    \"2019-11-04T11:00:00.000Z\": 8.6406,\n    \"2019-11-04T12:00:00.000Z\": 8.6175,\n    \"2019-11-04T13:00:00.000Z\": 8.6088,\n    \"2019-11-04T14:00:00.000Z\": 8.6377,\n    \"2019-11-04T15:00:00.000Z\": 8.6319,\n    \"2019-11-04T16:00:00.000Z\": 8.6435,\n    \"2019-11-04T17:00:00.000Z\": 8.6435,\n    \"2019-11-04T18:00:00.000Z\": 8.6464,\n    \"2019-11-04T19:00:00.000Z\": 8.6319,\n    \"2019-11-04T20:00:00.000Z\": 8.6146,\n    \"2019-11-04T21:00:00.000Z\": 8.6464,\n    \"2019-11-04T22:00:00.000Z\": 8.6406,\n    \"2019-11-04T23:00:00.000Z\": 8.6175,\n    \"2019-11-05T01:00:00.000Z\": 8.6464,\n    \"2019-11-05T02:00:00.000Z\": 8.6551,\n    \"2019-11-05T03:00:00.000Z\": 8.6464,\n    \"2019-11-05T04:00:00.000Z\": 8.6464,\n    \"2019-11-05T05:00:00.000Z\": 8.6377,\n    \"2019-11-05T06:00:00.000Z\": 8.6667,\n    \"2019-11-05T07:00:00.000Z\": 8.6551,\n    \"2019-11-05T08:00:00.000Z\": 8.6551,\n    \"2019-11-05T09:00:00.000Z\": 8.6435,\n    \"2019-11-05T10:00:00.000Z\": 8.6493,\n    \"2019-11-05T11:00:00.000Z\": 8.6696,\n    \"2019-11-05T12:00:00.000Z\": 8.6464,\n    \"2019-11-05T13:00:00.000Z\": 8.6319,\n    \"2019-11-05T14:00:00.000Z\": 8.6551,\n    \"2019-11-05T15:00:00.000Z\": 8.6667,\n    \"2019-11-05T16:00:00.000Z\": 8.6725,\n    \"2019-11-05T17:00:00.000Z\": 8.6638,\n    \"2019-11-05T18:00:00.000Z\": 8.6725,\n    \"2019-11-05T19:00:00.000Z\": 8.6725,\n    \"2019-11-05T20:00:00.000Z\": 8.6696,\n    \"2019-11-05T21:00:00.000Z\": 8.6464,\n    \"2019-11-05T22:00:00.000Z\": 8.6638,\n    \"2019-11-05T23:00:00.000Z\": 8.6435,\n    \"2019-11-06T01:00:00.000Z\": 8.6609,\n    \"2019-11-06T02:00:00.000Z\": 8.6667,\n    \"2019-11-06T03:00:00.000Z\": 8.6725,\n    \"2019-11-06T04:00:00.000Z\": 8.6725,\n    \"2019-11-06T05:00:00.000Z\": 8.6638,\n    \"2019-11-06T06:00:00.000Z\": 8.6522,\n    \"2019-11-06T07:00:00.000Z\": 8.6725,\n    \"2019-11-06T08:00:00.000Z\": 8.6638,\n    \"2019-11-06T09:00:00.000Z\": 8.6377,\n    \"2019-11-06T10:00:00.000Z\": 8.6551,\n    \"2019-11-06T11:00:00.000Z\": 8.658,\n    \"2019-11-06T12:00:00.000Z\": 8.6406,\n    \"2019-11-06T13:00:00.000Z\": 8.658,\n    \"2019-11-06T14:00:00.000Z\": 8.6146,\n    \"2019-11-06T15:00:00.000Z\": 8.5885,\n    \"2019-11-06T16:00:00.000Z\": 8.6638,\n    \"2019-11-06T17:00:00.000Z\": 8.658,\n    \"2019-11-06T18:00:00.000Z\": 8.6638,\n    \"2019-11-06T19:00:00.000Z\": 8.6609,\n    \"2019-11-06T20:00:00.000Z\": 8.6638,\n    \"2019-11-06T21:00:00.000Z\": 8.6319,\n    \"2019-11-06T22:00:00.000Z\": 8.6348,\n    \"2019-11-06T23:00:00.000Z\": 8.6464,\n    \"2019-11-07T01:00:00.000Z\": 8.6435,\n    \"2019-11-07T02:00:00.000Z\": 8.6551,\n    \"2019-11-07T03:00:00.000Z\": 8.6377,\n    \"2019-11-07T04:00:00.000Z\": 8.6522,\n    \"2019-11-07T05:00:00.000Z\": 8.6175,\n    \"2019-11-07T06:00:00.000Z\": 8.6319,\n    \"2019-11-07T07:00:00.000Z\": 8.6377,\n    \"2019-11-07T08:00:00.000Z\": 8.6001,\n    \"2019-11-07T09:00:00.000Z\": 8.5828,\n    \"2019-11-07T10:00:00.000Z\": 8.5712,\n    \"2019-11-07T11:00:00.000Z\": 7.2141,\n    \"2019-11-07T12:00:00.000Z\": 7.3125,\n    \"2019-11-07T13:00:00.000Z\": 7.2865,\n    \"2019-11-07T14:00:00.000Z\": 7.3125,\n    \"2019-11-07T15:00:00.000Z\": 7.2807,\n    \"2019-11-07T16:00:00.000Z\": 7.3241,\n    \"2019-11-07T17:00:00.000Z\": 7.3154,\n    \"2019-11-07T18:00:00.000Z\": 7.2922,\n    \"2019-11-07T19:00:00.000Z\": 7.2865,\n    \"2019-11-07T20:00:00.000Z\": 7.3038,\n    \"2019-11-07T21:00:00.000Z\": 7.2575,\n    \"2019-11-07T22:00:00.000Z\": 7.2951,\n    \"2019-11-07T23:00:00.000Z\": 7.2199,\n    \"2019-11-08T01:00:00.000Z\": 7.2054,\n    \"2019-11-08T02:00:00.000Z\": 7.2199,\n    \"2019-11-08T03:00:00.000Z\": 7.1128,\n    \"2019-11-08T04:00:00.000Z\": 7.1823,\n    \"2019-11-08T05:00:00.000Z\": 7.1071,\n    \"2019-11-08T06:00:00.000Z\": 7.2112,\n    \"2019-11-08T07:00:00.000Z\": 7.2083,\n    \"2019-11-08T08:00:00.000Z\": 7.2662,\n    \"2019-11-08T09:00:00.000Z\": 7.1765,\n    \"2019-11-08T10:00:00.000Z\": 7.2083,\n    \"2019-11-08T11:00:00.000Z\": 7.1563,\n    \"2019-11-08T12:00:00.000Z\": 7.2228,\n    \"2019-11-08T13:00:00.000Z\": 7.2025,\n    \"2019-11-08T14:00:00.000Z\": 7.1852,\n    \"2019-11-08T15:00:00.000Z\": 7.1823,\n    \"2019-11-08T16:00:00.000Z\": 7.1997,\n    \"2019-11-08T17:00:00.000Z\": 7.191,\n    \"2019-11-08T18:00:00.000Z\": 7.1997,\n    \"2019-11-08T19:00:00.000Z\": 7.1765,\n    \"2019-11-08T20:00:00.000Z\": 7.1823,\n    \"2019-11-08T21:00:00.000Z\": 7.1389,\n    \"2019-11-08T22:00:00.000Z\": 7.1534,\n    \"2019-11-08T23:00:00.000Z\": 7.1244,\n    \"2019-11-09T01:00:00.000Z\": 7.136,\n    \"2019-11-09T02:00:00.000Z\": 7.162,\n    \"2019-11-09T03:00:00.000Z\": 7.162,\n    \"2019-11-09T04:00:00.000Z\": 7.1649,\n    \"2019-11-09T05:00:00.000Z\": 7.1071,\n    \"2019-11-09T06:00:00.000Z\": 7.1302,\n    \"2019-11-09T07:00:00.000Z\": 7.0608,\n    \"2019-11-09T08:00:00.000Z\": 7.1244,\n    \"2019-11-09T09:00:00.000Z\": 7.0463,\n    \"2019-11-09T10:00:00.000Z\": 7.1273,\n    \"2019-11-09T11:00:00.000Z\": 7.1013,\n    \"2019-11-09T12:00:00.000Z\": 7.1534,\n    \"2019-11-09T13:00:00.000Z\": 7.1563,\n    \"2019-11-09T14:00:00.000Z\": 7.1389,\n    \"2019-11-09T15:00:00.000Z\": 7.0984,\n    \"2019-11-09T16:00:00.000Z\": 7.1244,\n    \"2019-11-09T17:00:00.000Z\": 7.0984,\n    \"2019-11-09T18:00:00.000Z\": 7.1273,\n    \"2019-11-09T19:00:00.000Z\": 7.081,\n    \"2019-11-09T20:00:00.000Z\": 7.081,\n    \"2019-11-09T21:00:00.000Z\": 7.0087,\n    \"2019-11-09T22:00:00.000Z\": 7.0405,\n    \"2019-11-09T23:00:00.000Z\": 6.9797,\n    \"2019-11-10T01:00:00.000Z\": 6.9711,\n    \"2019-11-10T02:00:00.000Z\": 7,\n    \"2019-11-10T03:00:00.000Z\": 7.0608,\n    \"2019-11-10T04:00:00.000Z\": 7.0376,\n    \"2019-11-10T05:00:00.000Z\": 6.9508,\n    \"2019-11-10T06:00:00.000Z\": 7.026,\n    \"2019-11-10T07:00:00.000Z\": 6.9074,\n    \"2019-11-10T08:00:00.000Z\": 7.0376,\n    \"2019-11-10T09:00:00.000Z\": 6.9797,\n    \"2019-11-10T10:00:00.000Z\": 6.8322,\n    \"2019-11-10T11:00:00.000Z\": 7,\n    \"2019-11-10T12:00:00.000Z\": 7.0174,\n    \"2019-11-10T13:00:00.000Z\": 7.0174,\n    \"2019-11-10T14:00:00.000Z\": 6.9682,\n    \"2019-11-10T15:00:00.000Z\": 6.9826,\n    \"2019-11-10T16:00:00.000Z\": 6.9769,\n    \"2019-11-10T17:00:00.000Z\": 7.0087,\n    \"2019-11-10T18:00:00.000Z\": 6.9826,\n    \"2019-11-10T19:00:00.000Z\": 7.0116,\n    \"2019-11-10T20:00:00.000Z\": 6.9769,\n    \"2019-11-10T21:00:00.000Z\": 6.9595,\n    \"2019-11-10T22:00:00.000Z\": 6.9277,\n    \"2019-11-10T23:00:00.000Z\": 6.9334,\n    \"2019-11-11T01:00:00.000Z\": 6.919,\n    \"2019-11-11T02:00:00.000Z\": 6.9219,\n    \"2019-11-11T03:00:00.000Z\": 6.9363,\n    \"2019-11-11T04:00:00.000Z\": 6.945,\n    \"2019-11-11T05:00:00.000Z\": 6.8061,\n    \"2019-11-11T06:00:00.000Z\": 6.9074,\n    \"2019-11-11T07:00:00.000Z\": 6.9595,\n    \"2019-11-11T08:00:00.000Z\": 6.9797,\n    \"2019-11-11T09:00:00.000Z\": 6.9537,\n    \"2019-11-11T10:00:00.000Z\": 6.9248,\n    \"2019-11-11T11:00:00.000Z\": 6.9421,\n    \"2019-11-11T12:00:00.000Z\": 6.9074,\n    \"2019-11-11T13:00:00.000Z\": 6.7338,\n    \"2019-11-11T14:00:00.000Z\": 6.8872,\n    \"2019-11-11T15:00:00.000Z\": 6.8987,\n    \"2019-11-11T16:00:00.000Z\": 6.945,\n    \"2019-11-11T17:00:00.000Z\": 6.9711,\n    \"2019-11-11T18:00:00.000Z\": 6.945,\n    \"2019-11-11T19:00:00.000Z\": 6.9421,\n    \"2019-11-11T20:00:00.000Z\": 6.9161,\n    \"2019-11-11T21:00:00.000Z\": 6.9363,\n    \"2019-11-11T22:00:00.000Z\": 6.8727,\n    \"2019-11-11T23:00:00.000Z\": 6.9479,\n    \"2019-11-12T01:00:00.000Z\": 7.0087,\n    \"2019-11-12T02:00:00.000Z\": 6.9508,\n    \"2019-11-12T03:00:00.000Z\": 7,\n    \"2019-11-12T04:00:00.000Z\": 6.9682,\n    \"2019-11-12T05:00:00.000Z\": 6.9363,\n    \"2019-11-12T06:00:00.000Z\": 6.9074,\n    \"2019-11-12T07:00:00.000Z\": 6.9566,\n    \"2019-11-12T08:00:00.000Z\": 6.9537,\n    \"2019-11-12T09:00:00.000Z\": 6.8785,\n    \"2019-11-12T10:00:00.000Z\": 6.9306,\n    \"2019-11-12T11:00:00.000Z\": 6.9566,\n    \"2019-11-12T12:00:00.000Z\": 6.9508,\n    \"2019-11-12T13:00:00.000Z\": 6.945,\n    \"2019-11-12T14:00:00.000Z\": 6.9508,\n    \"2019-11-12T15:00:00.000Z\": 6.9537,\n    \"2019-11-12T16:00:00.000Z\": 6.9942,\n    \"2019-11-12T17:00:00.000Z\": 6.974,\n    \"2019-11-12T18:00:00.000Z\": 6.9537,\n    \"2019-11-12T19:00:00.000Z\": 6.9566,\n    \"2019-11-12T20:00:00.000Z\": 6.9769,\n    \"2019-11-12T21:00:00.000Z\": 6.9334,\n    \"2019-11-12T22:00:00.000Z\": 6.9392,\n    \"2019-11-12T23:00:00.000Z\": 6.9248,\n    \"2019-11-13T01:00:00.000Z\": 6.9277,\n    \"2019-11-13T02:00:00.000Z\": 6.9884,\n    \"2019-11-13T03:00:00.000Z\": 7.0174,\n    \"2019-11-13T04:00:00.000Z\": 6.9219,\n    \"2019-11-13T05:00:00.000Z\": 6.8872,\n    \"2019-11-13T06:00:00.000Z\": 6.9537,\n    \"2019-11-13T07:00:00.000Z\": 6.9363,\n    \"2019-11-13T08:00:00.000Z\": 6.9479,\n    \"2019-11-13T09:00:00.000Z\": 6.8524,\n    \"2019-11-13T10:00:00.000Z\": 6.8872,\n    \"2019-11-13T11:00:00.000Z\": 6.8785,\n    \"2019-11-13T12:00:00.000Z\": 6.9334,\n    \"2019-11-13T13:00:00.000Z\": 6.8466,\n    \"2019-11-13T14:00:00.000Z\": 6.838,\n    \"2019-11-13T15:00:00.000Z\": 6.9161,\n    \"2019-11-13T16:00:00.000Z\": 6.9363,\n    \"2019-11-13T17:00:00.000Z\": 6.9566,\n    \"2019-11-13T18:00:00.000Z\": 6.9421,\n    \"2019-11-13T19:00:00.000Z\": 6.8958,\n    \"2019-11-13T20:00:00.000Z\": 6.8785,\n    \"2019-11-13T21:00:00.000Z\": 6.8785,\n    \"2019-11-13T22:00:00.000Z\": 6.8958,\n    \"2019-11-13T23:00:00.000Z\": 6.89,\n    \"2019-11-14T01:00:00.000Z\": 6.9074,\n    \"2019-11-14T02:00:00.000Z\": 6.9508,\n    \"2019-11-14T03:00:00.000Z\": 6.9508,\n    \"2019-11-14T04:00:00.000Z\": 6.9132,\n    \"2019-11-14T05:00:00.000Z\": 6.8524,\n    \"2019-11-14T06:00:00.000Z\": 6.9074,\n    \"2019-11-14T07:00:00.000Z\": 6.9334,\n    \"2019-11-14T08:00:00.000Z\": 6.8582,\n    \"2019-11-14T09:00:00.000Z\": 6.8438,\n    \"2019-11-14T10:00:00.000Z\": 6.8785,\n    \"2019-11-14T11:00:00.000Z\": 6.8264,\n    \"2019-11-14T12:00:00.000Z\": 6.7975,\n    \"2019-11-14T13:00:00.000Z\": 6.7541,\n    \"2019-11-14T14:00:00.000Z\": 6.7598,\n    \"2019-11-14T15:00:00.000Z\": 6.7975,\n    \"2019-11-14T16:00:00.000Z\": 6.8409,\n    \"2019-11-14T17:00:00.000Z\": 6.8727,\n    \"2019-11-14T18:00:00.000Z\": 6.8466,\n    \"2019-11-14T19:00:00.000Z\": 6.838,\n    \"2019-11-14T20:00:00.000Z\": 6.8351,\n    \"2019-11-14T21:00:00.000Z\": 6.7975,\n    \"2019-11-14T22:00:00.000Z\": 6.7396,\n    \"2019-11-14T23:00:00.000Z\": 6.7541,\n    \"2019-11-15T01:00:00.000Z\": 6.8235,\n    \"2019-11-15T02:00:00.000Z\": 6.8524,\n    \"2019-11-15T03:00:00.000Z\": 6.8872,\n    \"2019-11-15T04:00:00.000Z\": 6.8351,\n    \"2019-11-15T05:00:00.000Z\": 6.7975,\n    \"2019-11-15T06:00:00.000Z\": 6.7917,\n    \"2019-11-15T07:00:00.000Z\": 6.8322,\n    \"2019-11-15T08:00:00.000Z\": 6.8553,\n    \"2019-11-15T09:00:00.000Z\": 6.8148,\n    \"2019-11-15T10:00:00.000Z\": 6.7078,\n    \"2019-11-15T11:00:00.000Z\": 6.7975,\n    \"2019-11-15T12:00:00.000Z\": 6.8235,\n    \"2019-11-15T13:00:00.000Z\": 6.7193,\n    \"2019-11-15T14:00:00.000Z\": 6.7946,\n    \"2019-11-15T15:00:00.000Z\": 6.8032,\n    \"2019-11-15T16:00:00.000Z\": 6.8524,\n    \"2019-11-15T17:00:00.000Z\": 6.8264,\n    \"2019-11-15T18:00:00.000Z\": 6.7975,\n    \"2019-11-15T19:00:00.000Z\": 6.7859,\n    \"2019-11-15T20:00:00.000Z\": 6.7598,\n    \"2019-11-15T21:00:00.000Z\": 6.6817,\n    \"2019-11-15T22:00:00.000Z\": 6.7714,\n    \"2019-11-15T23:00:00.000Z\": 6.7164,\n    \"2019-11-16T01:00:00.000Z\": 6.7425,\n    \"2019-11-16T02:00:00.000Z\": 6.8409,\n    \"2019-11-16T03:00:00.000Z\": 6.8438,\n    \"2019-11-16T04:00:00.000Z\": 6.8061,\n    \"2019-11-16T05:00:00.000Z\": 6.7164,\n    \"2019-11-16T06:00:00.000Z\": 6.7743,\n    \"2019-11-16T07:00:00.000Z\": 6.702,\n    \"2019-11-16T08:00:00.000Z\": 6.7888,\n    \"2019-11-16T09:00:00.000Z\": 6.7251,\n    \"2019-11-16T10:00:00.000Z\": 6.7946,\n    \"2019-11-16T11:00:00.000Z\": 6.8409,\n    \"2019-11-16T12:00:00.000Z\": 6.8351,\n    \"2019-11-16T13:00:00.000Z\": 6.809,\n    \"2019-11-16T14:00:00.000Z\": 6.8032,\n    \"2019-11-16T15:00:00.000Z\": 6.8148,\n    \"2019-11-16T16:00:00.000Z\": 6.8148,\n    \"2019-11-16T17:00:00.000Z\": 6.8206,\n    \"2019-11-16T18:00:00.000Z\": 6.809,\n    \"2019-11-16T19:00:00.000Z\": 6.7685,\n    \"2019-11-16T20:00:00.000Z\": 6.6846,\n    \"2019-11-16T21:00:00.000Z\": 6.7454,\n    \"2019-11-16T22:00:00.000Z\": 6.6846,\n    \"2019-11-16T23:00:00.000Z\": 6.7483,\n    \"2019-11-17T01:00:00.000Z\": 6.783,\n    \"2019-11-17T02:00:00.000Z\": 6.7975,\n    \"2019-11-17T03:00:00.000Z\": 6.8264,\n    \"2019-11-17T04:00:00.000Z\": 6.7975,\n    \"2019-11-17T05:00:00.000Z\": 6.7222,\n    \"2019-11-17T06:00:00.000Z\": 6.7598,\n    \"2019-11-17T07:00:00.000Z\": 6.7049,\n    \"2019-11-17T08:00:00.000Z\": 6.7975,\n    \"2019-11-17T09:00:00.000Z\": 6.7772,\n    \"2019-11-17T10:00:00.000Z\": 6.6412,\n    \"2019-11-17T11:00:00.000Z\": 6.7801,\n    \"2019-11-17T12:00:00.000Z\": 6.7685,\n    \"2019-11-17T13:00:00.000Z\": 6.7049,\n    \"2019-11-17T14:00:00.000Z\": 6.6644,\n    \"2019-11-17T15:00:00.000Z\": 6.7396,\n    \"2019-11-17T16:00:00.000Z\": 6.7772,\n    \"2019-11-17T17:00:00.000Z\": 6.7888,\n    \"2019-11-17T18:00:00.000Z\": 6.7772,\n    \"2019-11-17T19:00:00.000Z\": 6.7598,\n    \"2019-11-17T20:00:00.000Z\": 6.7251,\n    \"2019-11-17T21:00:00.000Z\": 6.6933,\n    \"2019-11-17T22:00:00.000Z\": 6.7598,\n    \"2019-11-17T23:00:00.000Z\": 6.702,\n    \"2019-11-18T01:00:00.000Z\": 6.7338,\n    \"2019-11-18T02:00:00.000Z\": 6.7685,\n    \"2019-11-18T03:00:00.000Z\": 6.7367,\n    \"2019-11-18T04:00:00.000Z\": 6.8148,\n    \"2019-11-18T05:00:00.000Z\": 6.7801,\n    \"2019-11-18T06:00:00.000Z\": 6.7367,\n    \"2019-11-18T07:00:00.000Z\": 6.7627,\n    \"2019-11-18T08:00:00.000Z\": 6.7772,\n    \"2019-11-18T09:00:00.000Z\": 6.7425,\n    \"2019-11-18T10:00:00.000Z\": 6.7367,\n    \"2019-11-18T11:00:00.000Z\": 6.7425,\n    \"2019-11-18T12:00:00.000Z\": 6.7975,\n    \"2019-11-18T13:00:00.000Z\": 6.8032,\n    \"2019-11-18T14:00:00.000Z\": 6.7801,\n    \"2019-11-18T15:00:00.000Z\": 6.7222,\n    \"2019-11-18T16:00:00.000Z\": 6.7627,\n    \"2019-11-18T17:00:00.000Z\": 6.809,\n    \"2019-11-18T18:00:00.000Z\": 6.7714,\n    \"2019-11-18T19:00:00.000Z\": 6.7714,\n    \"2019-11-18T20:00:00.000Z\": 6.7483,\n    \"2019-11-18T21:00:00.000Z\": 6.6875,\n    \"2019-11-18T22:00:00.000Z\": 6.7627,\n    \"2019-11-18T23:00:00.000Z\": 6.7164,\n    \"2019-11-19T01:00:00.000Z\": 6.7888,\n    \"2019-11-19T02:00:00.000Z\": 6.8495,\n    \"2019-11-19T03:00:00.000Z\": 6.8264,\n    \"2019-11-19T04:00:00.000Z\": 6.7598,\n    \"2019-11-19T05:00:00.000Z\": 6.7338,\n    \"2019-11-19T06:00:00.000Z\": 6.7946,\n    \"2019-11-19T07:00:00.000Z\": 6.8206,\n    \"2019-11-19T08:00:00.000Z\": 6.7946,\n    \"2019-11-19T09:00:00.000Z\": 6.7598,\n    \"2019-11-19T10:00:00.000Z\": 6.7743,\n    \"2019-11-19T11:00:00.000Z\": 6.7888,\n    \"2019-11-19T12:00:00.000Z\": 6.8061,\n    \"2019-11-19T13:00:00.000Z\": 6.7367,\n    \"2019-11-19T14:00:00.000Z\": 6.8264,\n    \"2019-11-19T15:00:00.000Z\": 6.8235,\n    \"2019-11-19T16:00:00.000Z\": 6.7946,\n    \"2019-11-19T17:00:00.000Z\": 6.8061,\n    \"2019-11-19T18:00:00.000Z\": 6.838,\n    \"2019-11-19T19:00:00.000Z\": 6.8553,\n    \"2019-11-19T20:00:00.000Z\": 6.8003,\n    \"2019-11-19T21:00:00.000Z\": 6.7251,\n    \"2019-11-19T22:00:00.000Z\": 6.7598,\n    \"2019-11-19T23:00:00.000Z\": 6.7627,\n    \"2019-11-20T01:00:00.000Z\": 6.8177,\n    \"2019-11-20T02:00:00.000Z\": 6.8148,\n    \"2019-11-20T03:00:00.000Z\": 6.7975,\n    \"2019-11-20T04:00:00.000Z\": 6.7888,\n    \"2019-11-20T05:00:00.000Z\": 6.7309,\n    \"2019-11-20T06:00:00.000Z\": 6.7483,\n    \"2019-11-20T07:00:00.000Z\": 6.8148,\n    \"2019-11-20T08:00:00.000Z\": 6.7396,\n    \"2019-11-20T09:00:00.000Z\": 6.6701,\n    \"2019-11-20T10:00:00.000Z\": 5.6516,\n    \"2019-11-20T11:00:00.000Z\": 5.6516,\n    \"2019-11-20T12:00:00.000Z\": 5.5475,\n    \"2019-11-20T13:00:00.000Z\": 5.7095,\n    \"2019-11-20T14:00:00.000Z\": 5.7095,\n    \"2019-11-20T15:00:00.000Z\": 5.7066,\n    \"2019-11-20T16:00:00.000Z\": 6.0509,\n    \"2019-11-20T17:00:00.000Z\": 5.967,\n    \"2019-11-20T18:00:00.000Z\": 6.4039,\n    \"2019-11-20T19:00:00.000Z\": 6.919,\n    \"2019-11-20T20:00:00.000Z\": 7.1071,\n    \"2019-11-20T21:00:00.000Z\": 6.5486,\n    \"2019-11-20T22:00:00.000Z\": 6.4676,\n    \"2019-11-20T23:00:00.000Z\": 6.8409,\n    \"2019-11-21T01:00:00.000Z\": 6.8206,\n    \"2019-11-21T02:00:00.000Z\": 6.8785,\n    \"2019-11-21T03:00:00.000Z\": 6.864,\n    \"2019-11-21T04:00:00.000Z\": 7.3935,\n    \"2019-11-21T05:00:00.000Z\": 7.1997,\n    \"2019-11-21T06:00:00.000Z\": 7.3877,\n    \"2019-11-21T07:00:00.000Z\": 7.3009,\n    \"2019-11-21T08:00:00.000Z\": 6.9682,\n    \"2019-11-21T09:00:00.000Z\": 7.2054,\n    \"2019-11-21T10:00:00.000Z\": 7.1765,\n    \"2019-11-21T11:00:00.000Z\": 7.2286,\n    \"2019-11-21T12:00:00.000Z\": 7.6163,\n    \"2019-11-21T13:00:00.000Z\": 7.4398,\n    \"2019-11-21T14:00:00.000Z\": 6.7743,\n    \"2019-11-21T15:00:00.000Z\": 7.434,\n    \"2019-11-21T16:00:00.000Z\": 7.3993,\n    \"2019-11-21T17:00:00.000Z\": 7.3646,\n    \"2019-11-21T18:00:00.000Z\": 7.2228,\n    \"2019-11-21T19:00:00.000Z\": 6.9913,\n    \"2019-11-21T20:00:00.000Z\": 7.0492,\n    \"2019-11-21T21:00:00.000Z\": 7.0984,\n    \"2019-11-21T22:00:00.000Z\": 7.1707,\n    \"2019-11-21T23:00:00.000Z\": 7.1505,\n    \"2019-11-22T01:00:00.000Z\": 7.5671,\n    \"2019-11-22T02:00:00.000Z\": 7.272,\n    \"2019-11-22T03:00:00.000Z\": 7.1794,\n    \"2019-11-22T04:00:00.000Z\": 7.3588,\n    \"2019-11-22T05:00:00.000Z\": 7.1852,\n    \"2019-11-22T06:00:00.000Z\": 7.1215,\n    \"2019-11-22T07:00:00.000Z\": 7.8131,\n    \"2019-11-22T08:00:00.000Z\": 7.6019,\n    \"2019-11-22T09:00:00.000Z\": 7.7639,\n    \"2019-11-22T10:00:00.000Z\": 7.6192,\n    \"2019-11-22T11:00:00.000Z\": 7.5932,\n    \"2019-11-22T12:00:00.000Z\": 7.6655,\n    \"2019-11-22T13:00:00.000Z\": 7.6453,\n    \"2019-11-22T14:00:00.000Z\": 7.9057,\n    \"2019-11-22T15:00:00.000Z\": 7.4977,\n    \"2019-11-22T16:00:00.000Z\": 7.4398,\n    \"2019-11-22T17:00:00.000Z\": 7.6076,\n    \"2019-11-22T18:00:00.000Z\": 7.434,\n    \"2019-11-22T19:00:00.000Z\": 7.4919,\n    \"2019-11-22T20:00:00.000Z\": 8.0677,\n    \"2019-11-22T21:00:00.000Z\": 7.7407,\n    \"2019-11-22T22:00:00.000Z\": 7.5816,\n    \"2019-11-22T23:00:00.000Z\": 8.1863,\n    \"2019-11-23T01:00:00.000Z\": 7.5295,\n    \"2019-11-23T02:00:00.000Z\": 8.0098,\n    \"2019-11-23T03:00:00.000Z\": 7.5295,\n    \"2019-11-23T04:00:00.000Z\": 7.6453,\n    \"2019-11-23T05:00:00.000Z\": 7.515,\n    \"2019-11-23T06:00:00.000Z\": 7.5093,\n    \"2019-11-23T07:00:00.000Z\": 7.4659,\n    \"2019-11-23T08:00:00.000Z\": 7.5729,\n    \"2019-11-23T09:00:00.000Z\": 7.5266,\n    \"2019-11-23T10:00:00.000Z\": 7.7378,\n    \"2019-11-23T11:00:00.000Z\": 7.842,\n    \"2019-11-23T12:00:00.000Z\": 7.8507,\n    \"2019-11-23T13:00:00.000Z\": 7.9635,\n    \"2019-11-23T14:00:00.000Z\": 7.9462,\n    \"2019-11-23T15:00:00.000Z\": 7.952,\n    \"2019-11-23T16:00:00.000Z\": 7.8449,\n    \"2019-11-23T17:00:00.000Z\": 7.9404,\n    \"2019-11-23T18:00:00.000Z\": 7.9983,\n    \"2019-11-23T19:00:00.000Z\": 7.9491,\n    \"2019-11-23T20:00:00.000Z\": 8.0069,\n    \"2019-11-23T21:00:00.000Z\": 8.0735,\n    \"2019-11-23T22:00:00.000Z\": 8.0417,\n    \"2019-11-23T23:00:00.000Z\": 7.816,\n    \"2019-11-24T01:00:00.000Z\": 7.8623,\n    \"2019-11-24T02:00:00.000Z\": 7.8449,\n    \"2019-11-24T03:00:00.000Z\": 7.8275,\n    \"2019-11-24T04:00:00.000Z\": 7.787,\n    \"2019-11-24T05:00:00.000Z\": 7.8362,\n    \"2019-11-24T06:00:00.000Z\": 7.7668,\n    \"2019-11-24T07:00:00.000Z\": 7.5932,\n    \"2019-11-24T08:00:00.000Z\": 7.6568,\n    \"2019-11-24T09:00:00.000Z\": 7.4659,\n    \"2019-11-24T10:00:00.000Z\": 7.5035,\n    \"2019-11-24T11:00:00.000Z\": 7.5816,\n    \"2019-11-24T12:00:00.000Z\": 7.6076,\n    \"2019-11-24T13:00:00.000Z\": 7.599,\n    \"2019-11-24T14:00:00.000Z\": 7.6568,\n    \"2019-11-24T15:00:00.000Z\": 7.625,\n    \"2019-11-24T16:00:00.000Z\": 7.6308,\n    \"2019-11-24T17:00:00.000Z\": 7.7147,\n    \"2019-11-24T18:00:00.000Z\": 7.5006,\n    \"2019-11-24T19:00:00.000Z\": 7.4716,\n    \"2019-11-24T20:00:00.000Z\": 7.4919,\n    \"2019-11-24T21:00:00.000Z\": 7.3646,\n    \"2019-11-24T22:00:00.000Z\": 7.3964,\n    \"2019-11-24T23:00:00.000Z\": 7.4919,\n    \"2019-11-25T01:00:00.000Z\": 7.787,\n    \"2019-11-25T02:00:00.000Z\": 7.4427,\n    \"2019-11-25T03:00:00.000Z\": 7.8189,\n    \"2019-11-25T04:00:00.000Z\": 7.4774,\n    \"2019-11-25T05:00:00.000Z\": 7.9578,\n    \"2019-11-25T06:00:00.000Z\": 7.8738,\n    \"2019-11-25T07:00:00.000Z\": 8.3802,\n    \"2019-11-25T08:00:00.000Z\": 8.1719,\n    \"2019-11-25T09:00:00.000Z\": 7.5064,\n    \"2019-11-25T10:00:00.000Z\": 8.1632,\n    \"2019-11-25T11:00:00.000Z\": 8.088,\n    \"2019-11-25T12:00:00.000Z\": 7.9578,\n    \"2019-11-25T13:00:00.000Z\": 7.6424,\n    \"2019-11-25T14:00:00.000Z\": 7.7841,\n    \"2019-11-25T15:00:00.000Z\": 7.6308,\n    \"2019-11-25T16:00:00.000Z\": 7.5932,\n    \"2019-11-25T17:00:00.000Z\": 7.5064,\n    \"2019-11-25T18:00:00.000Z\": 8.1343,\n    \"2019-11-25T19:00:00.000Z\": 8.305,\n    \"2019-11-25T20:00:00.000Z\": 8.0503,\n    \"2019-11-25T21:00:00.000Z\": 8.0012,\n    \"2019-11-25T22:00:00.000Z\": 8.0012,\n    \"2019-11-25T23:00:00.000Z\": 8.0069,\n    \"2019-11-26T01:00:00.000Z\": 7.8941,\n    \"2019-11-26T02:00:00.000Z\": 7.8825,\n    \"2019-11-26T03:00:00.000Z\": 7.6944,\n    \"2019-11-26T04:00:00.000Z\": 8.0301,\n    \"2019-11-26T05:00:00.000Z\": 8.088,\n    \"2019-11-26T06:00:00.000Z\": 8.0648,\n    \"2019-11-26T07:00:00.000Z\": 7.9867,\n    \"2019-11-26T08:00:00.000Z\": 7.8507,\n    \"2019-11-26T09:00:00.000Z\": 7.8565,\n    \"2019-11-26T10:00:00.000Z\": 7.9722,\n    \"2019-11-26T11:00:00.000Z\": 8.0446,\n    \"2019-11-26T12:00:00.000Z\": 8.1748,\n    \"2019-11-26T13:00:00.000Z\": 7.8362,\n    \"2019-11-26T14:00:00.000Z\": 8.0648,\n    \"2019-11-26T15:00:00.000Z\": 8.0793,\n    \"2019-11-26T16:00:00.000Z\": 8.088,\n    \"2019-11-26T17:00:00.000Z\": 8.0793,\n    \"2019-11-26T18:00:00.000Z\": 8.0532,\n    \"2019-11-26T19:00:00.000Z\": 8.0677,\n    \"2019-11-26T20:00:00.000Z\": 8.0475,\n    \"2019-11-26T21:00:00.000Z\": 8.0156,\n    \"2019-11-26T22:00:00.000Z\": 7.9635,\n    \"2019-11-26T23:00:00.000Z\": 7.8854,\n    \"2019-11-27T01:00:00.000Z\": 7.7813,\n    \"2019-11-27T02:00:00.000Z\": 8.0243,\n    \"2019-11-27T03:00:00.000Z\": 8.195,\n    \"2019-11-27T04:00:00.000Z\": 8.1632,\n    \"2019-11-27T05:00:00.000Z\": 8.0272,\n    \"2019-11-27T06:00:00.000Z\": 7.9983,\n    \"2019-11-27T07:00:00.000Z\": 8.1574,\n    \"2019-11-27T08:00:00.000Z\": 8.2095,\n    \"2019-11-27T09:00:00.000Z\": 8.3079,\n    \"2019-11-27T10:00:00.000Z\": 8.331,\n    \"2019-11-27T11:00:00.000Z\": 8.3166,\n    \"2019-11-27T12:00:00.000Z\": 8.3426,\n    \"2019-11-27T13:00:00.000Z\": 8.3802,\n    \"2019-11-27T14:00:00.000Z\": 8.386,\n    \"2019-11-27T15:00:00.000Z\": 8.2703,\n    \"2019-11-27T16:00:00.000Z\": 8.3021,\n    \"2019-11-27T17:00:00.000Z\": 8.2442,\n    \"2019-11-27T18:00:00.000Z\": 8.1892,\n    \"2019-11-27T19:00:00.000Z\": 8.2269,\n    \"2019-11-27T20:00:00.000Z\": 8.3079,\n    \"2019-11-27T21:00:00.000Z\": 8.386,\n    \"2019-11-27T22:00:00.000Z\": 8.6146,\n    \"2019-11-27T23:00:00.000Z\": 8.5538,\n    \"2019-11-28T01:00:00.000Z\": 8.713,\n    \"2019-11-28T02:00:00.000Z\": 8.7072,\n    \"2019-11-28T03:00:00.000Z\": 8.739,\n    \"2019-11-28T04:00:00.000Z\": 8.765,\n    \"2019-11-28T05:00:00.000Z\": 8.794,\n    \"2019-11-28T06:00:00.000Z\": 8.7998,\n    \"2019-11-28T07:00:00.000Z\": 8.7824,\n    \"2019-11-28T08:00:00.000Z\": 8.8171,\n    \"2019-11-28T09:00:00.000Z\": 8.8519,\n    \"2019-11-28T10:00:00.000Z\": 9.5926,\n    \"2019-11-28T11:00:00.000Z\": 10.1858,\n    \"2019-11-28T12:00:00.000Z\": 9.9716,\n    \"2019-11-28T13:00:00.000Z\": 9.4334,\n    \"2019-11-28T14:00:00.000Z\": 9.3814,\n    \"2019-11-28T15:00:00.000Z\": 10.3478,\n    \"2019-11-28T16:00:00.000Z\": 9.6013,\n    \"2019-11-28T17:00:00.000Z\": 10.912,\n    \"2019-11-28T18:00:00.000Z\": 10.64,\n    \"2019-11-28T19:00:00.000Z\": 10.9873,\n    \"2019-11-28T20:00:00.000Z\": 11.1522,\n    \"2019-11-28T21:00:00.000Z\": 11.1233,\n    \"2019-11-28T22:00:00.000Z\": 11.1493,\n    \"2019-11-28T23:00:00.000Z\": 10.9149,\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nimport plotly.graph_objects as go\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef single_plotly_timeseries_plot(\n    series: pd.Series,\n    traces_opts: dict = {\"line_color\": \"#1199bb\"},\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    df = pd.DataFrame(\n        {\"value\": series, \"timestamp\": series.index}, index=series.index\n    ).sort_index()\n    # fig = px.line(df, x=\"timestamp\", y=\"value\", **line_opts)\n    fig = go.Figure([go.Scatter(x=df.index, y=df[\"value\"], mode=\"lines\")])\n\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    }\n    if series.name is not None:\n        layout_opts[\"yaxis_title\"] = series.name\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series\": DataType.Series},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Single Timeseries Plot\",\n    description=\"Plotting a single timeseries\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"8fba9b51-a0f1-6c6c-a6d4-e224103b819c\",\n    revision_group_id=\"8fba9b51-a0f1-6c6c-a6d4-e224103b819c\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.537411+00:00\"\n)\ndef main(*, series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(single_plotly_timeseries_plot(series))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
          "name": "series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e0320729-10df-8979-4444-feb6fe7adc82",
    "revision_group_id": "e0320729-10df-8979-4444-feb6fe7adc82",
    "name": "Display Table",
    "description": "Display DataFrame as table",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.368991+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Display Table\n\n## Description\nDisplay a DataFrame as table.\n\n## Inputs\n* **data** (Pandas DataFrame): The data to be displayed.\n\n## Outputs\n* **table** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component generates a simple table of the provided data using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"data\": {\n        \"col_1\": [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"b\"],\n        \"col_2\": [2, 3, 2, 4, 4, 4, 4]\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport plotly.graph_objects as go\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.DataFrame},\n    outputs={\"table\": DataType.PlotlyJson},\n    name=\"Display Table\",\n    description=\"Display DataFrame as table\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"e0320729-10df-8979-4444-feb6fe7adc82\",\n    revision_group_id=\"e0320729-10df-8979-4444-feb6fe7adc82\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.368991+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    columns = list(data.columns)\n    fig = go.Figure(\n        data=[\n            go.Table(\n                header=dict(values=columns, fill_color=\"paleturquoise\", align=\"left\"),\n                cells=dict(\n                    values=[data[col] for col in columns],\n                    fill_color=\"lavender\",\n                    align=\"left\",\n                ),\n            )\n        ]\n    )\n\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 400,\n    }\n    # scrollbars should be visible:\n    fig.update_layout(margin=dict(l=0, r=15.0, b=15.0, t=5, pad=0))\n    fig.update_layout(**layout_opts)\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return {\"table\": plotly_fig_to_json_dict(fig)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "efe7365f-394f-8eb0-f5e5-a3738c77275c",
          "name": "data",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "2fbb93b4-ef48-7e25-04a8-056547fb5a1e",
          "name": "table",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "56c937d5-37df-c70f-2113-808ef4a6d9ba",
    "revision_group_id": "56c937d5-37df-c70f-2113-808ef4a6d9ba",
    "name": "Timeseries Interval Boxplots",
    "description": "Box Plots for each day, week, month or year",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.229873+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeseries Interval Boxplots\n\n## Description\nCompare Box Plots of values grouped by an interval which can be day, week, month or year.\n\n## Inputs\n* **series** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n* **interval** (String): The inveral for the box plots. Should be one of \"year\", \"month\", \"week\" or \"day\".\n\n## Outputs\n* **plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots box plots on a time axis, one for each interval where interval can be selected as year, month, week or day. This allows for example to compare the daily distributions of values of a timeseries.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"interval\": \"d\", \n\t\"series\": {\n    \"2019-10-01T15:00:00.000Z\": 8.6464,\n    \"2019-10-01T16:00:00.000Z\": 8.6377,\n    \"2019-10-01T17:00:00.000Z\": 8.6348,\n    \"2019-10-01T18:00:00.000Z\": 8.6291,\n    \"2019-10-01T19:00:00.000Z\": 8.6291,\n    \"2019-10-01T20:00:00.000Z\": 8.6291,\n    \"2019-10-01T21:00:00.000Z\": 8.6233,\n    \"2019-10-01T22:00:00.000Z\": 8.6233,\n    \"2019-10-01T23:00:00.000Z\": 8.6175,\n    \"2019-10-02T01:00:00.000Z\": 8.6175,\n    \"2019-10-02T02:00:00.000Z\": 8.6175,\n    \"2019-10-02T03:00:00.000Z\": 8.6175,\n    \"2019-10-02T04:00:00.000Z\": 8.6117,\n    \"2019-10-02T05:00:00.000Z\": 8.6117,\n    \"2019-10-02T06:00:00.000Z\": 8.6001,\n    \"2019-10-02T07:00:00.000Z\": 8.5943,\n    \"2019-10-02T08:00:00.000Z\": 8.5856,\n    \"2019-10-02T09:00:00.000Z\": 8.577,\n    \"2019-10-02T10:00:00.000Z\": 8.6175,\n    \"2019-10-02T11:00:00.000Z\": 8.5741,\n    \"2019-10-02T12:00:00.000Z\": 8.5654,\n    \"2019-10-02T13:00:00.000Z\": 8.5625,\n    \"2019-10-02T14:00:00.000Z\": 8.5509,\n    \"2019-10-02T15:00:00.000Z\": 8.5422,\n    \"2019-10-02T16:00:00.000Z\": 8.5596,\n    \"2019-10-02T17:00:00.000Z\": 8.5856,\n    \"2019-10-02T18:00:00.000Z\": 8.5885,\n    \"2019-10-02T19:00:00.000Z\": 8.5914,\n    \"2019-10-02T20:00:00.000Z\": 8.5885,\n    \"2019-10-02T21:00:00.000Z\": 8.5856,\n    \"2019-10-02T22:00:00.000Z\": 8.5856,\n    \"2019-10-02T23:00:00.000Z\": 8.577,\n    \"2019-10-03T01:00:00.000Z\": 8.5712,\n    \"2019-10-03T02:00:00.000Z\": 8.5683,\n    \"2019-10-03T03:00:00.000Z\": 8.5596,\n    \"2019-10-03T04:00:00.000Z\": 8.5509,\n    \"2019-10-03T05:00:00.000Z\": 8.5538,\n    \"2019-10-03T06:00:00.000Z\": 8.548,\n    \"2019-10-03T07:00:00.000Z\": 8.5422,\n    \"2019-10-03T08:00:00.000Z\": 8.5365,\n    \"2019-10-03T09:00:00.000Z\": 8.5307,\n    \"2019-10-03T10:00:00.000Z\": 8.5278,\n    \"2019-10-03T11:00:00.000Z\": 8.5307,\n    \"2019-10-03T12:00:00.000Z\": 8.5365,\n    \"2019-10-03T13:00:00.000Z\": 8.5307,\n    \"2019-10-03T14:00:00.000Z\": 8.5307,\n    \"2019-10-03T15:00:00.000Z\": 8.5307,\n    \"2019-10-03T16:00:00.000Z\": 8.5278,\n    \"2019-10-03T17:00:00.000Z\": 8.5249,\n    \"2019-10-03T18:00:00.000Z\": 8.5249,\n    \"2019-10-03T19:00:00.000Z\": 8.5191,\n    \"2019-10-03T20:00:00.000Z\": 8.5191,\n    \"2019-10-03T21:00:00.000Z\": 8.5191,\n    \"2019-10-03T22:00:00.000Z\": 8.5191,\n    \"2019-10-03T23:00:00.000Z\": 8.5104,\n    \"2019-10-04T01:00:00.000Z\": 8.5104,\n    \"2019-10-04T02:00:00.000Z\": 8.5104,\n    \"2019-10-04T03:00:00.000Z\": 8.5046,\n    \"2019-10-04T04:00:00.000Z\": 8.4988,\n    \"2019-10-04T05:00:00.000Z\": 8.4988,\n    \"2019-10-04T06:00:00.000Z\": 8.4931,\n    \"2019-10-04T07:00:00.000Z\": 8.4844,\n    \"2019-10-04T08:00:00.000Z\": 8.4902,\n    \"2019-10-04T09:00:00.000Z\": 8.4468,\n    \"2019-10-04T10:00:00.000Z\": 8.4728,\n    \"2019-10-04T11:00:00.000Z\": 8.4815,\n    \"2019-10-04T12:00:00.000Z\": 8.4612,\n    \"2019-10-04T13:00:00.000Z\": 8.5075,\n    \"2019-10-04T14:00:00.000Z\": 8.4815,\n    \"2019-10-04T15:00:00.000Z\": 8.4902,\n    \"2019-10-04T16:00:00.000Z\": 8.548,\n    \"2019-10-04T17:00:00.000Z\": 8.5422,\n    \"2019-10-04T18:00:00.000Z\": 8.5509,\n    \"2019-10-04T19:00:00.000Z\": 8.5509,\n    \"2019-10-04T20:00:00.000Z\": 8.5509,\n    \"2019-10-04T21:00:00.000Z\": 8.5567,\n    \"2019-10-04T22:00:00.000Z\": 8.5307,\n    \"2019-10-04T23:00:00.000Z\": 8.5596,\n    \"2019-10-05T01:00:00.000Z\": 8.5712,\n    \"2019-10-05T02:00:00.000Z\": 8.5741,\n    \"2019-10-05T03:00:00.000Z\": 8.5712,\n    \"2019-10-05T04:00:00.000Z\": 8.5596,\n    \"2019-10-05T05:00:00.000Z\": 8.5654,\n    \"2019-10-05T06:00:00.000Z\": 8.5654,\n    \"2019-10-05T07:00:00.000Z\": 8.5654,\n    \"2019-10-05T08:00:00.000Z\": 8.5625,\n    \"2019-10-05T09:00:00.000Z\": 8.5625,\n    \"2019-10-05T10:00:00.000Z\": 8.548,\n    \"2019-10-05T11:00:00.000Z\": 8.5596,\n    \"2019-10-05T12:00:00.000Z\": 8.5596,\n    \"2019-10-05T13:00:00.000Z\": 8.5394,\n    \"2019-10-05T14:00:00.000Z\": 8.548,\n    \"2019-10-05T15:00:00.000Z\": 8.5538,\n    \"2019-10-05T16:00:00.000Z\": 8.5596,\n    \"2019-10-05T17:00:00.000Z\": 8.5596,\n    \"2019-10-05T18:00:00.000Z\": 8.5538,\n    \"2019-10-05T19:00:00.000Z\": 8.5596,\n    \"2019-10-05T20:00:00.000Z\": 8.5451,\n    \"2019-10-05T21:00:00.000Z\": 8.5394,\n    \"2019-10-05T22:00:00.000Z\": 8.5336,\n    \"2019-10-05T23:00:00.000Z\": 8.522,\n    \"2019-10-06T01:00:00.000Z\": 8.522,\n    \"2019-10-06T02:00:00.000Z\": 8.5104,\n    \"2019-10-06T03:00:00.000Z\": 8.5046,\n    \"2019-10-06T04:00:00.000Z\": 8.4988,\n    \"2019-10-06T05:00:00.000Z\": 8.5017,\n    \"2019-10-06T06:00:00.000Z\": 8.4844,\n    \"2019-10-06T07:00:00.000Z\": 8.4699,\n    \"2019-10-06T08:00:00.000Z\": 8.4641,\n    \"2019-10-06T09:00:00.000Z\": 8.4583,\n    \"2019-10-06T10:00:00.000Z\": 8.4525,\n    \"2019-10-06T11:00:00.000Z\": 8.4381,\n    \"2019-10-06T12:00:00.000Z\": 8.4294,\n    \"2019-10-06T13:00:00.000Z\": 8.4265,\n    \"2019-10-06T14:00:00.000Z\": 8.4178,\n    \"2019-10-06T15:00:00.000Z\": 8.4149,\n    \"2019-10-06T16:00:00.000Z\": 8.412,\n    \"2019-10-06T17:00:00.000Z\": 8.412,\n    \"2019-10-06T18:00:00.000Z\": 8.4091,\n    \"2019-10-06T19:00:00.000Z\": 8.4063,\n    \"2019-10-06T20:00:00.000Z\": 8.412,\n    \"2019-10-06T21:00:00.000Z\": 8.3889,\n    \"2019-10-06T22:00:00.000Z\": 8.4063,\n    \"2019-10-06T23:00:00.000Z\": 8.4063,\n    \"2019-10-07T01:00:00.000Z\": 8.4005,\n    \"2019-10-07T02:00:00.000Z\": 8.3976,\n    \"2019-10-07T03:00:00.000Z\": 8.3918,\n    \"2019-10-07T04:00:00.000Z\": 8.3889,\n    \"2019-10-07T05:00:00.000Z\": 8.386,\n    \"2019-10-07T06:00:00.000Z\": 8.3802,\n    \"2019-10-07T07:00:00.000Z\": 8.3628,\n    \"2019-10-07T08:00:00.000Z\": 8.3715,\n    \"2019-10-07T09:00:00.000Z\": 8.3657,\n    \"2019-10-07T10:00:00.000Z\": 8.36,\n    \"2019-10-07T11:00:00.000Z\": 8.3542,\n    \"2019-10-07T12:00:00.000Z\": 8.3455,\n    \"2019-10-07T13:00:00.000Z\": 8.36,\n    \"2019-10-07T14:00:00.000Z\": 8.3513,\n    \"2019-10-07T15:00:00.000Z\": 8.36,\n    \"2019-10-07T16:00:00.000Z\": 8.3571,\n    \"2019-10-07T17:00:00.000Z\": 8.36,\n    \"2019-10-07T18:00:00.000Z\": 8.3628,\n    \"2019-10-07T19:00:00.000Z\": 8.36,\n    \"2019-10-07T20:00:00.000Z\": 8.3657,\n    \"2019-10-07T21:00:00.000Z\": 8.3571,\n    \"2019-10-07T22:00:00.000Z\": 8.3657,\n    \"2019-10-07T23:00:00.000Z\": 8.3744,\n    \"2019-10-08T01:00:00.000Z\": 8.3773,\n    \"2019-10-08T02:00:00.000Z\": 8.3744,\n    \"2019-10-08T03:00:00.000Z\": 8.3744,\n    \"2019-10-08T04:00:00.000Z\": 8.3744,\n    \"2019-10-08T05:00:00.000Z\": 8.3773,\n    \"2019-10-08T06:00:00.000Z\": 8.3773,\n    \"2019-10-08T07:00:00.000Z\": 8.3802,\n    \"2019-10-08T08:00:00.000Z\": 8.3773,\n    \"2019-10-08T09:00:00.000Z\": 8.36,\n    \"2019-10-08T10:00:00.000Z\": 8.3628,\n    \"2019-10-08T11:00:00.000Z\": 8.4034,\n    \"2019-10-08T12:00:00.000Z\": 8.3744,\n    \"2019-10-08T13:00:00.000Z\": 8.4005,\n    \"2019-10-08T14:00:00.000Z\": 8.4294,\n    \"2019-10-08T15:00:00.000Z\": 8.3802,\n    \"2019-10-08T16:00:00.000Z\": 8.4294,\n    \"2019-10-08T17:00:00.000Z\": 8.4699,\n    \"2019-10-08T18:00:00.000Z\": 8.4902,\n    \"2019-10-08T19:00:00.000Z\": 8.4931,\n    \"2019-10-08T20:00:00.000Z\": 8.4902,\n    \"2019-10-08T21:00:00.000Z\": 8.4902,\n    \"2019-10-08T22:00:00.000Z\": 8.4873,\n    \"2019-10-08T23:00:00.000Z\": 8.4902,\n    \"2019-10-09T01:00:00.000Z\": 8.4873,\n    \"2019-10-09T02:00:00.000Z\": 8.4902,\n    \"2019-10-09T03:00:00.000Z\": 8.4902,\n    \"2019-10-09T04:00:00.000Z\": 8.4902,\n    \"2019-10-09T05:00:00.000Z\": 8.4902,\n    \"2019-10-09T06:00:00.000Z\": 8.4902,\n    \"2019-10-09T07:00:00.000Z\": 8.4902,\n    \"2019-10-09T08:00:00.000Z\": 8.4873,\n    \"2019-10-09T09:00:00.000Z\": 8.4873,\n    \"2019-10-09T10:00:00.000Z\": 8.522,\n    \"2019-10-09T11:00:00.000Z\": 8.5422,\n    \"2019-10-09T12:00:00.000Z\": 8.5509,\n    \"2019-10-09T13:00:00.000Z\": 8.5885,\n    \"2019-10-09T14:00:00.000Z\": 8.6088,\n    \"2019-10-09T15:00:00.000Z\": 8.6233,\n    \"2019-10-09T16:00:00.000Z\": 8.6319,\n    \"2019-10-09T17:00:00.000Z\": 8.6291,\n    \"2019-10-09T18:00:00.000Z\": 8.6464,\n    \"2019-10-09T19:00:00.000Z\": 8.6522,\n    \"2019-10-09T20:00:00.000Z\": 8.6522,\n    \"2019-10-09T21:00:00.000Z\": 8.6551,\n    \"2019-10-09T22:00:00.000Z\": 8.658,\n    \"2019-10-09T23:00:00.000Z\": 8.6638,\n    \"2019-10-10T01:00:00.000Z\": 8.6522,\n    \"2019-10-10T02:00:00.000Z\": 8.6725,\n    \"2019-10-10T03:00:00.000Z\": 8.6753,\n    \"2019-10-10T04:00:00.000Z\": 8.6609,\n    \"2019-10-10T05:00:00.000Z\": 8.6146,\n    \"2019-10-10T06:00:00.000Z\": 8.6522,\n    \"2019-10-10T07:00:00.000Z\": 8.6696,\n    \"2019-10-10T08:00:00.000Z\": 8.6725,\n    \"2019-10-10T09:00:00.000Z\": 8.6725,\n    \"2019-10-10T10:00:00.000Z\": 8.6811,\n    \"2019-10-10T11:00:00.000Z\": 8.684,\n    \"2019-10-10T12:00:00.000Z\": 8.684,\n    \"2019-10-10T13:00:00.000Z\": 8.6782,\n    \"2019-10-10T14:00:00.000Z\": 8.6609,\n    \"2019-10-10T15:00:00.000Z\": 8.6609,\n    \"2019-10-10T16:00:00.000Z\": 8.6059,\n    \"2019-10-10T17:00:00.000Z\": 8.6117,\n    \"2019-10-10T18:00:00.000Z\": 8.6175,\n    \"2019-10-10T19:00:00.000Z\": 8.6638,\n    \"2019-10-10T20:00:00.000Z\": 8.6667,\n    \"2019-10-10T21:00:00.000Z\": 8.6725,\n    \"2019-10-10T22:00:00.000Z\": 8.6753,\n    \"2019-10-10T23:00:00.000Z\": 8.6811,\n    \"2019-10-11T01:00:00.000Z\": 8.6782,\n    \"2019-10-11T02:00:00.000Z\": 8.684,\n    \"2019-10-11T03:00:00.000Z\": 8.6811,\n    \"2019-10-11T04:00:00.000Z\": 8.6782,\n    \"2019-10-11T05:00:00.000Z\": 8.6725,\n    \"2019-10-11T06:00:00.000Z\": 8.6262,\n    \"2019-10-11T07:00:00.000Z\": 8.6667,\n    \"2019-10-11T08:00:00.000Z\": 8.6667,\n    \"2019-10-11T09:00:00.000Z\": 8.6725,\n    \"2019-10-11T10:00:00.000Z\": 8.6725,\n    \"2019-10-11T11:00:00.000Z\": 8.6725,\n    \"2019-10-11T12:00:00.000Z\": 8.6725,\n    \"2019-10-11T13:00:00.000Z\": 8.6233,\n    \"2019-10-11T14:00:00.000Z\": 8.6319,\n    \"2019-10-11T15:00:00.000Z\": 8.6725,\n    \"2019-10-11T16:00:00.000Z\": 8.6753,\n    \"2019-10-11T17:00:00.000Z\": 8.6753,\n    \"2019-10-11T18:00:00.000Z\": 8.6782,\n    \"2019-10-11T19:00:00.000Z\": 8.6811,\n    \"2019-10-11T20:00:00.000Z\": 8.6811,\n    \"2019-10-11T21:00:00.000Z\": 8.6811,\n    \"2019-10-11T22:00:00.000Z\": 8.6782,\n    \"2019-10-11T23:00:00.000Z\": 8.6348,\n    \"2019-10-12T01:00:00.000Z\": 8.6811,\n    \"2019-10-12T02:00:00.000Z\": 8.684,\n    \"2019-10-12T03:00:00.000Z\": 8.6696,\n    \"2019-10-12T04:00:00.000Z\": 8.6811,\n    \"2019-10-12T05:00:00.000Z\": 8.6869,\n    \"2019-10-12T06:00:00.000Z\": 8.684,\n    \"2019-10-12T07:00:00.000Z\": 8.684,\n    \"2019-10-12T08:00:00.000Z\": 8.6782,\n    \"2019-10-12T09:00:00.000Z\": 8.6782,\n    \"2019-10-12T10:00:00.000Z\": 8.6753,\n    \"2019-10-12T11:00:00.000Z\": 8.6377,\n    \"2019-10-12T12:00:00.000Z\": 8.6406,\n    \"2019-10-12T13:00:00.000Z\": 8.6782,\n    \"2019-10-12T14:00:00.000Z\": 8.6782,\n    \"2019-10-12T15:00:00.000Z\": 8.6811,\n    \"2019-10-12T16:00:00.000Z\": 8.6811,\n    \"2019-10-12T17:00:00.000Z\": 8.6811,\n    \"2019-10-12T18:00:00.000Z\": 8.6782,\n    \"2019-10-12T19:00:00.000Z\": 8.6811,\n    \"2019-10-12T20:00:00.000Z\": 8.6811,\n    \"2019-10-12T21:00:00.000Z\": 8.6811,\n    \"2019-10-12T22:00:00.000Z\": 8.684,\n    \"2019-10-12T23:00:00.000Z\": 8.6782,\n    \"2019-10-13T01:00:00.000Z\": 8.6782,\n    \"2019-10-13T02:00:00.000Z\": 8.6725,\n    \"2019-10-13T03:00:00.000Z\": 8.6782,\n    \"2019-10-13T04:00:00.000Z\": 8.6869,\n    \"2019-10-13T05:00:00.000Z\": 8.6869,\n    \"2019-10-13T06:00:00.000Z\": 8.6898,\n    \"2019-10-13T07:00:00.000Z\": 8.6898,\n    \"2019-10-13T08:00:00.000Z\": 8.6898,\n    \"2019-10-13T09:00:00.000Z\": 8.6927,\n    \"2019-10-13T10:00:00.000Z\": 8.6927,\n    \"2019-10-13T11:00:00.000Z\": 8.6956,\n    \"2019-10-13T12:00:00.000Z\": 8.7014,\n    \"2019-10-13T13:00:00.000Z\": 8.7043,\n    \"2019-10-13T14:00:00.000Z\": 8.7072,\n    \"2019-10-13T15:00:00.000Z\": 8.7101,\n    \"2019-10-13T16:00:00.000Z\": 8.7188,\n    \"2019-10-13T17:00:00.000Z\": 8.7332,\n    \"2019-10-13T18:00:00.000Z\": 8.739,\n    \"2019-10-13T19:00:00.000Z\": 8.7535,\n    \"2019-10-13T20:00:00.000Z\": 8.7622,\n    \"2019-10-13T21:00:00.000Z\": 8.7708,\n    \"2019-10-13T22:00:00.000Z\": 8.7766,\n    \"2019-10-13T23:00:00.000Z\": 8.7824,\n    \"2019-10-14T01:00:00.000Z\": 8.7882,\n    \"2019-10-14T02:00:00.000Z\": 8.794,\n    \"2019-10-14T03:00:00.000Z\": 8.7882,\n    \"2019-10-14T04:00:00.000Z\": 8.7882,\n    \"2019-10-14T05:00:00.000Z\": 8.794,\n    \"2019-10-14T06:00:00.000Z\": 8.794,\n    \"2019-10-14T07:00:00.000Z\": 8.794,\n    \"2019-10-14T08:00:00.000Z\": 8.7969,\n    \"2019-10-14T09:00:00.000Z\": 8.7998,\n    \"2019-10-14T10:00:00.000Z\": 8.7998,\n    \"2019-10-14T11:00:00.000Z\": 8.7998,\n    \"2019-10-14T12:00:00.000Z\": 8.7969,\n    \"2019-10-14T13:00:00.000Z\": 8.7998,\n    \"2019-10-14T14:00:00.000Z\": 8.794,\n    \"2019-10-14T15:00:00.000Z\": 8.8084,\n    \"2019-10-14T16:00:00.000Z\": 8.8113,\n    \"2019-10-14T17:00:00.000Z\": 8.8056,\n    \"2019-10-14T18:00:00.000Z\": 8.8056,\n    \"2019-10-14T19:00:00.000Z\": 8.8056,\n    \"2019-10-14T20:00:00.000Z\": 8.8027,\n    \"2019-10-14T21:00:00.000Z\": 8.8056,\n    \"2019-10-14T22:00:00.000Z\": 8.8027,\n    \"2019-10-14T23:00:00.000Z\": 8.8142,\n    \"2019-10-15T01:00:00.000Z\": 8.8142,\n    \"2019-10-15T02:00:00.000Z\": 8.82,\n    \"2019-10-15T03:00:00.000Z\": 8.8229,\n    \"2019-10-15T04:00:00.000Z\": 8.8229,\n    \"2019-10-15T05:00:00.000Z\": 8.8345,\n    \"2019-10-15T06:00:00.000Z\": 8.8316,\n    \"2019-10-15T07:00:00.000Z\": 8.8229,\n    \"2019-10-15T08:00:00.000Z\": 8.8171,\n    \"2019-10-15T09:00:00.000Z\": 8.8229,\n    \"2019-10-15T10:00:00.000Z\": 8.82,\n    \"2019-10-15T11:00:00.000Z\": 8.8142,\n    \"2019-10-15T12:00:00.000Z\": 8.8142,\n    \"2019-10-15T13:00:00.000Z\": 8.8171,\n    \"2019-10-15T14:00:00.000Z\": 8.8258,\n    \"2019-10-15T15:00:00.000Z\": 8.82,\n    \"2019-10-15T16:00:00.000Z\": 8.8287,\n    \"2019-10-15T17:00:00.000Z\": 8.8229,\n    \"2019-10-15T18:00:00.000Z\": 8.8142,\n    \"2019-10-15T19:00:00.000Z\": 8.8113,\n    \"2019-10-15T20:00:00.000Z\": 8.8084,\n    \"2019-10-15T21:00:00.000Z\": 8.8142,\n    \"2019-10-15T22:00:00.000Z\": 8.8084,\n    \"2019-10-15T23:00:00.000Z\": 8.7824,\n    \"2019-10-16T01:00:00.000Z\": 8.7708,\n    \"2019-10-16T02:00:00.000Z\": 8.794,\n    \"2019-10-16T03:00:00.000Z\": 8.8027,\n    \"2019-10-16T04:00:00.000Z\": 8.7708,\n    \"2019-10-16T05:00:00.000Z\": 8.7969,\n    \"2019-10-16T06:00:00.000Z\": 8.8171,\n    \"2019-10-16T07:00:00.000Z\": 8.8113,\n    \"2019-10-16T08:00:00.000Z\": 8.8171,\n    \"2019-10-16T09:00:00.000Z\": 8.8084,\n    \"2019-10-16T10:00:00.000Z\": 8.7766,\n    \"2019-10-16T11:00:00.000Z\": 8.7679,\n    \"2019-10-16T12:00:00.000Z\": 8.713,\n    \"2019-10-16T13:00:00.000Z\": 8.6464,\n    \"2019-10-16T14:00:00.000Z\": 8.6725,\n    \"2019-10-16T15:00:00.000Z\": 8.6696,\n    \"2019-10-16T16:00:00.000Z\": 8.6319,\n    \"2019-10-16T17:00:00.000Z\": 8.6638,\n    \"2019-10-16T18:00:00.000Z\": 8.7072,\n    \"2019-10-16T19:00:00.000Z\": 8.7159,\n    \"2019-10-16T20:00:00.000Z\": 8.7216,\n    \"2019-10-16T21:00:00.000Z\": 8.7477,\n    \"2019-10-16T22:00:00.000Z\": 8.7506,\n    \"2019-10-16T23:00:00.000Z\": 8.765,\n    \"2019-10-17T01:00:00.000Z\": 8.7824,\n    \"2019-10-17T02:00:00.000Z\": 8.7708,\n    \"2019-10-17T03:00:00.000Z\": 8.7679,\n    \"2019-10-17T04:00:00.000Z\": 8.794,\n    \"2019-10-17T05:00:00.000Z\": 8.7998,\n    \"2019-10-17T06:00:00.000Z\": 8.7911,\n    \"2019-10-17T07:00:00.000Z\": 8.7882,\n    \"2019-10-17T08:00:00.000Z\": 8.765,\n    \"2019-10-17T09:00:00.000Z\": 8.7448,\n    \"2019-10-17T10:00:00.000Z\": 8.6898,\n    \"2019-10-17T11:00:00.000Z\": 8.6782,\n    \"2019-10-17T12:00:00.000Z\": 8.5567,\n    \"2019-10-17T13:00:00.000Z\": 8.5741,\n    \"2019-10-17T14:00:00.000Z\": 8.603,\n    \"2019-10-17T15:00:00.000Z\": 8.5943,\n    \"2019-10-17T16:00:00.000Z\": 8.6117,\n    \"2019-10-17T17:00:00.000Z\": 8.6088,\n    \"2019-10-17T18:00:00.000Z\": 8.6088,\n    \"2019-10-17T19:00:00.000Z\": 8.6059,\n    \"2019-10-17T20:00:00.000Z\": 8.5972,\n    \"2019-10-17T21:00:00.000Z\": 8.6088,\n    \"2019-10-17T22:00:00.000Z\": 8.6175,\n    \"2019-10-17T23:00:00.000Z\": 8.6146,\n    \"2019-10-18T01:00:00.000Z\": 8.6059,\n    \"2019-10-18T02:00:00.000Z\": 8.6204,\n    \"2019-10-18T03:00:00.000Z\": 8.6233,\n    \"2019-10-18T04:00:00.000Z\": 8.6262,\n    \"2019-10-18T05:00:00.000Z\": 8.6262,\n    \"2019-10-18T06:00:00.000Z\": 8.6233,\n    \"2019-10-18T07:00:00.000Z\": 8.603,\n    \"2019-10-18T08:00:00.000Z\": 8.6262,\n    \"2019-10-18T09:00:00.000Z\": 8.6233,\n    \"2019-10-18T10:00:00.000Z\": 8.603,\n    \"2019-10-18T11:00:00.000Z\": 8.6464,\n    \"2019-10-18T12:00:00.000Z\": 8.6667,\n    \"2019-10-18T13:00:00.000Z\": 8.6956,\n    \"2019-10-18T14:00:00.000Z\": 8.7159,\n    \"2019-10-18T15:00:00.000Z\": 8.7188,\n    \"2019-10-18T16:00:00.000Z\": 8.7188,\n    \"2019-10-18T17:00:00.000Z\": 8.7303,\n    \"2019-10-18T18:00:00.000Z\": 8.7361,\n    \"2019-10-18T19:00:00.000Z\": 8.7361,\n    \"2019-10-18T20:00:00.000Z\": 8.7332,\n    \"2019-10-18T21:00:00.000Z\": 8.7245,\n    \"2019-10-18T22:00:00.000Z\": 8.7188,\n    \"2019-10-18T23:00:00.000Z\": 8.7159,\n    \"2019-10-19T01:00:00.000Z\": 8.7072,\n    \"2019-10-19T02:00:00.000Z\": 8.6985,\n    \"2019-10-19T03:00:00.000Z\": 8.6782,\n    \"2019-10-19T04:00:00.000Z\": 8.6898,\n    \"2019-10-19T05:00:00.000Z\": 8.6811,\n    \"2019-10-19T06:00:00.000Z\": 8.6725,\n    \"2019-10-19T07:00:00.000Z\": 8.6696,\n    \"2019-10-19T08:00:00.000Z\": 8.6667,\n    \"2019-10-19T09:00:00.000Z\": 8.6551,\n    \"2019-10-19T10:00:00.000Z\": 8.6464,\n    \"2019-10-19T11:00:00.000Z\": 8.6406,\n    \"2019-10-19T12:00:00.000Z\": 8.6406,\n    \"2019-10-19T13:00:00.000Z\": 8.6377,\n    \"2019-10-19T14:00:00.000Z\": 8.6348,\n    \"2019-10-19T15:00:00.000Z\": 8.6348,\n    \"2019-10-19T16:00:00.000Z\": 8.6059,\n    \"2019-10-19T17:00:00.000Z\": 8.6175,\n    \"2019-10-19T18:00:00.000Z\": 8.6319,\n    \"2019-10-19T19:00:00.000Z\": 8.6262,\n    \"2019-10-19T20:00:00.000Z\": 8.6204,\n    \"2019-10-19T21:00:00.000Z\": 8.6204,\n    \"2019-10-19T22:00:00.000Z\": 8.6204,\n    \"2019-10-19T23:00:00.000Z\": 8.6204,\n    \"2019-10-20T01:00:00.000Z\": 8.6146,\n    \"2019-10-20T02:00:00.000Z\": 8.6088,\n    \"2019-10-20T03:00:00.000Z\": 8.6088,\n    \"2019-10-20T04:00:00.000Z\": 8.6059,\n    \"2019-10-20T05:00:00.000Z\": 8.6001,\n    \"2019-10-20T06:00:00.000Z\": 8.5972,\n    \"2019-10-20T07:00:00.000Z\": 8.5828,\n    \"2019-10-20T08:00:00.000Z\": 8.5856,\n    \"2019-10-20T09:00:00.000Z\": 8.5799,\n    \"2019-10-20T10:00:00.000Z\": 8.5856,\n    \"2019-10-20T11:00:00.000Z\": 8.5856,\n    \"2019-10-20T12:00:00.000Z\": 8.5828,\n    \"2019-10-20T13:00:00.000Z\": 8.5799,\n    \"2019-10-20T14:00:00.000Z\": 8.577,\n    \"2019-10-20T15:00:00.000Z\": 8.5712,\n    \"2019-10-20T16:00:00.000Z\": 8.5422,\n    \"2019-10-20T17:00:00.000Z\": 8.5625,\n    \"2019-10-20T18:00:00.000Z\": 8.5654,\n    \"2019-10-20T19:00:00.000Z\": 8.5625,\n    \"2019-10-20T20:00:00.000Z\": 8.5567,\n    \"2019-10-20T21:00:00.000Z\": 8.5538,\n    \"2019-10-20T22:00:00.000Z\": 8.5509,\n    \"2019-10-20T23:00:00.000Z\": 8.5451,\n    \"2019-10-21T01:00:00.000Z\": 8.5422,\n    \"2019-10-21T02:00:00.000Z\": 8.5422,\n    \"2019-10-21T03:00:00.000Z\": 8.5394,\n    \"2019-10-21T04:00:00.000Z\": 8.5336,\n    \"2019-10-21T05:00:00.000Z\": 8.5365,\n    \"2019-10-21T06:00:00.000Z\": 8.5365,\n    \"2019-10-21T07:00:00.000Z\": 8.5365,\n    \"2019-10-21T08:00:00.000Z\": 8.5365,\n    \"2019-10-21T09:00:00.000Z\": 8.5307,\n    \"2019-10-21T10:00:00.000Z\": 8.4699,\n    \"2019-10-21T11:00:00.000Z\": 8.4873,\n    \"2019-10-21T12:00:00.000Z\": 8.4988,\n    \"2019-10-21T13:00:00.000Z\": 8.5017,\n    \"2019-10-21T14:00:00.000Z\": 8.5017,\n    \"2019-10-21T15:00:00.000Z\": 8.5046,\n    \"2019-10-21T16:00:00.000Z\": 8.5075,\n    \"2019-10-21T17:00:00.000Z\": 8.5075,\n    \"2019-10-21T18:00:00.000Z\": 8.4902,\n    \"2019-10-21T19:00:00.000Z\": 8.4902,\n    \"2019-10-21T20:00:00.000Z\": 8.4959,\n    \"2019-10-21T21:00:00.000Z\": 8.4959,\n    \"2019-10-21T22:00:00.000Z\": 8.4931,\n    \"2019-10-21T23:00:00.000Z\": 8.4959,\n    \"2019-10-22T01:00:00.000Z\": 8.4873,\n    \"2019-10-22T02:00:00.000Z\": 8.4873,\n    \"2019-10-22T03:00:00.000Z\": 8.4873,\n    \"2019-10-22T04:00:00.000Z\": 8.4873,\n    \"2019-10-22T05:00:00.000Z\": 8.4873,\n    \"2019-10-22T06:00:00.000Z\": 8.4786,\n    \"2019-10-22T07:00:00.000Z\": 8.4786,\n    \"2019-10-22T08:00:00.000Z\": 8.467,\n    \"2019-10-22T09:00:00.000Z\": 8.522,\n    \"2019-10-22T10:00:00.000Z\": 8.5683,\n    \"2019-10-22T11:00:00.000Z\": 8.577,\n    \"2019-10-22T12:00:00.000Z\": 8.5828,\n    \"2019-10-22T13:00:00.000Z\": 8.5885,\n    \"2019-10-22T14:00:00.000Z\": 8.5799,\n    \"2019-10-22T15:00:00.000Z\": 8.5741,\n    \"2019-10-22T16:00:00.000Z\": 8.5712,\n    \"2019-10-22T17:00:00.000Z\": 8.5741,\n    \"2019-10-22T18:00:00.000Z\": 8.5683,\n    \"2019-10-22T19:00:00.000Z\": 8.5712,\n    \"2019-10-22T20:00:00.000Z\": 8.5683,\n    \"2019-10-22T21:00:00.000Z\": 8.5683,\n    \"2019-10-22T22:00:00.000Z\": 8.5654,\n    \"2019-10-22T23:00:00.000Z\": 8.5654,\n    \"2019-10-23T01:00:00.000Z\": 8.5625,\n    \"2019-10-23T02:00:00.000Z\": 8.5596,\n    \"2019-10-23T03:00:00.000Z\": 8.5596,\n    \"2019-10-23T04:00:00.000Z\": 8.5596,\n    \"2019-10-23T05:00:00.000Z\": 8.5596,\n    \"2019-10-23T06:00:00.000Z\": 8.548,\n    \"2019-10-23T07:00:00.000Z\": 8.548,\n    \"2019-10-23T08:00:00.000Z\": 8.5394,\n    \"2019-10-23T09:00:00.000Z\": 8.5394,\n    \"2019-10-23T10:00:00.000Z\": 8.5394,\n    \"2019-10-23T11:00:00.000Z\": 8.5336,\n    \"2019-10-23T12:00:00.000Z\": 8.5625,\n    \"2019-10-23T13:00:00.000Z\": 8.5683,\n    \"2019-10-23T14:00:00.000Z\": 8.5712,\n    \"2019-10-23T15:00:00.000Z\": 8.4728,\n    \"2019-10-23T16:00:00.000Z\": 8.4844,\n    \"2019-10-23T17:00:00.000Z\": 8.4815,\n    \"2019-10-23T18:00:00.000Z\": 8.5017,\n    \"2019-10-23T19:00:00.000Z\": 8.5104,\n    \"2019-10-23T20:00:00.000Z\": 8.5162,\n    \"2019-10-23T21:00:00.000Z\": 8.522,\n    \"2019-10-23T22:00:00.000Z\": 8.5162,\n    \"2019-10-23T23:00:00.000Z\": 8.5278,\n    \"2019-10-24T01:00:00.000Z\": 8.5162,\n    \"2019-10-24T02:00:00.000Z\": 8.5307,\n    \"2019-10-24T03:00:00.000Z\": 8.5394,\n    \"2019-10-24T04:00:00.000Z\": 8.5394,\n    \"2019-10-24T05:00:00.000Z\": 8.548,\n    \"2019-10-24T06:00:00.000Z\": 8.5075,\n    \"2019-10-24T07:00:00.000Z\": 8.5538,\n    \"2019-10-24T08:00:00.000Z\": 8.5741,\n    \"2019-10-24T09:00:00.000Z\": 8.5828,\n    \"2019-10-24T10:00:00.000Z\": 8.5914,\n    \"2019-10-24T11:00:00.000Z\": 8.5856,\n    \"2019-10-24T12:00:00.000Z\": 8.5914,\n    \"2019-10-24T13:00:00.000Z\": 8.5972,\n    \"2019-10-24T14:00:00.000Z\": 8.5972,\n    \"2019-10-24T15:00:00.000Z\": 8.6001,\n    \"2019-10-24T16:00:00.000Z\": 8.6088,\n    \"2019-10-24T17:00:00.000Z\": 8.6117,\n    \"2019-10-24T18:00:00.000Z\": 8.6175,\n    \"2019-10-24T19:00:00.000Z\": 8.6175,\n    \"2019-10-24T20:00:00.000Z\": 8.603,\n    \"2019-10-24T21:00:00.000Z\": 8.6059,\n    \"2019-10-24T22:00:00.000Z\": 8.603,\n    \"2019-10-24T23:00:00.000Z\": 8.6088,\n    \"2019-10-25T01:00:00.000Z\": 8.6117,\n    \"2019-10-25T02:00:00.000Z\": 8.6175,\n    \"2019-10-25T03:00:00.000Z\": 8.6146,\n    \"2019-10-25T04:00:00.000Z\": 8.6146,\n    \"2019-10-25T05:00:00.000Z\": 8.603,\n    \"2019-10-25T06:00:00.000Z\": 8.5683,\n    \"2019-10-25T07:00:00.000Z\": 8.5683,\n    \"2019-10-25T08:00:00.000Z\": 8.5625,\n    \"2019-10-25T09:00:00.000Z\": 8.5654,\n    \"2019-10-25T10:00:00.000Z\": 8.5741,\n    \"2019-10-25T11:00:00.000Z\": 8.5712,\n    \"2019-10-25T12:00:00.000Z\": 8.5654,\n    \"2019-10-25T13:00:00.000Z\": 8.5625,\n    \"2019-10-25T14:00:00.000Z\": 8.5596,\n    \"2019-10-25T15:00:00.000Z\": 8.5712,\n    \"2019-10-25T16:00:00.000Z\": 8.5654,\n    \"2019-10-25T17:00:00.000Z\": 8.5828,\n    \"2019-10-25T18:00:00.000Z\": 8.6001,\n    \"2019-10-25T19:00:00.000Z\": 8.5914,\n    \"2019-10-25T20:00:00.000Z\": 8.5914,\n    \"2019-10-25T21:00:00.000Z\": 8.5856,\n    \"2019-10-25T22:00:00.000Z\": 8.5914,\n    \"2019-10-25T23:00:00.000Z\": 8.5828,\n    \"2019-10-26T01:00:00.000Z\": 8.5914,\n    \"2019-10-26T02:00:00.000Z\": 8.5741,\n    \"2019-10-26T03:00:00.000Z\": 8.5943,\n    \"2019-10-26T04:00:00.000Z\": 8.5828,\n    \"2019-10-26T05:00:00.000Z\": 8.5885,\n    \"2019-10-26T06:00:00.000Z\": 8.5914,\n    \"2019-10-26T07:00:00.000Z\": 8.5943,\n    \"2019-10-26T08:00:00.000Z\": 8.5943,\n    \"2019-10-26T09:00:00.000Z\": 8.5943,\n    \"2019-10-26T10:00:00.000Z\": 8.5943,\n    \"2019-10-26T11:00:00.000Z\": 8.577,\n    \"2019-10-26T12:00:00.000Z\": 8.5972,\n    \"2019-10-26T13:00:00.000Z\": 8.6001,\n    \"2019-10-26T14:00:00.000Z\": 8.6146,\n    \"2019-10-26T15:00:00.000Z\": 8.6117,\n    \"2019-10-26T16:00:00.000Z\": 8.6001,\n    \"2019-10-26T17:00:00.000Z\": 8.5596,\n    \"2019-10-26T18:00:00.000Z\": 8.5509,\n    \"2019-10-26T19:00:00.000Z\": 8.5422,\n    \"2019-10-26T20:00:00.000Z\": 8.5336,\n    \"2019-10-26T21:00:00.000Z\": 8.5278,\n    \"2019-10-26T22:00:00.000Z\": 8.5278,\n    \"2019-10-26T23:00:00.000Z\": 8.5683,\n    \"2019-10-27T01:00:00.000Z\": 8.5712,\n    \"2019-10-27T02:00:00.000Z\": 8.5741,\n    \"2019-10-27T03:00:00.000Z\": 8.5741,\n    \"2019-10-27T04:00:00.000Z\": 8.5828,\n    \"2019-10-27T05:00:00.000Z\": 8.548,\n    \"2019-10-27T06:00:00.000Z\": 8.5741,\n    \"2019-10-27T07:00:00.000Z\": 8.5712,\n    \"2019-10-27T08:00:00.000Z\": 8.5509,\n    \"2019-10-27T09:00:00.000Z\": 8.5741,\n    \"2019-10-27T10:00:00.000Z\": 8.5741,\n    \"2019-10-27T11:00:00.000Z\": 8.5712,\n    \"2019-10-27T12:00:00.000Z\": 8.5712,\n    \"2019-10-27T13:00:00.000Z\": 8.5914,\n    \"2019-10-27T14:00:00.000Z\": 8.577,\n    \"2019-10-27T15:00:00.000Z\": 8.5741,\n    \"2019-10-27T16:00:00.000Z\": 8.5799,\n    \"2019-10-27T17:00:00.000Z\": 8.5828,\n    \"2019-10-27T18:00:00.000Z\": 8.5828,\n    \"2019-10-27T19:00:00.000Z\": 8.577,\n    \"2019-10-27T20:00:00.000Z\": 8.5625,\n    \"2019-10-27T21:00:00.000Z\": 8.5394,\n    \"2019-10-27T22:00:00.000Z\": 8.5509,\n    \"2019-10-27T23:00:00.000Z\": 8.5451,\n    \"2019-10-28T01:00:00.000Z\": 8.5394,\n    \"2019-10-28T02:00:00.000Z\": 8.5365,\n    \"2019-10-28T03:00:00.000Z\": 8.5191,\n    \"2019-10-28T04:00:00.000Z\": 8.5191,\n    \"2019-10-28T05:00:00.000Z\": 8.5046,\n    \"2019-10-28T06:00:00.000Z\": 8.4959,\n    \"2019-10-28T07:00:00.000Z\": 8.4873,\n    \"2019-10-28T08:00:00.000Z\": 8.4873,\n    \"2019-10-28T09:00:00.000Z\": 8.467,\n    \"2019-10-28T10:00:00.000Z\": 8.4525,\n    \"2019-10-28T11:00:00.000Z\": 8.4468,\n    \"2019-10-28T12:00:00.000Z\": 8.4381,\n    \"2019-10-28T13:00:00.000Z\": 8.4005,\n    \"2019-10-28T14:00:00.000Z\": 8.3773,\n    \"2019-10-28T15:00:00.000Z\": 8.3686,\n    \"2019-10-28T16:00:00.000Z\": 8.3657,\n    \"2019-10-28T17:00:00.000Z\": 8.3571,\n    \"2019-10-28T18:00:00.000Z\": 8.3831,\n    \"2019-10-28T19:00:00.000Z\": 8.3744,\n    \"2019-10-28T20:00:00.000Z\": 8.3686,\n    \"2019-10-28T21:00:00.000Z\": 8.36,\n    \"2019-10-28T22:00:00.000Z\": 8.3571,\n    \"2019-10-28T23:00:00.000Z\": 8.3513,\n    \"2019-10-29T01:00:00.000Z\": 8.3455,\n    \"2019-10-29T02:00:00.000Z\": 8.3368,\n    \"2019-10-29T03:00:00.000Z\": 8.3455,\n    \"2019-10-29T04:00:00.000Z\": 8.3455,\n    \"2019-10-29T05:00:00.000Z\": 8.3571,\n    \"2019-10-29T06:00:00.000Z\": 8.3513,\n    \"2019-10-29T07:00:00.000Z\": 8.3455,\n    \"2019-10-29T08:00:00.000Z\": 8.3397,\n    \"2019-10-29T09:00:00.000Z\": 8.3368,\n    \"2019-10-29T10:00:00.000Z\": 8.6522,\n    \"2019-10-29T11:00:00.000Z\": 8.6377,\n    \"2019-10-29T12:00:00.000Z\": 8.6638,\n    \"2019-10-29T13:00:00.000Z\": 8.6204,\n    \"2019-10-29T14:00:00.000Z\": 8.5943,\n    \"2019-10-29T15:00:00.000Z\": 8.6435,\n    \"2019-10-29T16:00:00.000Z\": 8.6522,\n    \"2019-10-29T17:00:00.000Z\": 8.6667,\n    \"2019-10-29T18:00:00.000Z\": 8.6638,\n    \"2019-10-29T19:00:00.000Z\": 8.6493,\n    \"2019-10-29T20:00:00.000Z\": 8.6493,\n    \"2019-10-29T21:00:00.000Z\": 8.6146,\n    \"2019-10-29T22:00:00.000Z\": 8.5885,\n    \"2019-10-29T23:00:00.000Z\": 8.6319,\n    \"2019-10-30T01:00:00.000Z\": 8.6233,\n    \"2019-10-30T02:00:00.000Z\": 8.6262,\n    \"2019-10-30T03:00:00.000Z\": 8.6493,\n    \"2019-10-30T04:00:00.000Z\": 8.6175,\n    \"2019-10-30T05:00:00.000Z\": 8.5856,\n    \"2019-10-30T06:00:00.000Z\": 8.6291,\n    \"2019-10-30T07:00:00.000Z\": 8.6348,\n    \"2019-10-30T08:00:00.000Z\": 8.5914,\n    \"2019-10-30T09:00:00.000Z\": 8.577,\n    \"2019-10-30T10:00:00.000Z\": 8.603,\n    \"2019-10-30T11:00:00.000Z\": 8.658,\n    \"2019-10-30T12:00:00.000Z\": 8.6204,\n    \"2019-10-30T13:00:00.000Z\": 8.6001,\n    \"2019-10-30T14:00:00.000Z\": 8.6233,\n    \"2019-10-30T15:00:00.000Z\": 8.658,\n    \"2019-10-30T16:00:00.000Z\": 8.6464,\n    \"2019-10-30T17:00:00.000Z\": 8.6319,\n    \"2019-10-30T18:00:00.000Z\": 8.6204,\n    \"2019-10-30T19:00:00.000Z\": 8.5972,\n    \"2019-10-30T20:00:00.000Z\": 8.5914,\n    \"2019-10-30T21:00:00.000Z\": 8.5712,\n    \"2019-10-30T22:00:00.000Z\": 8.5307,\n    \"2019-10-30T23:00:00.000Z\": 8.5596,\n    \"2019-10-31T01:00:00.000Z\": 8.577,\n    \"2019-10-31T02:00:00.000Z\": 8.5885,\n    \"2019-10-31T03:00:00.000Z\": 8.5799,\n    \"2019-10-31T04:00:00.000Z\": 8.5336,\n    \"2019-10-31T05:00:00.000Z\": 8.5683,\n    \"2019-10-31T06:00:00.000Z\": 8.5625,\n    \"2019-10-31T07:00:00.000Z\": 8.5712,\n    \"2019-10-31T08:00:00.000Z\": 8.5567,\n    \"2019-10-31T09:00:00.000Z\": 8.5046,\n    \"2019-10-31T10:00:00.000Z\": 8.5422,\n    \"2019-10-31T11:00:00.000Z\": 8.5394,\n    \"2019-10-31T12:00:00.000Z\": 8.5162,\n    \"2019-10-31T13:00:00.000Z\": 8.4641,\n    \"2019-10-31T14:00:00.000Z\": 8.4815,\n    \"2019-10-31T15:00:00.000Z\": 8.5162,\n    \"2019-10-31T16:00:00.000Z\": 8.5104,\n    \"2019-10-31T17:00:00.000Z\": 8.4902,\n    \"2019-10-31T18:00:00.000Z\": 8.4873,\n    \"2019-10-31T19:00:00.000Z\": 8.4873,\n    \"2019-10-31T20:00:00.000Z\": 8.4554,\n    \"2019-10-31T21:00:00.000Z\": 8.4612,\n    \"2019-10-31T22:00:00.000Z\": 8.4497,\n    \"2019-10-31T23:00:00.000Z\": 8.4699,\n    \"2019-11-01T01:00:00.000Z\": 8.4525,\n    \"2019-11-01T02:00:00.000Z\": 8.4931,\n    \"2019-11-01T03:00:00.000Z\": 8.4699,\n    \"2019-11-01T04:00:00.000Z\": 8.4381,\n    \"2019-11-01T05:00:00.000Z\": 8.4583,\n    \"2019-11-01T06:00:00.000Z\": 8.4294,\n    \"2019-11-01T07:00:00.000Z\": 8.4757,\n    \"2019-11-01T08:00:00.000Z\": 8.4757,\n    \"2019-11-01T09:00:00.000Z\": 8.4381,\n    \"2019-11-01T10:00:00.000Z\": 8.4583,\n    \"2019-11-01T11:00:00.000Z\": 8.4728,\n    \"2019-11-01T12:00:00.000Z\": 8.4786,\n    \"2019-11-01T13:00:00.000Z\": 8.4554,\n    \"2019-11-01T14:00:00.000Z\": 8.4294,\n    \"2019-11-01T15:00:00.000Z\": 8.4728,\n    \"2019-11-01T16:00:00.000Z\": 8.4902,\n    \"2019-11-01T17:00:00.000Z\": 8.4786,\n    \"2019-11-01T18:00:00.000Z\": 8.4757,\n    \"2019-11-01T19:00:00.000Z\": 8.4786,\n    \"2019-11-01T20:00:00.000Z\": 8.4757,\n    \"2019-11-01T21:00:00.000Z\": 8.4525,\n    \"2019-11-01T22:00:00.000Z\": 8.4554,\n    \"2019-11-01T23:00:00.000Z\": 8.4902,\n    \"2019-11-02T01:00:00.000Z\": 8.4815,\n    \"2019-11-02T02:00:00.000Z\": 8.4786,\n    \"2019-11-02T03:00:00.000Z\": 8.4873,\n    \"2019-11-02T04:00:00.000Z\": 8.4699,\n    \"2019-11-02T05:00:00.000Z\": 8.4352,\n    \"2019-11-02T06:00:00.000Z\": 8.4525,\n    \"2019-11-02T07:00:00.000Z\": 8.4699,\n    \"2019-11-02T08:00:00.000Z\": 8.467,\n    \"2019-11-02T09:00:00.000Z\": 8.4757,\n    \"2019-11-02T10:00:00.000Z\": 8.4757,\n    \"2019-11-02T11:00:00.000Z\": 8.4844,\n    \"2019-11-02T12:00:00.000Z\": 8.4786,\n    \"2019-11-02T13:00:00.000Z\": 8.4554,\n    \"2019-11-02T14:00:00.000Z\": 8.4988,\n    \"2019-11-02T15:00:00.000Z\": 8.4902,\n    \"2019-11-02T16:00:00.000Z\": 8.4959,\n    \"2019-11-02T17:00:00.000Z\": 8.4959,\n    \"2019-11-02T18:00:00.000Z\": 8.4959,\n    \"2019-11-02T19:00:00.000Z\": 8.4873,\n    \"2019-11-02T20:00:00.000Z\": 8.4757,\n    \"2019-11-02T21:00:00.000Z\": 8.4959,\n    \"2019-11-02T22:00:00.000Z\": 8.4757,\n    \"2019-11-02T23:00:00.000Z\": 8.4931,\n    \"2019-11-03T01:00:00.000Z\": 8.4844,\n    \"2019-11-03T02:00:00.000Z\": 8.5075,\n    \"2019-11-03T03:00:00.000Z\": 8.5104,\n    \"2019-11-03T04:00:00.000Z\": 8.5133,\n    \"2019-11-03T05:00:00.000Z\": 8.4988,\n    \"2019-11-03T06:00:00.000Z\": 8.4641,\n    \"2019-11-03T07:00:00.000Z\": 8.4959,\n    \"2019-11-03T08:00:00.000Z\": 8.5162,\n    \"2019-11-03T09:00:00.000Z\": 8.548,\n    \"2019-11-03T10:00:00.000Z\": 8.5336,\n    \"2019-11-03T11:00:00.000Z\": 8.5654,\n    \"2019-11-03T12:00:00.000Z\": 8.5509,\n    \"2019-11-03T13:00:00.000Z\": 8.5654,\n    \"2019-11-03T14:00:00.000Z\": 8.5567,\n    \"2019-11-03T15:00:00.000Z\": 8.5596,\n    \"2019-11-03T16:00:00.000Z\": 8.577,\n    \"2019-11-03T17:00:00.000Z\": 8.5741,\n    \"2019-11-03T18:00:00.000Z\": 8.577,\n    \"2019-11-03T19:00:00.000Z\": 8.5828,\n    \"2019-11-03T20:00:00.000Z\": 8.5712,\n    \"2019-11-03T21:00:00.000Z\": 8.5654,\n    \"2019-11-03T22:00:00.000Z\": 8.5856,\n    \"2019-11-03T23:00:00.000Z\": 8.5741,\n    \"2019-11-04T01:00:00.000Z\": 8.5943,\n    \"2019-11-04T02:00:00.000Z\": 8.6001,\n    \"2019-11-04T03:00:00.000Z\": 8.6175,\n    \"2019-11-04T04:00:00.000Z\": 8.6117,\n    \"2019-11-04T05:00:00.000Z\": 8.6117,\n    \"2019-11-04T06:00:00.000Z\": 8.6233,\n    \"2019-11-04T07:00:00.000Z\": 8.6319,\n    \"2019-11-04T08:00:00.000Z\": 8.6175,\n    \"2019-11-04T09:00:00.000Z\": 8.6001,\n    \"2019-11-04T10:00:00.000Z\": 8.6175,\n    \"2019-11-04T11:00:00.000Z\": 8.6406,\n    \"2019-11-04T12:00:00.000Z\": 8.6175,\n    \"2019-11-04T13:00:00.000Z\": 8.6088,\n    \"2019-11-04T14:00:00.000Z\": 8.6377,\n    \"2019-11-04T15:00:00.000Z\": 8.6319,\n    \"2019-11-04T16:00:00.000Z\": 8.6435,\n    \"2019-11-04T17:00:00.000Z\": 8.6435,\n    \"2019-11-04T18:00:00.000Z\": 8.6464,\n    \"2019-11-04T19:00:00.000Z\": 8.6319,\n    \"2019-11-04T20:00:00.000Z\": 8.6146,\n    \"2019-11-04T21:00:00.000Z\": 8.6464,\n    \"2019-11-04T22:00:00.000Z\": 8.6406,\n    \"2019-11-04T23:00:00.000Z\": 8.6175,\n    \"2019-11-05T01:00:00.000Z\": 8.6464,\n    \"2019-11-05T02:00:00.000Z\": 8.6551,\n    \"2019-11-05T03:00:00.000Z\": 8.6464,\n    \"2019-11-05T04:00:00.000Z\": 8.6464,\n    \"2019-11-05T05:00:00.000Z\": 8.6377,\n    \"2019-11-05T06:00:00.000Z\": 8.6667,\n    \"2019-11-05T07:00:00.000Z\": 8.6551,\n    \"2019-11-05T08:00:00.000Z\": 8.6551,\n    \"2019-11-05T09:00:00.000Z\": 8.6435,\n    \"2019-11-05T10:00:00.000Z\": 8.6493,\n    \"2019-11-05T11:00:00.000Z\": 8.6696,\n    \"2019-11-05T12:00:00.000Z\": 8.6464,\n    \"2019-11-05T13:00:00.000Z\": 8.6319,\n    \"2019-11-05T14:00:00.000Z\": 8.6551,\n    \"2019-11-05T15:00:00.000Z\": 8.6667,\n    \"2019-11-05T16:00:00.000Z\": 8.6725,\n    \"2019-11-05T17:00:00.000Z\": 8.6638,\n    \"2019-11-05T18:00:00.000Z\": 8.6725,\n    \"2019-11-05T19:00:00.000Z\": 8.6725,\n    \"2019-11-05T20:00:00.000Z\": 8.6696,\n    \"2019-11-05T21:00:00.000Z\": 8.6464,\n    \"2019-11-05T22:00:00.000Z\": 8.6638,\n    \"2019-11-05T23:00:00.000Z\": 8.6435,\n    \"2019-11-06T01:00:00.000Z\": 8.6609,\n    \"2019-11-06T02:00:00.000Z\": 8.6667,\n    \"2019-11-06T03:00:00.000Z\": 8.6725,\n    \"2019-11-06T04:00:00.000Z\": 8.6725,\n    \"2019-11-06T05:00:00.000Z\": 8.6638,\n    \"2019-11-06T06:00:00.000Z\": 8.6522,\n    \"2019-11-06T07:00:00.000Z\": 8.6725,\n    \"2019-11-06T08:00:00.000Z\": 8.6638,\n    \"2019-11-06T09:00:00.000Z\": 8.6377,\n    \"2019-11-06T10:00:00.000Z\": 8.6551,\n    \"2019-11-06T11:00:00.000Z\": 8.658,\n    \"2019-11-06T12:00:00.000Z\": 8.6406,\n    \"2019-11-06T13:00:00.000Z\": 8.658,\n    \"2019-11-06T14:00:00.000Z\": 8.6146,\n    \"2019-11-06T15:00:00.000Z\": 8.5885,\n    \"2019-11-06T16:00:00.000Z\": 8.6638,\n    \"2019-11-06T17:00:00.000Z\": 8.658,\n    \"2019-11-06T18:00:00.000Z\": 8.6638,\n    \"2019-11-06T19:00:00.000Z\": 8.6609,\n    \"2019-11-06T20:00:00.000Z\": 8.6638,\n    \"2019-11-06T21:00:00.000Z\": 8.6319,\n    \"2019-11-06T22:00:00.000Z\": 8.6348,\n    \"2019-11-06T23:00:00.000Z\": 8.6464,\n    \"2019-11-07T01:00:00.000Z\": 8.6435,\n    \"2019-11-07T02:00:00.000Z\": 8.6551,\n    \"2019-11-07T03:00:00.000Z\": 8.6377,\n    \"2019-11-07T04:00:00.000Z\": 8.6522,\n    \"2019-11-07T05:00:00.000Z\": 8.6175,\n    \"2019-11-07T06:00:00.000Z\": 8.6319,\n    \"2019-11-07T07:00:00.000Z\": 8.6377,\n    \"2019-11-07T08:00:00.000Z\": 8.6001,\n    \"2019-11-07T09:00:00.000Z\": 8.5828,\n    \"2019-11-07T10:00:00.000Z\": 8.5712,\n    \"2019-11-07T11:00:00.000Z\": 7.2141,\n    \"2019-11-07T12:00:00.000Z\": 7.3125,\n    \"2019-11-07T13:00:00.000Z\": 7.2865,\n    \"2019-11-07T14:00:00.000Z\": 7.3125,\n    \"2019-11-07T15:00:00.000Z\": 7.2807,\n    \"2019-11-07T16:00:00.000Z\": 7.3241,\n    \"2019-11-07T17:00:00.000Z\": 7.3154,\n    \"2019-11-07T18:00:00.000Z\": 7.2922,\n    \"2019-11-07T19:00:00.000Z\": 7.2865,\n    \"2019-11-07T20:00:00.000Z\": 7.3038,\n    \"2019-11-07T21:00:00.000Z\": 7.2575,\n    \"2019-11-07T22:00:00.000Z\": 7.2951,\n    \"2019-11-07T23:00:00.000Z\": 7.2199,\n    \"2019-11-08T01:00:00.000Z\": 7.2054,\n    \"2019-11-08T02:00:00.000Z\": 7.2199,\n    \"2019-11-08T03:00:00.000Z\": 7.1128,\n    \"2019-11-08T04:00:00.000Z\": 7.1823,\n    \"2019-11-08T05:00:00.000Z\": 7.1071,\n    \"2019-11-08T06:00:00.000Z\": 7.2112,\n    \"2019-11-08T07:00:00.000Z\": 7.2083,\n    \"2019-11-08T08:00:00.000Z\": 7.2662,\n    \"2019-11-08T09:00:00.000Z\": 7.1765,\n    \"2019-11-08T10:00:00.000Z\": 7.2083,\n    \"2019-11-08T11:00:00.000Z\": 7.1563,\n    \"2019-11-08T12:00:00.000Z\": 7.2228,\n    \"2019-11-08T13:00:00.000Z\": 7.2025,\n    \"2019-11-08T14:00:00.000Z\": 7.1852,\n    \"2019-11-08T15:00:00.000Z\": 7.1823,\n    \"2019-11-08T16:00:00.000Z\": 7.1997,\n    \"2019-11-08T17:00:00.000Z\": 7.191,\n    \"2019-11-08T18:00:00.000Z\": 7.1997,\n    \"2019-11-08T19:00:00.000Z\": 7.1765,\n    \"2019-11-08T20:00:00.000Z\": 7.1823,\n    \"2019-11-08T21:00:00.000Z\": 7.1389,\n    \"2019-11-08T22:00:00.000Z\": 7.1534,\n    \"2019-11-08T23:00:00.000Z\": 7.1244,\n    \"2019-11-09T01:00:00.000Z\": 7.136,\n    \"2019-11-09T02:00:00.000Z\": 7.162,\n    \"2019-11-09T03:00:00.000Z\": 7.162,\n    \"2019-11-09T04:00:00.000Z\": 7.1649,\n    \"2019-11-09T05:00:00.000Z\": 7.1071,\n    \"2019-11-09T06:00:00.000Z\": 7.1302,\n    \"2019-11-09T07:00:00.000Z\": 7.0608,\n    \"2019-11-09T08:00:00.000Z\": 7.1244,\n    \"2019-11-09T09:00:00.000Z\": 7.0463,\n    \"2019-11-09T10:00:00.000Z\": 7.1273,\n    \"2019-11-09T11:00:00.000Z\": 7.1013,\n    \"2019-11-09T12:00:00.000Z\": 7.1534,\n    \"2019-11-09T13:00:00.000Z\": 7.1563,\n    \"2019-11-09T14:00:00.000Z\": 7.1389,\n    \"2019-11-09T15:00:00.000Z\": 7.0984,\n    \"2019-11-09T16:00:00.000Z\": 7.1244,\n    \"2019-11-09T17:00:00.000Z\": 7.0984,\n    \"2019-11-09T18:00:00.000Z\": 7.1273,\n    \"2019-11-09T19:00:00.000Z\": 7.081,\n    \"2019-11-09T20:00:00.000Z\": 7.081,\n    \"2019-11-09T21:00:00.000Z\": 7.0087,\n    \"2019-11-09T22:00:00.000Z\": 7.0405,\n    \"2019-11-09T23:00:00.000Z\": 6.9797,\n    \"2019-11-10T01:00:00.000Z\": 6.9711,\n    \"2019-11-10T02:00:00.000Z\": 7,\n    \"2019-11-10T03:00:00.000Z\": 7.0608,\n    \"2019-11-10T04:00:00.000Z\": 7.0376,\n    \"2019-11-10T05:00:00.000Z\": 6.9508,\n    \"2019-11-10T06:00:00.000Z\": 7.026,\n    \"2019-11-10T07:00:00.000Z\": 6.9074,\n    \"2019-11-10T08:00:00.000Z\": 7.0376,\n    \"2019-11-10T09:00:00.000Z\": 6.9797,\n    \"2019-11-10T10:00:00.000Z\": 6.8322,\n    \"2019-11-10T11:00:00.000Z\": 7,\n    \"2019-11-10T12:00:00.000Z\": 7.0174,\n    \"2019-11-10T13:00:00.000Z\": 7.0174,\n    \"2019-11-10T14:00:00.000Z\": 6.9682,\n    \"2019-11-10T15:00:00.000Z\": 6.9826,\n    \"2019-11-10T16:00:00.000Z\": 6.9769,\n    \"2019-11-10T17:00:00.000Z\": 7.0087,\n    \"2019-11-10T18:00:00.000Z\": 6.9826,\n    \"2019-11-10T19:00:00.000Z\": 7.0116,\n    \"2019-11-10T20:00:00.000Z\": 6.9769,\n    \"2019-11-10T21:00:00.000Z\": 6.9595,\n    \"2019-11-10T22:00:00.000Z\": 6.9277,\n    \"2019-11-10T23:00:00.000Z\": 6.9334,\n    \"2019-11-11T01:00:00.000Z\": 6.919,\n    \"2019-11-11T02:00:00.000Z\": 6.9219,\n    \"2019-11-11T03:00:00.000Z\": 6.9363,\n    \"2019-11-11T04:00:00.000Z\": 6.945,\n    \"2019-11-11T05:00:00.000Z\": 6.8061,\n    \"2019-11-11T06:00:00.000Z\": 6.9074,\n    \"2019-11-11T07:00:00.000Z\": 6.9595,\n    \"2019-11-11T08:00:00.000Z\": 6.9797,\n    \"2019-11-11T09:00:00.000Z\": 6.9537,\n    \"2019-11-11T10:00:00.000Z\": 6.9248,\n    \"2019-11-11T11:00:00.000Z\": 6.9421,\n    \"2019-11-11T12:00:00.000Z\": 6.9074,\n    \"2019-11-11T13:00:00.000Z\": 6.7338,\n    \"2019-11-11T14:00:00.000Z\": 6.8872,\n    \"2019-11-11T15:00:00.000Z\": 6.8987,\n    \"2019-11-11T16:00:00.000Z\": 6.945,\n    \"2019-11-11T17:00:00.000Z\": 6.9711,\n    \"2019-11-11T18:00:00.000Z\": 6.945,\n    \"2019-11-11T19:00:00.000Z\": 6.9421,\n    \"2019-11-11T20:00:00.000Z\": 6.9161,\n    \"2019-11-11T21:00:00.000Z\": 6.9363,\n    \"2019-11-11T22:00:00.000Z\": 6.8727,\n    \"2019-11-11T23:00:00.000Z\": 6.9479,\n    \"2019-11-12T01:00:00.000Z\": 7.0087,\n    \"2019-11-12T02:00:00.000Z\": 6.9508,\n    \"2019-11-12T03:00:00.000Z\": 7,\n    \"2019-11-12T04:00:00.000Z\": 6.9682,\n    \"2019-11-12T05:00:00.000Z\": 6.9363,\n    \"2019-11-12T06:00:00.000Z\": 6.9074,\n    \"2019-11-12T07:00:00.000Z\": 6.9566,\n    \"2019-11-12T08:00:00.000Z\": 6.9537,\n    \"2019-11-12T09:00:00.000Z\": 6.8785,\n    \"2019-11-12T10:00:00.000Z\": 6.9306,\n    \"2019-11-12T11:00:00.000Z\": 6.9566,\n    \"2019-11-12T12:00:00.000Z\": 6.9508,\n    \"2019-11-12T13:00:00.000Z\": 6.945,\n    \"2019-11-12T14:00:00.000Z\": 6.9508,\n    \"2019-11-12T15:00:00.000Z\": 6.9537,\n    \"2019-11-12T16:00:00.000Z\": 6.9942,\n    \"2019-11-12T17:00:00.000Z\": 6.974,\n    \"2019-11-12T18:00:00.000Z\": 6.9537,\n    \"2019-11-12T19:00:00.000Z\": 6.9566,\n    \"2019-11-12T20:00:00.000Z\": 6.9769,\n    \"2019-11-12T21:00:00.000Z\": 6.9334,\n    \"2019-11-12T22:00:00.000Z\": 6.9392,\n    \"2019-11-12T23:00:00.000Z\": 6.9248,\n    \"2019-11-13T01:00:00.000Z\": 6.9277,\n    \"2019-11-13T02:00:00.000Z\": 6.9884,\n    \"2019-11-13T03:00:00.000Z\": 7.0174,\n    \"2019-11-13T04:00:00.000Z\": 6.9219,\n    \"2019-11-13T05:00:00.000Z\": 6.8872,\n    \"2019-11-13T06:00:00.000Z\": 6.9537,\n    \"2019-11-13T07:00:00.000Z\": 6.9363,\n    \"2019-11-13T08:00:00.000Z\": 6.9479,\n    \"2019-11-13T09:00:00.000Z\": 6.8524,\n    \"2019-11-13T10:00:00.000Z\": 6.8872,\n    \"2019-11-13T11:00:00.000Z\": 6.8785,\n    \"2019-11-13T12:00:00.000Z\": 6.9334,\n    \"2019-11-13T13:00:00.000Z\": 6.8466,\n    \"2019-11-13T14:00:00.000Z\": 6.838,\n    \"2019-11-13T15:00:00.000Z\": 6.9161,\n    \"2019-11-13T16:00:00.000Z\": 6.9363,\n    \"2019-11-13T17:00:00.000Z\": 6.9566,\n    \"2019-11-13T18:00:00.000Z\": 6.9421,\n    \"2019-11-13T19:00:00.000Z\": 6.8958,\n    \"2019-11-13T20:00:00.000Z\": 6.8785,\n    \"2019-11-13T21:00:00.000Z\": 6.8785,\n    \"2019-11-13T22:00:00.000Z\": 6.8958,\n    \"2019-11-13T23:00:00.000Z\": 6.89,\n    \"2019-11-14T01:00:00.000Z\": 6.9074,\n    \"2019-11-14T02:00:00.000Z\": 6.9508,\n    \"2019-11-14T03:00:00.000Z\": 6.9508,\n    \"2019-11-14T04:00:00.000Z\": 6.9132,\n    \"2019-11-14T05:00:00.000Z\": 6.8524,\n    \"2019-11-14T06:00:00.000Z\": 6.9074,\n    \"2019-11-14T07:00:00.000Z\": 6.9334,\n    \"2019-11-14T08:00:00.000Z\": 6.8582,\n    \"2019-11-14T09:00:00.000Z\": 6.8438,\n    \"2019-11-14T10:00:00.000Z\": 6.8785,\n    \"2019-11-14T11:00:00.000Z\": 6.8264,\n    \"2019-11-14T12:00:00.000Z\": 6.7975,\n    \"2019-11-14T13:00:00.000Z\": 6.7541,\n    \"2019-11-14T14:00:00.000Z\": 6.7598,\n    \"2019-11-14T15:00:00.000Z\": 6.7975,\n    \"2019-11-14T16:00:00.000Z\": 6.8409,\n    \"2019-11-14T17:00:00.000Z\": 6.8727,\n    \"2019-11-14T18:00:00.000Z\": 6.8466,\n    \"2019-11-14T19:00:00.000Z\": 6.838,\n    \"2019-11-14T20:00:00.000Z\": 6.8351,\n    \"2019-11-14T21:00:00.000Z\": 6.7975,\n    \"2019-11-14T22:00:00.000Z\": 6.7396,\n    \"2019-11-14T23:00:00.000Z\": 6.7541,\n    \"2019-11-15T01:00:00.000Z\": 6.8235,\n    \"2019-11-15T02:00:00.000Z\": 6.8524,\n    \"2019-11-15T03:00:00.000Z\": 6.8872,\n    \"2019-11-15T04:00:00.000Z\": 6.8351,\n    \"2019-11-15T05:00:00.000Z\": 6.7975,\n    \"2019-11-15T06:00:00.000Z\": 6.7917,\n    \"2019-11-15T07:00:00.000Z\": 6.8322,\n    \"2019-11-15T08:00:00.000Z\": 6.8553,\n    \"2019-11-15T09:00:00.000Z\": 6.8148,\n    \"2019-11-15T10:00:00.000Z\": 6.7078,\n    \"2019-11-15T11:00:00.000Z\": 6.7975,\n    \"2019-11-15T12:00:00.000Z\": 6.8235,\n    \"2019-11-15T13:00:00.000Z\": 6.7193,\n    \"2019-11-15T14:00:00.000Z\": 6.7946,\n    \"2019-11-15T15:00:00.000Z\": 6.8032,\n    \"2019-11-15T16:00:00.000Z\": 6.8524,\n    \"2019-11-15T17:00:00.000Z\": 6.8264,\n    \"2019-11-15T18:00:00.000Z\": 6.7975,\n    \"2019-11-15T19:00:00.000Z\": 6.7859,\n    \"2019-11-15T20:00:00.000Z\": 6.7598,\n    \"2019-11-15T21:00:00.000Z\": 6.6817,\n    \"2019-11-15T22:00:00.000Z\": 6.7714,\n    \"2019-11-15T23:00:00.000Z\": 6.7164,\n    \"2019-11-16T01:00:00.000Z\": 6.7425,\n    \"2019-11-16T02:00:00.000Z\": 6.8409,\n    \"2019-11-16T03:00:00.000Z\": 6.8438,\n    \"2019-11-16T04:00:00.000Z\": 6.8061,\n    \"2019-11-16T05:00:00.000Z\": 6.7164,\n    \"2019-11-16T06:00:00.000Z\": 6.7743,\n    \"2019-11-16T07:00:00.000Z\": 6.702,\n    \"2019-11-16T08:00:00.000Z\": 6.7888,\n    \"2019-11-16T09:00:00.000Z\": 6.7251,\n    \"2019-11-16T10:00:00.000Z\": 6.7946,\n    \"2019-11-16T11:00:00.000Z\": 6.8409,\n    \"2019-11-16T12:00:00.000Z\": 6.8351,\n    \"2019-11-16T13:00:00.000Z\": 6.809,\n    \"2019-11-16T14:00:00.000Z\": 6.8032,\n    \"2019-11-16T15:00:00.000Z\": 6.8148,\n    \"2019-11-16T16:00:00.000Z\": 6.8148,\n    \"2019-11-16T17:00:00.000Z\": 6.8206,\n    \"2019-11-16T18:00:00.000Z\": 6.809,\n    \"2019-11-16T19:00:00.000Z\": 6.7685,\n    \"2019-11-16T20:00:00.000Z\": 6.6846,\n    \"2019-11-16T21:00:00.000Z\": 6.7454,\n    \"2019-11-16T22:00:00.000Z\": 6.6846,\n    \"2019-11-16T23:00:00.000Z\": 6.7483,\n    \"2019-11-17T01:00:00.000Z\": 6.783,\n    \"2019-11-17T02:00:00.000Z\": 6.7975,\n    \"2019-11-17T03:00:00.000Z\": 6.8264,\n    \"2019-11-17T04:00:00.000Z\": 6.7975,\n    \"2019-11-17T05:00:00.000Z\": 6.7222,\n    \"2019-11-17T06:00:00.000Z\": 6.7598,\n    \"2019-11-17T07:00:00.000Z\": 6.7049,\n    \"2019-11-17T08:00:00.000Z\": 6.7975,\n    \"2019-11-17T09:00:00.000Z\": 6.7772,\n    \"2019-11-17T10:00:00.000Z\": 6.6412,\n    \"2019-11-17T11:00:00.000Z\": 6.7801,\n    \"2019-11-17T12:00:00.000Z\": 6.7685,\n    \"2019-11-17T13:00:00.000Z\": 6.7049,\n    \"2019-11-17T14:00:00.000Z\": 6.6644,\n    \"2019-11-17T15:00:00.000Z\": 6.7396,\n    \"2019-11-17T16:00:00.000Z\": 6.7772,\n    \"2019-11-17T17:00:00.000Z\": 6.7888,\n    \"2019-11-17T18:00:00.000Z\": 6.7772,\n    \"2019-11-17T19:00:00.000Z\": 6.7598,\n    \"2019-11-17T20:00:00.000Z\": 6.7251,\n    \"2019-11-17T21:00:00.000Z\": 6.6933,\n    \"2019-11-17T22:00:00.000Z\": 6.7598,\n    \"2019-11-17T23:00:00.000Z\": 6.702,\n    \"2019-11-18T01:00:00.000Z\": 6.7338,\n    \"2019-11-18T02:00:00.000Z\": 6.7685,\n    \"2019-11-18T03:00:00.000Z\": 6.7367,\n    \"2019-11-18T04:00:00.000Z\": 6.8148,\n    \"2019-11-18T05:00:00.000Z\": 6.7801,\n    \"2019-11-18T06:00:00.000Z\": 6.7367,\n    \"2019-11-18T07:00:00.000Z\": 6.7627,\n    \"2019-11-18T08:00:00.000Z\": 6.7772,\n    \"2019-11-18T09:00:00.000Z\": 6.7425,\n    \"2019-11-18T10:00:00.000Z\": 6.7367,\n    \"2019-11-18T11:00:00.000Z\": 6.7425,\n    \"2019-11-18T12:00:00.000Z\": 6.7975,\n    \"2019-11-18T13:00:00.000Z\": 6.8032,\n    \"2019-11-18T14:00:00.000Z\": 6.7801,\n    \"2019-11-18T15:00:00.000Z\": 6.7222,\n    \"2019-11-18T16:00:00.000Z\": 6.7627,\n    \"2019-11-18T17:00:00.000Z\": 6.809,\n    \"2019-11-18T18:00:00.000Z\": 6.7714,\n    \"2019-11-18T19:00:00.000Z\": 6.7714,\n    \"2019-11-18T20:00:00.000Z\": 6.7483,\n    \"2019-11-18T21:00:00.000Z\": 6.6875,\n    \"2019-11-18T22:00:00.000Z\": 6.7627,\n    \"2019-11-18T23:00:00.000Z\": 6.7164,\n    \"2019-11-19T01:00:00.000Z\": 6.7888,\n    \"2019-11-19T02:00:00.000Z\": 6.8495,\n    \"2019-11-19T03:00:00.000Z\": 6.8264,\n    \"2019-11-19T04:00:00.000Z\": 6.7598,\n    \"2019-11-19T05:00:00.000Z\": 6.7338,\n    \"2019-11-19T06:00:00.000Z\": 6.7946,\n    \"2019-11-19T07:00:00.000Z\": 6.8206,\n    \"2019-11-19T08:00:00.000Z\": 6.7946,\n    \"2019-11-19T09:00:00.000Z\": 6.7598,\n    \"2019-11-19T10:00:00.000Z\": 6.7743,\n    \"2019-11-19T11:00:00.000Z\": 6.7888,\n    \"2019-11-19T12:00:00.000Z\": 6.8061,\n    \"2019-11-19T13:00:00.000Z\": 6.7367,\n    \"2019-11-19T14:00:00.000Z\": 6.8264,\n    \"2019-11-19T15:00:00.000Z\": 6.8235,\n    \"2019-11-19T16:00:00.000Z\": 6.7946,\n    \"2019-11-19T17:00:00.000Z\": 6.8061,\n    \"2019-11-19T18:00:00.000Z\": 6.838,\n    \"2019-11-19T19:00:00.000Z\": 6.8553,\n    \"2019-11-19T20:00:00.000Z\": 6.8003,\n    \"2019-11-19T21:00:00.000Z\": 6.7251,\n    \"2019-11-19T22:00:00.000Z\": 6.7598,\n    \"2019-11-19T23:00:00.000Z\": 6.7627,\n    \"2019-11-20T01:00:00.000Z\": 6.8177,\n    \"2019-11-20T02:00:00.000Z\": 6.8148,\n    \"2019-11-20T03:00:00.000Z\": 6.7975,\n    \"2019-11-20T04:00:00.000Z\": 6.7888,\n    \"2019-11-20T05:00:00.000Z\": 6.7309,\n    \"2019-11-20T06:00:00.000Z\": 6.7483,\n    \"2019-11-20T07:00:00.000Z\": 6.8148,\n    \"2019-11-20T08:00:00.000Z\": 6.7396,\n    \"2019-11-20T09:00:00.000Z\": 6.6701,\n    \"2019-11-20T10:00:00.000Z\": 5.6516,\n    \"2019-11-20T11:00:00.000Z\": 5.6516,\n    \"2019-11-20T12:00:00.000Z\": 5.5475,\n    \"2019-11-20T13:00:00.000Z\": 5.7095,\n    \"2019-11-20T14:00:00.000Z\": 5.7095,\n    \"2019-11-20T15:00:00.000Z\": 5.7066,\n    \"2019-11-20T16:00:00.000Z\": 6.0509,\n    \"2019-11-20T17:00:00.000Z\": 5.967,\n    \"2019-11-20T18:00:00.000Z\": 6.4039,\n    \"2019-11-20T19:00:00.000Z\": 6.919,\n    \"2019-11-20T20:00:00.000Z\": 7.1071,\n    \"2019-11-20T21:00:00.000Z\": 6.5486,\n    \"2019-11-20T22:00:00.000Z\": 6.4676,\n    \"2019-11-20T23:00:00.000Z\": 6.8409,\n    \"2019-11-21T01:00:00.000Z\": 6.8206,\n    \"2019-11-21T02:00:00.000Z\": 6.8785,\n    \"2019-11-21T03:00:00.000Z\": 6.864,\n    \"2019-11-21T04:00:00.000Z\": 7.3935,\n    \"2019-11-21T05:00:00.000Z\": 7.1997,\n    \"2019-11-21T06:00:00.000Z\": 7.3877,\n    \"2019-11-21T07:00:00.000Z\": 7.3009,\n    \"2019-11-21T08:00:00.000Z\": 6.9682,\n    \"2019-11-21T09:00:00.000Z\": 7.2054,\n    \"2019-11-21T10:00:00.000Z\": 7.1765,\n    \"2019-11-21T11:00:00.000Z\": 7.2286,\n    \"2019-11-21T12:00:00.000Z\": 7.6163,\n    \"2019-11-21T13:00:00.000Z\": 7.4398,\n    \"2019-11-21T14:00:00.000Z\": 6.7743,\n    \"2019-11-21T15:00:00.000Z\": 7.434,\n    \"2019-11-21T16:00:00.000Z\": 7.3993,\n    \"2019-11-21T17:00:00.000Z\": 7.3646,\n    \"2019-11-21T18:00:00.000Z\": 7.2228,\n    \"2019-11-21T19:00:00.000Z\": 6.9913,\n    \"2019-11-21T20:00:00.000Z\": 7.0492,\n    \"2019-11-21T21:00:00.000Z\": 7.0984,\n    \"2019-11-21T22:00:00.000Z\": 7.1707,\n    \"2019-11-21T23:00:00.000Z\": 7.1505,\n    \"2019-11-22T01:00:00.000Z\": 7.5671,\n    \"2019-11-22T02:00:00.000Z\": 7.272,\n    \"2019-11-22T03:00:00.000Z\": 7.1794,\n    \"2019-11-22T04:00:00.000Z\": 7.3588,\n    \"2019-11-22T05:00:00.000Z\": 7.1852,\n    \"2019-11-22T06:00:00.000Z\": 7.1215,\n    \"2019-11-22T07:00:00.000Z\": 7.8131,\n    \"2019-11-22T08:00:00.000Z\": 7.6019,\n    \"2019-11-22T09:00:00.000Z\": 7.7639,\n    \"2019-11-22T10:00:00.000Z\": 7.6192,\n    \"2019-11-22T11:00:00.000Z\": 7.5932,\n    \"2019-11-22T12:00:00.000Z\": 7.6655,\n    \"2019-11-22T13:00:00.000Z\": 7.6453,\n    \"2019-11-22T14:00:00.000Z\": 7.9057,\n    \"2019-11-22T15:00:00.000Z\": 7.4977,\n    \"2019-11-22T16:00:00.000Z\": 7.4398,\n    \"2019-11-22T17:00:00.000Z\": 7.6076,\n    \"2019-11-22T18:00:00.000Z\": 7.434,\n    \"2019-11-22T19:00:00.000Z\": 7.4919,\n    \"2019-11-22T20:00:00.000Z\": 8.0677,\n    \"2019-11-22T21:00:00.000Z\": 7.7407,\n    \"2019-11-22T22:00:00.000Z\": 7.5816,\n    \"2019-11-22T23:00:00.000Z\": 8.1863,\n    \"2019-11-23T01:00:00.000Z\": 7.5295,\n    \"2019-11-23T02:00:00.000Z\": 8.0098,\n    \"2019-11-23T03:00:00.000Z\": 7.5295,\n    \"2019-11-23T04:00:00.000Z\": 7.6453,\n    \"2019-11-23T05:00:00.000Z\": 7.515,\n    \"2019-11-23T06:00:00.000Z\": 7.5093,\n    \"2019-11-23T07:00:00.000Z\": 7.4659,\n    \"2019-11-23T08:00:00.000Z\": 7.5729,\n    \"2019-11-23T09:00:00.000Z\": 7.5266,\n    \"2019-11-23T10:00:00.000Z\": 7.7378,\n    \"2019-11-23T11:00:00.000Z\": 7.842,\n    \"2019-11-23T12:00:00.000Z\": 7.8507,\n    \"2019-11-23T13:00:00.000Z\": 7.9635,\n    \"2019-11-23T14:00:00.000Z\": 7.9462,\n    \"2019-11-23T15:00:00.000Z\": 7.952,\n    \"2019-11-23T16:00:00.000Z\": 7.8449,\n    \"2019-11-23T17:00:00.000Z\": 7.9404,\n    \"2019-11-23T18:00:00.000Z\": 7.9983,\n    \"2019-11-23T19:00:00.000Z\": 7.9491,\n    \"2019-11-23T20:00:00.000Z\": 8.0069,\n    \"2019-11-23T21:00:00.000Z\": 8.0735,\n    \"2019-11-23T22:00:00.000Z\": 8.0417,\n    \"2019-11-23T23:00:00.000Z\": 7.816,\n    \"2019-11-24T01:00:00.000Z\": 7.8623,\n    \"2019-11-24T02:00:00.000Z\": 7.8449,\n    \"2019-11-24T03:00:00.000Z\": 7.8275,\n    \"2019-11-24T04:00:00.000Z\": 7.787,\n    \"2019-11-24T05:00:00.000Z\": 7.8362,\n    \"2019-11-24T06:00:00.000Z\": 7.7668,\n    \"2019-11-24T07:00:00.000Z\": 7.5932,\n    \"2019-11-24T08:00:00.000Z\": 7.6568,\n    \"2019-11-24T09:00:00.000Z\": 7.4659,\n    \"2019-11-24T10:00:00.000Z\": 7.5035,\n    \"2019-11-24T11:00:00.000Z\": 7.5816,\n    \"2019-11-24T12:00:00.000Z\": 7.6076,\n    \"2019-11-24T13:00:00.000Z\": 7.599,\n    \"2019-11-24T14:00:00.000Z\": 7.6568,\n    \"2019-11-24T15:00:00.000Z\": 7.625,\n    \"2019-11-24T16:00:00.000Z\": 7.6308,\n    \"2019-11-24T17:00:00.000Z\": 7.7147,\n    \"2019-11-24T18:00:00.000Z\": 7.5006,\n    \"2019-11-24T19:00:00.000Z\": 7.4716,\n    \"2019-11-24T20:00:00.000Z\": 7.4919,\n    \"2019-11-24T21:00:00.000Z\": 7.3646,\n    \"2019-11-24T22:00:00.000Z\": 7.3964,\n    \"2019-11-24T23:00:00.000Z\": 7.4919,\n    \"2019-11-25T01:00:00.000Z\": 7.787,\n    \"2019-11-25T02:00:00.000Z\": 7.4427,\n    \"2019-11-25T03:00:00.000Z\": 7.8189,\n    \"2019-11-25T04:00:00.000Z\": 7.4774,\n    \"2019-11-25T05:00:00.000Z\": 7.9578,\n    \"2019-11-25T06:00:00.000Z\": 7.8738,\n    \"2019-11-25T07:00:00.000Z\": 8.3802,\n    \"2019-11-25T08:00:00.000Z\": 8.1719,\n    \"2019-11-25T09:00:00.000Z\": 7.5064,\n    \"2019-11-25T10:00:00.000Z\": 8.1632,\n    \"2019-11-25T11:00:00.000Z\": 8.088,\n    \"2019-11-25T12:00:00.000Z\": 7.9578,\n    \"2019-11-25T13:00:00.000Z\": 7.6424,\n    \"2019-11-25T14:00:00.000Z\": 7.7841,\n    \"2019-11-25T15:00:00.000Z\": 7.6308,\n    \"2019-11-25T16:00:00.000Z\": 7.5932,\n    \"2019-11-25T17:00:00.000Z\": 7.5064,\n    \"2019-11-25T18:00:00.000Z\": 8.1343,\n    \"2019-11-25T19:00:00.000Z\": 8.305,\n    \"2019-11-25T20:00:00.000Z\": 8.0503,\n    \"2019-11-25T21:00:00.000Z\": 8.0012,\n    \"2019-11-25T22:00:00.000Z\": 8.0012,\n    \"2019-11-25T23:00:00.000Z\": 8.0069,\n    \"2019-11-26T01:00:00.000Z\": 7.8941,\n    \"2019-11-26T02:00:00.000Z\": 7.8825,\n    \"2019-11-26T03:00:00.000Z\": 7.6944,\n    \"2019-11-26T04:00:00.000Z\": 8.0301,\n    \"2019-11-26T05:00:00.000Z\": 8.088,\n    \"2019-11-26T06:00:00.000Z\": 8.0648,\n    \"2019-11-26T07:00:00.000Z\": 7.9867,\n    \"2019-11-26T08:00:00.000Z\": 7.8507,\n    \"2019-11-26T09:00:00.000Z\": 7.8565,\n    \"2019-11-26T10:00:00.000Z\": 7.9722,\n    \"2019-11-26T11:00:00.000Z\": 8.0446,\n    \"2019-11-26T12:00:00.000Z\": 8.1748,\n    \"2019-11-26T13:00:00.000Z\": 7.8362,\n    \"2019-11-26T14:00:00.000Z\": 8.0648,\n    \"2019-11-26T15:00:00.000Z\": 8.0793,\n    \"2019-11-26T16:00:00.000Z\": 8.088,\n    \"2019-11-26T17:00:00.000Z\": 8.0793,\n    \"2019-11-26T18:00:00.000Z\": 8.0532,\n    \"2019-11-26T19:00:00.000Z\": 8.0677,\n    \"2019-11-26T20:00:00.000Z\": 8.0475,\n    \"2019-11-26T21:00:00.000Z\": 8.0156,\n    \"2019-11-26T22:00:00.000Z\": 7.9635,\n    \"2019-11-26T23:00:00.000Z\": 7.8854,\n    \"2019-11-27T01:00:00.000Z\": 7.7813,\n    \"2019-11-27T02:00:00.000Z\": 8.0243,\n    \"2019-11-27T03:00:00.000Z\": 8.195,\n    \"2019-11-27T04:00:00.000Z\": 8.1632,\n    \"2019-11-27T05:00:00.000Z\": 8.0272,\n    \"2019-11-27T06:00:00.000Z\": 7.9983,\n    \"2019-11-27T07:00:00.000Z\": 8.1574,\n    \"2019-11-27T08:00:00.000Z\": 8.2095,\n    \"2019-11-27T09:00:00.000Z\": 8.3079,\n    \"2019-11-27T10:00:00.000Z\": 8.331,\n    \"2019-11-27T11:00:00.000Z\": 8.3166,\n    \"2019-11-27T12:00:00.000Z\": 8.3426,\n    \"2019-11-27T13:00:00.000Z\": 8.3802,\n    \"2019-11-27T14:00:00.000Z\": 8.386,\n    \"2019-11-27T15:00:00.000Z\": 8.2703,\n    \"2019-11-27T16:00:00.000Z\": 8.3021,\n    \"2019-11-27T17:00:00.000Z\": 8.2442,\n    \"2019-11-27T18:00:00.000Z\": 8.1892,\n    \"2019-11-27T19:00:00.000Z\": 8.2269,\n    \"2019-11-27T20:00:00.000Z\": 8.3079,\n    \"2019-11-27T21:00:00.000Z\": 8.386,\n    \"2019-11-27T22:00:00.000Z\": 8.6146,\n    \"2019-11-27T23:00:00.000Z\": 8.5538,\n    \"2019-11-28T01:00:00.000Z\": 8.713,\n    \"2019-11-28T02:00:00.000Z\": 8.7072,\n    \"2019-11-28T03:00:00.000Z\": 8.739,\n    \"2019-11-28T04:00:00.000Z\": 8.765,\n    \"2019-11-28T05:00:00.000Z\": 8.794,\n    \"2019-11-28T06:00:00.000Z\": 8.7998,\n    \"2019-11-28T07:00:00.000Z\": 8.7824,\n    \"2019-11-28T08:00:00.000Z\": 8.8171,\n    \"2019-11-28T09:00:00.000Z\": 8.8519,\n    \"2019-11-28T10:00:00.000Z\": 9.5926,\n    \"2019-11-28T11:00:00.000Z\": 10.1858,\n    \"2019-11-28T12:00:00.000Z\": 9.9716,\n    \"2019-11-28T13:00:00.000Z\": 9.4334,\n    \"2019-11-28T14:00:00.000Z\": 9.3814,\n    \"2019-11-28T15:00:00.000Z\": 10.3478,\n    \"2019-11-28T16:00:00.000Z\": 9.6013,\n    \"2019-11-28T17:00:00.000Z\": 10.912,\n    \"2019-11-28T18:00:00.000Z\": 10.64,\n    \"2019-11-28T19:00:00.000Z\": 10.9873,\n    \"2019-11-28T20:00:00.000Z\": 11.1522,\n    \"2019-11-28T21:00:00.000Z\": 11.1233,\n    \"2019-11-28T22:00:00.000Z\": 11.1493,\n    \"2019-11-28T23:00:00.000Z\": 10.9149,\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef interval_box_plots(\n    series: pd.Series,\n    interval: str,\n    traces_opts: dict = {\"line_color\": \"#1199bb\"},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    df = series.to_frame().sort_index()\n    df_value_col = df.columns[0]\n\n    if interval.lower() in [\"day\", \"d\"]:\n        interval_col_name = \"year--month--day\"\n        df[interval_col_name] = pd.Series(df.index, index=df.index).apply(\n            lambda x: str(x.year) + \"--\" + f\"{x.month:0>2d}\" + \"--\" + f\"{x.day:0>2d}\"\n        )\n\n    elif interval.lower() in [\"week\", \"w\"]:\n        interval_col_name = \"year--week\"\n        df[interval_col_name] = pd.Series(df.index, index=df.index).apply(\n            lambda x: str(x.year) + \"--\" + f\"{x.week:0>2d}\"\n        )\n\n    elif interval.lower() in [\"month\", \"m\"]:\n        interval_col_name = \"year--month\"\n        df[interval_col_name] = pd.Series(df.index, index=df.index).apply(\n            lambda x: str(x.year) + \"--\" + f\"{x.month:0>2d}\"\n        )\n\n    elif interval.lower() in [\"year\", \"y\"]:\n        interval_col_name = \"year\"\n        df[interval_col_name] = pd.Series(df.index, index=df.index).apply(\n            lambda x: str(x.year)\n        )\n    else:\n        raise ValueError(\"Unknown interval string: \" + interval)\n    fig = px.box(df, x=interval_col_name, y=df_value_col)\n\n    fig.update_layout(\n        **{**layout_opts, **{\"xaxis_title\": interval_col_name}}\n    )  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series\": DataType.Series, \"interval\": DataType.String},\n    outputs={\"plot\": DataType.PlotlyJson},\n    name=\"Timeseries Interval Boxplots\",\n    description=\"Box Plots for each day, week, month or year\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"56c937d5-37df-c70f-2113-808ef4a6d9ba\",\n    revision_group_id=\"56c937d5-37df-c70f-2113-808ef4a6d9ba\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.229873+00:00\"\n)\ndef main(*, series, interval):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"plot\": plotly_fig_to_json_dict(interval_box_plots(series, interval))}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "884ef67a-37ae-d67c-6d51-6d3b59556bec",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "4128780c-c4e1-1540-8864-06e810fb223d",
          "name": "interval",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "1658275f-5ff6-1e12-c44c-3dac33a6a56d",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "a432923f-4718-44ae-3c9c-9832e68724bb",
    "revision_group_id": "a432923f-4718-44ae-3c9c-9832e68724bb",
    "name": "Compare Two Timeseries Plot",
    "description": "Plotting of two timeseries in the same plot",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:30.020807+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Compare Two Timeseries Plot\n\n## Description\nPlotting of two timeseries in the same plot.\n\n## Inputs\n* **series_1** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n* **series_2** (Pandas Series): Entries must be numeric and Index should be a DateTime Index.\n\n## Outputs\n* **comparison_plot** (Plotly Json): The generated Plotly Json. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThe component plots both incoming timeseries into the same figure using Plotly.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"x\": {\n    \"2019-11-29T01:00:00.000Z\": 10.533,\n    \"2019-11-29T02:00:00.000Z\": 10.559,\n    \"2019-11-29T03:00:00.000Z\": 9.7662,\n    \"2019-11-29T04:00:00.000Z\": 11.2332,\n    \"2019-11-29T05:00:00.000Z\": 11.0683,\n    \"2019-11-29T06:00:00.000Z\": 11.2072,\n    \"2019-11-29T07:00:00.000Z\": 11.1522,\n    \"2019-11-29T08:00:00.000Z\": 11.1522,\n    \"2019-11-29T09:00:00.000Z\": 11.1522,\n    \"2019-11-29T10:00:00.000Z\": 11.4473,\n    \"2019-11-29T11:00:00.000Z\": 11.3142,\n    \"2019-11-29T12:00:00.000Z\": 11.3403,\n    \"2019-11-29T13:00:00.000Z\": 11.375,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 12,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 12,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.8918,\n    \"2019-11-30T02:00:00.000Z\": 10.64,\n    \"2019-11-30T03:00:00.000Z\": 10.5648,\n    \"2019-11-30T04:00:00.000Z\": 10.912,\n    \"2019-11-30T05:00:00.000Z\": 12,\n    \"2019-11-30T06:00:00.000Z\": 10.912,\n    \"2019-11-30T07:00:00.000Z\": 12,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 12,\n    \"2019-11-30T13:00:00.000Z\": 12,\n    \"2019-11-30T14:00:00.000Z\": 12,\n    \"2019-11-30T15:00:00.000Z\": 12\n\t},\n\t\"y\": {\n    \"2019-11-29T01:00:00.000Z\": 10.7533,\n    \"2019-11-29T02:00:00.000Z\": 10.759,\n    \"2019-11-29T03:00:00.000Z\": 9.9662,\n    \"2019-11-29T04:00:00.000Z\": 11.1332,\n    \"2019-11-29T05:00:00.000Z\": 11.0083,\n    \"2019-11-29T06:00:00.000Z\": 11.1072,\n    \"2019-11-29T07:00:00.000Z\": 11.1222,\n    \"2019-11-29T08:00:00.000Z\": 11.1322,\n    \"2019-11-29T09:00:00.000Z\": 11.1422,\n    \"2019-11-29T10:00:00.000Z\": 11.7473,\n    \"2019-11-29T11:00:00.000Z\": 11.4142,\n    \"2019-11-29T12:00:00.000Z\": 11.4403,\n    \"2019-11-29T13:00:00.000Z\": 11.475,\n    \"2019-11-29T14:00:00.000Z\": 12,\n    \"2019-11-29T15:00:00.000Z\": 11.4763,\n    \"2019-11-29T16:00:00.000Z\": 12,\n    \"2019-11-29T17:00:00.000Z\": 12,\n    \"2019-11-29T18:00:00.000Z\": 13,\n    \"2019-11-29T19:00:00.000Z\": 12,\n    \"2019-11-29T20:00:00.000Z\": 12,\n    \"2019-11-29T21:00:00.000Z\": 13,\n    \"2019-11-29T22:00:00.000Z\": 12,\n    \"2019-11-29T23:00:00.000Z\": 12,\n    \"2019-11-30T01:00:00.000Z\": 10.7918,\n    \"2019-11-30T02:00:00.000Z\": 10.34,\n    \"2019-11-30T03:00:00.000Z\": 10.2648,\n    \"2019-11-30T04:00:00.000Z\": 10.112,\n    \"2019-11-30T05:00:00.000Z\": 11,\n    \"2019-11-30T06:00:00.000Z\": 10.312,\n    \"2019-11-30T07:00:00.000Z\": 11,\n    \"2019-11-30T08:00:00.000Z\": 12,\n    \"2019-11-30T09:00:00.000Z\": 11.3663,\n    \"2019-11-30T10:00:00.000Z\": 11.1262,\n    \"2019-11-30T11:00:00.000Z\": 10.7471,\n    \"2019-11-30T12:00:00.000Z\": 11,\n    \"2019-11-30T13:00:00.000Z\": 11,\n    \"2019-11-30T14:00:00.000Z\": 11,\n    \"2019-11-30T15:00:00.000Z\": 11.5\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\nfrom plotly.graph_objects import Figure\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef timeseries_comparison_plot(\n    series_1: pd.Series,\n    series_2: pd.Series,\n    traces_opts: dict = {},\n    layout_opts: dict = {\n        \"xaxis_title\": \"Time\",\n        \"yaxis_title\": \"Values\",\n        \"autosize\": True,\n        \"height\": 200,\n    },\n    line_opts: dict = {},\n) -> Figure:\n    \"\"\"Create a single time series line plot Plotly figure\n    \n    Returns the plotly figure object.\n    \"\"\"\n\n    fig = Figure()\n    # Only thing I figured is - I could do this\n\n    s1 = series_1.sort_index()\n\n    fig.add_scatter(\n        x=s1.index, y=s1, mode=\"lines\", name=s1.name if s1.name else \"series_1\"\n    )  # Not what is desired - need a line\n\n    s2 = series_2.sort_index()\n\n    fig.add_scatter(\n        x=s2.index, y=s2, mode=\"lines\", name=s2.name if s2.name else \"series_2\"\n    )  # Not what is desired - need a line\n\n    fig.update_layout(**layout_opts)  # see https://plotly.com/python/figure-labels/\n    fig.update_traces(traces_opts)  # set line color?\n\n    fig.update_layout(margin=dict(l=0, r=0, b=0, t=5, pad=0))\n\n    fig.update_yaxes(automargin=True)\n    fig.update_xaxes(automargin=True)\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series_1\": DataType.Series, \"series_2\": DataType.Series},\n    outputs={\"comparison_plot\": DataType.PlotlyJson},\n    name=\"Compare Two Timeseries Plot\",\n    description=\"Plotting of two timeseries in the same plot\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"a432923f-4718-44ae-3c9c-9832e68724bb\",\n    revision_group_id=\"a432923f-4718-44ae-3c9c-9832e68724bb\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:30.020807+00:00\"\n)\ndef main(*, series_1, series_2):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"comparison_plot\": plotly_fig_to_json_dict(\n            timeseries_comparison_plot(series_1, series_2)\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "d416b294-0dc1-06b8-01ad-afd4d9794ae4",
          "name": "series_1",
          "data_type": "SERIES"
        },
        {
          "id": "8478c25c-9370-e6d9-7a1f-4d611782570c",
          "name": "series_2",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "0951b836-933c-044d-030b-6c2ee3b5d00a",
          "name": "comparison_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "dc909fa2-93fa-3205-e31d-b05f944cbd29",
    "revision_group_id": "dc909fa2-93fa-3205-e31d-b05f944cbd29",
    "name": "Simple Scatter Map Plot",
    "description": "Mark locations on a map",
    "category": "Visualization",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.137600+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Simple Scatter Map Plot\n\n## Description\nThis component marks locations on a map.\n\n## Inputs\n* **data** (Pandas DataFrame): Must have \n * \"lat\" and a \"lon\" columns containing latitude and longitude coordinates\n * \"name\" column where the titles of the hovering rectangle are obtained from.\n * \"description\" column where additional information is stored that is included in the hovering rectangles.\n * A column of which the name is equal to the value provided in **cat_color_col** input. This must be a categorical column, e.g. String values like `\"A\", \"B\", ...`.\n* **color_map** (Any): Must be a dictionary providing color values for the category values in `data[cat_color_col]`, e.g. `{\"A\": \"#005099\", \"B\": \"#6633FF\"}`\n* **cat_color_col** (String): The name of the column containing the categories in **data**.\n\n## Outputs\n* **map_plot** (Plotly Json): The generated Plotly Json map plot. This is used by the hetida designer frontend for plotting the results.\n\n## Details\nThis is an example for a Scatter Map plot. It draws an Openstreetmap map, marking all locations in **data** with a small circle.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"cat_color_col\": \"Organisation\",\n    \"color_map\": {\n        \"Folkwang\": \"#005099\",\n        \"von der Heydt\": \"#00925B\",\n        \"lehmbruck\": \"#0076BD\"\n    },\n    \"data\": {\n        \"lat\": [\n            51.442666,\n            51.256625,\n            51.430145\n        ],\n        \"lon\": [\n            7.005126,\n            7.146598,\n            6.765380\n        ],\n        \"name\": [\n            \"Folkwang Museum Essen\",\n            \"Von der Heydt Museum Wuppertal\",\n            \"Lehmbruck Museum Duisburg\"\n        ],\n        \"description\": [\n            \"\",\n            \"\",\n            \"\"\n        ],\n        \"Organisation\": [\n            \"Folkwang\",\n            \"von der Heydt\",\n            \"lehmbruck\"\n        ]\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\n\nimport pandas as pd\nimport numpy as np\n\nimport plotly.express as px\n\nimport plotly.io as pio\n\npio.templates.default = None\n\n\ndef get_plotly_osm_scatter_map_figure(\n    dataframe,\n    lat_col=\"lat\",\n    lon_col=\"lon\",\n    hover_title_col=None,\n    hover_additional_description_cols=None,\n    cat_color_col=None,\n    cat_color_mapping=None,\n    size=None,\n    fixed_size=None,\n    size_max=10,\n    zoom=8,\n    height=400,\n    **kwargs\n):\n\n    if cat_color_mapping is None:\n        cat_color_mapping = {}\n\n    use_size_vals = False\n    if fixed_size is not None and size is None:\n        use_size_vals = True\n        size_vals = np.ones(len(dataframe)) * fixed_size\n        \n    fig = px.scatter_mapbox(\n        dataframe,\n        lat=lat_col,\n        lon=lon_col,\n        hover_name=hover_title_col,\n        hover_data=hover_additional_description_cols,\n        size=size if not use_size_vals else size_vals,\n        size_max=10,\n        color_discrete_map=cat_color_mapping,\n        color=cat_color_col,\n        zoom=zoom,\n        height=height,\n        **kwargs\n    )\n    fig.update_layout(mapbox_style=\"open-street-map\")\n    fig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\n    return fig\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.DataFrame, \"color_map\": DataType.Any, \"cat_color_col\": DataType.String},\n    outputs={\"map_plot\": DataType.PlotlyJson},\n    name=\"Simple Scatter Map Plot\",\n    description=\"Mark locations on a map\",\n    category=\"Visualization\",\n    version_tag=\"1.0.0\",\n    id=\"dc909fa2-93fa-3205-e31d-b05f944cbd29\",\n    revision_group_id=\"dc909fa2-93fa-3205-e31d-b05f944cbd29\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.137600+00:00\"\n)\ndef main(*, data, color_map, cat_color_col):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"map_plot\": plotly_fig_to_json_dict(\n            get_plotly_osm_scatter_map_figure(\n                data,\n                hover_title_col=\"name\",\n                hover_additional_description_cols=[\"description\"],\n                fixed_size=2,\n                size_max=5,\n                cat_color_col=cat_color_col,\n                cat_color_mapping=color_map,\n            )\n        )\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "159f2c5a-40fc-65a2-d84c-2e7d2ae16e0a",
          "name": "data",
          "data_type": "DATAFRAME"
        },
        {
          "id": "0d0227d4-60cd-98de-d7bd-8de9462ff452",
          "name": "color_map",
          "data_type": "ANY"
        },
        {
          "id": "b7519a7a-83ae-d0a4-e79c-60b3c0f00c2e",
          "name": "cat_color_col",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "7c1a20a3-f8ae-be72-f6c3-73e874904c74",
          "name": "map_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e1475799-eeab-8a18-97bf-69aa09d86a4a",
    "revision_group_id": "e1475799-eeab-8a18-97bf-69aa09d86a4a",
    "name": "Apply Substitution Timeseries",
    "description": "Apply a substitution to a timeseries using a substitution series",
    "category": "Data Quality",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.615498+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Apply Substitution Timeseries\"\n\n## Description\nApply a substitution to a timeseries using a substitution series.\n\n## Inputs\n* **raw_values** (Pandas Series): The original (raw) value series. Entries should be numeric and Index should be a DateTime Index.\n* **substitution_series** (Pandas Series): The substitution series containing replacement and new values as well as null/NaN values where original values should be ignored.\n\n## Outputs\n* **substituted_ts** (Pandas Series): The resulting timeseries with values replaced, ignored or added.\n\n## Details\nApply a substitution allowing to\n* replace existing values\n* add new values\n* ignore original values\nFor ignoring, the substitution series need NaN values at the appropriate indices.\n\n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"raw_values\": {\n\t\t\t    \"2020-07-01T00:00:00Z\": 0,\n\t\t\t    \"2020-07-02T00:00:00Z\": 17,\n\t\t\t    \"2020-07-03T00:00:00Z\": 18,\n\t\t\t    \"2020-07-04T00:00:00Z\": 3,\n\t\t\t    \"2020-07-04T08:00:00Z\": 15,\n\t\t\t    \"2020-07-04T14:00:00Z\": 16,\n\t\t\t    \"2020-07-04T18:00:00Z\": 19,\n\t\t\t    \"2020-07-07T00:00:00Z\": 6,\n\t\t\t    \"2020-07-08T00:00:00Z\": 7\n\t},\n\t\"substitution_series\": {\n\t\t\t    \"2020-07-02T00:00:00Z\": 1.0,\n\t\t\t    \"2020-07-03T00:00:00Z\": 2.0,\n\t\t\t    \"2020-07-04T08:00:00Z\": null,\n\t\t\t    \"2020-07-04T14:00:00Z\": null,\n\t\t\t    \"2020-07-04T18:00:00Z\": null,\n\t\t\t    \"2020-07-05T00:00:00Z\": 4,\n\t\t\t    \"2020-07-06T00:00:00Z\": 5,\n\t\t\t    \"2020-07-09T00:00:00Z\": 18.0,\n\t\t\t    \"2020-07-10T00:00:00Z\": 19.0\n\t}\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nfrom hetdesrun.utils import plotly_fig_to_json_dict\n\nimport pandas as pd\n\n\ndef handle_substitutions(original_series, substitution_series):\n    \"\"\"Applies substituion series on raw values\n    \n    The substitution series can contain\n    * replacement values (at indices occuring in original)\n    * new values (values at indices not in original)\n    * null values at indices in original marking values for invalidation (ignoring)\n    \n    Returns a tuple of pandas Series objects\n        (completely_handled, replaced_values, replacements, new_values, ignored_values)    \"\"\"\n\n    new = original_series.copy()\n    deleted = new.loc[substitution_series.isnull().reindex(new.index, fill_value=False)]\n\n    kept_before_replacing = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=True)\n    ]\n\n    replaced_originals = new.loc[\n        substitution_series.notnull().reindex(new.index, fill_value=False)\n    ]\n\n    replacements = substitution_series.reindex(original_series.index).dropna()\n\n    new_values = substitution_series.loc[\n        ~substitution_series.index.isin(original_series.index)\n    ]\n\n    completely_handled_series = new.copy()\n    completely_handled_series = completely_handled_series.loc[\n        substitution_series.notnull().reindex(\n            completely_handled_series.index, fill_value=True\n        )\n    ]\n    completely_handled_series.update(substitution_series)\n    completely_handled_series = pd.concat([completely_handled_series, new_values])\n\n    return (\n        completely_handled_series.sort_index(),\n        replaced_originals,\n        replacements,\n        new_values,\n        deleted,\n    )\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"raw_values\": DataType.Series, \"substitution_series\": DataType.Series},\n    outputs={\"substituted_ts\": DataType.Series},\n    name=\"Apply Substitution Timeseries\",\n    description=\"Apply a substitution to a timeseries using a substitution series\",\n    category=\"Data Quality\",\n    version_tag=\"1.0.0\",\n    id=\"e1475799-eeab-8a18-97bf-69aa09d86a4a\",\n    revision_group_id=\"e1475799-eeab-8a18-97bf-69aa09d86a4a\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.615498+00:00\"\n)\ndef main(*, raw_values, substitution_series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    s1 = raw_values.sort_index()\n    s1 = s1.loc[~s1.index.duplicated(keep=\"first\")]\n\n    s2 = substitution_series.sort_index()\n    s2 = s2.loc[~s2.index.duplicated(keep=\"first\")]\n    return {\"substituted_ts\": handle_substitutions(s1, s2)[0]}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "4c3fbba4-d4df-f101-0cb9-083ac7e1e180",
          "name": "raw_values",
          "data_type": "SERIES"
        },
        {
          "id": "d751e7e3-3693-b7e1-1bb7-0cce64e00338",
          "name": "substitution_series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "a0d58599-2376-7665-c847-9ca2f86fb079",
          "name": "substituted_ts",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "eb8e8d6b-ba7d-dc88-14dc-6839a471d5e0",
    "revision_group_id": "eb8e8d6b-ba7d-dc88-14dc-6839a471d5e0",
    "name": "Load Object",
    "description": "Load a serialized Object from the object Repository",
    "category": "Data Sources",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.147709+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Load an Object from the object Repository\n\n## Description\nSerialize an Object and store it in the object Repository.\n\n## Inputs\n* **name** (String): The name for the Object.\n* **tag** (String): The tag for the Object.\n\n## Outputs\n* **obt** (Integer, Float, Pandas Series or Pandas DataFrame): The object to load. \n\n# Load an Object from the object Repository\n\nHetida Designer comes with a simple object store to allow serialization and persistence of Python objects between Workflows and Workflow Executions. A typical use case is storing of a trained machine learning model in a training workflow and loading it in a prediction workflow.\n\nTechnically joblib is used for serialization in order to efficiently store numpy arrays and Pandas objects.\n\nThe serialized object is stored using the name and a tag. It can be retrieved using the same name and tag combination. Additionally there is a magic \"latest\" tag which retrieves the last stored object with that name.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nimport hetdesrun.serialization\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"name\": DataType.String, \"tag\": DataType.String},\n    outputs={\"obj\": DataType.Any},\n    name=\"Load Object\",\n    description=\"Load a serialized Object from the object Repository\",\n    category=\"Data Sources\",\n    version_tag=\"1.0.0\",\n    id=\"eb8e8d6b-ba7d-dc88-14dc-6839a471d5e0\",\n    revision_group_id=\"eb8e8d6b-ba7d-dc88-14dc-6839a471d5e0\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.147709+00:00\"\n)\ndef main(*, name, tag):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"obj\": hetdesrun.serialization.load_obj(name, tag)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "562eea2c-2f89-ebe5-f62a-658b561f25be",
          "name": "name",
          "data_type": "STRING"
        },
        {
          "id": "f1a2390f-1bae-62a7-731b-4772c0ba6708",
          "name": "tag",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "2a5d344e-53b3-cf7e-2e05-eda8ea17fe89",
          "name": "obj",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "80f4f916-4568-29bb-3f94-b487b0612232",
    "revision_group_id": "80f4f916-4568-29bb-3f94-b487b0612232",
    "name": "Get R Dataset",
    "description": "Download an R dataset and obtain it as DataFrame",
    "category": "Data Sources",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.173440+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Get R Dataset\n\n## Description\nDownload an R dataset and obtain it as a DataFrame.\n\n## Inputs\n* **dataname** (String): The name of the dataset (e.g. \"iris\" or \"bostonc\").\n* **tag** (String): The package of the dataset (e.g. \"datasets\" or \"DAAG\").\n\n## Outputs\n* **data** (Pandas DataFrame): The loaded data set. \n\n## Details\n\nThis needs a working internet connection of the hetida designer runtime. Downloading a dataset may take a moment depending on its size and your connection speed.\n\n**Warning**: Datasets may be re-downloaded with every execution of this component. This component should only be used for one-off demo runs.\n\nThis component allows to use classical/example/demo datasets provided by some R packages.\n\nSee https://vincentarelbundock.github.io/Rdatasets/datasets.html for a list of available datasets.\n\nThis component uses the statsmodels library for downloading the datasets (https://www.statsmodels.org/dev/datasets/statsmodels.datasets.get_rdataset.html).\n\n## Examples\nThe json input of a typical call of this component to download the classical iris dataset is\n```\n{\n    \"dataname\": \"iris\",\n    \"package\": \"datasets\"\n}\n```\nTo get (corrected) Boston housing data use\n```\n{\n    \"dataname\": \"bostonc\",\n    \"package\": \"DAAG\"\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType # add your own imports here\n\nimport statsmodels.api as sm\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataname\": DataType.String, \"package\": DataType.String},\n    outputs={\"data\": DataType.DataFrame},\n    name=\"Get R Dataset\",\n    description=\"Download an R dataset and obtain it as DataFrame\",\n    category=\"Data Sources\",\n    version_tag=\"1.0.0\",\n    id=\"80f4f916-4568-29bb-3f94-b487b0612232\",\n    revision_group_id=\"80f4f916-4568-29bb-3f94-b487b0612232\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.173440+00:00\"\n)\ndef main(*, dataname, package):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"data\": sm.datasets.get_rdataset(dataname, package=package).data}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "b76dd887-094a-f23c-3148-d3f064cce409",
          "name": "dataname",
          "data_type": "STRING"
        },
        {
          "id": "0a506794-95f1-c1e9-8152-c951ab93b1f9",
          "name": "package",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "c32362ab-314a-c9e5-a439-830ab93e1672",
          "name": "data",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "38eb0c5d-6182-0be2-3058-9b5bddc7842d",
    "revision_group_id": "38eb0c5d-6182-0be2-3058-9b5bddc7842d",
    "name": "Tangent",
    "description": "Calculates the tangent of the input",
    "category": "Trigonometric",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.547605+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Tangent\n\n## Description\nThis component calculates the tangent of the input.\n\n## Inputs\n* **data** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n\n## Outputs\n* **result** (Float, Pandas Series or Pandas DataFrame): The tangent of **data**.\n\n## Details\nThe component calculates the tangent of **data**.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3.14159\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Tangent\",\n    description=\"Calculates the tangent of the input\",\n    category=\"Trigonometric\",\n    version_tag=\"1.0.0\",\n    id=\"38eb0c5d-6182-0be2-3058-9b5bddc7842d\",\n    revision_group_id=\"38eb0c5d-6182-0be2-3058-9b5bddc7842d\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.547605+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"result\": np.tan(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "e002ae84-13f1-ffbb-fe36-f9888604b316",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "ef093fa1-0522-11b4-113a-2b3230cfff80",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "ba0783de-93ab-0eb2-87fd-a5e09aff9d87",
    "revision_group_id": "ba0783de-93ab-0eb2-87fd-a5e09aff9d87",
    "name": "Arcuscosine",
    "description": "Calculates the arcuscosine of the input",
    "category": "Trigonometric",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.387354+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Arcuscosine\n\n## Description\nThis component calculates the arcuscosine of the input.\n\n## Inputs\n* **data** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric and between -1 and 1. \n\n## Outputs\n* **result** (Float, Pandas Series or Pandas DataFrame): The arcuscosine of **data**.\n\n## Details\nThe component calculates the arcuscosine of the input **data** as radians between 0 and pi.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.0,\n\t\t\t\t\"2019-08-01T15:44:12\": -1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3.14159\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Arcuscosine\",\n    description=\"Calculates the arcuscosine of the input\",\n    category=\"Trigonometric\",\n    version_tag=\"1.0.0\",\n    id=\"ba0783de-93ab-0eb2-87fd-a5e09aff9d87\",\n    revision_group_id=\"ba0783de-93ab-0eb2-87fd-a5e09aff9d87\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.387354+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"result\": np.arccos(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "a8228aef-e2ef-4a1a-2982-dc71c47cc301",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "ff9c358e-279e-e7a7-344e-1e90975df6c6",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "1a83d0bb-2321-fd1a-8db4-22320b6eeb1c",
    "revision_group_id": "1a83d0bb-2321-fd1a-8db4-22320b6eeb1c",
    "name": "Cosine",
    "description": "Calculates the cosine of the input",
    "category": "Trigonometric",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.684052+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Cosine\n\n## Description\nThis component calculates the cosine of the input.\n\n## Inputs\n* **data** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n\n## Outputs\n* **result** (Float, Pandas Series or Pandas DataFrame): The cosine of **data**.\n\n## Details\nThe component calculates the cosine of **data**.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3.14159\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.0,\n\t\t\t\t\"2019-08-01T15:44:12\": -1.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Cosine\",\n    description=\"Calculates the cosine of the input\",\n    category=\"Trigonometric\",\n    version_tag=\"1.0.0\",\n    id=\"1a83d0bb-2321-fd1a-8db4-22320b6eeb1c\",\n    revision_group_id=\"1a83d0bb-2321-fd1a-8db4-22320b6eeb1c\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.684052+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"result\": np.cos(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "3f26bf85-0d72-4d30-5f43-f9453ff45d92",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "fdf56631-cb65-f3f5-b5e6-f7910e6c42c6",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "487008dc-1476-139c-5392-d5d0de1e6505",
    "revision_group_id": "487008dc-1476-139c-5392-d5d0de1e6505",
    "name": "Arcussine",
    "description": "Calculates the arcussine of the input",
    "category": "Trigonometric",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.361040+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Arcussine\n\n## Description\nThis component calculates the arcussine of the input.\n\n## Inputs\n* **data** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be Integers or Floats and between -1 and 1. \n\n## Outputs\n* **result** (Float, Pandas Series or Pandas DataFrame): The arcussine of **data**.\n\n## Details\nThe component calculates the arcussine of **data** in radians between -pi/2 and pi/2.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": -1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": -1.570796\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Arcussine\",\n    description=\"Calculates the arcussine of the input\",\n    category=\"Trigonometric\",\n    version_tag=\"1.0.0\",\n    id=\"487008dc-1476-139c-5392-d5d0de1e6505\",\n    revision_group_id=\"487008dc-1476-139c-5392-d5d0de1e6505\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.361040+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"result\": np.arcsin(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "0f05abb3-52dd-934e-c131-0940ac24b3dd",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "d31249c0-62b9-4c84-af47-d2802bc246c8",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "8b974f17-5055-80f2-64f5-96c6eff93a35",
    "revision_group_id": "8b974f17-5055-80f2-64f5-96c6eff93a35",
    "name": "Arcustangent",
    "description": "Calculates the arcustangent of the input",
    "category": "Trigonometric",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.590427+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Arcustangent\n\n## Description\nThis component calculates the arcustangent of the input.\n\n## Inputs\n* **data** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n\n## Outputs\n* **result** (Float, Pandas Series or Pandas DataFrame): The arcustangent of **data**.\n\n## Details\nThe component calculates the arcustangent of **data** in radians between -pi/2 and pi/2.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 1.0\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.785398\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Arcustangent\",\n    description=\"Calculates the arcustangent of the input\",\n    category=\"Trigonometric\",\n    version_tag=\"1.0.0\",\n    id=\"8b974f17-5055-80f2-64f5-96c6eff93a35\",\n    revision_group_id=\"8b974f17-5055-80f2-64f5-96c6eff93a35\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.590427+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"result\": np.arctan(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "0090d546-c18a-ba01-1730-b1b0bfb522ca",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "3f1422e2-39e5-7068-acee-978bb4d845fb",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "2cc88d07-b151-dc5b-d4c4-cfd95a043de3",
    "revision_group_id": "2cc88d07-b151-dc5b-d4c4-cfd95a043de3",
    "name": "Sine",
    "description": "Calculates the sine of the input",
    "category": "Trigonometric",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.472354+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Sine\n\n## Description\nThis component calculates the sine of the input.\n\n## Inputs\n* **data** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n\n## Outputs\n* **result** (Float, Pandas Series or Pandas DataFrame): The sine of **data**.\n\n## Details\nThe component calculates the sine of **data**.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3.14159\n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 0.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 0.0\n\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Sine\",\n    description=\"Calculates the sine of the input\",\n    category=\"Trigonometric\",\n    version_tag=\"1.0.0\",\n    id=\"2cc88d07-b151-dc5b-d4c4-cfd95a043de3\",\n    revision_group_id=\"2cc88d07-b151-dc5b-d4c4-cfd95a043de3\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.472354+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"result\": np.sin(data)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5477553b-1744-8fd6-c4e2-da031cfdb6b4",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "6453b174-0690-1ffa-6630-0602ca8a302f",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "11b9c01e-8e32-25a9-9625-97a5654230be",
    "revision_group_id": "11b9c01e-8e32-25a9-9625-97a5654230be",
    "name": "MAVG Outlier Filter",
    "description": "Return only those values inside of moving mean / std - band",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.236211+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# MAVG Outlier Filter\n\n## Description\nReturn only those values inside of moving mean / std - band.\n\n## Inputs\n* **allowed_deviation_factor** (Float): The indices must be datetimes with constant differences, the values must be numeric.\n* **window_size** (String): Cut-off frequency. \n* **ts** (Pandas Series or Pandas DataFrame): Values must be numeric. \n\n## Outputs\n* **ts** (Pandas Series): The filtered data.\n\n## Details\nReturns only those values deviating not more than a factor times the moving standard deviation from the moving average.\n\nThe window size can be set as a String according to the allowed values of Pandas rolling method on a Series.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nfrom scipy.signal import butter\nfrom scipy.signal import lfilter\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"allowed_deviation_factor\": DataType.Float, \"window_size\": DataType.String, \"ts\": DataType.Any},\n    outputs={\"ts\": DataType.Any},\n    name=\"MAVG Outlier Filter\",\n    description=\"Return only those values inside of moving mean / std - band\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"11b9c01e-8e32-25a9-9625-97a5654230be\",\n    revision_group_id=\"11b9c01e-8e32-25a9-9625-97a5654230be\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.236211+00:00\"\n)\ndef main(*, allowed_deviation_factor, window_size, ts):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here\n    means = ts.rolling(window_size).mean()\n    stds = ts.rolling(window_size).std()\n\n    return {\n        \"ts\": ts[\n            (ts < means + allowed_deviation_factor * stds)\n            & ((ts > means - allowed_deviation_factor * stds))\n        ]\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "9cea3ce2-4912-5c88-3eba-d645fe4ba4fc",
          "name": "allowed_deviation_factor",
          "data_type": "FLOAT"
        },
        {
          "id": "2fcd1fc2-7cc7-d81a-7483-d93b8fe96d30",
          "name": "window_size",
          "data_type": "STRING"
        },
        {
          "id": "1029d28d-113f-ef73-2fb4-ae20b3398fbf",
          "name": "ts",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "0d3a9804-6d58-a0e4-260e-e0d082bdb6fc",
          "name": "ts",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "07f979e0-11bd-f91a-1a8f-52b4ef883d74",
    "revision_group_id": "07f979e0-11bd-f91a-1a8f-52b4ef883d74",
    "name": "Cut Values Below Limit",
    "description": "Return only those values equal to or above the provided limit",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.200562+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Cut Values above limit\n\n## Description\nThis component returns only those values equal to or above the provided limit.\n\n## Inputs\n* **ts_or_frame** (Pandas Series or Pandas DataFrame): Values must be numeric. \n* **limit** (Float): Provided limit, the values are compared with. \n\n## Outputs\n* **ts_or_frame** (Pandas Series or Pandas DataFrame): Values equal to or above the provided limit. \n\n## Details\nThis component returns only those values equal to or above the provided limit.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"limit\": DataType.Float, \"ts_or_frame\": DataType.Any},\n    outputs={\"ts_or_frame\": DataType.Any},\n    name=\"Cut Values Below Limit\",\n    description=\"Return only those values equal to or above the provided limit\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"07f979e0-11bd-f91a-1a8f-52b4ef883d74\",\n    revision_group_id=\"07f979e0-11bd-f91a-1a8f-52b4ef883d74\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.200562+00:00\"\n)\ndef main(*, limit, ts_or_frame):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"ts_or_frame\": ts_or_frame[ts_or_frame >= limit]}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "632b6220-b088-6e9f-ee3e-cdf43ada4d55",
          "name": "limit",
          "data_type": "FLOAT"
        },
        {
          "id": "06d2acd5-2655-14f1-b724-d48a28be631d",
          "name": "ts_or_frame",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "fe98479d-6d17-fa9f-a1d2-78dcd13e3986",
          "name": "ts_or_frame",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "417d44a2-1701-2e5b-bee8-7ce1a4dc1d0e",
    "revision_group_id": "417d44a2-1701-2e5b-bee8-7ce1a4dc1d0e",
    "name": "Highpass Filter",
    "description": "First-order digital highpass filter",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.351211+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Highpass Filter\n\n## Description\nThis component is a digital first-order highpass-filter.\n\n## Inputs\n* **data** (Pandas Series): The indices must be datetimes with constant differences, the values must be numeric.\n* **frequency** (Float): Cut-off frequency. \n\n## Outputs\n* **filtered** (Pandas Series): The filtered data.\n\n## Details\nThe component filters a Pandas Series with a given cut-off frequency. The result is a Pandas Series, containing only frequencies greater than the cut-off frequency.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nfrom scipy.signal import butter\nfrom scipy.signal import lfilter\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series, \"frequency\": DataType.Float},\n    outputs={\"filtered\": DataType.Series},\n    name=\"Highpass Filter\",\n    description=\"First-order digital highpass filter\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"417d44a2-1701-2e5b-bee8-7ce1a4dc1d0e\",\n    revision_group_id=\"417d44a2-1701-2e5b-bee8-7ce1a4dc1d0e\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.351211+00:00\"\n)\ndef main(*, data, frequency):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here.\n    nyq = 0.5 * data.size / ((data.index[-1] - data.index[0]).total_seconds())\n    normal_frequency = frequency / nyq\n    b, a = butter(1, normal_frequency, btype=\"high\", analog=False)\n    filtered = lfilter(b, a, data)\n    return {\"filtered\": pd.Series(filtered, index=data.index)}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "a966632c-a209-32a2-55e0-f650f602da2b",
          "name": "data",
          "data_type": "SERIES"
        },
        {
          "id": "0bbdc8ac-c505-ab73-1bdf-338a64fc42bb",
          "name": "frequency",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "2c84fdf8-bbcd-08a1-0f7e-f45826aab4e9",
          "name": "filtered",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "72570287-ecb6-4c74-3902-ace451662138",
    "revision_group_id": "72570287-ecb6-4c74-3902-ace451662138",
    "name": "Drop duplicates",
    "description": "Drop duplicated rows",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.419589+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Drop duplicates\n\n## Description\nDrop duplicated rows.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Values must be numeric. \n\n## Outputs\n* **data** (Pandas Series or Pandas DataFrame): The Pandas object without duplicates.\n\n## Details\nThe component calls Pandas' drop_duplicates method with no parameters on the provided input data and returns the result.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"data\": DataType.Any},\n    name=\"Drop duplicates\",\n    description=\"Drop duplicated rows\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"72570287-ecb6-4c74-3902-ace451662138\",\n    revision_group_id=\"72570287-ecb6-4c74-3902-ace451662138\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.419589+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"data\": data.drop_duplicates()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1fcff093-43fb-312e-d5c3-6ae489571ee9",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "3c51dde1-8c1d-170b-c480-f5997874cc5d",
          "name": "data",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "41f4c453-e4e7-f07d-df77-c89cb42cb3ac",
    "revision_group_id": "41f4c453-e4e7-f07d-df77-c89cb42cb3ac",
    "name": "MAVG Smoothing",
    "description": "Return Moving Averages",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.109406+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# MAVG Smoothing\n\n## Description\nReturn Moving Averages.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Values must be numeric.\n* **window_size** (String): Window, in which the moving average is calculated. \n\n## Outputs\n* **data** (Pandas Series): The filtered data.\n\n## Details\nUse Moving Average to smooth a Series or a DataFrame. The parameter window_size should be a String accordiding to what is allowed for Pandas rolling method.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nfrom scipy.signal import butter\nfrom scipy.signal import lfilter\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"window_size\": DataType.String},\n    outputs={\"data\": DataType.Any},\n    name=\"MAVG Smoothing\",\n    description=\"Return Moving Averages\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"41f4c453-e4e7-f07d-df77-c89cb42cb3ac\",\n    revision_group_id=\"41f4c453-e4e7-f07d-df77-c89cb42cb3ac\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.109406+00:00\"\n)\ndef main(*, data, window_size):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here\n    return {\"data\": data.rolling(window_size).mean()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "277a910b-e86c-8ee7-4f44-04ca6b613b86",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "38f67927-9970-a43f-8fdf-7101bf643885",
          "name": "window_size",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "54110b96-2c6d-ee3d-98ac-d5c6bc1e397b",
          "name": "data",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e8b1d655-803c-e79f-5c15-62aec3a4c27d",
    "revision_group_id": "e8b1d655-803c-e79f-5c15-62aec3a4c27d",
    "name": "Drop NaN Values",
    "description": "Drop rows containing NaN values",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.161301+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Drop NaN\n\n## Description\nThe component drops rows containing NaN values.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Values must be numeric. \n\n## Outputs\n* **data** (Pandas Series or Pandas DataFrame): The Pandas object without NaN rows.\n\n## Details\nThe component calls Pandas' dropna method with no parameters on the provided input data and returns the result. This removes all rows containing a nan value (in any column for a dataframe).\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"data\": DataType.Any},\n    name=\"Drop NaN Values\",\n    description=\"Drop rows containing NaN values\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"e8b1d655-803c-e79f-5c15-62aec3a4c27d\",\n    revision_group_id=\"e8b1d655-803c-e79f-5c15-62aec3a4c27d\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.161301+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"data\": data.dropna()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "0fcc9078-1402-a290-d632-a6ba198d784e",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "36381406-4684-57ef-bdd5-ba141fcdf3ec",
          "name": "data",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "a4a8cfa7-3b18-dc8d-2985-9a8be889686a",
    "revision_group_id": "a4a8cfa7-3b18-dc8d-2985-9a8be889686a",
    "name": "Lowpass Filter",
    "description": "First-order digital lowpass filter",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.971911+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Lowpass FIlter\n\n## Description\nThis component is a digital first-order lowpass-filter.\n\n## Inputs\n* **data** (Pandas Series): The indices must be datetimes with constant differences, the values must be numeric.\n* **frequency** (Float): Cut-off frequency. \n\n## Outputs\n* **filtered** (Pandas Series): The filtered data.\n\n## Details\nThe component filters a Pandas Series with a given cut-off frequency. The result is a Pandas Series, containing only frequencies smaller than the cut-off frequency.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nfrom scipy.signal import butter\nfrom scipy.signal import lfilter\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Series, \"frequency\": DataType.Float},\n    outputs={\"filtered\": DataType.Series},\n    name=\"Lowpass Filter\",\n    description=\"First-order digital lowpass filter\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"a4a8cfa7-3b18-dc8d-2985-9a8be889686a\",\n    revision_group_id=\"a4a8cfa7-3b18-dc8d-2985-9a8be889686a\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.971911+00:00\"\n)\ndef main(*, data, frequency):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your code here\n    nyq = 0.5 * data.size / ((data.index[-1] - data.index[0]).total_seconds())\n    normal_frequency = frequency / nyq\n    b, a = butter(1, normal_frequency, btype=\"low\", analog=False)\n    filtered = lfilter(b, a, data)\n    \n    return {\"filtered\": pd.Series(filtered, index=data.index)}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "cb69cbd4-b3ea-61b1-3387-2e31e37aa60e",
          "name": "data",
          "data_type": "SERIES"
        },
        {
          "id": "2a87eb31-1cf4-6c86-2906-eb08785b364b",
          "name": "frequency",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "61a734b8-3a19-b4e4-c4d9-2fc97ae506aa",
          "name": "filtered",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "0a871bb6-b59c-e94d-40fd-a6673d1713c7",
    "revision_group_id": "0a871bb6-b59c-e94d-40fd-a6673d1713c7",
    "name": "Reduce data set by leaving out values",
    "description": "Reduce data set by leaving out values",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.525669+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Reduce data by leaving out values\n\nThis is mainly used in preprocessing extensive datasets for more performant plotting\n\nNotes:\n* this simply takes every n'th datapoint for a suitable n if some preconditions hold\n* n is computed via round((len(data) - 1) / (number_of_points - 1)) meaning\n    * at the end you can still have more than given number_of_points datapoints!\n    * while the first datapoint is always included, the last one is not necessarily included\n\nWARNING: This is by no means an analytically reasonable way to reduce the number\nof data points! A more sophisticated method should be used which uses statistical\ndistribution of data points in order to keep relevant outliers etc.",
    "content": "\n\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n\nMIN_NUMBER_POINTS = 2\n\n\ndef reduce_data(data, number_of_points: int):\n    \"\"\"Reduce number of data points for performant plots\"\"\"\n    if (len(data) >= number_of_points) and (number_of_points >= MIN_NUMBER_POINTS):\n        return data.iloc[:: int(round((len(data) - 1) / (number_of_points - 1)))]\n    return data.iloc[::1].copy()\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"number_of_points\": DataType.Integer},\n    outputs={\"data\": DataType.Any},\n    name=\"Reduce data set by leaving out values\",\n    description=\"Reduce data set by leaving out values\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"0a871bb6-b59c-e94d-40fd-a6673d1713c7\",\n    revision_group_id=\"0a871bb6-b59c-e94d-40fd-a6673d1713c7\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.525669+00:00\"\n)\ndef main(*, data, number_of_points):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"data\": reduce_data(data, number_of_points)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "e3719bfa-510e-85e4-aacf-50dd0275f949",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "bd301ddd-cb55-7993-7e38-bbae9beec5ee",
          "name": "number_of_points",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "b4b51bdb-89f8-a182-487c-90c967a4216f",
          "name": "data",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e3323561-276e-d4a8-8417-badedbbd3c98",
    "revision_group_id": "e3323561-276e-d4a8-8417-badedbbd3c98",
    "name": "Cut Values Above Limit",
    "description": "Return only those values equal to or below the provided limit",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:35.049441+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Cut Values above limit\n\n## Description\nThis component returns only those values equal to or below the provided limit.\n\n## Inputs\n* **ts_or_frame** (Pandas Series or Pandas DataFrame): Values must be numeric. \n* **limit** (Float): Provided limit, the values are compared with. \n\n## Outputs\n* **ts_or_frame** (Pandas Series or Pandas DataFrame): Values equal to or below the provided limit. \n\n## Details\nThis component returns only those values equal to or below the provided limit.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"limit\": DataType.Float, \"ts_or_frame\": DataType.Any},\n    outputs={\"ts_or_frame\": DataType.Any},\n    name=\"Cut Values Above Limit\",\n    description=\"Return only those values equal to or below the provided limit\",\n    category=\"Filters\",\n    version_tag=\"1.0.0\",\n    id=\"e3323561-276e-d4a8-8417-badedbbd3c98\",\n    revision_group_id=\"e3323561-276e-d4a8-8417-badedbbd3c98\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:35.049441+00:00\"\n)\ndef main(*, limit, ts_or_frame):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"ts_or_frame\": ts_or_frame[ts_or_frame <= limit]}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "4c5391d5-80aa-d59b-7a80-e272bbcdbde1",
          "name": "limit",
          "data_type": "FLOAT"
        },
        {
          "id": "670570cf-34b2-4bb8-297c-a3f56c5580ab",
          "name": "ts_or_frame",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "f1370aa9-2fa1-fe7e-82a4-98845916e5e5",
          "name": "ts_or_frame",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "bf698fbb-1e2e-47ca-a4f8-72b06b011985",
    "revision_group_id": "4cf6f5e7-e4de-4714-8929-5206c595a148",
    "name": "Moving Window MAD Band Filter",
    "description": "Detect outliers by moving window median absolute deviation (MAD) bandpass filter",
    "category": "Filters",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-11-24T17:03:43.549364+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Moving Window MAD Band Filter\n\n## Description\nThis component detects outliers based on calculated bandpass filter statistics. These statistics include the median and median absolute deviation (MAD) for a moving window.\n\n## Inputs\n* **series** (Pandas Series): Series to perform the bandpass filter calculation for. The indices must be datetimes.\n* **window_size** (String): Time period of each window. Must be a pandas frequency string.\n* **min_num_datapoints_in_window** (Integer): Minimum number of datapoints required in a window to calculate the statistics.\n* **mad_scaling_factor** (Float): The calculated MADs are multiplied by this factor to adjust the width of the bandfilter at each point. The value 1.4836 makes it equivalent to the standard deviation.\n* **min_band_width_factor** (Float): Factor to calculate the minimum band width. The factor is multiplied with the median of the calculated MADs.\n\n## Outputs\n* **band_filter_dataframe** (Pandas DataFrame): Data frame with the input series, the calculated statistics and the filter mask.\n* **filter_mask** (Pandas Series): Series with the filter mask.\n\n## Details\nThis component detects outlier in a series based on bandpass filter statistics that it calculates. This includes the calculation of the median and median absolute deviation (MAD) for a moving window of size **window_size**. There must be at least **min_num_datapoints_in_window** datapoints within a window to perform a calculation. If there are fewer datapoints in a window, no calculation is performed.\n\nThe function to calculate the MAD is selected based on the size of the series. Both available functions are based on numpy functions. If the size of the series exceeds 10,000 datapoints, numba just-in-time compilation is used to speed up the MAD calculation. The limit of 10,000 datapoints was chosen as result of runtime tests on multiple machines.\n\nThe calculated MADs are multiplied by **mad_normalization_constant**. This allows a normalization with regard to other figures. For example, the result with the constant 1.4826 is equivalent to the standard deviation.\n\nA minimum width of the band is ensured using **min_band_width_factor**. The higher the value, the wider the band. The factor is multiplied with the median of the calculated MADs of all windows. All MADs that are smaller than the product are set to it.\n\nThe last step is to check which datapoints lie outside of the band. If no calculation was performed for a datapoint because too few datapoints were inside the corresponding window, no statement can be made about this datapoint. In this case, the datapoint is classified as normal and not as an outlier.\n\nThe component has two outputs, a data frame with the input series, the calculated statistics, and the result of the last check as well as a series with only the result of the last check. The data frame **band_filter_dataframe** can be used for visualization of the results and the series **filter_mask** to filter the time series.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"series\": {\n        \"2022-01-01T00:00:00Z\": 1.058,\n        \"2022-01-01T00:20:48Z\": 0.699,\n        \"2022-01-01T00:41:37Z\": 1.08,\n        \"2022-01-01T01:02:26Z\": 1.054,\n        \"2022-01-01T01:23:15Z\": 0.763,\n        \"2022-01-01T01:44:04Z\": 1.034,\n        \"2022-01-01T02:04:53Z\": 0.965,\n        \"2022-01-01T02:25:42Z\": 0.601,\n        \"2022-01-01T02:46:31Z\": 0.933,\n        \"2022-01-01T03:07:20Z\": 1.081,\n        \"2022-01-01T03:28:09Z\": 2.1,\n        \"2022-01-01T03:48:58Z\": 0.988,\n        \"2022-01-01T04:09:47Z\": 0.741,\n        \"2022-01-01T04:30:36Z\": 0.647,\n        \"2022-01-01T04:51:25Z\": 0.556,\n        \"2022-01-01T05:12:14Z\": 0.453,\n        \"2022-01-01T05:33:03Z\": 1.009,\n        \"2022-01-01T05:53:52Z\": 1.72,\n        \"2022-01-01T06:14:41Z\": 1.002,\n        \"2022-01-01T06:56:19Z\": 0.857,\n        \"2022-01-01T07:17:08Z\": 0.864,\n        \"2022-01-01T07:37:57Z\": 0.606,\n        \"2022-01-01T07:58:46Z\": 0.899,\n        \"2022-01-01T08:40:24Z\": 0.62,\n        \"2022-01-01T10:03:40Z\": 0.721,\n        \"2022-01-01T10:24:29Z\": 1.193,\n        \"2022-01-01T10:45:18Z\": 0.833,\n        \"2022-01-01T11:06:07Z\": 2.06,\n        \"2022-01-01T11:26:56Z\": 0.68,\n        \"2022-01-01T11:47:45Z\": 1.136,\n        \"2022-01-01T12:08:34Z\": 0.62,\n        \"2022-01-01T12:29:23Z\": 0.946,\n        \"2022-01-01T12:50:12Z\": 0.746,\n        \"2022-01-01T13:11:01Z\": 0.833,\n        \"2022-01-01T13:31:50Z\": 0.857,\n        \"2022-01-01T14:13:28Z\": 0.947,\n        \"2022-01-01T14:34:17Z\": 0.841,\n        \"2022-01-01T14:55:06Z\": 0.668,\n        \"2022-01-01T15:15:55Z\": 0.675,\n        \"2022-01-01T15:36:44Z\": 0.84,\n        \"2022-01-01T15:57:33Z\": 0.821,\n        \"2022-01-01T16:18:22Z\": 0.625,\n        \"2022-01-01T16:39:11Z\": 1.155,\n        \"2022-01-01T17:00:00Z\": 0.968\n    },\n    \"window_size\": \"17486.0S\",\n    \"min_num_datapoints_in_window\": 10,\n    \"mad_scaling_factor\": 4.4478,\n    \"min_band_width_factor\": 1\n}\n```\nThe expected output is\n```\n{\n    \"band_filter_dataframe\": {\n        \"values\": {\n            \"2022-01-01T00:00:00.000Z\":1.058,\n            \"2022-01-01T00:20:48.000Z\":0.699,\n            \"2022-01-01T00:41:37.000Z\":1.08,\n            \"2022-01-01T01:02:26.000Z\":1.054,\n            \"2022-01-01T01:23:15.000Z\":0.763,\n            \"2022-01-01T01:44:04.000Z\":1.034,\n            \"2022-01-01T02:04:53.000Z\":0.965,\n            \"2022-01-01T02:25:42.000Z\":0.601,\n            \"2022-01-01T02:46:31.000Z\":0.933,\n            \"2022-01-01T03:07:20.000Z\":1.081,\n            \"2022-01-01T03:28:09.000Z\":2.1,\n            \"2022-01-01T03:48:58.000Z\":0.988,\n            \"2022-01-01T04:09:47.000Z\":0.741,\n            \"2022-01-01T04:30:36.000Z\":0.647,\n            \"2022-01-01T04:51:25.000Z\":0.556,\n            \"2022-01-01T05:12:14.000Z\":0.453,\n            \"2022-01-01T05:33:03.000Z\":1.009,\n            \"2022-01-01T05:53:52.000Z\":1.72,\n            \"2022-01-01T06:14:41.000Z\":1.002,\n            \"2022-01-01T06:56:19.000Z\":0.857,\n            \"2022-01-01T07:17:08.000Z\":0.864,\n            \"2022-01-01T07:37:57.000Z\":0.606,\n            \"2022-01-01T07:58:46.000Z\":0.899,\n            \"2022-01-01T08:40:24.000Z\":0.62,\n            \"2022-01-01T10:03:40.000Z\":0.721,\n            \"2022-01-01T10:24:29.000Z\":1.193,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":2.06,\n            \"2022-01-01T11:26:56.000Z\":0.68,\n            \"2022-01-01T11:47:45.000Z\":1.136,\n            \"2022-01-01T12:08:34.000Z\":0.62,\n            \"2022-01-01T12:29:23.000Z\":0.946,\n            \"2022-01-01T12:50:12.000Z\":0.746,\n            \"2022-01-01T13:11:01.000Z\":0.833,\n            \"2022-01-01T13:31:50.000Z\":0.857,\n            \"2022-01-01T14:13:28.000Z\":0.947,\n            \"2022-01-01T14:34:17.000Z\":0.841,\n            \"2022-01-01T14:55:06.000Z\":0.668,\n            \"2022-01-01T15:15:55.000Z\":0.675,\n            \"2022-01-01T15:36:44.000Z\":0.84,\n            \"2022-01-01T15:57:33.000Z\":0.821,\n            \"2022-01-01T16:18:22.000Z\":0.625,\n            \"2022-01-01T16:39:11.000Z\":1.155,\n            \"2022-01-01T17:00:00.000Z\":0.968\n        },\n        \"band_center\":{\n            \"2022-01-01T00:41:37.000Z\":0.9995,\n            \"2022-01-01T01:02:26.000Z\":1.034,\n            \"2022-01-01T01:23:15.000Z\":1.011,\n            \"2022-01-01T01:44:04.000Z\":0.988,\n            \"2022-01-01T02:04:53.000Z\":0.9765,\n            \"2022-01-01T02:25:42.000Z\":0.965,\n            \"2022-01-01T02:46:31.000Z\":0.949,\n            \"2022-01-01T03:07:20.000Z\":0.949,\n            \"2022-01-01T03:28:09.000Z\":0.949,\n            \"2022-01-01T03:48:58.000Z\":0.9765,\n            \"2022-01-01T04:09:47.000Z\":0.965,\n            \"2022-01-01T04:30:36.000Z\":0.933,\n            \"2022-01-01T04:51:25.000Z\":0.933,\n            \"2022-01-01T05:12:14.000Z\":0.864,\n            \"2022-01-01T05:33:03.000Z\":0.864,\n            \"2022-01-01T05:53:52.000Z\":0.8605,\n            \"2022-01-01T06:14:41.000Z\":0.799,\n            \"2022-01-01T06:56:19.000Z\":0.8605,\n            \"2022-01-01T10:03:40.000Z\":0.866,\n            \"2022-01-01T10:24:29.000Z\":0.7895,\n            \"2022-01-01T10:45:18.000Z\":0.833,\n            \"2022-01-01T11:06:07.000Z\":0.833,\n            \"2022-01-01T11:26:56.000Z\":0.833,\n            \"2022-01-01T11:47:45.000Z\":0.845,\n            \"2022-01-01T12:08:34.000Z\":0.841,\n            \"2022-01-01T12:29:23.000Z\":0.841,\n            \"2022-01-01T12:50:12.000Z\":0.833,\n            \"2022-01-01T13:11:01.000Z\":0.84,\n            \"2022-01-01T13:31:50.000Z\":0.833,\n            \"2022-01-01T14:13:28.000Z\":0.833,\n            \"2022-01-01T14:34:17.000Z\":0.84,\n            \"2022-01-01T14:55:06.000Z\":0.8365,\n            \"2022-01-01T15:15:55.000Z\":0.84,\n            \"2022-01-01T15:36:44.000Z\":0.8405\n        },\n        \"rolling_deviation\":{\n            \"2022-01-01T00:41:37.000Z\":0.511497,\n            \"2022-01-01T01:02:26.000Z\":0.511497,\n            \"2022-01-01T01:23:15.000Z\":0.511497,\n            \"2022-01-01T01:44:04.000Z\":0.511497,\n            \"2022-01-01T02:04:53.000Z\":0.511497,\n            \"2022-01-01T02:25:42.000Z\":0.5159448,\n            \"2022-01-01T02:46:31.000Z\":0.7072002,\n            \"2022-01-01T03:07:20.000Z\":0.7072002,\n            \"2022-01-01T03:28:09.000Z\":0.8762166,\n            \"2022-01-01T03:48:58.000Z\":0.756126,\n            \"2022-01-01T04:09:47.000Z\":0.9963072,\n            \"2022-01-01T04:30:36.000Z\":0.8539776,\n            \"2022-01-01T04:51:25.000Z\":0.6582744,\n            \"2022-01-01T05:12:14.000Z\":0.9651726,\n            \"2022-01-01T05:33:03.000Z\":0.644931,\n            \"2022-01-01T05:53:52.000Z\":0.644931,\n            \"2022-01-01T06:14:41.000Z\":0.8272908,\n            \"2022-01-01T06:56:19.000Z\":0.8650971,\n            \"2022-01-01T10:03:40.000Z\":0.9607248,\n            \"2022-01-01T10:24:29.000Z\":0.7249914,\n            \"2022-01-01T10:45:18.000Z\":0.6805134,\n            \"2022-01-01T11:06:07.000Z\":0.511497,\n            \"2022-01-01T11:26:56.000Z\":0.511497,\n            \"2022-01-01T11:47:45.000Z\":0.511497,\n            \"2022-01-01T12:08:34.000Z\":0.511497,\n            \"2022-01-01T12:29:23.000Z\":0.511497,\n            \"2022-01-01T12:50:12.000Z\":0.511497,\n            \"2022-01-01T13:11:01.000Z\":0.511497,\n            \"2022-01-01T13:31:50.000Z\":0.511497,\n            \"2022-01-01T14:13:28.000Z\":0.511497,\n            \"2022-01-01T14:34:17.000Z\":0.511497,\n            \"2022-01-01T14:55:06.000Z\":0.511497,\n            \"2022-01-01T15:15:55.000Z\":0.511497,\n            \"2022-01-01T15:36:44.000Z\":0.5203926\n        },\n        \"filter_mask\":{\n            \"2022-01-01T00:00:00.000Z\":true,\n            \"2022-01-01T00:20:48.000Z\":true,\n            \"2022-01-01T00:41:37.000Z\":true,\n            \"2022-01-01T01:02:26.000Z\":true,\n            \"2022-01-01T01:23:15.000Z\":true,\n            \"2022-01-01T01:44:04.000Z\":true,\n            \"2022-01-01T02:04:53.000Z\":true,\n            \"2022-01-01T02:25:42.000Z\":true,\n            \"2022-01-01T02:46:31.000Z\":true,\n            \"2022-01-01T03:07:20.000Z\":true,\n            \"2022-01-01T03:28:09.000Z\":false,\n            \"2022-01-01T03:48:58.000Z\":true,\n            \"2022-01-01T04:09:47.000Z\":true,\n            \"2022-01-01T04:30:36.000Z\":true,\n            \"2022-01-01T04:51:25.000Z\":true,\n            \"2022-01-01T05:12:14.000Z\":true,\n            \"2022-01-01T05:33:03.000Z\":true,\n            \"2022-01-01T05:53:52.000Z\":false,\n            \"2022-01-01T06:14:41.000Z\":true,\n            \"2022-01-01T06:56:19.000Z\":true,\n            \"2022-01-01T07:17:08.000Z\":true,\n            \"2022-01-01T07:37:57.000Z\":true,\n            \"2022-01-01T07:58:46.000Z\":true,\n            \"2022-01-01T08:40:24.000Z\":true,\n            \"2022-01-01T10:03:40.000Z\":true,\n            \"2022-01-01T10:24:29.000Z\":true,\n            \"2022-01-01T10:45:18.000Z\":true,\n            \"2022-01-01T11:06:07.000Z\":false,\n            \"2022-01-01T11:26:56.000Z\":true,\n            \"2022-01-01T11:47:45.000Z\":true,\n            \"2022-01-01T12:08:34.000Z\":true,\n            \"2022-01-01T12:29:23.000Z\":true,\n            \"2022-01-01T12:50:12.000Z\":true,\n            \"2022-01-01T13:11:01.000Z\":true,\n            \"2022-01-01T13:31:50.000Z\":true,\n            \"2022-01-01T14:13:28.000Z\":true,\n            \"2022-01-01T14:34:17.000Z\":true,\n            \"2022-01-01T14:55:06.000Z\":true,\n            \"2022-01-01T15:15:55.000Z\":true,\n            \"2022-01-01T15:36:44.000Z\":true,\n            \"2022-01-01T15:57:33.000Z\":true,\n            \"2022-01-01T16:18:22.000Z\":true,\n            \"2022-01-01T16:39:11.000Z\":true,\n            \"2022-01-01T17:00:00.000Z\":true\n        }\n    },\n    \"filter_mask\": {\n        \"2022-01-01T00:00:00.000Z\":true,\n        \"2022-01-01T00:20:48.000Z\":true,\n        \"2022-01-01T00:41:37.000Z\":true,\n        \"2022-01-01T01:02:26.000Z\":true,\n        \"2022-01-01T01:23:15.000Z\":true,\n        \"2022-01-01T01:44:04.000Z\":true,\n        \"2022-01-01T02:04:53.000Z\":true,\n        \"2022-01-01T02:25:42.000Z\":true,\n        \"2022-01-01T02:46:31.000Z\":true,\n        \"2022-01-01T03:07:20.000Z\":true,\n        \"2022-01-01T03:28:09.000Z\":false,\n        \"2022-01-01T03:48:58.000Z\":true,\n        \"2022-01-01T04:09:47.000Z\":true,\n        \"2022-01-01T04:30:36.000Z\":true,\n        \"2022-01-01T04:51:25.000Z\":true,\n        \"2022-01-01T05:12:14.000Z\":true,\n        \"2022-01-01T05:33:03.000Z\":true,\n        \"2022-01-01T05:53:52.000Z\":false,\n        \"2022-01-01T06:14:41.000Z\":true,\n        \"2022-01-01T06:56:19.000Z\":true,\n        \"2022-01-01T07:17:08.000Z\":true,\n        \"2022-01-01T07:37:57.000Z\":true,\n        \"2022-01-01T07:58:46.000Z\":true,\n        \"2022-01-01T08:40:24.000Z\":true,\n        \"2022-01-01T10:03:40.000Z\":true,\n        \"2022-01-01T10:24:29.000Z\":true,\n        \"2022-01-01T10:45:18.000Z\":true,\n        \"2022-01-01T11:06:07.000Z\":false,\n        \"2022-01-01T11:26:56.000Z\":true,\n        \"2022-01-01T11:47:45.000Z\":true,\n        \"2022-01-01T12:08:34.000Z\":true,\n        \"2022-01-01T12:29:23.000Z\":true,\n        \"2022-01-01T12:50:12.000Z\":true,\n        \"2022-01-01T13:11:01.000Z\":true,\n        \"2022-01-01T13:31:50.000Z\":true,\n        \"2022-01-01T14:13:28.000Z\":true,\n        \"2022-01-01T14:34:17.000Z\":true,\n        \"2022-01-01T14:55:06.000Z\":true,\n        \"2022-01-01T15:15:55.000Z\":true,\n        \"2022-01-01T15:36:44.000Z\":true,\n        \"2022-01-01T15:57:33.000Z\":true,\n        \"2022-01-01T16:18:22.000Z\":true,\n        \"2022-01-01T16:39:11.000Z\":true,\n        \"2022-01-01T17:00:00.000Z\":true\n    }\n}\n```",
    "content": "from typing import Dict, Union\n\nimport numpy as np\nimport numpy.typing as npt\n\nimport pandas as pd\n\nfrom numba import njit\n\n\ndef median_absolute_deviation(data: npt.ArrayLike) -> np.float64:\n    \"\"\"Calculation of the median absolute deviation (MAD) using numpy functions.\n\n    data (Array like): Values for which the MAD is supposed to be calculated. Must be an array or\n        an object that can be converted to an array.\n\n    Returns: Calculated MAD.\n    \"\"\"\n    return np.median(np.abs(data - np.median(data)))\n\n\n@njit\ndef median_absolute_deviation_numba(data: npt.ArrayLike) -> np.float64:\n    \"\"\"Calculation of the median absolute deviation (MAD) using numba just-in-time compilation.\n\n    data (Array like): Values for which the MAD is supposed to be calculated. Must be an array or\n        an object that can be converted to an array.\n\n    Returns: Calculated MAD.\n    \"\"\"\n    return np.median(np.abs(data - np.median(data)))\n\n\ndef calculate_rolling_median_absolute_deviation(\n    series: pd.Series,\n    mad_scaling_factor: float,\n    window_size: str,\n    min_num_datapoints_in_window: int,\n) -> pd.Series:\n    \"\"\"Calculate the median absolute deviation (MAD) for a rolling window.\n\n    The used MAD function is selected based on the size of the timeseries. The numba version is\n    used for larger series to reduce the runtime. The limit of 10,000 datapoints in a series was\n    chosen as result of runtime tests on different machines.\n\n    series (Pandas Series): Series for which the MAD calculation is supposed to be performed.\n    mad_scaling_factor (Float): The calculated MADs are multiplied by this factor to adjust the\n        width of the bandfilter at each point. The value 1.4836 makes it equivalent to the standard\n        deviation.\n    window_size (String): Time period of each window. Must be a pandas frequency string.\n    min_num_datapoints_in_window (Integer): Minimum number of observations required in a window to\n        calculate a value.\n\n    Returns: Series with the calculated MAD for each timestamp.\n    \"\"\"\n    if len(series) < 10000:\n        scaled_rolling_median_absolute_deviation = mad_scaling_factor * (\n            series.rolling(\n                window=window_size,\n                min_periods=min_num_datapoints_in_window,\n                center=True,\n            ).apply(median_absolute_deviation, raw=True)\n        )\n    else:\n        scaled_rolling_median_absolute_deviation = mad_scaling_factor * (\n            series.rolling(\n                window=window_size,\n                min_periods=min_num_datapoints_in_window,\n                center=True,\n            ).apply(median_absolute_deviation_numba, raw=True, engine=\"numba\")\n        )\n\n    return scaled_rolling_median_absolute_deviation\n\n\ndef calculate_band_filter_statistics(\n    series: pd.Series,\n    window_size: str,\n    min_num_datapoints_in_window: int,\n    mad_scaling_factor: float,\n    min_band_width_factor: float,\n) -> Dict[str, Union[pd.DataFrame, pd.Series]]:\n    \"\"\"Calculate the moving window band filter statistics.\n\n    Function to perform the calculation of band filter statistics using moving windows.\n    The statistics include the median, MAD and filter mask for each window with a\n    minimum size.\n\n    series (Pandas Series): Series for which the statistics are supposed to be calculated.\n        The indices must be datetimes.\n    window_size (String): Time period of each window. Must be a pandas frequency string.\n    min_num_datapoints_in_window (Integer): Minimum number of observations required in a window\n        to perform a calculation.\n    mad_scaling_factor (Float): The calculated MADs are multiplied by this factor to adjust the\n        width of the bandfilter at each point. The value 1.4836 makes it equivalent to the\n        standard deviation.\n    min_band_width_factor (Float): Factor to calculate the minimum band width. The factor is\n        multiplied with the median of the calculated MADs.\n\n    Returns: Series with the calculated moving window band filter statistics.\n    \"\"\"\n    if not isinstance(series.index, pd.DatetimeIndex):\n        raise TypeError(\"This component is exclusively for series with Datetime index!\")\n\n    # Convert series to data frame.\n    band_filter_dataframe = series.to_frame(name=\"values\")\n\n    # Calculate the rolling median.\n    band_filter_dataframe[\"band_center\"] = series.rolling(\n        window=window_size, min_periods=min_num_datapoints_in_window, center=True\n    ).median()\n\n    # Calculate the rolling median absolute deviation.\n    band_filter_dataframe[\n        \"rolling_deviation\"\n    ] = calculate_rolling_median_absolute_deviation(\n        series=series,\n        mad_scaling_factor=mad_scaling_factor,\n        window_size=window_size,\n        min_num_datapoints_in_window=min_num_datapoints_in_window,\n    )\n\n    # Set the minimum width of the band.\n    min_width = (\n        np.median(band_filter_dataframe[\"rolling_deviation\"].dropna())\n        * min_band_width_factor\n    )\n    band_filter_dataframe.loc[\n        band_filter_dataframe[\"rolling_deviation\"] < min_width, \"rolling_deviation\"\n    ] = min_width\n\n    # Check which datapoints are invalid.\n    band_filter_dataframe[\"filter_mask\"] = (\n        np.abs(series - band_filter_dataframe[\"band_center\"])\n        <= band_filter_dataframe[\"rolling_deviation\"]\n    )\n\n    # Set filter_mask to True for all datapoints for which no calculation could be performed\n    # to keep them after filtering.\n    band_filter_dataframe.loc[\n        band_filter_dataframe[\"band_center\"].isna(), \"filter_mask\"\n    ] = True\n\n    return [band_filter_dataframe, band_filter_dataframe[\"filter_mask\"]]\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series\": \"SERIES\",\n        \"window_size\": \"STRING\",\n        \"min_num_datapoints_in_window\": \"INT\",\n        \"mad_scaling_factor\": \"FLOAT\",\n        \"min_band_width_factor\": \"FLOAT\",\n    },\n    \"outputs\": {\n        \"band_filter_dataframe\": \"DATAFRAME\",\n        \"filter_mask\": \"SERIES\",\n    },\n    \"name\": \"Moving Window MAD Band Filter\",\n    \"category\": \"Filters\",\n    \"description\": \"Detect outliers by moving window median absolute deviation (MAD) bandpass filter\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"bf698fbb-1e2e-47ca-a4f8-72b06b011985\",\n    \"revision_group_id\": \"4cf6f5e7-e4de-4714-8929-5206c595a148\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-11-24T17:03:43.549364+00:00\",\n}\n\n\ndef main(*, series, window_size, min_num_datapoints_in_window, mad_scaling_factor, min_band_width_factor):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    band_filter_dataframe, filter_mask = calculate_band_filter_statistics(\n        series=series,\n        window_size=window_size,\n        min_num_datapoints_in_window=min_num_datapoints_in_window,\n        mad_scaling_factor=mad_scaling_factor,\n        min_band_width_factor=min_band_width_factor,\n    )\n\n    return {\n        \"band_filter_dataframe\": band_filter_dataframe,\n        \"filter_mask\": filter_mask,\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "228b2073-8946-47d7-9bc5-e3f606413291",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "2890da86-d4dd-4ece-a917-8574da4692ef",
          "name": "window_size",
          "data_type": "STRING"
        },
        {
          "id": "77ec0e96-81ee-4a4d-a2a6-99ad0ab71bdf",
          "name": "min_num_datapoints_in_window",
          "data_type": "INT"
        },
        {
          "id": "3fbf12d9-e297-4e19-94a2-2b7ed3cba32f",
          "name": "mad_scaling_factor",
          "data_type": "FLOAT"
        },
        {
          "id": "258ed00c-589a-4191-bf9b-9ba2d91986db",
          "name": "min_band_width_factor",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "b783e836-dc11-4f7a-a642-07bd5d5a195c",
          "name": "band_filter_dataframe",
          "data_type": "DATAFRAME"
        },
        {
          "id": "3160f65d-48ea-4942-b647-75034172c8bb",
          "name": "filter_mask",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2022-01-01T00:00:00Z\": 1.058,\n    \"2022-01-01T00:20:48Z\": 0.699,\n    \"2022-01-01T00:41:37Z\": 1.08,\n    \"2022-01-01T01:02:26Z\": 1.054,\n    \"2022-01-01T01:23:15Z\": 0.763,\n    \"2022-01-01T01:44:04Z\": 1.034,\n    \"2022-01-01T02:04:53Z\": 0.965,\n    \"2022-01-01T02:25:42Z\": 0.601,\n    \"2022-01-01T02:46:31Z\": 0.933,\n    \"2022-01-01T03:07:20Z\": 1.081,\n    \"2022-01-01T03:28:09Z\": 2.1,\n    \"2022-01-01T03:48:58Z\": 0.988,\n    \"2022-01-01T04:09:47Z\": 0.741,\n    \"2022-01-01T04:30:36Z\": 0.647,\n    \"2022-01-01T04:51:25Z\": 0.556,\n    \"2022-01-01T05:12:14Z\": 0.453,\n    \"2022-01-01T05:33:03Z\": 1.009,\n    \"2022-01-01T05:53:52Z\": 1.72,\n    \"2022-01-01T06:14:41Z\": 1.002,\n    \"2022-01-01T06:56:19Z\": 0.857,\n    \"2022-01-01T07:17:08Z\": 0.864,\n    \"2022-01-01T07:37:57Z\": 0.606,\n    \"2022-01-01T07:58:46Z\": 0.899,\n    \"2022-01-01T08:40:24Z\": 0.62,\n    \"2022-01-01T10:03:40Z\": 0.721,\n    \"2022-01-01T10:24:29Z\": 1.193,\n    \"2022-01-01T10:45:18Z\": 0.833,\n    \"2022-01-01T11:06:07Z\": 2.06,\n    \"2022-01-01T11:26:56Z\": 0.68,\n    \"2022-01-01T11:47:45Z\": 1.136,\n    \"2022-01-01T12:08:34Z\": 0.62,\n    \"2022-01-01T12:29:23Z\": 0.946,\n    \"2022-01-01T12:50:12Z\": 0.746,\n    \"2022-01-01T13:11:01Z\": 0.833,\n    \"2022-01-01T13:31:50Z\": 0.857,\n    \"2022-01-01T14:13:28Z\": 0.947,\n    \"2022-01-01T14:34:17Z\": 0.841,\n    \"2022-01-01T14:55:06Z\": 0.668,\n    \"2022-01-01T15:15:55Z\": 0.675,\n    \"2022-01-01T15:36:44Z\": 0.84,\n    \"2022-01-01T15:57:33Z\": 0.821,\n    \"2022-01-01T16:18:22Z\": 0.625,\n    \"2022-01-01T16:39:11Z\": 1.155,\n    \"2022-01-01T17:00:00Z\": 0.968\n}"
          }
        },
        {
          "workflow_input_name": "window_size",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "17486.0S"
          }
        },
        {
          "workflow_input_name": "min_num_datapoints_in_window",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "10"
          }
        },
        {
          "workflow_input_name": "mad_scaling_factor",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "4.4478"
          }
        },
        {
          "workflow_input_name": "min_band_width_factor",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "1"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "6cdc2d34-69e0-408a-bae9-b156391d9b9d",
    "revision_group_id": "5f9f4b0a-70aa-44d8-9934-63208eb7041e",
    "name": "CPU bound",
    "description": "Measure simulated cpu bound execution time",
    "category": "Test",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-12-14T13:05:39.777753+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Measure cpu bound execution\n\nA component helping measuring actual execution time for a simulated\ncpu bound task, i.e. separately from IO. This means it runs synchronous cpu\nbound code and measures the time that takes.\n\nYou may run this component multiple times in parallel to measure / ensure\nperformance in your cluster and obtain information in distribution of jobs\nover runtime instances and time.\n\n### Inputs:\n* **bind**: Allowed values: \"single\", \"multi\". Whether a single cpu heavy task\n    is run (GIL-restriced) versus a task employing all available CPUs\n    (GIL-releasing numpy operation).\n* **rounds**: An integer influencing how long that task takes.\n    For bind==\"single\" 10000000 is a good start value.\n    For bind==\"multi\" 10000 is a good start.\n    Be careful since high values especially for multi can lead very fast to a\n    lot of memory consumption and CPU usage.\n\n",
    "content": "\"\"\"Measure cpu bound execution\n\n# Measure cpu bound execution\n\nA component helping measuring actual execution time for a simulated\ncpu bound task, i.e. separately from IO. This means it runs synchronous cpu\nbound code and measures the time that takes.\n\nYou may run this component multiple times in parallel to measure / ensure\nperformance in your cluster and obtain information in distribution of jobs\nover runtime instances and time.\n\n### Inputs:\n* **bind**: Allowed values: \"single\", \"multi\". Whether a single cpu heavy task\n    is run (GIL-restriced) versus a task employing all available CPUs\n    (GIL-releasing numpy operation).\n* **rounds**: An integer influencing how long that task takes.\n    For bind==\"single\" 10000000 is a good start value.\n    For bind==\"multi\" 10000 is a good start.\n    Be careful since high values especially for multi can lead very fast to a\n    lot of memory consumption and CPU usage.\n\n\n\"\"\"\n\nimport datetime\nimport random\n\nimport numpy as np\n\n\ndef single_cpu_bound(n=10000000):\n    start = datetime.datetime.now(datetime.timezone.utc)\n    for _ in range(n):\n        random.random()\n    end = datetime.datetime.now(datetime.timezone.utc)\n    duration = end - start\n    return start, end, duration\n\n\ndef multi_cpu_bound(n=10000):\n    start = datetime.datetime.now(datetime.timezone.utc)\n    A = np.random.random_sample((n, n))\n    B = np.random.random_sample((n, n))\n    res = np.dot(A, B)\n    end = datetime.datetime.now(datetime.timezone.utc)\n    duration = end - start\n    return start, end, duration\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"rounds\": \"INT\",\n        \"bind\": \"STRING\",\n    },\n    \"outputs\": {\n        \"duration\": \"FLOAT\",\n        \"start\": \"STRING\",\n        \"end\": \"STRING\",\n    },\n    \"name\": \"CPU bound\",\n    \"category\": \"Test\",\n    \"description\": \"Measure simulated cpu bound execution time\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"6cdc2d34-69e0-408a-bae9-b156391d9b9d\",\n    \"revision_group_id\": \"5f9f4b0a-70aa-44d8-9934-63208eb7041e\",\n    \"state\": \"RELEASED\",\n}\n\n\ndef main(*, rounds, bind):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if bind.lower() == \"single\":\n        start, end, duration = single_cpu_bound(rounds)\n        return {\n            \"duration\": duration.total_seconds(),\n            \"start\": start.isoformat(),\n            \"end\": end.isoformat(),\n        }\n    elif bind.lower() == \"multi\":\n        start, end, duration = multi_cpu_bound(rounds)\n        return {\n            \"duration\": duration.total_seconds(),\n            \"start\": start.isoformat(),\n            \"end\": end.isoformat(),\n        }\n    else:\n        raise ValueError(\n            'Unknown value of \"bind\" mode: '\n            + bind\n            + '. Allowed values are \"single\" and \"multi\".'\n        )\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5bc458b9-47a7-7314-adfd-7028fa921ea6",
          "name": "rounds",
          "data_type": "INT"
        },
        {
          "id": "5df6cc13-6bdd-8966-e307-f7c55db57327",
          "name": "bind",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "9a58abb7-3c5e-5348-2fb2-ffd0ba83be5b",
          "name": "duration",
          "data_type": "FLOAT"
        },
        {
          "id": "51b93482-0912-1183-affa-4233de1e2425",
          "name": "start",
          "data_type": "STRING"
        },
        {
          "id": "a9d363df-9177-08cc-362b-d27df3c2c986",
          "name": "end",
          "data_type": "STRING"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "5fa2c117-8777-46ae-9fd9-b4683bc073cf",
    "revision_group_id": "fd964492-f3a9-4a95-8753-1a191571d63d",
    "name": "Timeseries Summary",
    "description": "Summarize some timeseries information",
    "category": "Test",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-12-14T13:05:39.779261+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeseries Summary\n\nCompute some summary information of a timeseries (both its values and index) and output\nthat as a dictionary. Additionally provide some output how fast summary computation was.",
    "content": "\"\"\"Timeseries Summary\n\n# Timeseries Summary\n\nCompute some summary information of a timeseries (both its values and index) and output\nthat as a dictionary. Additionally provide some output how fast summary computation was.\n\"\"\"\n\nimport datetime\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series\": \"SERIES\",\n    },\n    \"outputs\": {\n        \"summary\": \"ANY\",\n        \"start\": \"STRING\",\n        \"end\": \"STRING\",\n        \"duration\": \"FLOAT\",\n    },\n    \"name\": \"Timeseries Summary\",\n    \"category\": \"Test\",\n    \"description\": \"Summarize some timeseries information\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"5fa2c117-8777-46ae-9fd9-b4683bc073cf\",\n    \"revision_group_id\": \"fd964492-f3a9-4a95-8753-1a191571d63d\",\n    \"state\": \"RELEASED\",\n}\n\n\ndef main(*, series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    start = datetime.datetime.now(datetime.timezone.utc)\n    summary_dict = {\n        \"length\": len(series),\n        \"describe\": str(\n            series.describe(\n                percentiles=(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95)\n            ).to_dict()\n        ),\n        \"num_duplicates\": int(series.duplicated().sum()),\n        \"num_index_duplicates\": int(pd.Series(series.index).duplicated().sum()),\n        \"index\": str(series.index),\n        \"series\": str(series),\n        \"dtype\": str(series.dtype),\n        \"first_value\": None if len(series) == 0 else str(series.iloc[0]),\n        \"first_index\": None if len(series) == 0 else str(series.index[0]),\n        \"last_value\": None if len(series) == 0 else str(series.iloc[-1]),\n        \"last_index\": None if len(series) == 0 else str(series.index[-1]),\n        \"index_distances_describe\": str(\n            (pd.Series(series.index) - pd.Series(series.index).shift())\n            .dropna()\n            .describe(percentiles=(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95))\n            .to_dict()\n        ),\n    }\n\n    end = datetime.datetime.now(datetime.timezone.utc)\n    duration = (end - start).total_seconds()\n\n    return {\n        \"summary\": summary_dict,\n        \"start\": start.isoformat(),\n        \"end\": end.isoformat(),\n        \"duration\": duration,\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "31a7c0a2-8d35-6c57-d742-f0a8092d0c87",
          "name": "series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "ca69e0fa-840f-03ca-2bb1-430baf415074",
          "name": "summary",
          "data_type": "ANY"
        },
        {
          "id": "51b93482-0912-1183-affa-4233de1e2425",
          "name": "start",
          "data_type": "STRING"
        },
        {
          "id": "a9d363df-9177-08cc-362b-d27df3c2c986",
          "name": "end",
          "data_type": "STRING"
        },
        {
          "id": "9a58abb7-3c5e-5348-2fb2-ffd0ba83be5b",
          "name": "duration",
          "data_type": "FLOAT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e4541a9d-7b3e-3dd6-869d-eff30ad997c3",
    "revision_group_id": "e4541a9d-7b3e-3dd6-869d-eff30ad997c3",
    "name": "Timeshifted Value Table",
    "description": "Take a Series and get a DataFrame of regular time shifted values",
    "category": "Index Operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.442649+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Timeshifted Value Table\n\n## Description\nThe component takes a Series and returns a DataFrame of regular time shifted values.\n\n## Inputs\n* **timeseries** (Pandas Series): Should be a Pandas Series with a DateTime Index.\n* **freq** (String): Frequency String. For example \"20d\", \"m\" or \"12min\".\n* **periods** (Integer): Number of times the series is shifted by the **freq**. Can be negative for negative shifts.\n\n## Outputs\n* **timeshifted_values** (Pandas DataFrame): The resulting DataFrame containing one column for every shift. NaN Values may occur.\n\n## Details\nShifts the given series **periods** times by the given frequency and gathers all such resulting shifted series into one DataFrame.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\nimport pandas as pd\n\n\ndef past_values(series: pd.Series, periods, frequency) -> pd.DataFrame():\n    df = pd.DataFrame()\n\n    sign = -1 if periods < 0 else 1\n\n    for n in range(sign * periods):\n        shift_no = sign * (n + 1)\n        df[\"shifted_\" + str(shift_no) + \"_times_\" + frequency] = series.shift(\n            periods=shift_no, freq=frequency\n        )\n    return df\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"timeseries\": DataType.Series, \"freq\": DataType.String, \"periods\": DataType.Integer},\n    outputs={\"timeshifted_values\": DataType.DataFrame},\n    name=\"Timeshifted Value Table\",\n    description=\"Take a Series and get a DataFrame of regular time shifted values\",\n    category=\"Index Operations\",\n    version_tag=\"1.0.0\",\n    id=\"e4541a9d-7b3e-3dd6-869d-eff30ad997c3\",\n    revision_group_id=\"e4541a9d-7b3e-3dd6-869d-eff30ad997c3\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.442649+00:00\"\n)\ndef main(*, timeseries, freq, periods):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"timeshifted_values\": past_values(timeseries, periods, freq)}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "edd62f08-251a-e71a-25df-b34a39ef0548",
          "name": "timeseries",
          "data_type": "SERIES"
        },
        {
          "id": "69bc606b-5b2d-a4d0-9c69-156f7de325de",
          "name": "freq",
          "data_type": "STRING"
        },
        {
          "id": "ae7f2670-19aa-4d05-3176-bd2eb67ae0b5",
          "name": "periods",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "d7a1c92c-6fe7-0aa7-34a9-4fd8aad9cec7",
          "name": "timeshifted_values",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "ac86c25c-a510-e46e-ff3a-f9bbb4c26a24",
    "revision_group_id": "ac86c25c-a510-e46e-ff3a-f9bbb4c26a24",
    "name": "Restrict to common Index",
    "description": "Restrict two Pandas objects to their index intersection",
    "category": "Index Operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.537323+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Restrict to common Index\n\n## Description\nRestrict two Pandas objects to their index intersection.\n\n## Inputs\n* **data_1** (Pandas Series or Pandas DataFrame): First data set. \n* **data_1** (Pandas Series or Pandas DataFrame): Second data set. \n\n## Outputs\n* **data_1_restricted** (Pandas Series or Pandas DataFrame): The Pandas object restricted to the index intersection.\n* **data_2_restricted** (Pandas Series or Pandas DataFrame): The Pandas object restricted to the index intersection.\n\n## Details\nRestricts both pandas objects to the intersection of their indices.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data_1\": DataType.Any, \"data_2\": DataType.Any},\n    outputs={\"data_1_restricted\": DataType.Any, \"data_2_restricted\": DataType.Any},\n    name=\"Restrict to common Index\",\n    description=\"Restrict two Pandas objects to their index intersection\",\n    category=\"Index Operations\",\n    version_tag=\"1.0.0\",\n    id=\"ac86c25c-a510-e46e-ff3a-f9bbb4c26a24\",\n    revision_group_id=\"ac86c25c-a510-e46e-ff3a-f9bbb4c26a24\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.537323+00:00\"\n)\ndef main(*, data_1, data_2):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    common_index = data_1.index.intersection(data_2.index)\n\n    return {\n        \"data_1_restricted\": data_1.loc[common_index],\n        \"data_2_restricted\": data_2.loc[common_index],\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5d13b456-1b44-2130-ea88-eafe4fdc1488",
          "name": "data_1",
          "data_type": "ANY"
        },
        {
          "id": "e535f823-e250-af85-7f12-d41ecf5f4a78",
          "name": "data_2",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "b8e46d8a-0bd6-b59b-246a-403d28329099",
          "name": "data_1_restricted",
          "data_type": "ANY"
        },
        {
          "id": "9c547baa-6cb0-6497-71d6-769794b62043",
          "name": "data_2_restricted",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "7f315341-d095-1f4b-b72c-e85dc3d7c508",
    "revision_group_id": "7f315341-d095-1f4b-b72c-e85dc3d7c508",
    "name": "Sort by Index",
    "description": "Sort values by Index",
    "category": "Index Operations",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.487436+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Sort Index\n\n## Description\nThe component sorts values by index. \n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Data to be sorted. \n\n## Outputs\n* **data** (Pandas Series or Pandas DataFrame): The Pandas object sorted by index.\n\n## Details\nJust calls Pandas' sort_index method with no parameters on the provided input data and returns the result.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any},\n    outputs={\"data\": DataType.Any},\n    name=\"Sort by Index\",\n    description=\"Sort values by Index\",\n    category=\"Index Operations\",\n    version_tag=\"1.0.0\",\n    id=\"7f315341-d095-1f4b-b72c-e85dc3d7c508\",\n    revision_group_id=\"7f315341-d095-1f4b-b72c-e85dc3d7c508\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.487436+00:00\"\n)\ndef main(*, data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\"data\": data.sort_index()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "362ab9b9-13d0-d932-3022-27586df18c4c",
          "name": "data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "d28c013f-ecec-7336-5558-ec97efe59d4b",
          "name": "data",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "cdec1d55-5bb6-8e8d-4571-fbc0ebf5a354",
    "revision_group_id": "cdec1d55-5bb6-8e8d-4571-fbc0ebf5a354",
    "name": "Isolation Forest",
    "description": "A Isolation Forest Model",
    "category": "Anomaly Detection",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.267922+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Isolation Forest\n\n## Description\nA simple Isolation Forest Model.\n\n## Inputs\n* **n_estimators** (int): The number of base estimators in the ensemble.\n* **train_data** (Pandas DataFrame): The training data set.\n* **test_data** (Pandas DataFrame): A test data set on which the trained model is applied immediately. \n\n## Outputs\n* **trained_model** (sklearn Isolation Forest instance): The trained model. This object can be stored and loaded in another workflow.\n* **decision_function_values** (Pandas Series): The decision function values of the model applied to the test data.\n\n## Details\nIsolation Forest from sklearn.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"n_estimators\": 100,\n\t\"train_data\": {\n    \"0\": {\n        \"0\": 1.4926660699,\n        \"1\": 1.4486349492,\n        \"2\": 1.5450470794,\n        \"3\": 1.776656204,\n        \"4\": 1.2505807659,\n        \"5\": 1.6015711927,\n        \"6\": 1.6289885968,\n        \"7\": 1.3396458715,\n        \"8\": 1.584027853,\n        \"9\": 1.5086498128,\n        \"10\": 1.3082738461,\n        \"11\": 1.3551707245,\n        \"12\": 1.3047677269,\n        \"13\": 1.1957268597,\n        \"14\": 1.589771313,\n        \"15\": 1.4559757939,\n        \"16\": 1.5915332444,\n        \"17\": 1.0671794303,\n        \"18\": 1.432818479,\n        \"19\": 1.4300797641,\n        \"20\": 1.3715935639,\n        \"21\": 1.3572668951,\n        \"22\": 1.0734477529,\n        \"23\": 1.3622193297,\n        \"24\": 1.4287684992,\n        \"25\": 1.2215251242,\n        \"26\": 1.3652527468,\n        \"27\": 1.1973235753,\n        \"28\": 1.7253995801,\n        \"29\": 1.2580476039,\n        \"30\": 1.0545478427,\n        \"31\": 1.0117721362,\n        \"32\": 1.1578791663,\n        \"33\": 1.4706967921,\n        \"34\": 1.5886736947,\n        \"35\": 1.1851616194,\n        \"36\": 1.2706084302,\n        \"37\": 1.22543923,\n        \"38\": 1.7309807976,\n        \"39\": 1.5866646984,\n        \"40\": 1.5077532977,\n        \"41\": 1.4359288381,\n        \"42\": 1.7056115478,\n        \"43\": 1.0703683588,\n        \"44\": 1.2913088978,\n        \"45\": 1.6538359777,\n        \"46\": 1.4408159436,\n        \"47\": 1.1711791235,\n        \"48\": 1.5256179052,\n        \"49\": 1.3187467931,\n        \"50\": 1.1115703,\n        \"51\": 1.4046511263,\n        \"52\": 1.4403180152,\n        \"53\": 1.5672974594,\n        \"54\": 1.1779609522,\n        \"55\": 1.5797056641,\n        \"56\": 1.4524569179,\n        \"57\": 1.4070450575,\n        \"58\": 1.5290660426,\n        \"59\": 1.3120717628,\n        \"60\": 1.3453596376,\n        \"61\": 1.2316969297,\n        \"62\": 1.6378821897,\n        \"63\": 1.2760642118,\n        \"64\": 1.4956937624,\n        \"65\": 1.4929910048,\n        \"66\": 1.3738941343,\n        \"67\": 1.5852288325,\n        \"68\": 0.9717649741,\n        \"69\": 1.6427129664,\n        \"70\": 1.2175972616,\n        \"71\": 1.2979690188,\n        \"72\": 1.7029654725,\n        \"73\": 1.378315634,\n        \"74\": 1.4904271716,\n        \"75\": 1.5066028189,\n        \"76\": 1.3945879926,\n        \"77\": 1.4913153696,\n        \"78\": 1.4618294119,\n        \"79\": 1.1675132196,\n        \"80\": 1.2606787057,\n        \"81\": 1.6244382896,\n        \"82\": 1.6646727012,\n        \"83\": 1.4031978084,\n        \"84\": 1.5277458348,\n        \"85\": 1.3607462888,\n        \"86\": 1.129613468,\n        \"87\": 1.2690961303,\n        \"88\": 1.3087356812,\n        \"89\": 1.3779695334,\n        \"90\": 1.6356347978,\n        \"91\": 1.45676668,\n        \"92\": 1.4339967622,\n        \"93\": 1.5791665539,\n        \"94\": 1.4127552469,\n        \"95\": 1.5778551374,\n        \"96\": 1.4546758127,\n        \"97\": 1.1843789384,\n        \"98\": 1.4510047706,\n        \"99\": 1.2788758327,\n        \"100\": 0.3750956282,\n        \"101\": -0.348332961,\n        \"102\": 1.1273700108,\n        \"103\": -0.5828114497,\n        \"104\": -0.6019201001,\n        \"105\": 0.1459754345,\n        \"106\": 0.4926503544,\n        \"107\": 0.2154680857,\n        \"108\": -0.2551963406,\n        \"109\": -0.0021394574,\n        \"110\": 0.803016169,\n        \"111\": -0.3932162493,\n        \"112\": 0.0443088352,\n        \"113\": 0.7563416189,\n        \"114\": 0.2806832923,\n        \"115\": -0.0820868678,\n        \"116\": 0.6539103775,\n        \"117\": 0.6807191115,\n        \"118\": 0.6344428224,\n        \"119\": 0.6345290121,\n        \"120\": 0.2538398248,\n        \"121\": 0.0901253052,\n        \"122\": 0.5408800137,\n        \"123\": -0.3640374072,\n        \"124\": 0.2546865562,\n        \"125\": -0.7150082477,\n        \"126\": -0.2621021415,\n        \"127\": -0.3699787618,\n        \"128\": 0.0209162847,\n        \"129\": -0.2729625202,\n        \"130\": 0.416004053,\n        \"131\": -0.2833210194,\n        \"132\": 0.0460272259,\n        \"133\": 0.4255764332,\n        \"134\": 0.0752196307,\n        \"135\": -0.1529583948,\n        \"136\": 0.4238010375,\n        \"137\": 0.0456235429,\n        \"138\": 0.0527215759,\n        \"139\": 0.6908365451,\n        \"140\": -0.2992636577,\n        \"141\": 0.0731327305,\n        \"142\": -0.4644478508,\n        \"143\": 0.1617790151,\n        \"144\": 0.3986000441,\n        \"145\": -0.4138682181,\n        \"146\": 0.0309860526,\n        \"147\": 0.1825449262,\n        \"148\": 0.5308633933,\n        \"149\": 0.590488114\n    },\n    \"1\": {\n        \"0\": 2.0918517167,\n        \"1\": 1.6351422204,\n        \"2\": 1.8909793726,\n        \"3\": 2.4315905044,\n        \"4\": 1.2556615935,\n        \"5\": 2.5702117298,\n        \"6\": 1.828156926,\n        \"7\": 1.6570902517,\n        \"8\": 1.7755659202,\n        \"9\": 2.0584771141,\n        \"10\": 1.1923644451,\n        \"11\": 1.3875187648,\n        \"12\": 1.336018039,\n        \"13\": 1.1558574253,\n        \"14\": 1.9366961319,\n        \"15\": 2.209024992,\n        \"16\": 1.1838732985,\n        \"17\": 0.6707142277,\n        \"18\": 1.7757872413,\n        \"19\": 1.2597629314,\n        \"20\": 1.2592926437,\n        \"21\": 1.591255678,\n        \"22\": 1.1741298861,\n        \"23\": 2.0834988691,\n        \"24\": 1.7448564658,\n        \"25\": 1.0509356347,\n        \"26\": 1.5073314682,\n        \"27\": 1.4379901604,\n        \"28\": 2.2565441397,\n        \"29\": 1.404213351,\n        \"30\": 1.3046580437,\n        \"31\": 0.9435742958,\n        \"32\": 0.7083373529,\n        \"33\": 1.4271506958,\n        \"34\": 1.9626931721,\n        \"35\": 1.2600086319,\n        \"36\": 1.6062375805,\n        \"37\": 1.2602345519,\n        \"38\": 2.2832867901,\n        \"39\": 1.719515212,\n        \"40\": 2.1791558553,\n        \"41\": 1.7018714812,\n        \"42\": 2.0943046384,\n        \"43\": 0.8383702568,\n        \"44\": 1.404694486,\n        \"45\": 2.3567742096,\n        \"46\": 1.6611731096,\n        \"47\": 1.3664794499,\n        \"48\": 1.6608608073,\n        \"49\": 1.8016440495,\n        \"50\": 1.1962660333,\n        \"51\": 2.0264224151,\n        \"52\": 2.0660797791,\n        \"53\": 1.6572699065,\n        \"54\": 1.0201013999,\n        \"55\": 1.5964380435,\n        \"56\": 1.6433887725,\n        \"57\": 1.7935542862,\n        \"58\": 2.5341105696,\n        \"59\": 1.5681698292,\n        \"60\": 1.4832137965,\n        \"61\": 0.6673825046,\n        \"62\": 2.3298901288,\n        \"63\": 1.3736537956,\n        \"64\": 1.5270363292,\n        \"65\": 2.4747877069,\n        \"66\": 1.0965899798,\n        \"67\": 1.8645734583,\n        \"68\": 0.4106281559,\n        \"69\": 2.3566780324,\n        \"70\": 1.2541726056,\n        \"71\": 1.4265057174,\n        \"72\": 2.4797764864,\n        \"73\": 1.8623157346,\n        \"74\": 1.5631520074,\n        \"75\": 1.6730918717,\n        \"76\": 1.3830289178,\n        \"77\": 2.2563192073,\n        \"78\": 1.4696583766,\n        \"79\": 0.7304943724,\n        \"80\": 1.3529801574,\n        \"81\": 1.5027970746,\n        \"82\": 2.3460010761,\n        \"83\": 1.6457706798,\n        \"84\": 2.0197152222,\n        \"85\": 1.4053767672,\n        \"86\": 1.0640404861,\n        \"87\": 1.3456315961,\n        \"88\": 1.8790157397,\n        \"89\": 1.5337356542,\n        \"90\": 2.0890407511,\n        \"91\": 1.6456890051,\n        \"92\": 1.750703967,\n        \"93\": 1.4062853135,\n        \"94\": 1.5986223975,\n        \"95\": 2.1774012998,\n        \"96\": 1.7434766038,\n        \"97\": 1.2101237951,\n        \"98\": 1.7539782233,\n        \"99\": 0.8933229057,\n        \"100\": 0.2474688349,\n        \"101\": 0.1110004675,\n        \"102\": 0.0282859274,\n        \"103\": 0.1169015529,\n        \"104\": 0.0873378628,\n        \"105\": 0.1788892937,\n        \"106\": 0.184303781,\n        \"107\": 0.0747153259,\n        \"108\": 0.2769387623,\n        \"109\": -0.0900818405,\n        \"110\": 0.0733949175,\n        \"111\": 0.2833456832,\n        \"112\": 0.0083655977,\n        \"113\": 0.3372043953,\n        \"114\": 0.2285817183,\n        \"115\": 0.0082504206,\n        \"116\": 0.307490622,\n        \"117\": 0.1145009276,\n        \"118\": 0.2019423307,\n        \"119\": 0.0008354562,\n        \"120\": -0.1130743973,\n        \"121\": -0.2473543353,\n        \"122\": -0.0006302528,\n        \"123\": 0.0851482521,\n        \"124\": 0.293301912,\n        \"125\": 0.4601618525,\n        \"126\": 0.0843088936,\n        \"127\": 0.6793118898,\n        \"128\": -0.1196668846,\n        \"129\": -0.1463627937,\n        \"130\": 0.2511802345,\n        \"131\": -0.3425442505,\n        \"132\": 0.0120582876,\n        \"133\": -0.0022185432,\n        \"134\": 0.1041517971,\n        \"135\": 0.313957358,\n        \"136\": 0.1407613516,\n        \"137\": 0.2622005096,\n        \"138\": 0.1660724099,\n        \"139\": 0.0878323083,\n        \"140\": 0.0292133339,\n        \"141\": -0.2577132774,\n        \"142\": -0.049417556,\n        \"143\": -0.0827495615,\n        \"144\": 0.198339056,\n        \"145\": -0.0708022007,\n        \"146\": 0.1692034915,\n        \"147\": 0.1987969782,\n        \"148\": 0.1007444086,\n        \"149\": 0.1225206078\n    }\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\nfrom sklearn.ensemble import IsolationForest\nimport pandas as pd\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"n_estimators\": DataType.Integer, \"test_data\": DataType.DataFrame, \"train_data\": DataType.DataFrame},\n    outputs={\"trained_model\": DataType.Any, \"decision_function_values\": DataType.Series},\n    name=\"Isolation Forest\",\n    description=\"A Isolation Forest Model\",\n    category=\"Anomaly Detection\",\n    version_tag=\"1.0.0\",\n    id=\"cdec1d55-5bb6-8e8d-4571-fbc0ebf5a354\",\n    revision_group_id=\"cdec1d55-5bb6-8e8d-4571-fbc0ebf5a354\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.267922+00:00\"\n)\ndef main(*, n_estimators, test_data, train_data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    iso_forest = IsolationForest(n_jobs=-1, n_estimators=n_estimators)\n    iso_forest.fit(train_data)\n\n    dec_vals = pd.Series(iso_forest.decision_function(test_data), index=test_data.index)\n\n    return {\"decision_function_values\": dec_vals, \"trained_model\": iso_forest}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "9861c5a4-1e37-54af-70be-f4e7b81d1f64",
          "name": "n_estimators",
          "data_type": "INT"
        },
        {
          "id": "bc5ae666-e1fb-9189-8f72-d681eb5dcfde",
          "name": "test_data",
          "data_type": "DATAFRAME"
        },
        {
          "id": "017e5542-46dd-e1aa-d6f8-4026dcad3d44",
          "name": "train_data",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "68234ebe-51c0-96b9-c95b-86548f09e79c",
          "name": "trained_model",
          "data_type": "ANY"
        },
        {
          "id": "4594161b-f878-09c3-ab66-c1803728ea62",
          "name": "decision_function_values",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "38f168ef-cb06-d89c-79b3-0cd823f32e9d",
    "revision_group_id": "38f168ef-cb06-d89c-79b3-0cd823f32e9d",
    "name": "Alerts from Score",
    "description": "Generate a Series indicating starts and ends of anomalous situations",
    "category": "Anomaly Detection",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.236535+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Alerts from Score\n\n## Description\nThis component generates a Series indicating starts and ends of anomalous situations.\n\n## Inputs\n* **scores** (Pandas Series): Should have a datetime index and float values.\n* **threshold** (Float): The value above which a score value is considered anomal.\n\n## Outputs\n* **alerts** (Pandas Series): The resulting series of alert indications: 1 indicates a start of an anormal situation (first anormal data point after a series of normal datapoints), -1 indicates an end of an anormal situation (first normal data point after anormal data points). 0 indicates no change of state.\n\n## Details\nTakes the given score values and compares them to the given threshold. Values greater than the threshold are considered anormal. This is used to return a series of values of -1,0,1 indicating alert stops (-1) and starts (1) respectively (see output description above for details).\n\nFor example if you send in a Series of values \n```\n[0.2, 0.3, 1.2, 1.7, 1.9, 1.8, 1.1, 0.9, 0.5]\n```\nand a threshold of 1.0 you get back a Series of values \n```\n[0, 0, 1, 0, 0, 0, 0, -1, 0]\n```\nwhich can be interpreted as an alert starting at the third and ending at the seventh entry.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"threshold\": 750,\n\t\"scores\": {\n\t\t    \"2018-05-19T20:20:00.000Z\": null,\n\t\t    \"2018-05-19T20:25:00.000Z\": 0.0,\n\t\t    \"2018-05-19T20:30:00.000Z\": 16.5612849114,\n\t\t    \"2018-05-19T20:35:00.000Z\": 16.5612849114,\n\t\t    \"2018-05-19T20:40:00.000Z\": 35.3888873865,\n\t\t    \"2018-05-19T20:45:00.000Z\": 35.3888873865,\n\t\t    \"2018-05-19T20:50:00.000Z\": 69.3125375414,\n\t\t    \"2018-05-19T20:55:00.000Z\": 69.3125375414,\n\t\t    \"2018-05-19T21:00:00.000Z\": 69.3125375414,\n\t\t    \"2018-05-19T21:05:00.000Z\": 98.7884989648,\n\t\t    \"2018-05-19T21:10:00.000Z\": 98.7884989648,\n\t\t    \"2018-05-19T21:15:00.000Z\": 100.9587045482,\n\t\t    \"2018-05-19T21:20:00.000Z\": 102.2542487951,\n\t\t    \"2018-05-19T21:25:00.000Z\": 102.2542487951,\n\t\t    \"2018-05-19T21:30:00.000Z\": 114.5691371503,\n\t\t    \"2018-05-19T21:35:00.000Z\": 120.3797191729,\n\t\t    \"2018-05-19T21:40:00.000Z\": 127.8861854247,\n\t\t    \"2018-05-19T21:45:00.000Z\": 131.267775652,\n\t\t    \"2018-05-19T21:50:00.000Z\": 160.7613254586,\n\t\t    \"2018-05-19T21:55:00.000Z\": 160.7613254586,\n\t\t    \"2018-05-19T22:00:00.000Z\": 167.4134075944,\n\t\t    \"2018-05-19T22:05:00.000Z\": 186.2684392328,\n\t\t    \"2018-05-19T22:10:00.000Z\": 230.6131449262,\n\t\t    \"2018-05-19T22:15:00.000Z\": 230.6684571778,\n\t\t    \"2018-05-19T22:20:00.000Z\": 251.0353939494,\n\t\t    \"2018-05-19T22:25:00.000Z\": 259.5933797047,\n\t\t    \"2018-05-19T22:30:00.000Z\": 259.5933797047,\n\t\t    \"2018-05-19T22:35:00.000Z\": 278.7595802688,\n\t\t    \"2018-05-19T22:40:00.000Z\": 281.8143312373,\n\t\t    \"2018-05-19T22:45:00.000Z\": 281.8143312373,\n\t\t    \"2018-05-19T22:50:00.000Z\": 312.3817979371,\n\t\t    \"2018-05-19T22:55:00.000Z\": 321.9908521414,\n\t\t    \"2018-05-19T23:00:00.000Z\": 325.9255521244,\n\t\t    \"2018-05-19T23:05:00.000Z\": 325.9255521244,\n\t\t    \"2018-05-19T23:10:00.000Z\": 325.9255521244,\n\t\t    \"2018-05-19T23:15:00.000Z\": 361.1274110799,\n\t\t    \"2018-05-19T23:20:00.000Z\": 376.0359117513,\n\t\t    \"2018-05-19T23:25:00.000Z\": 392.0069838074,\n\t\t    \"2018-05-19T23:30:00.000Z\": 394.5681097212,\n\t\t    \"2018-05-19T23:35:00.000Z\": 394.5681097212,\n\t\t    \"2018-05-19T23:40:00.000Z\": 428.0706928437,\n\t\t    \"2018-05-19T23:45:00.000Z\": 457.6415054839,\n\t\t    \"2018-05-19T23:50:00.000Z\": 462.9015434647,\n\t\t    \"2018-05-19T23:55:00.000Z\": 462.9015434647,\n\t\t    \"2018-05-20T00:00:00.000Z\": 462.9015434647,\n\t\t    \"2018-05-20T00:05:00.000Z\": 462.9015434647,\n\t\t    \"2018-05-20T00:10:00.000Z\": 532.822032855,\n\t\t    \"2018-05-20T00:15:00.000Z\": 533.470577878,\n\t\t    \"2018-05-20T00:20:00.000Z\": 533.470577878,\n\t\t    \"2018-05-20T00:25:00.000Z\": 533.470577878,\n\t\t    \"2018-05-20T00:30:00.000Z\": 503.7498254442,\n\t\t    \"2018-05-20T00:35:00.000Z\": 521.5304576082,\n\t\t    \"2018-05-20T00:40:00.000Z\": 559.384964421,\n\t\t    \"2018-05-20T00:45:00.000Z\": 556.3286228232,\n\t\t    \"2018-05-20T00:50:00.000Z\": 518.246328844,\n\t\t    \"2018-05-20T00:55:00.000Z\": 504.3830582076,\n\t\t    \"2018-05-20T01:00:00.000Z\": 518.1408883562,\n\t\t    \"2018-05-20T01:05:00.000Z\": 561.8187209704,\n\t\t    \"2018-05-20T01:10:00.000Z\": 574.6515216813,\n\t\t    \"2018-05-20T01:15:00.000Z\": 572.4813160978,\n\t\t    \"2018-05-20T01:20:00.000Z\": 571.185771851,\n\t\t    \"2018-05-20T01:25:00.000Z\": 571.185771851,\n\t\t    \"2018-05-20T01:30:00.000Z\": 553.0603014732,\n\t\t    \"2018-05-20T01:35:00.000Z\": 604.7609429054,\n\t\t    \"2018-05-20T01:40:00.000Z\": 612.461766648,\n\t\t    \"2018-05-20T01:45:00.000Z\": 612.461766648,\n\t\t    \"2018-05-20T01:50:00.000Z\": 612.461766648,\n\t\t    \"2018-05-20T01:55:00.000Z\": 612.5904237642,\n\t\t    \"2018-05-20T02:00:00.000Z\": 612.2164865655,\n\t\t    \"2018-05-20T02:05:00.000Z\": 548.9614369821,\n\t\t    \"2018-05-20T02:10:00.000Z\": 578.7700183405,\n\t\t    \"2018-05-20T02:15:00.000Z\": 578.7700183405,\n\t\t    \"2018-05-20T02:20:00.000Z\": 558.4030815689,\n\t\t    \"2018-05-20T02:25:00.000Z\": 532.4556361582,\n\t\t    \"2018-05-20T02:30:00.000Z\": 530.6788952495,\n\t\t    \"2018-05-20T02:35:00.000Z\": 539.7806590832,\n\t\t    \"2018-05-20T02:40:00.000Z\": 545.286835109,\n\t\t    \"2018-05-20T02:45:00.000Z\": 550.5703556822,\n\t\t    \"2018-05-20T02:50:00.000Z\": 561.3745879393,\n\t\t    \"2018-05-20T02:55:00.000Z\": 547.830833752,\n\t\t    \"2018-05-20T03:00:00.000Z\": 547.830833752,\n\t\t    \"2018-05-20T03:05:00.000Z\": 547.830833752,\n\t\t    \"2018-05-20T03:10:00.000Z\": 547.830833752,\n\t\t    \"2018-05-20T03:15:00.000Z\": 512.6289747965,\n\t\t    \"2018-05-20T03:20:00.000Z\": 497.9722749115,\n\t\t    \"2018-05-20T03:25:00.000Z\": 516.923143741,\n\t\t    \"2018-05-20T03:30:00.000Z\": 550.1346258685,\n\t\t    \"2018-05-20T03:35:00.000Z\": 542.4974140027,\n\t\t    \"2018-05-20T03:40:00.000Z\": 516.632042746,\n\t\t    \"2018-05-20T03:45:00.000Z\": 487.0612301058,\n\t\t    \"2018-05-20T03:50:00.000Z\": 577.545015224,\n\t\t    \"2018-05-20T03:55:00.000Z\": 551.9928094847,\n\t\t    \"2018-05-20T04:00:00.000Z\": 524.4237018726,\n\t\t    \"2018-05-20T04:05:00.000Z\": 591.156730801,\n\t\t    \"2018-05-20T04:10:00.000Z\": 667.3906114481,\n\t\t    \"2018-05-20T04:15:00.000Z\": 694.2591601741,\n\t\t    \"2018-05-20T04:20:00.000Z\": 705.2002903833,\n\t\t    \"2018-05-20T04:25:00.000Z\": 690.7539760807,\n\t\t    \"2018-05-20T04:30:00.000Z\": 689.684027183,\n\t\t    \"2018-05-20T04:35:00.000Z\": 689.684027183,\n\t\t    \"2018-05-20T04:40:00.000Z\": 689.684027183,\n\t\t    \"2018-05-20T04:45:00.000Z\": 666.6196981378,\n\t\t    \"2018-05-20T04:50:00.000Z\": 642.5639975862,\n\t\t    \"2018-05-20T04:55:00.000Z\": 901.3558643907,\n\t\t    \"2018-05-20T05:00:00.000Z\": 897.1633389485,\n\t\t    \"2018-05-20T05:05:00.000Z\": 853.4855063344,\n\t\t    \"2018-05-20T05:10:00.000Z\": 966.7310879285,\n\t\t    \"2018-05-20T05:15:00.000Z\": 906.8597584186,\n\t\t    \"2018-05-20T05:20:00.000Z\": 897.3585643975,\n\t\t    \"2018-05-20T05:25:00.000Z\": 881.7272707451,\n\t\t    \"2018-05-20T05:30:00.000Z\": 863.046641211,\n\t\t    \"2018-05-20T05:35:00.000Z\": 875.3249556308,\n\t\t    \"2018-05-20T05:40:00.000Z\": 1016.2348338278,\n\t\t    \"2018-05-20T05:45:00.000Z\": 1137.7923703493,\n\t\t    \"2018-05-20T05:50:00.000Z\": 1113.9733870333,\n\t\t    \"2018-05-20T05:55:00.000Z\": 1113.9733870333,\n\t\t    \"2018-05-20T06:00:00.000Z\": 1113.9733870333,\n\t\t    \"2018-05-20T06:05:00.000Z\": 1100.9069639136,\n\t\t    \"2018-05-20T06:10:00.000Z\": 1100.9069639136,\n\t\t    \"2018-05-20T06:15:00.000Z\": 1099.6424425015,\n\t\t    \"2018-05-20T06:20:00.000Z\": 1098.1452879716,\n\t\t    \"2018-05-20T06:25:00.000Z\": 1123.7221811864,\n\t\t    \"2018-05-20T06:30:00.000Z\": 1357.3553101212,\n\t\t    \"2018-05-20T06:35:00.000Z\": 1357.3553101212,\n\t\t    \"2018-05-20T06:40:00.000Z\": 1357.3553101212,\n\t\t    \"2018-05-20T06:45:00.000Z\": 1357.3553101212,\n\t\t    \"2018-05-20T06:50:00.000Z\": 1357.3553101212,\n\t\t    \"2018-05-20T06:55:00.000Z\": 1345.3374958971,\n\t\t    \"2018-05-20T07:00:00.000Z\": 1330.9310995142,\n\t\t    \"2018-05-20T07:05:00.000Z\": 1304.9618469225,\n\t\t    \"2018-05-20T07:10:00.000Z\": 1379.1846782589,\n\t\t    \"2018-05-20T07:15:00.000Z\": 1611.3798517981,\n\t\t    \"2018-05-20T07:20:00.000Z\": 1611.3798517981,\n\t\t    \"2018-05-20T07:25:00.000Z\": 1611.3798517981,\n\t\t    \"2018-05-20T07:30:00.000Z\": 1611.3798517981,\n\t\t    \"2018-05-20T07:35:00.000Z\": 1594.7555292738,\n\t\t    \"2018-05-20T07:40:00.000Z\": 1566.0727877154,\n\t\t    \"2018-05-20T07:45:00.000Z\": 1563.3641099791,\n\t\t    \"2018-05-20T07:50:00.000Z\": 1563.3641099791,\n\t\t    \"2018-05-20T07:55:00.000Z\": 1745.3074140207,\n\t\t    \"2018-05-20T08:00:00.000Z\": 1703.8397880045,\n\t\t    \"2018-05-20T08:05:00.000Z\": 1703.8397880045,\n\t\t    \"2018-05-20T08:10:00.000Z\": 1674.2127943253,\n\t\t    \"2018-05-20T08:15:00.000Z\": 1674.2127943253,\n\t\t    \"2018-05-20T08:20:00.000Z\": 1674.2127943253,\n\t\t    \"2018-05-20T08:25:00.000Z\": 1826.0099517771,\n\t\t    \"2018-05-20T08:30:00.000Z\": 1822.7491552036,\n\t\t    \"2018-05-20T08:35:00.000Z\": 1751.3856563625,\n\t\t    \"2018-05-20T08:40:00.000Z\": 1724.7908220881,\n\t\t    \"2018-05-20T08:45:00.000Z\": 1699.703798138,\n\t\t    \"2018-05-20T08:50:00.000Z\": 1699.703798138,\n\t\t    \"2018-05-20T08:55:00.000Z\": 1677.1187653356,\n\t\t    \"2018-05-20T09:00:00.000Z\": 1634.9390960909,\n\t\t    \"2018-05-20T09:05:00.000Z\": 1613.5205325956,\n\t\t    \"2018-05-20T09:10:00.000Z\": 1613.5205325956,\n\t\t    \"2018-05-20T09:15:00.000Z\": 1583.1520065225,\n\t\t    \"2018-05-20T09:20:00.000Z\": 1487.2802886903,\n\t\t    \"2018-05-20T09:25:00.000Z\": 1440.8812308015,\n\t\t    \"2018-05-20T09:30:00.000Z\": 1435.0054974455,\n\t\t    \"2018-05-20T09:35:00.000Z\": 1435.0054974455,\n\t\t    \"2018-05-20T09:40:00.000Z\": 1456.8293503129,\n\t\t    \"2018-05-20T09:45:00.000Z\": 1316.8912234827,\n\t\t    \"2018-05-20T09:50:00.000Z\": 1342.4602461065,\n\t\t    \"2018-05-20T09:55:00.000Z\": 1345.0939107783,\n\t\t    \"2018-05-20T10:00:00.000Z\": 1313.4457270303,\n\t\t    \"2018-05-20T10:05:00.000Z\": 1239.068561979,\n\t\t    \"2018-05-20T10:10:00.000Z\": 1233.5521507936,\n\t\t    \"2018-05-20T10:15:00.000Z\": 1226.497357897,\n\t\t    \"2018-05-20T10:20:00.000Z\": 1238.9480664357,\n\t\t    \"2018-05-20T10:25:00.000Z\": 1238.9480664357,\n\t\t    \"2018-05-20T10:30:00.000Z\": 1044.5542666055,\n\t\t    \"2018-05-20T10:35:00.000Z\": 1052.3312888865,\n\t\t    \"2018-05-20T10:40:00.000Z\": 1052.3312888865,\n\t\t    \"2018-05-20T10:45:00.000Z\": 1034.5567256176,\n\t\t    \"2018-05-20T10:50:00.000Z\": 978.1193790556,\n\t\t    \"2018-05-20T10:55:00.000Z\": 978.1193790556,\n\t\t    \"2018-05-20T11:00:00.000Z\": 1004.4629091318,\n\t\t    \"2018-05-20T11:05:00.000Z\": 999.3092392013,\n\t\t    \"2018-05-20T11:10:00.000Z\": 999.3092392013,\n\t\t    \"2018-05-20T11:15:00.000Z\": 780.1069342206,\n\t\t    \"2018-05-20T11:20:00.000Z\": 780.1069342206,\n\t\t    \"2018-05-20T11:25:00.000Z\": 838.9144050924,\n\t\t    \"2018-05-20T11:30:00.000Z\": 804.0684358804,\n\t\t    \"2018-05-20T11:35:00.000Z\": 791.4731034726,\n\t\t    \"2018-05-20T11:40:00.000Z\": 759.7142023274,\n\t\t    \"2018-05-20T11:45:00.000Z\": 765.8904976196,\n\t\t    \"2018-05-20T11:50:00.000Z\": 753.3953998784,\n\t\t    \"2018-05-20T11:55:00.000Z\": 529.6427008349,\n\t\t    \"2018-05-20T12:00:00.000Z\": 511.2835465175,\n\t\t    \"2018-05-20T12:05:00.000Z\": 501.0551308187,\n\t\t    \"2018-05-20T12:10:00.000Z\": 501.0551308187,\n\t\t    \"2018-05-20T12:15:00.000Z\": 463.1325800823,\n\t\t    \"2018-05-20T12:20:00.000Z\": 459.9375777688,\n\t\t    \"2018-05-20T12:25:00.000Z\": 387.5570254824,\n\t\t    \"2018-05-20T12:30:00.000Z\": 296.5395593769,\n\t\t    \"2018-05-20T12:35:00.000Z\": 287.3524692542,\n\t\t    \"2018-05-20T12:40:00.000Z\": 297.8927906989,\n\t\t    \"2018-05-20T12:45:00.000Z\": 291.8903261575,\n\t\t    \"2018-05-20T12:50:00.000Z\": 290.0915944261,\n\t\t    \"2018-05-20T12:55:00.000Z\": 328.5128689691,\n\t\t    \"2018-05-20T13:00:00.000Z\": 326.7358781713,\n\t\t    \"2018-05-20T13:05:00.000Z\": 326.7358781713,\n\t\t    \"2018-05-20T13:10:00.000Z\": 341.6987572572,\n\t\t    \"2018-05-20T13:15:00.000Z\": 350.477915138,\n\t\t    \"2018-05-20T13:20:00.000Z\": 350.477915138,\n\t\t    \"2018-05-20T13:25:00.000Z\": 350.477915138,\n\t\t    \"2018-05-20T13:30:00.000Z\": 361.6147949587,\n\t\t    \"2018-05-20T13:35:00.000Z\": 359.7783476153,\n\t\t    \"2018-05-20T13:40:00.000Z\": 359.7783476153,\n\t\t    \"2018-05-20T13:45:00.000Z\": 359.7783476153,\n\t\t    \"2018-05-20T13:50:00.000Z\": 350.3465290609,\n\t\t    \"2018-05-20T13:55:00.000Z\": 347.7128643891,\n\t\t    \"2018-05-20T14:00:00.000Z\": 347.7128643891,\n\t\t    \"2018-05-20T14:05:00.000Z\": 388.7028435088,\n\t\t    \"2018-05-20T14:10:00.000Z\": 388.7028435088,\n\t\t    \"2018-05-20T14:15:00.000Z\": 387.3710374637,\n\t\t    \"2018-05-20T14:20:00.000Z\": 387.3710374637,\n\t\t    \"2018-05-20T14:25:00.000Z\": 377.5665658862,\n\t\t    \"2018-05-20T14:30:00.000Z\": 414.233552523,\n\t\t    \"2018-05-20T14:35:00.000Z\": 406.4565302421,\n\t\t    \"2018-05-20T14:40:00.000Z\": 405.0918901566,\n\t\t    \"2018-05-20T14:45:00.000Z\": 406.4565302421,\n\t\t    \"2018-05-20T14:50:00.000Z\": 413.9126026386,\n\t\t    \"2018-05-20T14:55:00.000Z\": 413.9126026386,\n\t\t    \"2018-05-20T15:00:00.000Z\": 394.3432783305,\n\t\t    \"2018-05-20T15:05:00.000Z\": 394.3432783305,\n\t\t    \"2018-05-20T15:10:00.000Z\": 394.3432783305,\n\t\t    \"2018-05-20T15:15:00.000Z\": 383.9893013674,\n\t\t    \"2018-05-20T15:20:00.000Z\": 397.1060014998,\n\t\t    \"2018-05-20T15:25:00.000Z\": 392.537331181,\n\t\t    \"2018-05-20T15:30:00.000Z\": 380.0268956081,\n\t\t    \"2018-05-20T15:35:00.000Z\": 355.2627815281,\n\t\t    \"2018-05-20T15:40:00.000Z\": 399.2457128073,\n\t\t    \"2018-05-20T15:45:00.000Z\": 414.6746710378,\n\t\t    \"2018-05-20T15:50:00.000Z\": 414.6746710378,\n\t\t    \"2018-05-20T15:55:00.000Z\": 409.621733531,\n\t\t    \"2018-05-20T16:00:00.000Z\": 410.3825899302,\n\t\t    \"2018-05-20T16:05:00.000Z\": 440.8929130885,\n\t\t    \"2018-05-20T16:10:00.000Z\": 433.0696807415,\n\t\t    \"2018-05-20T16:15:00.000Z\": 433.0696807415,\n\t\t    \"2018-05-20T16:20:00.000Z\": 433.0696807415,\n\t\t    \"2018-05-20T16:25:00.000Z\": 410.8638380124,\n\t\t    \"2018-05-20T16:30:00.000Z\": 438.3109759172,\n\t\t    \"2018-05-20T16:35:00.000Z\": 438.3109759172,\n\t\t    \"2018-05-20T16:40:00.000Z\": 438.3109759172,\n\t\t    \"2018-05-20T16:45:00.000Z\": 404.2130158996,\n\t\t    \"2018-05-20T16:50:00.000Z\": 429.8198790054,\n\t\t    \"2018-05-20T16:55:00.000Z\": 450.0527149545,\n\t\t    \"2018-05-20T17:00:00.000Z\": 427.1891993933,\n\t\t    \"2018-05-20T17:05:00.000Z\": 407.3023020395,\n\t\t    \"2018-05-20T17:10:00.000Z\": 407.3023020395,\n\t\t    \"2018-05-20T17:15:00.000Z\": 434.9754207175,\n\t\t    \"2018-05-20T17:20:00.000Z\": 432.7169216573,\n\t\t    \"2018-05-20T17:25:00.000Z\": 427.1644265683,\n\t\t    \"2018-05-20T17:30:00.000Z\": 427.1644265683,\n\t\t    \"2018-05-20T17:35:00.000Z\": 427.1644265683,\n\t\t    \"2018-05-20T17:40:00.000Z\": 433.8203439491,\n\t\t    \"2018-05-20T17:45:00.000Z\": 439.0657695565,\n\t\t    \"2018-05-20T17:50:00.000Z\": 439.0657695565,\n\t\t    \"2018-05-20T17:55:00.000Z\": 433.1714625124,\n\t\t    \"2018-05-20T18:00:00.000Z\": 398.2130345231,\n\t\t    \"2018-05-20T18:05:00.000Z\": 415.7976279249,\n\t\t    \"2018-05-20T18:10:00.000Z\": 444.5969206576,\n\t\t    \"2018-05-20T18:15:00.000Z\": 435.3986435832,\n\t\t    \"2018-05-20T18:20:00.000Z\": 420.8644471823,\n\t\t    \"2018-05-20T18:25:00.000Z\": 420.8644471823,\n\t\t    \"2018-05-20T18:30:00.000Z\": 453.1111152617,\n\t\t    \"2018-05-20T18:35:00.000Z\": 458.9069839399,\n\t\t    \"2018-05-20T18:40:00.000Z\": 460.8582679749,\n\t\t    \"2018-05-20T18:45:00.000Z\": 444.5284647873,\n\t\t    \"2018-05-20T18:50:00.000Z\": 444.5284647873,\n\t\t    \"2018-05-20T18:55:00.000Z\": 476.8291312597,\n\t\t    \"2018-05-20T19:00:00.000Z\": 481.8750428675,\n\t\t    \"2018-05-20T19:05:00.000Z\": 481.9564807493,\n\t\t    \"2018-05-20T19:10:00.000Z\": 488.3259666859,\n\t\t    \"2018-05-20T19:15:00.000Z\": 477.9748686977,\n\t\t    \"2018-05-20T19:20:00.000Z\": 468.672355008,\n\t\t    \"2018-05-20T19:25:00.000Z\": 496.8222605012,\n\t\t    \"2018-05-20T19:30:00.000Z\": 496.8222605012,\n\t\t    \"2018-05-20T19:35:00.000Z\": 480.9020823267,\n\t\t    \"2018-05-20T19:40:00.000Z\": 463.0988834903,\n\t\t    \"2018-05-20T19:45:00.000Z\": 461.986512287,\n\t\t    \"2018-05-20T19:50:00.000Z\": 445.4581846525,\n\t\t    \"2018-05-20T19:55:00.000Z\": 477.4306059904,\n\t\t    \"2018-05-20T20:00:00.000Z\": 483.8544242213,\n\t\t    \"2018-05-20T20:05:00.000Z\": 478.3462932098,\n\t\t    \"2018-05-20T20:10:00.000Z\": 483.6722510901,\n\t\t    \"2018-05-20T20:15:00.000Z\": 459.9536408358,\n\t\t    \"2018-05-20T20:20:00.000Z\": 458.7767596578,\n\t\t    \"2018-05-20T20:25:00.000Z\": 464.9036419519,\n\t\t    \"2018-05-20T20:30:00.000Z\": 449.0012524196,\n\t\t    \"2018-05-20T20:35:00.000Z\": 440.6024433575,\n\t\t    \"2018-05-20T20:40:00.000Z\": 409.442035025,\n\t\t    \"2018-05-20T20:45:00.000Z\": 428.8524982911,\n\t\t    \"2018-05-20T20:50:00.000Z\": 449.9301770517,\n\t\t    \"2018-05-20T20:55:00.000Z\": 458.406981349,\n\t\t    \"2018-05-20T21:00:00.000Z\": 434.362149826,\n\t\t    \"2018-05-20T21:05:00.000Z\": 419.5269283036,\n\t\t    \"2018-05-20T21:10:00.000Z\": 432.4374694477,\n\t\t    \"2018-05-20T21:15:00.000Z\": 432.4374694477,\n\t\t    \"2018-05-20T21:20:00.000Z\": 432.4374694477,\n\t\t    \"2018-05-20T21:25:00.000Z\": 439.2854509221,\n\t\t    \"2018-05-20T21:30:00.000Z\": 425.0251185599,\n\t\t    \"2018-05-20T21:35:00.000Z\": 453.4249701942,\n\t\t    \"2018-05-20T21:40:00.000Z\": 453.4249701942,\n\t\t    \"2018-05-20T21:45:00.000Z\": 453.4249701942,\n\t\t    \"2018-05-20T21:50:00.000Z\": 467.4004288942,\n\t\t    \"2018-05-20T21:55:00.000Z\": 470.5050179147,\n\t\t    \"2018-05-20T22:00:00.000Z\": 486.864140238,\n\t\t    \"2018-05-20T22:05:00.000Z\": 486.864140238,\n\t\t    \"2018-05-20T22:10:00.000Z\": 486.864140238,\n\t\t    \"2018-05-20T22:15:00.000Z\": 473.1400710974,\n\t\t    \"2018-05-20T22:20:00.000Z\": 453.7035420357,\n\t\t    \"2018-05-20T22:25:00.000Z\": 477.2538239327,\n\t\t    \"2018-05-20T22:30:00.000Z\": 477.2538239327,\n\t\t    \"2018-05-20T22:35:00.000Z\": 477.2538239327,\n\t\t    \"2018-05-20T22:40:00.000Z\": 502.257509819,\n\t\t    \"2018-05-20T22:45:00.000Z\": 479.4621888037,\n\t\t    \"2018-05-20T22:50:00.000Z\": 482.7709603814,\n\t\t    \"2018-05-20T22:55:00.000Z\": 482.7709603814,\n\t\t    \"2018-05-20T23:00:00.000Z\": 482.7709603814,\n\t\t    \"2018-05-20T23:05:00.000Z\": 486.6641481738,\n\t\t    \"2018-05-20T23:10:00.000Z\": 494.2532709052,\n\t\t    \"2018-05-20T23:15:00.000Z\": 499.4603364103,\n\t\t    \"2018-05-20T23:20:00.000Z\": 518.7111236586,\n\t\t    \"2018-05-20T23:25:00.000Z\": 518.7111236586,\n\t\t    \"2018-05-20T23:30:00.000Z\": 495.8671002397,\n\t\t    \"2018-05-20T23:35:00.000Z\": 521.7790855707,\n\t\t    \"2018-05-20T23:40:00.000Z\": 517.6258636034,\n\t\t    \"2018-05-20T23:45:00.000Z\": 517.1846158213,\n\t\t    \"2018-05-20T23:50:00.000Z\": 539.6153429527,\n\t\t    \"2018-05-20T23:55:00.000Z\": 517.6008797285,\n\t\t    \"2018-05-21T00:00:00.000Z\": 556.8087084229,\n\t\t    \"2018-05-21T00:05:00.000Z\": 554.5452992349,\n\t\t    \"2018-05-21T00:10:00.000Z\": 528.0211610618,\n\t\t    \"2018-05-21T00:15:00.000Z\": 554.8002491464,\n\t\t    \"2018-05-21T00:20:00.000Z\": 587.5903092042,\n\t\t    \"2018-05-21T00:25:00.000Z\": 599.0419231549,\n\t\t    \"2018-05-21T00:30:00.000Z\": 593.6371220892,\n\t\t    \"2018-05-21T00:35:00.000Z\": 579.1674470581,\n\t\t    \"2018-05-21T00:40:00.000Z\": 567.1013343513,\n\t\t    \"2018-05-21T00:45:00.000Z\": 605.5250927975,\n\t\t    \"2018-05-21T00:50:00.000Z\": 610.3604017727,\n\t\t    \"2018-05-21T00:55:00.000Z\": 598.0710051628,\n\t\t    \"2018-05-21T01:00:00.000Z\": 583.1166744602,\n\t\t    \"2018-05-21T01:05:00.000Z\": 583.1166744602,\n\t\t    \"2018-05-21T01:10:00.000Z\": 583.1166744602,\n\t\t    \"2018-05-21T01:15:00.000Z\": 620.946863348,\n\t\t    \"2018-05-21T01:20:00.000Z\": 601.0853649617,\n\t\t    \"2018-05-21T01:25:00.000Z\": 601.6187521773,\n\t\t    \"2018-05-21T01:30:00.000Z\": 601.6187521773,\n\t\t    \"2018-05-21T01:35:00.000Z\": 601.6187521773,\n\t\t    \"2018-05-21T01:40:00.000Z\": 573.4627022888,\n\t\t    \"2018-05-21T01:45:00.000Z\": 594.2317921378,\n\t\t    \"2018-05-21T01:50:00.000Z\": 594.2317921378,\n\t\t    \"2018-05-21T01:55:00.000Z\": 608.4869470788,\n\t\t    \"2018-05-21T02:00:00.000Z\": 608.4869470788,\n\t\t    \"2018-05-21T02:05:00.000Z\": 583.2538863851,\n\t\t    \"2018-05-21T02:10:00.000Z\": 547.6122686713,\n\t\t    \"2018-05-21T02:15:00.000Z\": 557.2784639389,\n\t\t    \"2018-05-21T02:20:00.000Z\": 572.2775373117,\n\t\t    \"2018-05-21T02:25:00.000Z\": 608.8345699089,\n\t\t    \"2018-05-21T02:30:00.000Z\": 578.166584055,\n\t\t    \"2018-05-21T02:35:00.000Z\": 557.2125044648,\n\t\t    \"2018-05-21T02:40:00.000Z\": 557.2125044648,\n\t\t    \"2018-05-21T02:45:00.000Z\": 557.2125044648,\n\t\t    \"2018-05-21T02:50:00.000Z\": 565.3862209992,\n\t\t    \"2018-05-21T02:55:00.000Z\": 543.4833559951,\n\t\t    \"2018-05-21T03:00:00.000Z\": 574.9485643657,\n\t\t    \"2018-05-21T03:05:00.000Z\": 579.336272954,\n\t\t    \"2018-05-21T03:10:00.000Z\": 579.336272954,\n\t\t    \"2018-05-21T03:15:00.000Z\": 579.336272954,\n\t\t    \"2018-05-21T03:20:00.000Z\": 536.1954834336,\n\t\t    \"2018-05-21T03:25:00.000Z\": 503.7690339387,\n\t\t    \"2018-05-21T03:30:00.000Z\": 536.9719697744,\n\t\t    \"2018-05-21T03:35:00.000Z\": 536.9719697744,\n\t\t    \"2018-05-21T03:40:00.000Z\": 562.0760303983,\n\t\t    \"2018-05-21T03:45:00.000Z\": 566.4659331749,\n\t\t    \"2018-05-21T03:50:00.000Z\": 510.3245338237,\n\t\t    \"2018-05-21T03:55:00.000Z\": 478.0641891444,\n\t\t    \"2018-05-21T04:00:00.000Z\": 478.0641891444,\n\t\t    \"2018-05-21T04:05:00.000Z\": 497.8748096652,\n\t\t    \"2018-05-21T04:10:00.000Z\": 536.6954888788,\n\t\t    \"2018-05-21T04:15:00.000Z\": 536.6954888788,\n\t\t    \"2018-05-21T04:20:00.000Z\": 552.0991450584,\n\t\t    \"2018-05-21T04:25:00.000Z\": 715.0414716781,\n\t\t    \"2018-05-21T04:30:00.000Z\": 715.0414716781,\n\t\t    \"2018-05-21T04:35:00.000Z\": 715.0414716781,\n\t\t    \"2018-05-21T04:40:00.000Z\": 715.0414716781,\n\t\t    \"2018-05-21T04:45:00.000Z\": 684.4074916067,\n\t\t    \"2018-05-21T04:50:00.000Z\": 721.0972745113,\n\t\t    \"2018-05-21T04:55:00.000Z\": 678.453389466,\n\t\t    \"2018-05-21T05:00:00.000Z\": 647.7029023361,\n\t\t    \"2018-05-21T05:05:00.000Z\": 635.7244709977,\n\t\t    \"2018-05-21T05:10:00.000Z\": 901.4698746934,\n\t\t    \"2018-05-21T05:15:00.000Z\": 901.4698746934,\n\t\t    \"2018-05-21T05:20:00.000Z\": 912.8486649018,\n\t\t    \"2018-05-21T05:25:00.000Z\": 925.5634570945,\n\t\t    \"2018-05-21T05:30:00.000Z\": 920.4488566436,\n\t\t    \"2018-05-21T05:35:00.000Z\": 906.0130111167,\n\t\t    \"2018-05-21T05:40:00.000Z\": 886.2858550028,\n\t\t    \"2018-05-21T05:45:00.000Z\": 886.2858550028,\n\t\t    \"2018-05-21T05:50:00.000Z\": 876.9225543839,\n\t\t    \"2018-05-21T05:55:00.000Z\": 1098.0750303659,\n\t\t    \"2018-05-21T06:00:00.000Z\": 1135.9408145773,\n\t\t    \"2018-05-21T06:05:00.000Z\": 1122.1394666398,\n\t\t    \"2018-05-21T06:10:00.000Z\": 1120.6593450859,\n\t\t    \"2018-05-21T06:15:00.000Z\": 1120.6593450859,\n\t\t    \"2018-05-21T06:20:00.000Z\": 1120.6593450859,\n\t\t    \"2018-05-21T06:25:00.000Z\": 1120.6593450859,\n\t\t    \"2018-05-21T06:30:00.000Z\": 1131.3244557766,\n\t\t    \"2018-05-21T06:35:00.000Z\": 1108.6185249484,\n\t\t    \"2018-05-21T06:40:00.000Z\": 1321.825697839,\n\t\t    \"2018-05-21T06:45:00.000Z\": 1342.0594957387,\n\t\t    \"2018-05-21T06:50:00.000Z\": 1342.0594957387,\n\t\t    \"2018-05-21T06:55:00.000Z\": 1337.1348430601,\n\t\t    \"2018-05-21T07:00:00.000Z\": 1337.1348430601,\n\t\t    \"2018-05-21T07:05:00.000Z\": 1337.1348430601,\n\t\t    \"2018-05-21T07:10:00.000Z\": 1318.6626286581,\n\t\t    \"2018-05-21T07:15:00.000Z\": 1298.3598675627,\n\t\t    \"2018-05-21T07:20:00.000Z\": 1304.3492203457,\n\t\t    \"2018-05-21T07:25:00.000Z\": 1580.3663239072,\n\t\t    \"2018-05-21T07:30:00.000Z\": 1580.3663239072,\n\t\t    \"2018-05-21T07:35:00.000Z\": 1529.2062782838,\n\t\t    \"2018-05-21T07:40:00.000Z\": 1529.2062782838,\n\t\t    \"2018-05-21T07:45:00.000Z\": 1529.2062782838,\n\t\t    \"2018-05-21T07:50:00.000Z\": 1520.0831813735,\n\t\t    \"2018-05-21T07:55:00.000Z\": 1496.6113084997,\n\t\t    \"2018-05-21T08:00:00.000Z\": 1487.5366465,\n\t\t    \"2018-05-21T08:05:00.000Z\": 1779.1880600702,\n\t\t    \"2018-05-21T08:10:00.000Z\": 1604.2461803336,\n\t\t    \"2018-05-21T08:15:00.000Z\": 1567.2351246534,\n\t\t    \"2018-05-21T08:20:00.000Z\": 1598.0732799406,\n\t\t    \"2018-05-21T08:25:00.000Z\": 1587.0316986194,\n\t\t    \"2018-05-21T08:30:00.000Z\": 1543.1120176694,\n\t\t    \"2018-05-21T08:35:00.000Z\": 1755.5593454433,\n\t\t    \"2018-05-21T08:40:00.000Z\": 1738.9018487325,\n\t\t    \"2018-05-21T08:45:00.000Z\": 1738.9018487325,\n\t\t    \"2018-05-21T08:50:00.000Z\": 1576.9948866397,\n\t\t    \"2018-05-21T08:55:00.000Z\": 1518.2051345352,\n\t\t    \"2018-05-21T09:00:00.000Z\": 1482.3168312166,\n\t\t    \"2018-05-21T09:05:00.000Z\": 1527.152941939,\n\t\t    \"2018-05-21T09:10:00.000Z\": 1495.2237331033,\n\t\t    \"2018-05-21T09:15:00.000Z\": 1508.17749963,\n\t\t    \"2018-05-21T09:20:00.000Z\": 1496.7987094216,\n\t\t    \"2018-05-21T09:25:00.000Z\": 1470.1523157536,\n\t\t    \"2018-05-21T09:30:00.000Z\": 1470.1523157536,\n\t\t    \"2018-05-21T09:35:00.000Z\": 1326.8460668495,\n\t\t    \"2018-05-21T09:40:00.000Z\": 1290.7868211301,\n\t\t    \"2018-05-21T09:45:00.000Z\": 1305.096189272,\n\t\t    \"2018-05-21T09:50:00.000Z\": 1353.5969099033,\n\t\t    \"2018-05-21T09:55:00.000Z\": 1278.3160041148,\n\t\t    \"2018-05-21T10:00:00.000Z\": 1240.834404199,\n\t\t    \"2018-05-21T10:05:00.000Z\": 1223.1747559452,\n\t\t    \"2018-05-21T10:10:00.000Z\": 1223.1747559452,\n\t\t    \"2018-05-21T10:15:00.000Z\": 1223.1747559452,\n\t\t    \"2018-05-21T10:20:00.000Z\": 1140.5540647264,\n\t\t    \"2018-05-21T10:25:00.000Z\": 1105.5631100565,\n\t\t    \"2018-05-21T10:30:00.000Z\": 1137.1023863974,\n\t\t    \"2018-05-21T10:35:00.000Z\": 1137.1023863974,\n\t\t    \"2018-05-21T10:40:00.000Z\": 1031.2687911611,\n\t\t    \"2018-05-21T10:45:00.000Z\": 961.6787921983,\n\t\t    \"2018-05-21T10:50:00.000Z\": 961.6787921983,\n\t\t    \"2018-05-21T10:55:00.000Z\": 985.6088483913,\n\t\t    \"2018-05-21T11:00:00.000Z\": 985.6088483913,\n\t\t    \"2018-05-21T11:05:00.000Z\": 985.6088483913,\n\t\t    \"2018-05-21T11:10:00.000Z\": 960.7895888693,\n\t\t    \"2018-05-21T11:15:00.000Z\": 928.7038734825,\n\t\t    \"2018-05-21T11:20:00.000Z\": 950.3217469282,\n\t\t    \"2018-05-21T11:25:00.000Z\": 723.263849239,\n\t\t    \"2018-05-21T11:30:00.000Z\": 748.0096211713,\n\t\t    \"2018-05-21T11:35:00.000Z\": 748.0096211713,\n\t\t    \"2018-05-21T11:40:00.000Z\": 748.0096211713,\n\t\t    \"2018-05-21T11:45:00.000Z\": 747.4383884522,\n\t\t    \"2018-05-21T11:50:00.000Z\": 724.0719029748,\n\t\t    \"2018-05-21T11:55:00.000Z\": 734.3586354548,\n\t\t    \"2018-05-21T12:00:00.000Z\": 722.2546441071,\n\t\t    \"2018-05-21T12:05:00.000Z\": 480.8313321068,\n\t\t    \"2018-05-21T12:10:00.000Z\": 501.0232309808,\n\t\t    \"2018-05-21T12:15:00.000Z\": 501.0232309808,\n\t\t    \"2018-05-21T12:20:00.000Z\": 503.3653802424,\n\t\t    \"2018-05-21T12:25:00.000Z\": 503.7576972659,\n\t\t    \"2018-05-21T12:30:00.000Z\": 503.7576972659,\n\t\t    \"2018-05-21T12:35:00.000Z\": 292.0576777149,\n\t\t    \"2018-05-21T12:40:00.000Z\": 310.9348698789,\n\t\t    \"2018-05-21T12:45:00.000Z\": 326.956822705,\n\t\t    \"2018-05-21T12:50:00.000Z\": 362.8166832426,\n\t\t    \"2018-05-21T12:55:00.000Z\": 334.9442713261,\n\t\t    \"2018-05-21T13:00:00.000Z\": 341.7305552299,\n\t\t    \"2018-05-21T13:05:00.000Z\": 341.7305552299,\n\t\t    \"2018-05-21T13:10:00.000Z\": 328.2135698521,\n\t\t    \"2018-05-21T13:15:00.000Z\": 315.2598033254,\n\t\t    \"2018-05-21T13:20:00.000Z\": 315.2598033254,\n\t\t    \"2018-05-21T13:25:00.000Z\": 328.7619218683,\n\t\t    \"2018-05-21T13:30:00.000Z\": 360.4577917179,\n\t\t    \"2018-05-21T13:35:00.000Z\": 403.6123356388,\n\t\t    \"2018-05-21T13:40:00.000Z\": 411.4689697677,\n\t\t    \"2018-05-21T13:45:00.000Z\": 411.4689697677,\n\t\t    \"2018-05-21T13:50:00.000Z\": 411.4689697677,\n\t\t    \"2018-05-21T13:55:00.000Z\": 445.9110483432,\n\t\t    \"2018-05-21T14:00:00.000Z\": 451.4436869477,\n\t\t    \"2018-05-21T14:05:00.000Z\": 446.8938164689,\n\t\t    \"2018-05-21T14:10:00.000Z\": 446.8938164689,\n\t\t    \"2018-05-21T14:15:00.000Z\": 473.7902853771,\n\t\t    \"2018-05-21T14:20:00.000Z\": 489.9932300812,\n\t\t    \"2018-05-21T14:25:00.000Z\": 489.9932300812,\n\t\t    \"2018-05-21T14:30:00.000Z\": 499.1239172576,\n\t\t    \"2018-05-21T14:35:00.000Z\": 480.4767936717,\n\t\t    \"2018-05-21T14:40:00.000Z\": 506.1205249094,\n\t\t    \"2018-05-21T14:45:00.000Z\": 507.5401098333,\n\t\t    \"2018-05-21T14:50:00.000Z\": 507.5401098333,\n\t\t    \"2018-05-21T14:55:00.000Z\": 523.5399582185,\n\t\t    \"2018-05-21T15:00:00.000Z\": 496.5737385358,\n\t\t    \"2018-05-21T15:05:00.000Z\": 480.0568122223,\n\t\t    \"2018-05-21T15:10:00.000Z\": 516.9929836136,\n\t\t    \"2018-05-21T15:15:00.000Z\": 516.9929836136,\n\t\t    \"2018-05-21T15:20:00.000Z\": 495.3751101679,\n\t\t    \"2018-05-21T15:25:00.000Z\": 531.420951419,\n\t\t    \"2018-05-21T15:30:00.000Z\": 534.5603416683,\n\t\t    \"2018-05-21T15:35:00.000Z\": 544.6225573331,\n\t\t    \"2018-05-21T15:40:00.000Z\": 529.1521604379,\n\t\t    \"2018-05-21T15:45:00.000Z\": 538.4590481681,\n\t\t    \"2018-05-21T15:50:00.000Z\": 555.5535585729,\n\t\t    \"2018-05-21T15:55:00.000Z\": 538.1707992242,\n\t\t    \"2018-05-21T16:00:00.000Z\": 538.1707992242,\n\t\t    \"2018-05-21T16:05:00.000Z\": 538.1707992242,\n\t\t    \"2018-05-21T16:10:00.000Z\": 576.7940990306,\n\t\t    \"2018-05-21T16:15:00.000Z\": 548.6377984432,\n\t\t    \"2018-05-21T16:20:00.000Z\": 548.6377984432,\n\t\t    \"2018-05-21T16:25:00.000Z\": 573.1095282552,\n\t\t    \"2018-05-21T16:30:00.000Z\": 550.7342907353,\n\t\t    \"2018-05-21T16:35:00.000Z\": 565.7595596477,\n\t\t    \"2018-05-21T16:40:00.000Z\": 568.964583682,\n\t\t    \"2018-05-21T16:45:00.000Z\": 568.964583682,\n\t\t    \"2018-05-21T16:50:00.000Z\": 568.964583682,\n\t\t    \"2018-05-21T16:55:00.000Z\": 595.8096006718,\n\t\t    \"2018-05-21T17:00:00.000Z\": 588.403480063,\n\t\t    \"2018-05-21T17:05:00.000Z\": 606.9882527486,\n\t\t    \"2018-05-21T17:10:00.000Z\": 536.9030762096,\n\t\t    \"2018-05-21T17:15:00.000Z\": 444.3903217794,\n\t\t    \"2018-05-21T17:20:00.000Z\": 435.0767129211,\n\t\t    \"2018-05-21T17:25:00.000Z\": 458.902521643,\n\t\t    \"2018-05-21T17:30:00.000Z\": 458.902521643,\n\t\t    \"2018-05-21T17:35:00.000Z\": 458.902521643,\n\t\t    \"2018-05-21T17:40:00.000Z\": 458.902521643,\n\t\t    \"2018-05-21T17:45:00.000Z\": 515.451700226,\n\t\t    \"2018-05-21T17:50:00.000Z\": 491.0102219276,\n\t\t    \"2018-05-21T17:55:00.000Z\": 491.0102219276,\n\t\t    \"2018-05-21T18:00:00.000Z\": 491.0102219276,\n\t\t    \"2018-05-21T18:05:00.000Z\": 474.6366058118,\n\t\t    \"2018-05-21T18:10:00.000Z\": 476.4957484365,\n\t\t    \"2018-05-21T18:15:00.000Z\": 481.2669726734,\n\t\t    \"2018-05-21T18:20:00.000Z\": 481.2669726734,\n\t\t    \"2018-05-21T18:25:00.000Z\": 459.3182957318,\n\t\t    \"2018-05-21T18:30:00.000Z\": 484.0607991058,\n\t\t    \"2018-05-21T18:35:00.000Z\": 517.0972694316,\n\t\t    \"2018-05-21T18:40:00.000Z\": 489.4350790168,\n\t\t    \"2018-05-21T18:45:00.000Z\": 483.5351468027,\n\t\t    \"2018-05-21T18:50:00.000Z\": 454.3262752196,\n\t\t    \"2018-05-21T18:55:00.000Z\": 454.3262752196,\n\t\t    \"2018-05-21T19:00:00.000Z\": 488.74064501,\n\t\t    \"2018-05-21T19:05:00.000Z\": 486.5287825013,\n\t\t    \"2018-05-21T19:10:00.000Z\": 463.9659035179,\n\t\t    \"2018-05-21T19:15:00.000Z\": 480.9438522105,\n\t\t    \"2018-05-21T19:20:00.000Z\": 451.8191720766,\n\t\t    \"2018-05-21T19:25:00.000Z\": 451.8191720766,\n\t\t    \"2018-05-21T19:30:00.000Z\": 445.8433958279,\n\t\t    \"2018-05-21T19:35:00.000Z\": 445.8433958279,\n\t\t    \"2018-05-21T19:40:00.000Z\": 434.1564050666,\n\t\t    \"2018-05-21T19:45:00.000Z\": 434.1564050666,\n\t\t    \"2018-05-21T19:50:00.000Z\": 434.8353758389,\n\t\t    \"2018-05-21T19:55:00.000Z\": 463.2308129242,\n\t\t    \"2018-05-21T20:00:00.000Z\": 463.2308129242,\n\t\t    \"2018-05-21T20:05:00.000Z\": 449.0615752219,\n\t\t    \"2018-05-21T20:10:00.000Z\": 449.0615752219,\n\t\t    \"2018-05-21T20:15:00.000Z\": 454.8478478826,\n\t\t    \"2018-05-21T20:20:00.000Z\": 448.4188793043,\n\t\t    \"2018-05-21T20:25:00.000Z\": 448.4188793043,\n\t\t    \"2018-05-21T20:30:00.000Z\": 427.3702873122,\n\t\t    \"2018-05-21T20:35:00.000Z\": 448.0394069645,\n\t\t    \"2018-05-21T20:40:00.000Z\": 470.3039021538,\n\t\t    \"2018-05-21T20:45:00.000Z\": 449.1861067418,\n\t\t    \"2018-05-21T20:50:00.000Z\": 433.5886845019,\n\t\t    \"2018-05-21T20:55:00.000Z\": 436.3323592365,\n\t\t    \"2018-05-21T21:00:00.000Z\": 481.1227553789,\n\t\t    \"2018-05-21T21:05:00.000Z\": 452.4584799574,\n\t\t    \"2018-05-21T21:10:00.000Z\": 447.3403639951,\n\t\t    \"2018-05-21T21:15:00.000Z\": 443.4901149335,\n\t\t    \"2018-05-21T21:20:00.000Z\": 463.2336659076,\n\t\t    \"2018-05-21T21:25:00.000Z\": 463.2336659076,\n\t\t    \"2018-05-21T21:30:00.000Z\": 453.1708553182,\n\t\t    \"2018-05-21T21:35:00.000Z\": 437.705910306,\n\t\t    \"2018-05-21T21:40:00.000Z\": 444.7406900386,\n\t\t    \"2018-05-21T21:45:00.000Z\": 444.7406900386,\n\t\t    \"2018-05-21T21:50:00.000Z\": 444.7406900386,\n\t\t    \"2018-05-21T21:55:00.000Z\": 446.8817343734,\n\t\t    \"2018-05-21T22:00:00.000Z\": 479.1812759532,\n\t\t    \"2018-05-21T22:05:00.000Z\": 494.0129034979,\n\t\t    \"2018-05-21T22:10:00.000Z\": 494.0129034979,\n\t\t    \"2018-05-21T22:15:00.000Z\": 494.0129034979,\n\t\t    \"2018-05-21T22:20:00.000Z\": 493.9524455006,\n\t\t    \"2018-05-21T22:25:00.000Z\": 493.359988166,\n\t\t    \"2018-05-21T22:30:00.000Z\": 493.359988166,\n\t\t    \"2018-05-21T22:35:00.000Z\": 493.359988166,\n\t\t    \"2018-05-21T22:40:00.000Z\": 491.1750539975,\n\t\t    \"2018-05-21T22:45:00.000Z\": 504.8341136121,\n\t\t    \"2018-05-21T22:50:00.000Z\": 493.9287205821,\n\t\t    \"2018-05-21T22:55:00.000Z\": 491.6038238659,\n\t\t    \"2018-05-21T23:00:00.000Z\": 491.6038238659,\n\t\t    \"2018-05-21T23:05:00.000Z\": 491.6038238659,\n\t\t    \"2018-05-21T23:10:00.000Z\": 484.8400723637,\n\t\t    \"2018-05-21T23:15:00.000Z\": 512.319590103,\n\t\t    \"2018-05-21T23:20:00.000Z\": 522.5079079034,\n\t\t    \"2018-05-21T23:25:00.000Z\": 513.3726179658,\n\t\t    \"2018-05-21T23:30:00.000Z\": 495.1352226769,\n\t\t    \"2018-05-21T23:35:00.000Z\": 494.603490148,\n\t\t    \"2018-05-21T23:40:00.000Z\": 515.8115149898,\n\t\t    \"2018-05-21T23:45:00.000Z\": 484.6820247073,\n\t\t    \"2018-05-21T23:50:00.000Z\": 525.6103420864,\n\t\t    \"2018-05-21T23:55:00.000Z\": 501.1602006617,\n\t\t    \"2018-05-22T00:00:00.000Z\": 504.2788452297,\n\t\t    \"2018-05-22T00:05:00.000Z\": 505.5064058996,\n\t\t    \"2018-05-22T00:10:00.000Z\": 485.7753213796,\n\t\t    \"2018-05-22T00:15:00.000Z\": 511.6374179715,\n\t\t    \"2018-05-22T00:20:00.000Z\": 527.1748266196,\n\t\t    \"2018-05-22T00:25:00.000Z\": 536.5379901804,\n\t\t    \"2018-05-22T00:30:00.000Z\": 501.7113581466,\n\t\t    \"2018-05-22T00:35:00.000Z\": 501.7113581466,\n\t\t    \"2018-05-22T00:40:00.000Z\": 522.7611244546,\n\t\t    \"2018-05-22T00:45:00.000Z\": 532.1593391259,\n\t\t    \"2018-05-22T00:50:00.000Z\": 524.0499676244,\n\t\t    \"2018-05-22T00:55:00.000Z\": 524.0499676244,\n\t\t    \"2018-05-22T01:00:00.000Z\": 524.0499676244,\n\t\t    \"2018-05-22T01:05:00.000Z\": 496.239238586,\n\t\t    \"2018-05-22T01:10:00.000Z\": 489.727008787,\n\t\t    \"2018-05-22T01:15:00.000Z\": 529.7387061686,\n\t\t    \"2018-05-22T01:20:00.000Z\": 537.9505438949,\n\t\t    \"2018-05-22T01:25:00.000Z\": 534.4230765009,\n\t\t    \"2018-05-22T01:30:00.000Z\": 524.7928099601,\n\t\t    \"2018-05-22T01:35:00.000Z\": 488.6585979712,\n\t\t    \"2018-05-22T01:40:00.000Z\": 488.6585979712,\n\t\t    \"2018-05-22T01:45:00.000Z\": 471.9358387388,\n\t\t    \"2018-05-22T01:50:00.000Z\": 489.4998299406,\n\t\t    \"2018-05-22T01:55:00.000Z\": 511.6537987996,\n\t\t    \"2018-05-22T02:00:00.000Z\": 521.1381499457,\n\t\t    \"2018-05-22T02:05:00.000Z\": 521.1381499457,\n\t\t    \"2018-05-22T02:10:00.000Z\": 504.8502912493,\n\t\t    \"2018-05-22T02:15:00.000Z\": 471.6253815145,\n\t\t    \"2018-05-22T02:20:00.000Z\": 488.9618380566,\n\t\t    \"2018-05-22T02:25:00.000Z\": 488.9618380566,\n\t\t    \"2018-05-22T02:30:00.000Z\": 547.7901741123,\n\t\t    \"2018-05-22T02:35:00.000Z\": 544.7284669854,\n\t\t    \"2018-05-22T02:40:00.000Z\": 543.5940689264,\n\t\t    \"2018-05-22T02:45:00.000Z\": 592.4412744329,\n\t\t    \"2018-05-22T02:50:00.000Z\": 582.6048458083,\n\t\t    \"2018-05-22T02:55:00.000Z\": 563.0026616145,\n\t\t    \"2018-05-22T03:00:00.000Z\": 563.0026616145,\n\t\t    \"2018-05-22T03:05:00.000Z\": 563.0026616145,\n\t\t    \"2018-05-22T03:10:00.000Z\": 577.0223491403,\n\t\t    \"2018-05-22T03:15:00.000Z\": 535.8887273705,\n\t\t    \"2018-05-22T03:20:00.000Z\": 535.8887273705,\n\t\t    \"2018-05-22T03:25:00.000Z\": 542.5564176303,\n\t\t    \"2018-05-22T03:30:00.000Z\": 549.0679006785,\n\t\t    \"2018-05-22T03:35:00.000Z\": 534.2816266737,\n\t\t    \"2018-05-22T03:40:00.000Z\": 513.0736018318,\n\t\t    \"2018-05-22T03:45:00.000Z\": 500.3822113333,\n\t\t    \"2018-05-22T03:50:00.000Z\": 505.562778545,\n\t\t    \"2018-05-22T03:55:00.000Z\": 505.562778545,\n\t\t    \"2018-05-22T04:00:00.000Z\": 542.5920441919,\n\t\t    \"2018-05-22T04:05:00.000Z\": 502.6354289167,\n\t\t    \"2018-05-22T04:10:00.000Z\": 478.0232896967\n\t}\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"scores\": DataType.Series, \"threshold\": DataType.Float},\n    outputs={\"alerts\": DataType.Series},\n    name=\"Alerts from Score\",\n    description=\"Generate a Series indicating starts and ends of anomalous situations\",\n    category=\"Anomaly Detection\",\n    version_tag=\"1.0.0\",\n    id=\"38f168ef-cb06-d89c-79b3-0cd823f32e9d\",\n    revision_group_id=\"38f168ef-cb06-d89c-79b3-0cd823f32e9d\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.236535+00:00\"\n)\ndef main(*, scores, threshold):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    alerts = (scores > threshold).astype(int).diff(1).fillna(0)\n    alerts.name = \"alerts\"\n\n    return {\"alerts\": alerts}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "3110e5f9-9ef5-7db7-a857-a6c701086527",
          "name": "scores",
          "data_type": "SERIES"
        },
        {
          "id": "d3d0b592-a24f-991d-2731-0531d5479e7f",
          "name": "threshold",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "f63a12d8-81d2-6701-20ce-948575f7b012",
          "name": "alerts",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "0c3c74d0-89b6-1948-fedd-753eaa47ca0e",
    "revision_group_id": "0c3c74d0-89b6-1948-fedd-753eaa47ca0e",
    "name": "Simple Volatility Score",
    "description": "Compare absolute of sum of differences with sum of absolute differences",
    "category": "Anomaly Detection",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:29.201868+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Simple Volatility Score\n\n## Description\nCompare absolute of sum of differences with sum of absolute differences.\n\n## Inputs\n* **timeseries** (Pandas Series): Should have a datetime index and float values.\n* **window_size** (String): The size of rolling windows in form \"2h\" or \"30min\".\n* **window_timestamp_location** (String): One of \"left\", \"right\" or \"center\". For \"center\" to work properly **window_size** must be divisible by 2 (e.g. \"2h\" or \"30min\").\n\n## Outputs\n* **volatilities** (Pandas Series): The resulting series of volatility scores.\n\n## Details\nTries to measure volatility in a time series. Works by comparing sum of absolute\ndifferences to the absolute value of the sum of differences on moving windows.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"windom_timestamp_location\": \"center\",\n\t\"window_size\": \"4h\",\n\t\"timeseries\": {\n\t\t    \"2018-05-19T22:20:00.000Z\": 156.8181818182,\n\t\t    \"2018-05-19T22:25:00.000Z\": 152.7272727273,\n\t\t    \"2018-05-19T22:30:00.000Z\": 166.4545454545,\n\t\t    \"2018-05-19T22:35:00.000Z\": 172.3,\n\t\t    \"2018-05-19T22:40:00.000Z\": 160.7272727273,\n\t\t    \"2018-05-19T22:45:00.000Z\": 150.1,\n\t\t    \"2018-05-19T22:50:00.000Z\": 153.3636363636,\n\t\t    \"2018-05-19T22:55:00.000Z\": 170.2727272727,\n\t\t    \"2018-05-19T23:00:00.000Z\": 170.0,\n\t\t    \"2018-05-19T23:05:00.000Z\": 159.0,\n\t\t    \"2018-05-19T23:10:00.000Z\": 152.1818181818,\n\t\t    \"2018-05-19T23:15:00.000Z\": 163.5454545455,\n\t\t    \"2018-05-19T23:20:00.000Z\": 170.0,\n\t\t    \"2018-05-19T23:25:00.000Z\": 159.6363636364,\n\t\t    \"2018-05-19T23:30:00.000Z\": 149.7,\n\t\t    \"2018-05-19T23:35:00.000Z\": 153.1818181818,\n\t\t    \"2018-05-19T23:40:00.000Z\": 169.8181818182,\n\t\t    \"2018-05-19T23:45:00.000Z\": 167.5454545455,\n\t\t    \"2018-05-19T23:50:00.000Z\": 154.9090909091,\n\t\t    \"2018-05-19T23:55:00.000Z\": 148.0,\n\t\t    \"2018-05-20T00:00:00.000Z\": 158.0909090909,\n\t\t    \"2018-05-20T00:05:00.000Z\": 169.2727272727,\n\t\t    \"2018-05-20T00:10:00.000Z\": 160.9090909091,\n\t\t    \"2018-05-20T00:15:00.000Z\": 148.9090909091,\n\t\t    \"2018-05-20T00:20:00.000Z\": 144.7272727273,\n\t\t    \"2018-05-20T00:25:00.000Z\": 155.8181818182,\n\t\t    \"2018-05-20T00:30:00.000Z\": 163.1,\n\t\t    \"2018-05-20T00:35:00.000Z\": 152.9090909091,\n\t\t    \"2018-05-20T00:40:00.000Z\": 143.0909090909,\n\t\t    \"2018-05-20T00:45:00.000Z\": 131.5454545455,\n\t\t    \"2018-05-20T00:50:00.000Z\": 148.4545454545,\n\t\t    \"2018-05-20T00:55:00.000Z\": 155.3636363636,\n\t\t    \"2018-05-20T01:00:00.000Z\": 146.6363636364,\n\t\t    \"2018-05-20T01:05:00.000Z\": 127.4545454545,\n\t\t    \"2018-05-20T01:10:00.000Z\": 119.3636363636,\n\t\t    \"2018-05-20T01:15:00.000Z\": 134.8181818182,\n\t\t    \"2018-05-20T01:20:00.000Z\": 149.2727272727,\n\t\t    \"2018-05-20T01:25:00.000Z\": 145.0,\n\t\t    \"2018-05-20T01:30:00.000Z\": 127.0909090909,\n\t\t    \"2018-05-20T01:35:00.000Z\": 118.0909090909,\n\t\t    \"2018-05-20T01:40:00.000Z\": 127.8,\n\t\t    \"2018-05-20T01:45:00.000Z\": 149.4545454545,\n\t\t    \"2018-05-20T01:50:00.000Z\": 148.2727272727,\n\t\t    \"2018-05-20T01:55:00.000Z\": 134.2727272727,\n\t\t    \"2018-05-20T02:00:00.000Z\": 117.0,\n\t\t    \"2018-05-20T02:05:00.000Z\": 117.3636363636,\n\t\t    \"2018-05-20T02:10:00.000Z\": 146.6363636364,\n\t\t    \"2018-05-20T02:15:00.000Z\": 147.7272727273,\n\t\t    \"2018-05-20T02:20:00.000Z\": 134.0,\n\t\t    \"2018-05-20T02:25:00.000Z\": 114.0909090909,\n\t\t    \"2018-05-20T02:30:00.000Z\": 112.2727272727,\n\t\t    \"2018-05-20T02:35:00.000Z\": 132.0,\n\t\t    \"2018-05-20T02:40:00.000Z\": 147.5454545455,\n\t\t    \"2018-05-20T02:45:00.000Z\": 129.8181818182,\n\t\t    \"2018-05-20T02:50:00.000Z\": 108.5454545455,\n\t\t    \"2018-05-20T02:55:00.000Z\": 101.8181818182,\n\t\t    \"2018-05-20T03:00:00.000Z\": 103.0909090909,\n\t\t    \"2018-05-20T03:05:00.000Z\": 128.0909090909,\n\t\t    \"2018-05-20T03:10:00.000Z\": 141.4,\n\t\t    \"2018-05-20T03:15:00.000Z\": 113.3636363636,\n\t\t    \"2018-05-20T03:20:00.000Z\": 106.8181818182,\n\t\t    \"2018-05-20T03:25:00.000Z\": 99.4545454545,\n\t\t    \"2018-05-20T03:30:00.000Z\": 97.2727272727,\n\t\t    \"2018-05-20T03:35:00.000Z\": 114.0,\n\t\t    \"2018-05-20T03:40:00.000Z\": 135.4545454545,\n\t\t    \"2018-05-20T03:45:00.000Z\": 110.0,\n\t\t    \"2018-05-20T03:50:00.000Z\": 103.3636363636,\n\t\t    \"2018-05-20T03:55:00.000Z\": 96.0909090909,\n\t\t    \"2018-05-20T04:00:00.000Z\": 89.6363636364,\n\t\t    \"2018-05-20T04:05:00.000Z\": 93.0909090909,\n\t\t    \"2018-05-20T04:10:00.000Z\": 106.9090909091,\n\t\t    \"2018-05-20T04:15:00.000Z\": 108.2727272727,\n\t\t    \"2018-05-20T04:20:00.000Z\": 102.0909090909,\n\t\t    \"2018-05-20T04:25:00.000Z\": 90.3636363636,\n\t\t    \"2018-05-20T04:30:00.000Z\": 81.3636363636,\n\t\t    \"2018-05-20T04:35:00.000Z\": 78.7272727273,\n\t\t    \"2018-05-20T04:40:00.000Z\": 75.6363636364,\n\t\t    \"2018-05-20T04:45:00.000Z\": 89.3636363636,\n\t\t    \"2018-05-20T04:50:00.000Z\": 103.4545454545,\n\t\t    \"2018-05-20T04:55:00.000Z\": 97.4545454545,\n\t\t    \"2018-05-20T05:00:00.000Z\": 91.6,\n\t\t    \"2018-05-20T05:05:00.000Z\": 80.5454545455,\n\t\t    \"2018-05-20T05:10:00.000Z\": 74.9090909091,\n\t\t    \"2018-05-20T05:15:00.000Z\": 74.1818181818,\n\t\t    \"2018-05-20T05:20:00.000Z\": 74.0,\n\t\t    \"2018-05-20T05:25:00.000Z\": 89.0909090909,\n\t\t    \"2018-05-20T05:30:00.000Z\": 104.0909090909,\n\t\t    \"2018-05-20T05:35:00.000Z\": 100.1818181818,\n\t\t    \"2018-05-20T05:40:00.000Z\": 91.0909090909,\n\t\t    \"2018-05-20T05:45:00.000Z\": 79.6363636364,\n\t\t    \"2018-05-20T05:50:00.000Z\": 120.4545454545,\n\t\t    \"2018-05-20T05:55:00.000Z\": 182.3636363636,\n\t\t    \"2018-05-20T06:00:00.000Z\": 209.1818181818,\n\t\t    \"2018-05-20T06:05:00.000Z\": 167.2727272727,\n\t\t    \"2018-05-20T06:10:00.000Z\": 94.2727272727,\n\t\t    \"2018-05-20T06:15:00.000Z\": 103.9,\n\t\t    \"2018-05-20T06:20:00.000Z\": 96.8181818182,\n\t\t    \"2018-05-20T06:25:00.000Z\": 107.2727272727,\n\t\t    \"2018-05-20T06:30:00.000Z\": 175.1818181818,\n\t\t    \"2018-05-20T06:35:00.000Z\": 224.3636363636,\n\t\t    \"2018-05-20T06:40:00.000Z\": 237.2727272727,\n\t\t    \"2018-05-20T06:45:00.000Z\": 245.7272727273,\n\t\t    \"2018-05-20T06:50:00.000Z\": 230.6363636364,\n\t\t    \"2018-05-20T06:55:00.000Z\": 98.1818181818,\n\t\t    \"2018-05-20T07:00:00.000Z\": 78.7272727273,\n\t\t    \"2018-05-20T07:05:00.000Z\": 70.9090909091,\n\t\t    \"2018-05-20T07:10:00.000Z\": 129.1818181818,\n\t\t    \"2018-05-20T07:15:00.000Z\": 159.4545454545,\n\t\t    \"2018-05-20T07:20:00.000Z\": 220.0,\n\t\t    \"2018-05-20T07:25:00.000Z\": 247.1818181818,\n\t\t    \"2018-05-20T07:30:00.000Z\": 254.0,\n\t\t    \"2018-05-20T07:35:00.000Z\": 258.3,\n\t\t    \"2018-05-20T07:40:00.000Z\": 187.1818181818,\n\t\t    \"2018-05-20T07:45:00.000Z\": 100.9090909091,\n\t\t    \"2018-05-20T07:50:00.000Z\": 97.0909090909,\n\t\t    \"2018-05-20T07:55:00.000Z\": 143.2727272727,\n\t\t    \"2018-05-20T08:00:00.000Z\": 212.6363636364,\n\t\t    \"2018-05-20T08:05:00.000Z\": 249.0,\n\t\t    \"2018-05-20T08:10:00.000Z\": 257.1818181818,\n\t\t    \"2018-05-20T08:15:00.000Z\": 259.0,\n\t\t    \"2018-05-20T08:20:00.000Z\": 262.8181818182,\n\t\t    \"2018-05-20T08:25:00.000Z\": 216.8181818182,\n\t\t    \"2018-05-20T08:30:00.000Z\": 103.0909090909,\n\t\t    \"2018-05-20T08:35:00.000Z\": 103.9090909091,\n\t\t    \"2018-05-20T08:40:00.000Z\": 118.2727272727,\n\t\t    \"2018-05-20T08:45:00.000Z\": 229.3636363636,\n\t\t    \"2018-05-20T08:50:00.000Z\": 252.7272727273,\n\t\t    \"2018-05-20T08:55:00.000Z\": 259.6363636364,\n\t\t    \"2018-05-20T09:00:00.000Z\": 254.0,\n\t\t    \"2018-05-20T09:05:00.000Z\": 250.1818181818,\n\t\t    \"2018-05-20T09:10:00.000Z\": 228.8181818182,\n\t\t    \"2018-05-20T09:15:00.000Z\": 98.6363636364,\n\t\t    \"2018-05-20T09:20:00.000Z\": 100.1818181818,\n\t\t    \"2018-05-20T09:25:00.000Z\": 134.7272727273,\n\t\t    \"2018-05-20T09:30:00.000Z\": 232.0909090909,\n\t\t    \"2018-05-20T09:35:00.000Z\": 252.0909090909,\n\t\t    \"2018-05-20T09:40:00.000Z\": 260.0,\n\t\t    \"2018-05-20T09:45:00.000Z\": 262.0909090909,\n\t\t    \"2018-05-20T09:50:00.000Z\": 255.8181818182,\n\t\t    \"2018-05-20T09:55:00.000Z\": 104.6363636364,\n\t\t    \"2018-05-20T10:00:00.000Z\": 101.4545454545,\n\t\t    \"2018-05-20T10:05:00.000Z\": 93.5454545455,\n\t\t    \"2018-05-20T10:10:00.000Z\": 161.5454545455,\n\t\t    \"2018-05-20T10:15:00.000Z\": 235.1818181818,\n\t\t    \"2018-05-20T10:20:00.000Z\": 245.0909090909,\n\t\t    \"2018-05-20T10:25:00.000Z\": 173.0,\n\t\t    \"2018-05-20T10:30:00.000Z\": 105.7272727273,\n\t\t    \"2018-05-20T10:35:00.000Z\": 108.7272727273,\n\t\t    \"2018-05-20T10:40:00.000Z\": 105.4545454545,\n\t\t    \"2018-05-20T10:45:00.000Z\": 100.0,\n\t\t    \"2018-05-20T10:50:00.000Z\": 91.7272727273,\n\t\t    \"2018-05-20T10:55:00.000Z\": 103.0909090909,\n\t\t    \"2018-05-20T11:00:00.000Z\": 114.2727272727,\n\t\t    \"2018-05-20T11:05:00.000Z\": 113.6363636364,\n\t\t    \"2018-05-20T11:10:00.000Z\": 113.2727272727,\n\t\t    \"2018-05-20T11:15:00.000Z\": 104.6363636364,\n\t\t    \"2018-05-20T11:20:00.000Z\": 128.2727272727,\n\t\t    \"2018-05-20T11:25:00.000Z\": 154.9090909091,\n\t\t    \"2018-05-20T11:30:00.000Z\": 150.5454545455,\n\t\t    \"2018-05-20T11:35:00.000Z\": 146.7272727273,\n\t\t    \"2018-05-20T11:40:00.000Z\": 156.1818181818,\n\t\t    \"2018-05-20T11:45:00.000Z\": 166.8181818182,\n\t\t    \"2018-05-20T11:50:00.000Z\": 162.3636363636,\n\t\t    \"2018-05-20T11:55:00.000Z\": 158.4545454545,\n\t\t    \"2018-05-20T12:00:00.000Z\": 170.7272727273,\n\t\t    \"2018-05-20T12:05:00.000Z\": 184.5454545455,\n\t\t    \"2018-05-20T12:10:00.000Z\": 178.9090909091,\n\t\t    \"2018-05-20T12:15:00.000Z\": 175.4545454545,\n\t\t    \"2018-05-20T12:20:00.000Z\": 189.4545454545,\n\t\t    \"2018-05-20T12:25:00.000Z\": 195.4545454545,\n\t\t    \"2018-05-20T12:30:00.000Z\": 185.0,\n\t\t    \"2018-05-20T12:35:00.000Z\": 183.5454545455,\n\t\t    \"2018-05-20T12:40:00.000Z\": 198.5454545455,\n\t\t    \"2018-05-20T12:45:00.000Z\": 198.9090909091,\n\t\t    \"2018-05-20T12:50:00.000Z\": 187.6363636364,\n\t\t    \"2018-05-20T12:55:00.000Z\": 195.6363636364,\n\t\t    \"2018-05-20T13:00:00.000Z\": 204.2727272727,\n\t\t    \"2018-05-20T13:05:00.000Z\": 196.3636363636,\n\t\t    \"2018-05-20T13:10:00.000Z\": 194.7272727273,\n\t\t    \"2018-05-20T13:15:00.000Z\": 209.0909090909,\n\t\t    \"2018-05-20T13:20:00.000Z\": 210.5454545455,\n\t\t    \"2018-05-20T13:25:00.000Z\": 196.2727272727,\n\t\t    \"2018-05-20T13:30:00.000Z\": 200.9090909091,\n\t\t    \"2018-05-20T13:35:00.000Z\": 212.2727272727,\n\t\t    \"2018-05-20T13:40:00.000Z\": 205.7272727273,\n\t\t    \"2018-05-20T13:45:00.000Z\": 199.5454545455,\n\t\t    \"2018-05-20T13:50:00.000Z\": 210.1818181818,\n\t\t    \"2018-05-20T13:55:00.000Z\": 211.0909090909,\n\t\t    \"2018-05-20T14:00:00.000Z\": 196.7272727273,\n\t\t    \"2018-05-20T14:05:00.000Z\": 199.0909090909,\n\t\t    \"2018-05-20T14:10:00.000Z\": 209.4545454545,\n\t\t    \"2018-05-20T14:15:00.000Z\": 200.5454545455,\n\t\t    \"2018-05-20T14:20:00.000Z\": 191.0909090909,\n\t\t    \"2018-05-20T14:25:00.000Z\": 203.5454545455,\n\t\t    \"2018-05-20T14:30:00.000Z\": 209.4545454545,\n\t\t    \"2018-05-20T14:35:00.000Z\": 197.3636363636,\n\t\t    \"2018-05-20T14:40:00.000Z\": 196.2727272727,\n\t\t    \"2018-05-20T14:45:00.000Z\": 209.0,\n\t\t    \"2018-05-20T14:50:00.000Z\": 208.9090909091,\n\t\t    \"2018-05-20T14:55:00.000Z\": 196.5454545455,\n\t\t    \"2018-05-20T15:00:00.000Z\": 200.5454545455,\n\t\t    \"2018-05-20T15:05:00.000Z\": 209.0909090909,\n\t\t    \"2018-05-20T15:10:00.000Z\": 197.6363636364,\n\t\t    \"2018-05-20T15:15:00.000Z\": 186.8181818182,\n\t\t    \"2018-05-20T15:20:00.000Z\": 198.6,\n\t\t    \"2018-05-20T15:25:00.000Z\": 202.9090909091,\n\t\t    \"2018-05-20T15:30:00.000Z\": 190.2727272727,\n\t\t    \"2018-05-20T15:35:00.000Z\": 186.0,\n\t\t    \"2018-05-20T15:40:00.000Z\": 199.3636363636,\n\t\t    \"2018-05-20T15:45:00.000Z\": 198.7272727273,\n\t\t    \"2018-05-20T15:50:00.000Z\": 185.2727272727,\n\t\t    \"2018-05-20T15:55:00.000Z\": 190.6363636364,\n\t\t    \"2018-05-20T16:00:00.000Z\": 205.0,\n\t\t    \"2018-05-20T16:05:00.000Z\": 197.9090909091,\n\t\t    \"2018-05-20T16:10:00.000Z\": 183.6363636364,\n\t\t    \"2018-05-20T16:15:00.000Z\": 184.5454545455,\n\t\t    \"2018-05-20T16:20:00.000Z\": 196.4545454545,\n\t\t    \"2018-05-20T16:25:00.000Z\": 188.1818181818,\n\t\t    \"2018-05-20T16:30:00.000Z\": 175.6363636364,\n\t\t    \"2018-05-20T16:35:00.000Z\": 180.0,\n\t\t    \"2018-05-20T16:40:00.000Z\": 190.9090909091,\n\t\t    \"2018-05-20T16:45:00.000Z\": 183.5454545455,\n\t\t    \"2018-05-20T16:50:00.000Z\": 168.8181818182,\n\t\t    \"2018-05-20T16:55:00.000Z\": 171.5454545455,\n\t\t    \"2018-05-20T17:00:00.000Z\": 181.8181818182,\n\t\t    \"2018-05-20T17:05:00.000Z\": 175.6363636364,\n\t\t    \"2018-05-20T17:10:00.000Z\": 162.0,\n\t\t    \"2018-05-20T17:15:00.000Z\": 161.0,\n\t\t    \"2018-05-20T17:20:00.000Z\": 176.1818181818,\n\t\t    \"2018-05-20T17:25:00.000Z\": 175.6363636364,\n\t\t    \"2018-05-20T17:30:00.000Z\": 163.4,\n\t\t    \"2018-05-20T17:35:00.000Z\": 155.2727272727,\n\t\t    \"2018-05-20T17:40:00.000Z\": 166.1818181818,\n\t\t    \"2018-05-20T17:45:00.000Z\": 174.0909090909,\n\t\t    \"2018-05-20T17:50:00.000Z\": 164.3,\n\t\t    \"2018-05-20T17:55:00.000Z\": 152.9090909091,\n\t\t    \"2018-05-20T18:00:00.000Z\": 155.5454545455,\n\t\t    \"2018-05-20T18:05:00.000Z\": 169.5454545455,\n\t\t    \"2018-05-20T18:10:00.000Z\": 165.8181818182,\n\t\t    \"2018-05-20T18:15:00.000Z\": 153.9090909091,\n\t\t    \"2018-05-20T18:20:00.000Z\": 148.5454545455,\n\t\t    \"2018-05-20T18:25:00.000Z\": 157.8181818182,\n\t\t    \"2018-05-20T18:30:00.000Z\": 166.1818181818,\n\t\t    \"2018-05-20T18:35:00.000Z\": 156.6363636364,\n\t\t    \"2018-05-20T18:40:00.000Z\": 147.6363636364,\n\t\t    \"2018-05-20T18:45:00.000Z\": 145.0909090909,\n\t\t    \"2018-05-20T18:50:00.000Z\": 157.9090909091,\n\t\t    \"2018-05-20T18:55:00.000Z\": 163.6363636364,\n\t\t    \"2018-05-20T19:00:00.000Z\": 154.6363636364,\n\t\t    \"2018-05-20T19:05:00.000Z\": 145.7272727273,\n\t\t    \"2018-05-20T19:10:00.000Z\": 143.5454545455,\n\t\t    \"2018-05-20T19:15:00.000Z\": 155.5454545455,\n\t\t    \"2018-05-20T19:20:00.000Z\": 159.6363636364,\n\t\t    \"2018-05-20T19:25:00.000Z\": 152.9090909091,\n\t\t    \"2018-05-20T19:30:00.000Z\": 144.7272727273,\n\t\t    \"2018-05-20T19:35:00.000Z\": 141.8181818182,\n\t\t    \"2018-05-20T19:40:00.000Z\": 155.2727272727,\n\t\t    \"2018-05-20T19:45:00.000Z\": 157.8181818182,\n\t\t    \"2018-05-20T19:50:00.000Z\": 150.0909090909,\n\t\t    \"2018-05-20T19:55:00.000Z\": 142.0909090909,\n\t\t    \"2018-05-20T20:00:00.000Z\": 140.9090909091,\n\t\t    \"2018-05-20T20:05:00.000Z\": 153.6363636364,\n\t\t    \"2018-05-20T20:10:00.000Z\": 158.8181818182,\n\t\t    \"2018-05-20T20:15:00.000Z\": 151.6363636364,\n\t\t    \"2018-05-20T20:20:00.000Z\": 142.6363636364,\n\t\t    \"2018-05-20T20:25:00.000Z\": 125.1818181818,\n\t\t    \"2018-05-20T20:30:00.000Z\": 148.9090909091,\n\t\t    \"2018-05-20T20:35:00.000Z\": 157.8181818182,\n\t\t    \"2018-05-20T20:40:00.000Z\": 152.6363636364,\n\t\t    \"2018-05-20T20:45:00.000Z\": 141.6363636364,\n\t\t    \"2018-05-20T20:50:00.000Z\": 123.4545454545,\n\t\t    \"2018-05-20T20:55:00.000Z\": 149.9090909091,\n\t\t    \"2018-05-20T21:00:00.000Z\": 156.4545454545,\n\t\t    \"2018-05-20T21:05:00.000Z\": 151.2727272727,\n\t\t    \"2018-05-20T21:10:00.000Z\": 144.0,\n\t\t    \"2018-05-20T21:15:00.000Z\": 133.4545454545,\n\t\t    \"2018-05-20T21:20:00.000Z\": 149.7272727273,\n\t\t    \"2018-05-20T21:25:00.000Z\": 158.7272727273,\n\t\t    \"2018-05-20T21:30:00.000Z\": 151.8181818182,\n\t\t    \"2018-05-20T21:35:00.000Z\": 143.6363636364,\n\t\t    \"2018-05-20T21:40:00.000Z\": 143.0,\n\t\t    \"2018-05-20T21:45:00.000Z\": 156.7272727273,\n\t\t    \"2018-05-20T21:50:00.000Z\": 161.4545454545,\n\t\t    \"2018-05-20T21:55:00.000Z\": 152.3636363636,\n\t\t    \"2018-05-20T22:00:00.000Z\": 145.0,\n\t\t    \"2018-05-20T22:05:00.000Z\": 149.6363636364,\n\t\t    \"2018-05-20T22:10:00.000Z\": 161.6363636364,\n\t\t    \"2018-05-20T22:15:00.000Z\": 158.9090909091,\n\t\t    \"2018-05-20T22:20:00.000Z\": 148.5454545455,\n\t\t    \"2018-05-20T22:25:00.000Z\": 143.8181818182,\n\t\t    \"2018-05-20T22:30:00.000Z\": 152.7272727273,\n\t\t    \"2018-05-20T22:35:00.000Z\": 163.1818181818,\n\t\t    \"2018-05-20T22:40:00.000Z\": 158.2727272727,\n\t\t    \"2018-05-20T22:45:00.000Z\": 149.5454545455,\n\t\t    \"2018-05-20T22:50:00.000Z\": 146.6363636364,\n\t\t    \"2018-05-20T22:55:00.000Z\": 159.0909090909,\n\t\t    \"2018-05-20T23:00:00.000Z\": 167.2,\n\t\t    \"2018-05-20T23:05:00.000Z\": 159.0,\n\t\t    \"2018-05-20T23:10:00.000Z\": 150.0909090909,\n\t\t    \"2018-05-20T23:15:00.000Z\": 150.5454545455,\n\t\t    \"2018-05-20T23:20:00.000Z\": 163.6363636364,\n\t\t    \"2018-05-20T23:25:00.000Z\": 164.1818181818,\n\t\t    \"2018-05-20T23:30:00.000Z\": 154.3,\n\t\t    \"2018-05-20T23:35:00.000Z\": 145.7272727273,\n\t\t    \"2018-05-20T23:40:00.000Z\": 152.0909090909,\n\t\t    \"2018-05-20T23:45:00.000Z\": 163.9090909091,\n\t\t    \"2018-05-20T23:50:00.000Z\": 158.4545454545,\n\t\t    \"2018-05-20T23:55:00.000Z\": 148.0,\n\t\t    \"2018-05-21T00:00:00.000Z\": 144.2727272727,\n\t\t    \"2018-05-21T00:05:00.000Z\": 155.4545454545,\n\t\t    \"2018-05-21T00:10:00.000Z\": 163.3636363636,\n\t\t    \"2018-05-21T00:15:00.000Z\": 155.0909090909,\n\t\t    \"2018-05-21T00:20:00.000Z\": 145.4545454545,\n\t\t    \"2018-05-21T00:25:00.000Z\": 141.8181818182,\n\t\t    \"2018-05-21T00:30:00.000Z\": 153.5454545455,\n\t\t    \"2018-05-21T00:35:00.000Z\": 161.1,\n\t\t    \"2018-05-21T00:40:00.000Z\": 153.7272727273,\n\t\t    \"2018-05-21T00:45:00.000Z\": 144.7272727273,\n\t\t    \"2018-05-21T00:50:00.000Z\": 124.0,\n\t\t    \"2018-05-21T00:55:00.000Z\": 132.9090909091,\n\t\t    \"2018-05-21T01:00:00.000Z\": 151.9090909091,\n\t\t    \"2018-05-21T01:05:00.000Z\": 149.6363636364,\n\t\t    \"2018-05-21T01:10:00.000Z\": 135.6363636364,\n\t\t    \"2018-05-21T01:15:00.000Z\": 120.0,\n\t\t    \"2018-05-21T01:20:00.000Z\": 127.7272727273,\n\t\t    \"2018-05-21T01:25:00.000Z\": 149.0909090909,\n\t\t    \"2018-05-21T01:30:00.000Z\": 146.9090909091,\n\t\t    \"2018-05-21T01:35:00.000Z\": 128.1818181818,\n\t\t    \"2018-05-21T01:40:00.000Z\": 112.3636363636,\n\t\t    \"2018-05-21T01:45:00.000Z\": 110.9090909091,\n\t\t    \"2018-05-21T01:50:00.000Z\": 143.1818181818,\n\t\t    \"2018-05-21T01:55:00.000Z\": 147.8181818182,\n\t\t    \"2018-05-21T02:00:00.000Z\": 134.0909090909,\n\t\t    \"2018-05-21T02:05:00.000Z\": 114.0909090909,\n\t\t    \"2018-05-21T02:10:00.000Z\": 111.2727272727,\n\t\t    \"2018-05-21T02:15:00.000Z\": 126.6363636364,\n\t\t    \"2018-05-21T02:20:00.000Z\": 146.2727272727,\n\t\t    \"2018-05-21T02:25:00.000Z\": 136.0909090909,\n\t\t    \"2018-05-21T02:30:00.000Z\": 113.9,\n\t\t    \"2018-05-21T02:35:00.000Z\": 107.0909090909,\n\t\t    \"2018-05-21T02:40:00.000Z\": 105.0909090909,\n\t\t    \"2018-05-21T02:45:00.000Z\": 128.0,\n\t\t    \"2018-05-21T02:50:00.000Z\": 140.2727272727,\n\t\t    \"2018-05-21T02:55:00.000Z\": 113.2727272727,\n\t\t    \"2018-05-21T03:00:00.000Z\": 101.4545454545,\n\t\t    \"2018-05-21T03:05:00.000Z\": 92.0,\n\t\t    \"2018-05-21T03:10:00.000Z\": 93.4545454545,\n\t\t    \"2018-05-21T03:15:00.000Z\": 105.7272727273,\n\t\t    \"2018-05-21T03:20:00.000Z\": 110.5454545455,\n\t\t    \"2018-05-21T03:25:00.000Z\": 102.8181818182,\n\t\t    \"2018-05-21T03:30:00.000Z\": 94.3636363636,\n\t\t    \"2018-05-21T03:35:00.000Z\": 89.2727272727,\n\t\t    \"2018-05-21T03:40:00.000Z\": 88.3636363636,\n\t\t    \"2018-05-21T03:45:00.000Z\": 97.6363636364,\n\t\t    \"2018-05-21T03:50:00.000Z\": 107.0909090909,\n\t\t    \"2018-05-21T03:55:00.000Z\": 103.5454545455,\n\t\t    \"2018-05-21T04:00:00.000Z\": 97.2727272727,\n\t\t    \"2018-05-21T04:05:00.000Z\": 85.6363636364,\n\t\t    \"2018-05-21T04:10:00.000Z\": 78.5454545455,\n\t\t    \"2018-05-21T04:15:00.000Z\": 80.0909090909,\n\t\t    \"2018-05-21T04:20:00.000Z\": 91.2727272727,\n\t\t    \"2018-05-21T04:25:00.000Z\": 105.2727272727,\n\t\t    \"2018-05-21T04:30:00.000Z\": 104.1818181818,\n\t\t    \"2018-05-21T04:35:00.000Z\": 95.2727272727,\n\t\t    \"2018-05-21T04:40:00.000Z\": 82.1,\n\t\t    \"2018-05-21T04:45:00.000Z\": 74.0909090909,\n\t\t    \"2018-05-21T04:50:00.000Z\": 70.3636363636,\n\t\t    \"2018-05-21T04:55:00.000Z\": 71.9090909091,\n\t\t    \"2018-05-21T05:00:00.000Z\": 90.0,\n\t\t    \"2018-05-21T05:05:00.000Z\": 103.4545454545,\n\t\t    \"2018-05-21T05:10:00.000Z\": 97.9090909091,\n\t\t    \"2018-05-21T05:15:00.000Z\": 85.6363636364,\n\t\t    \"2018-05-21T05:20:00.000Z\": 74.2727272727,\n\t\t    \"2018-05-21T05:25:00.000Z\": 70.5454545455,\n\t\t    \"2018-05-21T05:30:00.000Z\": 87.5454545455,\n\t\t    \"2018-05-21T05:35:00.000Z\": 69.1818181818,\n\t\t    \"2018-05-21T05:40:00.000Z\": 75.2727272727,\n\t\t    \"2018-05-21T05:45:00.000Z\": 85.7272727273,\n\t\t    \"2018-05-21T05:50:00.000Z\": 79.4545454545,\n\t\t    \"2018-05-21T05:55:00.000Z\": 72.4545454545,\n\t\t    \"2018-05-21T06:00:00.000Z\": 68.4545454545,\n\t\t    \"2018-05-21T06:05:00.000Z\": 73.3636363636,\n\t\t    \"2018-05-21T06:10:00.000Z\": 190.7272727273,\n\t\t    \"2018-05-21T06:15:00.000Z\": 219.7272727273,\n\t\t    \"2018-05-21T06:20:00.000Z\": 214.7272727273,\n\t\t    \"2018-05-21T06:25:00.000Z\": 116.4545454545,\n\t\t    \"2018-05-21T06:30:00.000Z\": 102.2727272727,\n\t\t    \"2018-05-21T06:35:00.000Z\": 98.4545454545,\n\t\t    \"2018-05-21T06:40:00.000Z\": 85.4545454545,\n\t\t    \"2018-05-21T06:45:00.000Z\": 89.7272727273,\n\t\t    \"2018-05-21T06:50:00.000Z\": 204.4545454545,\n\t\t    \"2018-05-21T06:55:00.000Z\": 232.7272727273,\n\t\t    \"2018-05-21T07:00:00.000Z\": 247.6363636364,\n\t\t    \"2018-05-21T07:05:00.000Z\": 242.9090909091,\n\t\t    \"2018-05-21T07:10:00.000Z\": 111.5454545455,\n\t\t    \"2018-05-21T07:15:00.000Z\": 106.9090909091,\n\t\t    \"2018-05-21T07:20:00.000Z\": 100.9090909091,\n\t\t    \"2018-05-21T07:25:00.000Z\": 84.0909090909,\n\t\t    \"2018-05-21T07:30:00.000Z\": 153.1818181818,\n\t\t    \"2018-05-21T07:35:00.000Z\": 230.0909090909,\n\t\t    \"2018-05-21T07:40:00.000Z\": 245.0909090909,\n\t\t    \"2018-05-21T07:45:00.000Z\": 249.0,\n\t\t    \"2018-05-21T07:50:00.000Z\": 251.4545454545,\n\t\t    \"2018-05-21T07:55:00.000Z\": 143.9090909091,\n\t\t    \"2018-05-21T08:00:00.000Z\": 110.5454545455,\n\t\t    \"2018-05-21T08:05:00.000Z\": 101.0909090909,\n\t\t    \"2018-05-21T08:10:00.000Z\": 134.6363636364,\n\t\t    \"2018-05-21T08:15:00.000Z\": 181.8181818182,\n\t\t    \"2018-05-21T08:20:00.000Z\": 230.0909090909,\n\t\t    \"2018-05-21T08:25:00.000Z\": 241.0,\n\t\t    \"2018-05-21T08:30:00.000Z\": 248.2727272727,\n\t\t    \"2018-05-21T08:35:00.000Z\": 248.7272727273,\n\t\t    \"2018-05-21T08:40:00.000Z\": 136.2727272727,\n\t\t    \"2018-05-21T08:45:00.000Z\": 106.3636363636,\n\t\t    \"2018-05-21T08:50:00.000Z\": 98.8181818182,\n\t\t    \"2018-05-21T08:55:00.000Z\": 157.6363636364,\n\t\t    \"2018-05-21T09:00:00.000Z\": 200.4545454545,\n\t\t    \"2018-05-21T09:05:00.000Z\": 215.2727272727,\n\t\t    \"2018-05-21T09:10:00.000Z\": 237.3636363636,\n\t\t    \"2018-05-21T09:15:00.000Z\": 249.0,\n\t\t    \"2018-05-21T09:20:00.000Z\": 238.5454545455,\n\t\t    \"2018-05-21T09:25:00.000Z\": 101.5454545455,\n\t\t    \"2018-05-21T09:30:00.000Z\": 100.8181818182,\n\t\t    \"2018-05-21T09:35:00.000Z\": 116.3636363636,\n\t\t    \"2018-05-21T09:40:00.000Z\": 190.2727272727,\n\t\t    \"2018-05-21T09:45:00.000Z\": 218.7272727273,\n\t\t    \"2018-05-21T09:50:00.000Z\": 237.5454545455,\n\t\t    \"2018-05-21T09:55:00.000Z\": 244.0909090909,\n\t\t    \"2018-05-21T10:00:00.000Z\": 236.9090909091,\n\t\t    \"2018-05-21T10:05:00.000Z\": 100.3636363636,\n\t\t    \"2018-05-21T10:10:00.000Z\": 97.2727272727,\n\t\t    \"2018-05-21T10:15:00.000Z\": 92.0909090909,\n\t\t    \"2018-05-21T10:20:00.000Z\": 118.0,\n\t\t    \"2018-05-21T10:25:00.000Z\": 185.3636363636,\n\t\t    \"2018-05-21T10:30:00.000Z\": 199.1818181818,\n\t\t    \"2018-05-21T10:35:00.000Z\": 94.6363636364,\n\t\t    \"2018-05-21T10:40:00.000Z\": 102.9090909091,\n\t\t    \"2018-05-21T10:45:00.000Z\": 101.8181818182,\n\t\t    \"2018-05-21T10:50:00.000Z\": 101.0909090909,\n\t\t    \"2018-05-21T10:55:00.000Z\": 92.1818181818,\n\t\t    \"2018-05-21T11:00:00.000Z\": 92.5454545455,\n\t\t    \"2018-05-21T11:05:00.000Z\": 106.4545454545,\n\t\t    \"2018-05-21T11:10:00.000Z\": 104.0909090909,\n\t\t    \"2018-05-21T11:15:00.000Z\": 102.5454545455,\n\t\t    \"2018-05-21T11:20:00.000Z\": 99.7272727273,\n\t\t    \"2018-05-21T11:25:00.000Z\": 111.4545454545,\n\t\t    \"2018-05-21T11:30:00.000Z\": 148.2727272727,\n\t\t    \"2018-05-21T11:35:00.000Z\": 145.7,\n\t\t    \"2018-05-21T11:40:00.000Z\": 126.0,\n\t\t    \"2018-05-21T11:45:00.000Z\": 135.0,\n\t\t    \"2018-05-21T11:50:00.000Z\": 159.9090909091,\n\t\t    \"2018-05-21T11:55:00.000Z\": 162.2727272727,\n\t\t    \"2018-05-21T12:00:00.000Z\": 156.5454545455,\n\t\t    \"2018-05-21T12:05:00.000Z\": 162.1818181818,\n\t\t    \"2018-05-21T12:10:00.000Z\": 177.8181818182,\n\t\t    \"2018-05-21T12:15:00.000Z\": 178.1818181818,\n\t\t    \"2018-05-21T12:20:00.000Z\": 171.7272727273,\n\t\t    \"2018-05-21T12:25:00.000Z\": 177.0909090909,\n\t\t    \"2018-05-21T12:30:00.000Z\": 186.4545454545,\n\t\t    \"2018-05-21T12:35:00.000Z\": 181.0,\n\t\t    \"2018-05-21T12:40:00.000Z\": 178.9090909091,\n\t\t    \"2018-05-21T12:45:00.000Z\": 192.9090909091,\n\t\t    \"2018-05-21T12:50:00.000Z\": 196.4,\n\t\t    \"2018-05-21T12:55:00.000Z\": 185.9090909091,\n\t\t    \"2018-05-21T13:00:00.000Z\": 192.0909090909,\n\t\t    \"2018-05-21T13:05:00.000Z\": 203.6363636364,\n\t\t    \"2018-05-21T13:10:00.000Z\": 199.2727272727,\n\t\t    \"2018-05-21T13:15:00.000Z\": 192.2727272727,\n\t\t    \"2018-05-21T13:20:00.000Z\": 203.6363636364,\n\t\t    \"2018-05-21T13:25:00.000Z\": 204.1818181818,\n\t\t    \"2018-05-21T13:30:00.000Z\": 191.7272727273,\n\t\t    \"2018-05-21T13:35:00.000Z\": 191.2727272727,\n\t\t    \"2018-05-21T13:40:00.000Z\": 205.3636363636,\n\t\t    \"2018-05-21T13:45:00.000Z\": 203.9090909091,\n\t\t    \"2018-05-21T13:50:00.000Z\": 194.9090909091,\n\t\t    \"2018-05-21T13:55:00.000Z\": 203.8181818182,\n\t\t    \"2018-05-21T14:00:00.000Z\": 208.9090909091,\n\t\t    \"2018-05-21T14:05:00.000Z\": 196.7272727273,\n\t\t    \"2018-05-21T14:10:00.000Z\": 192.4545454545,\n\t\t    \"2018-05-21T14:15:00.000Z\": 203.3636363636,\n\t\t    \"2018-05-21T14:20:00.000Z\": 206.4545454545,\n\t\t    \"2018-05-21T14:25:00.000Z\": 198.8181818182,\n\t\t    \"2018-05-21T14:30:00.000Z\": 205.0,\n\t\t    \"2018-05-21T14:35:00.000Z\": 210.9090909091,\n\t\t    \"2018-05-21T14:40:00.000Z\": 199.1818181818,\n\t\t    \"2018-05-21T14:45:00.000Z\": 182.4545454545,\n\t\t    \"2018-05-21T14:50:00.000Z\": 170.7272727273,\n\t\t    \"2018-05-21T14:55:00.000Z\": 165.1818181818,\n\t\t    \"2018-05-21T15:00:00.000Z\": 165.0,\n\t\t    \"2018-05-21T15:05:00.000Z\": 167.0909090909,\n\t\t    \"2018-05-21T15:10:00.000Z\": 199.2727272727,\n\t\t    \"2018-05-21T15:15:00.000Z\": 244.6363636364,\n\t\t    \"2018-05-21T15:20:00.000Z\": 246.1818181818,\n\t\t    \"2018-05-21T15:25:00.000Z\": 241.9090909091,\n\t\t    \"2018-05-21T15:30:00.000Z\": 228.3636363636,\n\t\t    \"2018-05-21T15:35:00.000Z\": 205.3636363636,\n\t\t    \"2018-05-21T15:40:00.000Z\": 190.0909090909,\n\t\t    \"2018-05-21T15:45:00.000Z\": 196.5454545455,\n\t\t    \"2018-05-21T15:50:00.000Z\": 201.4545454545,\n\t\t    \"2018-05-21T15:55:00.000Z\": 190.2727272727,\n\t\t    \"2018-05-21T16:00:00.000Z\": 182.0909090909,\n\t\t    \"2018-05-21T16:05:00.000Z\": 193.0909090909,\n\t\t    \"2018-05-21T16:10:00.000Z\": 198.9090909091,\n\t\t    \"2018-05-21T16:15:00.000Z\": 187.8181818182,\n\t\t    \"2018-05-21T16:20:00.000Z\": 177.4545454545,\n\t\t    \"2018-05-21T16:25:00.000Z\": 186.4545454545,\n\t\t    \"2018-05-21T16:30:00.000Z\": 189.4545454545,\n\t\t    \"2018-05-21T16:35:00.000Z\": 177.0909090909,\n\t\t    \"2018-05-21T16:40:00.000Z\": 170.3636363636,\n\t\t    \"2018-05-21T16:45:00.000Z\": 183.1818181818,\n\t\t    \"2018-05-21T16:50:00.000Z\": 186.8181818182,\n\t\t    \"2018-05-21T16:55:00.000Z\": 177.0909090909,\n\t\t    \"2018-05-21T17:00:00.000Z\": 167.4545454545,\n\t\t    \"2018-05-21T17:05:00.000Z\": 174.5454545455,\n\t\t    \"2018-05-21T17:10:00.000Z\": 180.5454545455,\n\t\t    \"2018-05-21T17:15:00.000Z\": 171.2727272727,\n\t\t    \"2018-05-21T17:20:00.000Z\": 158.2727272727,\n\t\t    \"2018-05-21T17:25:00.000Z\": 163.9090909091,\n\t\t    \"2018-05-21T17:30:00.000Z\": 176.3636363636,\n\t\t    \"2018-05-21T17:35:00.000Z\": 169.2727272727,\n\t\t    \"2018-05-21T17:40:00.000Z\": 156.5454545455,\n\t\t    \"2018-05-21T17:45:00.000Z\": 155.6363636364,\n\t\t    \"2018-05-21T17:50:00.000Z\": 172.0,\n\t\t    \"2018-05-21T17:55:00.000Z\": 170.2727272727,\n\t\t    \"2018-05-21T18:00:00.000Z\": 157.6363636364,\n\t\t    \"2018-05-21T18:05:00.000Z\": 152.6363636364,\n\t\t    \"2018-05-21T18:10:00.000Z\": 165.7272727273,\n\t\t    \"2018-05-21T18:15:00.000Z\": 169.7272727273,\n\t\t    \"2018-05-21T18:20:00.000Z\": 158.6363636364,\n\t\t    \"2018-05-21T18:25:00.000Z\": 149.0,\n\t\t    \"2018-05-21T18:30:00.000Z\": 153.1818181818,\n\t\t    \"2018-05-21T18:35:00.000Z\": 165.8181818182,\n\t\t    \"2018-05-21T18:40:00.000Z\": 160.0909090909,\n\t\t    \"2018-05-21T18:45:00.000Z\": 148.8181818182,\n\t\t    \"2018-05-21T18:50:00.000Z\": 143.5454545455,\n\t\t    \"2018-05-21T18:55:00.000Z\": 150.4545454545,\n\t\t    \"2018-05-21T19:00:00.000Z\": 160.2727272727,\n\t\t    \"2018-05-21T19:05:00.000Z\": 153.6,\n\t\t    \"2018-05-21T19:10:00.000Z\": 145.1818181818,\n\t\t    \"2018-05-21T19:15:00.000Z\": 132.6363636364,\n\t\t    \"2018-05-21T19:20:00.000Z\": 147.4545454545,\n\t\t    \"2018-05-21T19:25:00.000Z\": 154.1818181818,\n\t\t    \"2018-05-21T19:30:00.000Z\": 148.5454545455,\n\t\t    \"2018-05-21T19:35:00.000Z\": 135.1818181818,\n\t\t    \"2018-05-21T19:40:00.000Z\": 119.0909090909,\n\t\t    \"2018-05-21T19:45:00.000Z\": 151.7272727273,\n\t\t    \"2018-05-21T19:50:00.000Z\": 160.3636363636,\n\t\t    \"2018-05-21T19:55:00.000Z\": 152.0909090909,\n\t\t    \"2018-05-21T20:00:00.000Z\": 144.5454545455,\n\t\t    \"2018-05-21T20:05:00.000Z\": 143.3636363636,\n\t\t    \"2018-05-21T20:10:00.000Z\": 157.8181818182,\n\t\t    \"2018-05-21T20:15:00.000Z\": 163.8181818182,\n\t\t    \"2018-05-21T20:20:00.000Z\": 152.7272727273,\n\t\t    \"2018-05-21T20:25:00.000Z\": 145.1818181818,\n\t\t    \"2018-05-21T20:30:00.000Z\": 145.9090909091,\n\t\t    \"2018-05-21T20:35:00.000Z\": 159.8181818182,\n\t\t    \"2018-05-21T20:40:00.000Z\": 161.5454545455,\n\t\t    \"2018-05-21T20:45:00.000Z\": 151.1818181818,\n\t\t    \"2018-05-21T20:50:00.000Z\": 143.9090909091,\n\t\t    \"2018-05-21T20:55:00.000Z\": 146.6363636364,\n\t\t    \"2018-05-21T21:00:00.000Z\": 159.1818181818,\n\t\t    \"2018-05-21T21:05:00.000Z\": 159.8181818182,\n\t\t    \"2018-05-21T21:10:00.000Z\": 150.4545454545,\n\t\t    \"2018-05-21T21:15:00.000Z\": 144.9090909091,\n\t\t    \"2018-05-21T21:20:00.000Z\": 154.1818181818,\n\t\t    \"2018-05-21T21:25:00.000Z\": 165.7272727273,\n\t\t    \"2018-05-21T21:30:00.000Z\": 158.9090909091,\n\t\t    \"2018-05-21T21:35:00.000Z\": 148.2727272727,\n\t\t    \"2018-05-21T21:40:00.000Z\": 149.1818181818,\n\t\t    \"2018-05-21T21:45:00.000Z\": 166.7,\n\t\t    \"2018-05-21T21:50:00.000Z\": 167.5454545455,\n\t\t    \"2018-05-21T21:55:00.000Z\": 157.0,\n\t\t    \"2018-05-21T22:00:00.000Z\": 153.3636363636,\n\t\t    \"2018-05-21T22:05:00.000Z\": 166.9090909091,\n\t\t    \"2018-05-21T22:10:00.000Z\": 171.3636363636,\n\t\t    \"2018-05-21T22:15:00.000Z\": 162.1,\n\t\t    \"2018-05-21T22:20:00.000Z\": 152.1818181818,\n\t\t    \"2018-05-21T22:25:00.000Z\": 161.3636363636,\n\t\t    \"2018-05-21T22:30:00.000Z\": 172.9090909091,\n\t\t    \"2018-05-21T22:35:00.000Z\": 165.4545454545,\n\t\t    \"2018-05-21T22:40:00.000Z\": 154.3636363636,\n\t\t    \"2018-05-21T22:45:00.000Z\": 160.3636363636,\n\t\t    \"2018-05-21T22:50:00.000Z\": 175.7272727273,\n\t\t    \"2018-05-21T22:55:00.000Z\": 172.9090909091,\n\t\t    \"2018-05-21T23:00:00.000Z\": 161.8181818182,\n\t\t    \"2018-05-21T23:05:00.000Z\": 160.2727272727,\n\t\t    \"2018-05-21T23:10:00.000Z\": 174.7272727273,\n\t\t    \"2018-05-21T23:15:00.000Z\": 175.1818181818,\n\t\t    \"2018-05-21T23:20:00.000Z\": 163.4545454545,\n\t\t    \"2018-05-21T23:25:00.000Z\": 158.1818181818,\n\t\t    \"2018-05-21T23:30:00.000Z\": 173.0,\n\t\t    \"2018-05-21T23:35:00.000Z\": 178.8181818182,\n\t\t    \"2018-05-21T23:40:00.000Z\": 169.4545454545,\n\t\t    \"2018-05-21T23:45:00.000Z\": 162.1818181818,\n\t\t    \"2018-05-21T23:50:00.000Z\": 174.0,\n\t\t    \"2018-05-21T23:55:00.000Z\": 179.1818181818,\n\t\t    \"2018-05-22T00:00:00.000Z\": 169.7272727273,\n\t\t    \"2018-05-22T00:05:00.000Z\": 156.6363636364,\n\t\t    \"2018-05-22T00:10:00.000Z\": 157.9,\n\t\t    \"2018-05-22T00:15:00.000Z\": 169.8181818182,\n\t\t    \"2018-05-22T00:20:00.000Z\": 164.7272727273,\n\t\t    \"2018-05-22T00:25:00.000Z\": 151.6363636364,\n\t\t    \"2018-05-22T00:30:00.000Z\": 145.5454545455,\n\t\t    \"2018-05-22T00:35:00.000Z\": 152.7272727273,\n\t\t    \"2018-05-22T00:40:00.000Z\": 165.1818181818,\n\t\t    \"2018-05-22T00:45:00.000Z\": 159.6363636364,\n\t\t    \"2018-05-22T00:50:00.000Z\": 148.2727272727,\n\t\t    \"2018-05-22T00:55:00.000Z\": 142.8181818182,\n\t\t    \"2018-05-22T01:00:00.000Z\": 151.1818181818,\n\t\t    \"2018-05-22T01:05:00.000Z\": 162.0,\n\t\t    \"2018-05-22T01:10:00.000Z\": 155.0,\n\t\t    \"2018-05-22T01:15:00.000Z\": 143.9,\n\t\t    \"2018-05-22T01:20:00.000Z\": 139.0909090909,\n\t\t    \"2018-05-22T01:25:00.000Z\": 150.4545454545,\n\t\t    \"2018-05-22T01:30:00.000Z\": 157.6363636364,\n\t\t    \"2018-05-22T01:35:00.000Z\": 149.3636363636,\n\t\t    \"2018-05-22T01:40:00.000Z\": 139.8181818182,\n\t\t    \"2018-05-22T01:45:00.000Z\": 123.2727272727,\n\t\t    \"2018-05-22T01:50:00.000Z\": 148.9090909091,\n\t\t    \"2018-05-22T01:55:00.000Z\": 154.5454545455,\n\t\t    \"2018-05-22T02:00:00.000Z\": 146.7272727273,\n\t\t    \"2018-05-22T02:05:00.000Z\": 126.7272727273,\n\t\t    \"2018-05-22T02:10:00.000Z\": 114.0,\n\t\t    \"2018-05-22T02:15:00.000Z\": 133.0,\n\t\t    \"2018-05-22T02:20:00.000Z\": 147.8181818182,\n\t\t    \"2018-05-22T02:25:00.000Z\": 138.5454545455,\n\t\t    \"2018-05-22T02:30:00.000Z\": 111.2727272727,\n\t\t    \"2018-05-22T02:35:00.000Z\": 103.4444444444,\n\t\t    \"2018-05-22T02:40:00.000Z\": 101.7272727273,\n\t\t    \"2018-05-22T02:45:00.000Z\": 120.5454545455,\n\t\t    \"2018-05-22T02:50:00.000Z\": 142.3636363636,\n\t\t    \"2018-05-22T02:55:00.000Z\": 116.7272727273,\n\t\t    \"2018-05-22T03:00:00.000Z\": 101.8181818182,\n\t\t    \"2018-05-22T03:05:00.000Z\": 93.1818181818,\n\t\t    \"2018-05-22T03:10:00.000Z\": 87.0,\n\t\t    \"2018-05-22T03:15:00.000Z\": 97.8181818182,\n\t\t    \"2018-05-22T03:20:00.000Z\": 108.6363636364,\n\t\t    \"2018-05-22T03:25:00.000Z\": 104.2727272727,\n\t\t    \"2018-05-22T03:30:00.000Z\": 96.0,\n\t\t    \"2018-05-22T03:35:00.000Z\": 86.7272727273,\n\t\t    \"2018-05-22T03:40:00.000Z\": 80.6,\n\t\t    \"2018-05-22T03:45:00.000Z\": 76.9090909091,\n\t\t    \"2018-05-22T03:50:00.000Z\": 90.0909090909,\n\t\t    \"2018-05-22T03:55:00.000Z\": 103.3636363636,\n\t\t    \"2018-05-22T04:00:00.000Z\": 101.8181818182,\n\t\t    \"2018-05-22T04:05:00.000Z\": 92.6363636364,\n\t\t    \"2018-05-22T04:10:00.000Z\": 82.0,\n\t\t    \"2018-05-22T04:15:00.000Z\": 77.7272727273,\n\t\t    \"2018-05-22T04:20:00.000Z\": 74.5,\n\t\t    \"2018-05-22T04:25:00.000Z\": 83.4166666667,\n\t\t    \"2018-05-22T04:30:00.000Z\": 102.8181818182,\n\t\t    \"2018-05-22T04:35:00.000Z\": 103.0,\n\t\t    \"2018-05-22T04:40:00.000Z\": 120.2727272727,\n\t\t    \"2018-05-22T04:45:00.000Z\": 253.0,\n\t\t    \"2018-05-22T04:50:00.000Z\": 353.75,\n\t\t    \"2018-05-22T04:55:00.000Z\": 437.3333333333,\n\t\t    \"2018-05-22T05:00:00.000Z\": 687.0909090909,\n\t\t    \"2018-05-22T05:05:00.000Z\": 816.7272727273,\n\t\t    \"2018-05-22T05:10:00.000Z\": 799.8181818182,\n\t\t    \"2018-05-22T05:15:00.000Z\": 800.7272727273,\n\t\t    \"2018-05-22T05:20:00.000Z\": 807.0909090909,\n\t\t    \"2018-05-22T05:25:00.000Z\": 811.2727272727,\n\t\t    \"2018-05-22T05:30:00.000Z\": 806.7272727273,\n\t\t    \"2018-05-22T05:35:00.000Z\": 806.4545454545,\n\t\t    \"2018-05-22T05:40:00.000Z\": 806.0,\n\t\t    \"2018-05-22T05:45:00.000Z\": 805.2727272727,\n\t\t    \"2018-05-22T05:50:00.000Z\": 802.8181818182,\n\t\t    \"2018-05-22T05:55:00.000Z\": 801.0,\n\t\t    \"2018-05-22T06:00:00.000Z\": 796.0,\n\t\t    \"2018-05-22T06:05:00.000Z\": 796.0,\n\t\t    \"2018-05-22T06:10:00.000Z\": 796.0\n    }\n}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n\ndef volatility(series, freq, stamped=\"right\"):\n    \"\"\"A simple volatility measurement\n\n    Tries to measure volatility in a time series. Works by comparing sum of absolute\n    differences to the absolute value of the sum of differences on moving windows.\n\n    series: (Pandas.Series): Should have a datetime index and float values. The series of\n        which volatility is measured.\n    freq (String): Something like \"2h\" or \"75min\". Determines the rolling window size.\n    stamped (String): One of \"left\" or \"right\" or \"center\". Determines whether the resulting volatility\n        Series is timestamped left or right of the intervals. \"center\" only works if freq\n        is explicitely divisible by 2 (i.e. freq is something like \"2h\" or \"4min\"). You can make\n        center work on a frequency of \"1h\" by switching to \"60min\" instead!\n\n    Returns: A series of volatility \"scores\"\n    \"\"\"\n    diffs = series.sort_index().diff(1)\n\n    vols = diffs.abs().rolling(freq).sum() - diffs.rolling(freq).sum().abs()\n    vols.name = \"volatilities\"\n\n    if stamped == \"left\":\n        return vols.shift(freq=freq, periods=-1)\n    elif stamped == \"right\":\n        return vols\n    elif stamped == \"center\":\n        return vols.shift(\n            freq=freq, periods=-0.5\n        )  # only works if freq is \"divisible by 2\"\n    else:\n        raise ValueError(\n            \"Only 'left' or 'right' or 'center' allowed for stamping parameter.\"\n        )\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"timeseries\": DataType.Series, \"window_size\": DataType.String, \"window_timestamp_location\": DataType.String},\n    outputs={\"volatilities\": DataType.Series},\n    name=\"Simple Volatility Score\",\n    description=\"Compare absolute of sum of differences with sum of absolute differences\",\n    category=\"Anomaly Detection\",\n    version_tag=\"1.0.0\",\n    id=\"0c3c74d0-89b6-1948-fedd-753eaa47ca0e\",\n    revision_group_id=\"0c3c74d0-89b6-1948-fedd-753eaa47ca0e\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:29.201868+00:00\"\n)\ndef main(*, timeseries, window_size, window_timestamp_location):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    return {\n        \"volatilities\": volatility(timeseries, window_size, window_timestamp_location)\n    }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1cc7c62a-0206-8ea0-ea26-05dbd6953aff",
          "name": "timeseries",
          "data_type": "SERIES"
        },
        {
          "id": "5424d11b-b9d4-07d6-81ed-66707d71e381",
          "name": "window_size",
          "data_type": "STRING"
        },
        {
          "id": "aad10ed2-5e2f-dde9-8204-782cd0d2876f",
          "name": "window_timestamp_location",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "a26e2cdb-6390-53ed-ebbf-6f2e0201a6b7",
          "name": "volatilities",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "2f8c3864-8d45-5d68-c73f-229ef43bf944",
    "revision_group_id": "2f8c3864-8d45-5d68-c73f-229ef43bf944",
    "name": "Convert Series to DataFrame",
    "description": "Convert a Series to a DataFrame with one column",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.109282+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Convert Series to DataFrame\n\n## Description\nConvert a Series to a DataFrame with one column.\n\n## Inputs\n* **input** (Pandas Series): The input Series.\n\n## Outputs\n* **output** (Pandas DataFrame): The output DataFrame with one column.\n\n## Details\nJust converts a series to a DataFrame with the series becoming the only one column of the new DataFrame.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Series},\n    outputs={\"output\": DataType.DataFrame},\n    name=\"Convert Series to DataFrame\",\n    description=\"Convert a Series to a DataFrame with one column\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"2f8c3864-8d45-5d68-c73f-229ef43bf944\",\n    revision_group_id=\"2f8c3864-8d45-5d68-c73f-229ef43bf944\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.109282+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input.to_frame()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "8fc109c3-fba1-25c4-d657-fca92afc1769",
          "name": "input",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "f1ae0ae9-f189-173b-8e3d-bec0efd3393a",
          "name": "output",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "9b160d5b-f821-4b7a-b314-b2c94e54c983",
    "revision_group_id": "30c08359-aeb2-4ce5-b1b0-c5ca253f9f23",
    "name": "Extract Attributes (Series)",
    "description": "Extract attributes from a series",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-06-27T15:54:16.543713+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Extract Attributes\n\n## Description\nExtract attributes from a series.\n\n## Inputs\n* **series** (Pandas Series): The input Series.\n\n## Outputs\n* **attributes** (Any): A dictionary containing the attributes of the series.\n\n## Details\n**Note**: It is not possible to provide a series with attributes via manual input. To add or update the attributes of a series, use the \"Add/Update Attributes (Series)\" component.\n \n**Note:** When wired to a generic REST adapter, attributes are expected to be sent base64-encoded with the key \"Data-Attributes\" in the header. To process the attributes, the adapter should be implemented accordingly.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series\": \"SERIES\",\n    },\n    \"outputs\": {\n        \"attributes\": \"ANY\",\n    },\n    \"name\": \"Extract Attributes (Series)\",\n    \"category\": \"Connectors\",\n    \"description\": \"Extract attributes from a series\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"9b160d5b-f821-4b7a-b314-b2c94e54c983\",\n    \"revision_group_id\": \"30c08359-aeb2-4ce5-b1b0-c5ca253f9f23\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-06-27T15:54:16.536240+00:00\"\n}\n\n\ndef main(*, series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    \n    return {\"attributes\": series.attrs}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "7950ddc9-c1e7-4cf7-afa4-304db0bafc0e",
          "name": "series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "62546db3-1c7d-49f3-95ae-3eb1e87ba73c",
          "name": "attributes",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "series",
          "adapter_id": "demo-adapter-python",
          "ref_id": "root.plantA.picklingUnit.influx.anomaly_score",
          "ref_id_type": "SOURCE",
          "type": "timeseries(float)",
          "filters": {
            "timestampFrom": "2022-06-27T07:56:00.000000000Z",
            "timestampTo": "2022-06-28T07:56:00.000000000Z"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "d1fb4ae5-ef27-26b8-7a58-40b7cd8412e7",
    "revision_group_id": "d1fb4ae5-ef27-26b8-7a58-40b7cd8412e7",
    "name": "Forget",
    "description": "Throw away the input",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.250876+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Forget\n\n## Description\nThis component just forgets the input data. Use it as a dead end.\n\n## Inputs\n* **input** (Any): The input.\n\n## Outputs\n\n## Details\nIf some component output is never needed and should not be exposed as a workflow output, this component can be used to just forget it.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Any},\n    outputs={},\n    name=\"Forget\",\n    description=\"Throw away the input\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"d1fb4ae5-ef27-26b8-7a58-40b7cd8412e7\",\n    revision_group_id=\"d1fb4ae5-ef27-26b8-7a58-40b7cd8412e7\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.250876+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "b7803aec-db20-6bea-970f-0566ded49a7c",
          "name": "input",
          "data_type": "ANY"
        }
      ],
      "outputs": []
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "d71a0cef-1d56-818f-a1a5-dd6bb6d50399",
    "revision_group_id": "d71a0cef-1d56-818f-a1a5-dd6bb6d50399",
    "name": "Timeseries Dataframe",
    "description": "Create and/or append to a multi-timeseries dataframe",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.924037+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "Creates (or appends to) a multi-timeseries dataframe. The result is a dataframe with 3 columns of the form:\n\n```\n{\n    \"value\": [\n        1.0,\n        1.2,\n        0.5,\n        1.9,\n        1.3,\n        0.2,\n        1.5,\n        1.7,\n        0.1\n    ],\n    \"metric\": [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"a\",\n        \"b\",\n        \"c\",\n        \"a\",\n        \"b\",\n        \"c\"\n    ],\n    \"timestamp\": [\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-01T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-02T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\",\n        \"2019-08-03T15:45:36.000Z\"\n    ]\n}\n```\n\nInput to **df_or_series** can be either such a dataframe or a series (with datetime index).",
    "content": "\n\n\nfrom hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# add your own imports here, e.g.\nimport pandas as pd\n\n#     import numpy as np\n\n\ndef generate_next_metric_name(df):\n    i = 0\n    existing_metrics = set(df[\"metric\"].unique().tolist())\n    while True:\n        name = \"metric_\" + str(i)\n        if not name in existing_metrics:\n            break\n        i = i + 1\n\n    return name\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"df_or_series\": DataType.Any, \"series_to_add\": DataType.Series},\n    outputs={\"timeseries_df\": DataType.DataFrame},\n    name=\"Timeseries Dataframe\",\n    description=\"Create and/or append to a multi-timeseries dataframe\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"d71a0cef-1d56-818f-a1a5-dd6bb6d50399\",\n    revision_group_id=\"d71a0cef-1d56-818f-a1a5-dd6bb6d50399\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.924037+00:00\"\n)\ndef main(*, df_or_series, series_to_add):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if series_to_add.name is None or series_to_add.name is None:\n        name = generate_next_metric_name(df_or_series)\n    else:\n        name = series_to_add.name\n\n    if isinstance(df_or_series, pd.DataFrame):\n        return {\n            \"timeseries_df\": pd.concat(\n                [\n                    df_or_series,\n                    pd.DataFrame(\n                        {\n                            \"timestamp\": series_to_add.index,\n                            \"value\": series_to_add.values,\n                            \"metric\": name,\n                        }\n                    ),\n                ],\n                ignore_index=True,\n            )\n        }\n    else:\n        return {\n            \"timeseries_df\": pd.concat(\n                [\n                    pd.DataFrame(\n                        {\n                            \"timestamp\": df_or_series.index,\n                            \"value\": df_or_series.values,\n                            \"metric\": df_or_series.name\n                            if df_or_series.name is not None\n                            else \"metric_0\",\n                        }\n                    ),\n                    pd.DataFrame(\n                        {\n                            \"timestamp\": series_to_add.index,\n                            \"value\": series_to_add.values,\n                            \"metric\": name,\n                        }\n                    ),\n                ],\n                ignore_index=True,\n            )\n        }\n",
    "io_interface": {
      "inputs": [
        {
          "id": "828db7a9-114e-3e6d-0ac7-3965b0ca81ff",
          "name": "df_or_series",
          "data_type": "ANY"
        },
        {
          "id": "762dcbc8-5460-c8fe-8bdf-22747f3269ff",
          "name": "series_to_add",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "37b34461-8b5e-ce1e-6f8f-2a225490e07d",
          "name": "timeseries_df",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "5372a8bb-717f-4183-a89b-94b0c8d8693a",
    "revision_group_id": "4a7450b3-c462-4c11-ab5b-faab1b3010a5",
    "name": "Add/Update Attributes (DataFrame)",
    "description": "Add attributes to a dataframe or update attributes of a dataframe",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-06-27T16:05:43.561302+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Add/Update Attributes\n\n## Description\nAdd attributes to a dataframe or update attributes of a dataframe.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): The input DataFrame.\n* **attributes** (Any): A dictionary with string keys to be added to the input DataFrame.\n\n## Outputs\n* **dataframe** (Pandas DataFrame): The input DataFrame with added attributes.\n\n## Details\nAdds attributes to a dataframe. Adding an attribute with a key, that is already included in the attributes of the dataframe, will update the corresponding value.\n\n**Note:** Selecting \"Only Output\" for the output dataframe means that it is wired to the \"direct provisioning\" adapter, which sends the data as a stream of records in the response to be displayed in the browser window, but not the attributes. To access the attributes, use the \"Extract Attributes (DataFrame)\" component.\n \n**Note:** When wired to a generic REST adapter, the attributes are sent base64-encoded with the key \"Data-Attributes\" in the header. To process the attributes, the adapter should be implemented accordingly.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"dataframe\": \"DATAFRAME\",\n        \"attributes\": \"ANY\",\n    },\n    \"outputs\": {\n        \"dataframe\": \"DATAFRAME\",\n    },\n    \"name\": \"Add/Update Attributes (DataFrame)\",\n    \"category\": \"Connectors\",\n    \"description\": \"Add attributes to a dataframe or update attributes of a dataframe\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"5372a8bb-717f-4183-a89b-94b0c8d8693a\",\n    \"revision_group_id\": \"4a7450b3-c462-4c11-ab5b-faab1b3010a5\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-06-27T16:05:43.555802+00:00\"\n}\n\n\ndef main(*, dataframe, attributes):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    dataframe.attrs.update(attributes)\n\n    return {\"dataframe\": dataframe}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "b2a9b49b-1bbd-4245-8a3b-d37758a481bc",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        },
        {
          "id": "0f1a57e6-57f8-40b0-bb1e-bedf75df56c2",
          "name": "attributes",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "012f9b19-4718-4eef-84e0-fc387e036fbf",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "dataframe",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"column1\": {\n        \"2019-08-01T15:45:36.000Z\": 1,\n        \"2019-08-02T11:33:41.000Z\": 2\n    },\n    \"column2\": {\n        \"2019-08-01T15:45:36.000Z\": 1.3,\n        \"2019-08-02T11:33:41.000Z\": 2.8\n    }\n}"
          }
        },
        {
          "workflow_input_name": "attributes",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"a\": true,\n    \"b\": 31.56\n}"
          }
        }
      ],
      "output_wirings": [
        {
          "workflow_output_name": "dataframe",
          "adapter_id": "demo-adapter-python",
          "ref_id": "root.plantA.alerts",
          "ref_id_type": "SINK",
          "type": "dataframe"
        }
      ]
    }
  },
  {
    "id": "635d23be-39b5-4665-ac1e-c8e4a001d06d",
    "revision_group_id": "48f6fd85-bebf-434f-953a-19d64b042748",
    "name": "Add/Update Attributes (Series)",
    "description": "Add attributes to a dataframe or update attributes of a series",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-06-27T16:15:36.902520+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Add/Update Attributes (Series)\n\n## Description\nAdd attributes to a series or update attributes of a series.\n\n## Inputs\n* **series** (Pandas Series): The input Series.\n* **attributes** (Any): A dictionary with string keys to be added to the input Series.\n\n## Outputs\n* **series** (Pandas Series): The input Series with added attributes.\n\n## Details\nAdds attributes to a series. Adding an attribute with a key, that is already included in the attributes of the series, will update the corresponding value.\n\n**Note:** Selecting \"Only Output\" for the output series means that it is wired to the \"direct provisioning\" adapter, which sends the data as a stream of records in the response to be displayed in the browser window, but not the attributes. To access the attributes, use the \"Extract Attributes (Series)\" component.\n \n**Note:** When wired to a generic REST adapter, the attributes are sent base64-encoded with the key \"Data-Attributes\" in the header. To process the attributes, the adapter should be implemented accordingly.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series\": \"SERIES\",\n        \"attributes\": \"ANY\",\n    },\n    \"outputs\": {\n        \"series\": \"SERIES\",\n    },\n    \"name\": \"Add/Update Attributes (Series)\",\n    \"category\": \"Connectors\",\n    \"description\": \"Add attributes to a dataframe or update attributes of a series\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"635d23be-39b5-4665-ac1e-c8e4a001d06d\",\n    \"revision_group_id\": \"48f6fd85-bebf-434f-953a-19d64b042748\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-06-27T16:15:36.895107+00:00\"\n}\n\n\ndef main(*, series, attributes):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    series.attrs.update(attributes)\n\n    return {\"series\": series}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "ebc33272-dd65-4629-a651-e2a271a1c96f",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "295fe208-15a6-4a8d-9b0d-1b3b75d0454a",
          "name": "attributes",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "2d0d724d-4aae-4874-b353-c652043b4763",
          "name": "series",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2020-01-01T01:15:27.000Z\": 42.2,\n    \"2020-01-03T08:20:03.000Z\": 18.7,\n    \"2020-01-03T08:20:04.000Z\": 25.9\n}"
          }
        },
        {
          "workflow_input_name": "attributes",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"a\": true,\n    \"b\": 31.56\n}"
          }
        }
      ],
      "output_wirings": [
        {
          "workflow_output_name": "series",
          "adapter_id": "demo-adapter-python",
          "ref_id": "root.plantA.picklingUnit.influx.anomaly_score",
          "ref_id_type": "SINK",
          "type": "timeseries(float)"
        }
      ]
    }
  },
  {
    "id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
    "revision_group_id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
    "name": "Combine as named column into DataFrame",
    "description": "Combine as named column into a DataFrame.",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.310921+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Combine as named column into DataFrame\n\n## Description\nCombine series data as named column into a DataFrame.\n\n## Inputs\n* **series_or_dataframe** (Any, expects a Pandas Series or Pandas DataFrame): The object with which to start with. If a DataFrame then the **series** is added to this as a new column.\n* **series** (Pandas Series): The series that should be added as a column to series_or_dataframe.\n* **column_name**: (String): The column name for the new column.\n\n## Outputs\n* **dataframe** (Pandas DataFrame): The combined data in a DataFrame\n\n## Details\nThis component can be used to combine two pandas Series into a DataFrame or add a pandas Series to an existing DataFrame while providing a column name for the new column.\n\nNote: If a column with that name already exists, it will be overwritten!\n\nThis works best if both have the same index. Multiple consecutive use of this component allows to combine several Series into a DataFrame.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series\": DataType.Series, \"series_or_dataframe\": DataType.Any, \"column_name\": DataType.String},\n    outputs={\"dataframe\": DataType.DataFrame},\n    name=\"Combine as named column into DataFrame\",\n    description=\"Combine as named column into a DataFrame.\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"0d08af64-3f34-cddc-354b-d6a26c3f1aab\",\n    revision_group_id=\"0d08af64-3f34-cddc-354b-d6a26c3f1aab\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.310921+00:00\"\n)\ndef main(*, series, series_or_dataframe, column_name):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    if isinstance(series_or_dataframe, pd.Series):\n        df = series_or_dataframe.to_frame()\n    elif isinstance(series_or_dataframe, pd.DataFrame):\n        df = series_or_dataframe\n    else:\n        raise TypeError(\n            \"series_or_dataframe must be a pandas Series or pandas DataFrame.\"\n        )\n\n    df[column_name] = series\n\n    return {\"dataframe\": df}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
          "name": "series_or_dataframe",
          "data_type": "ANY"
        },
        {
          "id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
          "name": "column_name",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "1946d5f8-44a8-724c-176f-16f3e49963af",
    "revision_group_id": "1946d5f8-44a8-724c-176f-16f3e49963af",
    "name": "Pass Through",
    "description": "Just outputs its input value",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.387537+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pass Through\n\n## Description\nThis component just passes data through.\n\n## Inputs\n* **input** (Any): The input.\n\n## Outputs\n* **output** (Any): The output.\n\n## Details\nThis component just passes data through. It can be used to map one dynamic workflow input to multiple component inputs.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Any},\n    outputs={\"output\": DataType.Any},\n    name=\"Pass Through\",\n    description=\"Just outputs its input value\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"1946d5f8-44a8-724c-176f-16f3e49963af\",\n    revision_group_id=\"1946d5f8-44a8-724c-176f-16f3e49963af\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.387537+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "c9439942-1907-65d2-7dc6-acfc78caaf1e",
          "name": "input",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "3d9ff219-67cb-2ad7-656d-01a3ebbecc50",
          "name": "output",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "152bc7df-708c-2ecb-1d5d-b69483fdd275",
    "revision_group_id": "152bc7df-708c-2ecb-1d5d-b69483fdd275",
    "name": "DataFrame to Series",
    "description": "Convert a DataFrame with only one column to a Series",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.063651+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# DataFrame to Series\n\n## Description\nConvert a DataFrame with only one column to a Series.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): The input DataFrame. Should have exactly one column.\n\n## Outputs\n* **output** (Pandas Series): The Series.\n\n## Details\nJust converts a DataFrame with exactly one column to a Series.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame},\n    outputs={\"series\": DataType.Series},\n    name=\"DataFrame to Series\",\n    description=\"Convert a DataFrame with only one column to a Series\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"152bc7df-708c-2ecb-1d5d-b69483fdd275\",\n    revision_group_id=\"152bc7df-708c-2ecb-1d5d-b69483fdd275\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.063651+00:00\"\n)\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"series\": dataframe.squeeze()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "f2393f97-03b5-3735-aabf-4fb4daf9ee57",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "2c40df1a-9e11-881b-5aa3-ddf83e0dd8fe",
          "name": "series",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "57eea09f-d28e-89af-4e81-2027697a3f0f",
    "revision_group_id": "57eea09f-d28e-89af-4e81-2027697a3f0f",
    "name": "Pass Through (Integer)",
    "description": "Just outputs its input value",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.843737+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pass Through (Integer)\n\n## Description\nThis component just passes data through.\n\n## Inputs\n* **input** (Integer): The input String.\n\n## Outputs\n* **output** (Integer): The output String.\n\n## Details\nThis component just passes data through. It can be used to map one dynamic workflow input to multiple component inputs.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Integer},\n    outputs={\"output\": DataType.Integer},\n    name=\"Pass Through (Integer)\",\n    description=\"Just outputs its input value\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"57eea09f-d28e-89af-4e81-2027697a3f0f\",\n    revision_group_id=\"57eea09f-d28e-89af-4e81-2027697a3f0f\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.843737+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "d7ee8fb5-c52b-431a-2a80-c11ca727d9ce",
          "name": "input",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "57043fae-046c-7dee-2f17-8e069a2dac90",
          "name": "output",
          "data_type": "INT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "8ea34104-2dd1-b4dc-8fd4-ed07bb967060",
    "revision_group_id": "8ea34104-2dd1-b4dc-8fd4-ed07bb967060",
    "name": "Pass Through (Boolean)",
    "description": "Just outputs its input value",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.706367+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pass Through (Boolean)\n\n## Description\nThis component just passes data through.\n\n## Inputs\n* **input** (Boolean): The input boolean value.\n\n## Outputs\n* **output** (Boolean): The output boolean value.\n\n## Details\nThis component just passes data through. It can be used to map one dynamic workflow input to multiple component inputs.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Boolean},\n    outputs={\"output\": DataType.Boolean},\n    name=\"Pass Through (Boolean)\",\n    description=\"Just outputs its input value\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"8ea34104-2dd1-b4dc-8fd4-ed07bb967060\",\n    revision_group_id=\"8ea34104-2dd1-b4dc-8fd4-ed07bb967060\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.706367+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "46cb9e3f-1b7a-d435-8625-303b51160fd4",
          "name": "input",
          "data_type": "BOOLEAN"
        }
      ],
      "outputs": [
        {
          "id": "20dc1d40-fd45-85ad-2271-0a534e14f084",
          "name": "output",
          "data_type": "BOOLEAN"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "816436b2-f303-48af-857c-6c4d7c7a0f4b",
    "revision_group_id": "8264ab0e-9ab2-403e-a449-e874aa729ae6",
    "name": "Extract Attributes (DataFrame)",
    "description": "Extract attributes from a dataframe",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-06-27T15:50:25.505611+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Extract Attributes\n\n## Description\nExtract attributes from a dataframe.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): The input DataFrame.\n\n## Outputs\n* **attributes** (Any): A dictionary containing the attributes of the dataframe.\n\n## Details\n**Note**: It is not possible to provide a dataframe with attributes via manual input. To add or update the attributes of a dataframe, use the \"Add/Update Attributes (DataFrame)\" component.\n \n**Note:** When wired to a generic REST adapter, attributes are expected to be sent base64-encoded with the key \"Data-Attributes\" in the header. To process the attributes, the adapter should be implemented accordingly.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"dataframe\": \"DATAFRAME\",\n    },\n    \"outputs\": {\n        \"attributes\": \"ANY\",\n    },\n    \"name\": \"Extract Attributes (DataFrame)\",\n    \"category\": \"Connectors\",\n    \"description\": \"Extract attributes from a dataframe\",\n    \"version_tag\": \"1.0.0\",\n    \"id\": \"816436b2-f303-48af-857c-6c4d7c7a0f4b\",\n    \"revision_group_id\": \"8264ab0e-9ab2-403e-a449-e874aa729ae6\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-06-27T15:50:25.503462+00:00\"\n}\n\n\ndef main(*, dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    \n    return {\"attributes\": dataframe.attrs}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "34eb1d9f-a8d5-40bd-bd7a-f66afd0f7958",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "b4dd9237-3a95-4f6c-89cc-45cb890af227",
          "name": "attributes",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "dataframe",
          "adapter_id": "demo-adapter-python",
          "ref_id": "root.plantA.maintenance_events",
          "ref_id_type": "SOURCE",
          "type": "dataframe",
          "filters": {}
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "a4064897-66d3-9601-328e-5ae9036665c5",
    "revision_group_id": "a4064897-66d3-9601-328e-5ae9036665c5",
    "name": "Name Series",
    "description": "Give a name to a series",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.594509+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Name Series\n\n## Description\nGive a name to a series.\n\n## Inputs\n* **input** (Pandas Series): The input Series.\n* **name** (String): The name for the Series.\n\n## Outputs\n* **output** (Pandas Series): The output Series.\n\n## Details\nAssigns a name to a series and passes it through. This component can be used similarly to the Pass Through (Series) component with the additional option to name the series.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Series, \"name\": DataType.String},\n    outputs={\"output\": DataType.Series},\n    name=\"Name Series\",\n    description=\"Give a name to a series\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"a4064897-66d3-9601-328e-5ae9036665c5\",\n    revision_group_id=\"a4064897-66d3-9601-328e-5ae9036665c5\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.594509+00:00\"\n)\ndef main(*, input, name):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    input.name = name\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "5336c0a5-97ac-d436-ae5f-ee75fa8c8b40",
          "name": "input",
          "data_type": "SERIES"
        },
        {
          "id": "44d0fd6a-4f72-3ec1-d5dc-4f8df7029652",
          "name": "name",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "44dc198e-d6b6-535f-f2c8-c8bae74acdf1",
          "name": "output",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "68f91351-a1f5-9959-414a-2c72003f3226",
    "revision_group_id": "68f91351-a1f5-9959-414a-2c72003f3226",
    "name": "Combine into DataFrame",
    "description": "Combine data into a DataFrame",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.436096+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Combine into DataFrame\n\n## Description\nCombine data as columns into a DataFrame.\n\n## Inputs\n* **series_or_dataframe** (Any, expects a Pandas Series or Pandas DataFrame): The object with which to start with. If a DataFrame then the **series** is added to this as a new column.\n* **series** (Pandas Series): The series that should be added as a column to **series_or_dataframe**.\n\n## Outputs\n* **dataframe** (Pandas DataFrame): The combined data in a DataFrame.\n\n## Details\nThis component can be used to combine two pandas Series into a DataFrame or add a pandas Series to an existing DataFrame. This works best if both have the same index. Multiple consecutive use of this component allows to combine several Series into a DataFrame.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\nimport pandas as pd\nimport logging\n\nlogger = logging.getLogger(__name__)\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"series\": DataType.Series, \"series_or_dataframe\": DataType.Any},\n    outputs={\"dataframe\": DataType.DataFrame},\n    name=\"Combine into DataFrame\",\n    description=\"Combine data into a DataFrame\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"68f91351-a1f5-9959-414a-2c72003f3226\",\n    revision_group_id=\"68f91351-a1f5-9959-414a-2c72003f3226\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.436096+00:00\"\n)\ndef main(*, series, series_or_dataframe):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    if isinstance(series_or_dataframe, pd.Series):\n        df = series_or_dataframe.to_frame()\n    elif isinstance(series_or_dataframe, pd.DataFrame):\n        df = series_or_dataframe\n    else:\n        raise TypeError(\n            \"series_or_dataframe must be a pandas Series or pandas DataFrame.\"\n        )\n\n    if series.name is None:\n        i = 0\n        while str(i) in df.columns or (i in df.columns):\n            i += 1\n        df[str(i)] = series\n    elif series.name in df.columns:\n        i = 1\n        while series.name + \"_\" + str(i) in df.columns:\n            i += 1\n        df[series.name + \"_\" + str(i)] = series\n    else:\n        df[series.name] = series\n\n    return {\"dataframe\": df}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
          "name": "series_or_dataframe",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
    "revision_group_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
    "name": "Pass Through (String)",
    "description": "Just outputs its input value",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.917427+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pass Through (String)\n\n## Description\nThis component just passes data through.\n\n## Inputs\n* **input** (String): The input String.\n\n## Outputs\n* **output** (String): The output String.\n\n## Details\nThis component just passes data through. It can be used to map one dynamic workflow input to multiple component inputs.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.String},\n    outputs={\"output\": DataType.String},\n    name=\"Pass Through (String)\",\n    description=\"Just outputs its input value\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"2b1b474f-ddf5-1f4d-fec4-17ef9122112b\",\n    revision_group_id=\"2b1b474f-ddf5-1f4d-fec4-17ef9122112b\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.917427+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
          "name": "input",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
          "name": "output",
          "data_type": "STRING"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "7a1a818f-fa89-6062-1e0e-fc80539bbe0a",
    "revision_group_id": "7a1a818f-fa89-6062-1e0e-fc80539bbe0a",
    "name": "Pass Through (DataFrame)",
    "description": "Just outputs its input value",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.958377+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pass Through (DataFrame)\n\n## Description\nThis component just passes data through.\n\n## Inputs\n* **input** (Pandas DataFrame): The input DataFrame.\n\n## Outputs\n* **output** (Pandas DataFrame): The output DataFrame.\n\n## Details\nThis component just passes data through. It can be used to map one dynamic workflow input to multiple component inputs. Its input is of type DATAFRAME and can therefore be used to parse dynamic input data provided during execution or to parse a fixed input attached to it correctly as a Pandas DataFrame.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.DataFrame},\n    outputs={\"output\": DataType.DataFrame},\n    name=\"Pass Through (DataFrame)\",\n    description=\"Just outputs its input value\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"7a1a818f-fa89-6062-1e0e-fc80539bbe0a\",\n    revision_group_id=\"7a1a818f-fa89-6062-1e0e-fc80539bbe0a\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.958377+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1aeda270-0edf-beb1-dd20-40c552c53604",
          "name": "input",
          "data_type": "DATAFRAME"
        }
      ],
      "outputs": [
        {
          "id": "f11d31c6-981f-8c79-1052-18da06e52d30",
          "name": "output",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "2f511674-f766-748d-2de3-ad5e62e10a1a",
    "revision_group_id": "2f511674-f766-748d-2de3-ad5e62e10a1a",
    "name": "Pass Through (Float)",
    "description": "Just outputs its input value",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.809936+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pass Through (Float)\n\n## Description\nThis component just passes data through.\n\n## Inputs\n* **input** (Float): The input float value.\n\n## Outputs\n* **output** (Float): The output float value.\n\n## Details\nThis component just passes data through. It can be used to map one dynamic workflow input to multiple component inputs.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Float},\n    outputs={\"output\": DataType.Float},\n    name=\"Pass Through (Float)\",\n    description=\"Just outputs its input value\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"2f511674-f766-748d-2de3-ad5e62e10a1a\",\n    revision_group_id=\"2f511674-f766-748d-2de3-ad5e62e10a1a\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.809936+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "c57127e7-6b84-03f8-6ef1-dcd7232bf3bf",
          "name": "input",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "9cef5ade-69f0-3cdb-4279-3d49fc9914fc",
          "name": "output",
          "data_type": "FLOAT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
    "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
    "name": "Pass Through (Series)",
    "description": "Just outputs its input value",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:34.190324+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Pass Through (Series)\n\n## Description\nThis component just passes data through.\n\n## Inputs\n* **input** (Pandas Series): The input Series.\n\n## Outputs\n* **output** (Pandas Series): The output Series.\n\n## Details\nThis component just passes data through. It can be used to map one dynamic workflow input to multiple component inputs. Its input is of type SERIES and can therefore be used to parse dynamic input data provided during execution or to parse a fixed input attached to it correctly as a Pandas Series.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"input\": DataType.Series},\n    outputs={\"output\": DataType.Series},\n    name=\"Pass Through (Series)\",\n    description=\"Just outputs its input value\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"bfa27afc-dea8-b8aa-4b15-94402f0739b6\",\n    revision_group_id=\"bfa27afc-dea8-b8aa-4b15-94402f0739b6\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:34.190324+00:00\"\n)\ndef main(*, input):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"output\": input}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "f103c395-92b6-444d-320a-93950ed6d857",
          "name": "input",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
          "name": "output",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "a573c94f-3039-1193-b068-bc496620c6ed",
    "revision_group_id": "a573c94f-3039-1193-b068-bc496620c6ed",
    "name": "Merge DataFrames on Single Column",
    "description": "Merges/Joins two dataframes on a equally named column.",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:33.993604+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Merge DataFrames on Single Column\n\n## Description\nMerges/Joins two dataframes on a equally named column.\n\n## Inputs\n* **dataframe_left** (Pandas DataFrame): The left dataframe.\n* **dataframe_right** (Pandas DataFrame): The right dataframe.\n* **column_name** (String): The name of the column to join on. Must be present in both dataframe_left and dataframe_right.\n* **how** (String): Join method (one of \"left\", \"right\", \"outer\", \"inner\")\n\n## Outputs\n* **merged_dataframe** (Pandas DataFrame): The resulting new merged DataFrame.\n\n## Details\nMerges/Joins two dataframes on a column present in both. The join method can be set using the **how** parameter.",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe_left\": DataType.DataFrame, \"dataframe_right\": DataType.DataFrame, \"column_name\": DataType.String, \"how\": DataType.String},\n    outputs={\"merged_dataframe\": DataType.DataFrame},\n    name=\"Merge DataFrames on Single Column\",\n    description=\"Merges/Joins two dataframes on a equally named column.\",\n    category=\"Connectors\",\n    version_tag=\"1.0.0\",\n    id=\"a573c94f-3039-1193-b068-bc496620c6ed\",\n    revision_group_id=\"a573c94f-3039-1193-b068-bc496620c6ed\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:33.993604+00:00\"\n)\ndef main(*, dataframe_left, dataframe_right, column_name, how):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    merged_dataframe = dataframe_left.merge(\n        dataframe_right, left_on=column_name, right_on=column_name, how=how\n    )\n\n    return {\"merged_dataframe\": merged_dataframe}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "86e2c64a-7b11-9732-9827-15e88d6a214b",
          "name": "dataframe_left",
          "data_type": "DATAFRAME"
        },
        {
          "id": "ca675bb2-34d7-52c5-bbea-abbb9f99bd70",
          "name": "dataframe_right",
          "data_type": "DATAFRAME"
        },
        {
          "id": "4ecdc9db-d3e6-d64b-f42d-24f7c57b410b",
          "name": "column_name",
          "data_type": "STRING"
        },
        {
          "id": "bee98168-9c20-99cb-b5ce-f407db8f11cd",
          "name": "how",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "4e6ca632-2ff6-0c17-3cd1-0522cc1bb867",
          "name": "merged_dataframe",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "26d99461-38a9-5e92-df4f-d0fd2752879e",
    "revision_group_id": "26d99461-38a9-5e92-df4f-d0fd2752879e",
    "name": "Store Object",
    "description": "Serialize an Object and store it in the object Repository",
    "category": "Data Sinks",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:31.590724+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Store an Object in the object Repository\n\n## Description\nSerialize an Object and store it in the object Repository.\n\n## Inputs\n* **name** (String): The name for the Object.\n* **tag** (String): The tag for the Object.\n* **obt** (Integer, Float, Pandas Series or Pandas DataFrame): The object to store. \n\n## Outputs\n\n## Description\nHetida Designer comes with a simple object store to allow serialization and persistence of Python objects between Workflows and Workflow Executions. A typical use case is storing of a trained machine learning model in a training workflow and loading it in a prediction workflow.\n\nTechnically joblib is used for serialization in order to efficiently store numpy arrays and Pandas objects.\n\nThe serialized object is stored using the name and a tag. It can be retrieved using the provided loading functionality with the same name and tag combination. Additionally there is a magic \"latest\" tag which retrieves the last stored object with that name.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\nimport hetdesrun.serialization\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"name\": DataType.String, \"tag\": DataType.String, \"obj\": DataType.Any},\n    outputs={},\n    name=\"Store Object\",\n    description=\"Serialize an Object and store it in the object Repository\",\n    category=\"Data Sinks\",\n    version_tag=\"1.0.0\",\n    id=\"26d99461-38a9-5e92-df4f-d0fd2752879e\",\n    revision_group_id=\"26d99461-38a9-5e92-df4f-d0fd2752879e\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:31.590724+00:00\"\n)\ndef main(*, name, tag, obj):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n    hetdesrun.serialization.dump_obj(obj, name, tag)\n    return {}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "2e5bffed-ec7e-2963-9078-2c3e8cba8b43",
          "name": "name",
          "data_type": "STRING"
        },
        {
          "id": "688b1939-8be0-0469-f35d-24a6fb76eb97",
          "name": "tag",
          "data_type": "STRING"
        },
        {
          "id": "71c4887d-96b2-320d-7a2b-3868a6759990",
          "name": "obj",
          "data_type": "ANY"
        }
      ],
      "outputs": []
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "41e8bf16-0a16-6021-33c9-88c2f8336df8",
    "revision_group_id": "41e8bf16-0a16-6021-33c9-88c2f8336df8",
    "name": "Predict Sklearn Trained Model",
    "description": "Predict Sklearn Trained Model",
    "category": "Models",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.826915+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Predict Sklearn Trained Model\n\n## Description\nPredict Sklearn Trained Model.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): The data on which the model is applied.\n* **trained_model** (Any): The trained sklearn model.\n\n## Outputs\n* **predictions** (Pandas Series or Pandas DataFrame): The predicted values.\n\n## Details\nCalls the predict method of the trained model on new data.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"trained_model\": DataType.Any},\n    outputs={\"predictions\": DataType.Any},\n    name=\"Predict Sklearn Trained Model\",\n    description=\"Predict Sklearn Trained Model\",\n    category=\"Models\",\n    version_tag=\"1.0.0\",\n    id=\"41e8bf16-0a16-6021-33c9-88c2f8336df8\",\n    revision_group_id=\"41e8bf16-0a16-6021-33c9-88c2f8336df8\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.826915+00:00\"\n)\ndef main(*, data, trained_model):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"predictions\": pd.DataFrame(trained_model.predict(data), index=data.index)}\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "70e3561b-2ca0-f6a4-5ce3-1c05c8c4b32e",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "a0540d21-cff0-a6f4-f88a-af5c14f43340",
          "name": "trained_model",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "15b7d9b9-7337-4c81-1337-c69cbadfbd8e",
          "name": "predictions",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "f35c4918-0a5d-d29c-f3fa-6cfcd425b0f7",
    "revision_group_id": "f35c4918-0a5d-d29c-f3fa-6cfcd425b0f7",
    "name": "Decision Function Sklearn Trained Model",
    "description": "Apply decision function of Sklearn Trained Model to new data",
    "category": "Models",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:32.747732+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Decision Function Sklearn Trained Model\n\n## Description\nApply decision function of Sklearn Trained Model to new data.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): The data on which the model is applied.\n* **trained_model** (Any): The trained sklearn model.\n\n## Outputs\n* **predictions** (Pandas Series or Pandas DataFrame): The predicted values.\n\n## Details\nCalls the decision_function method of the trained model on new data.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"trained_model\": DataType.Any},\n    outputs={\"predictions\": DataType.Any},\n    name=\"Decision Function Sklearn Trained Model\",\n    description=\"Apply decision function of Sklearn Trained Model to new data\",\n    category=\"Models\",\n    version_tag=\"1.0.0\",\n    id=\"f35c4918-0a5d-d29c-f3fa-6cfcd425b0f7\",\n    revision_group_id=\"f35c4918-0a5d-d29c-f3fa-6cfcd425b0f7\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:32.747732+00:00\"\n)\ndef main(*, data, trained_model):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\n        \"predictions\": pd.Series(\n            trained_model.decision_function(data),\n            index=data.index,\n            name=\"decision_function_values\",\n        )\n    }\n\n",
    "io_interface": {
      "inputs": [
        {
          "id": "f2d4729e-f533-38f2-6c81-cb38f879cb73",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "bbb9b693-964a-09e8-ca07-591043f12681",
          "name": "trained_model",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "a33aac16-552f-790b-7e6c-5c3a288bf462",
          "name": "predictions",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "c7dbb92b-4a4c-c6d2-6665-5ee7d4eeab91",
    "revision_group_id": "c7dbb92b-4a4c-c6d2-6665-5ee7d4eeab91",
    "name": "First Datetime Index",
    "description": "Extracts the first (minimum) datetime index",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.130699+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# First Datetime Index\n\n## Description\nExtracts the first (minimum) datetime index\n\n## Inputs\n* **timeseries_data** (Any, expects a Pandas Series or Pandas DataFrame): Must have a datetime index.\n\n## Outputs\n* **first_index** (String): The first (minimum) timestamp occuring as index is returned as isoformat timestamp string.\n\n## Details\nTakes the minimum index and returns its as string.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"timeseries_data\": {\n\t\t\t\t\"2019-08-01T15:50:12\": 0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\t\"2019-08-03T16:20:15\": null  \n\t}\n}\n```\nThe expected output is\n```\n\t\"first_index\": 2019-08-01T15:44:12+00:00\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"timeseries_data\": DataType.Any},\n    outputs={\"first_index\": DataType.String},\n    name=\"First Datetime Index\",\n    description=\"Extracts the first (minimum) datetime index\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"c7dbb92b-4a4c-c6d2-6665-5ee7d4eeab91\",\n    revision_group_id=\"c7dbb92b-4a4c-c6d2-6665-5ee7d4eeab91\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.130699+00:00\"\n)\ndef main(*, timeseries_data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if len(timeseries_data) == 0:\n        return {\"first_index\": None}\n\n    return {\"first_index\": timeseries_data.index.min().to_pydatetime().isoformat()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "b43b86c4-41c3-cac2-241b-db2356094620",
          "name": "timeseries_data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "47fbcdb5-c07c-8baf-04fb-02ea414957e0",
          "name": "first_index",
          "data_type": "STRING"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "f759e4c0-1468-0f2e-9740-41302b860193",
    "revision_group_id": "f759e4c0-1468-0f2e-9740-41302b860193",
    "name": "Greater or equal",
    "description": "Checks if left is greater than or equal to right",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.617461+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Greater or Equal\n\n## Description\nThis component checks if left is greater than or equal to right.\n\n## Inputs\n* **left** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n* **right** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **result** (Boolean, Pandas Series or Pandas DataFrame): The boolean result of the comparison.\n\n## Details\nThe component checks if left is greater than or equal to right. \n\n## Examples\nThe json input of a typical call of this component where left is a Pandas Series and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": 1.2\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\"2019-08-01T15:20:12\": true,\n\t\t\"2019-08-01T15:44:12\": false,\n\t\t\"2019-08-03T16:20:15\": false,\n\t\t\"2019-08-05T12:00:34\": false\n\t}\n```\n\nThe json input of a typical call of this component where left is a Pandas DataFrame and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 4.8,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"b\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"right\": 4.8\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\t\"2019-08-05T12:00:34\": false\n\t\t\t},\n\t\t\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\t\"2019-08-05T12:00:34\": true\n\t\t\t}\n\t\t}\n\n\n```\n\nThe json input of a typical call of this component where both left and right are Pandas Series is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": 27,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.6,\n\t\t\t\t\"2020-08-05T12:00:34\": 17,\n\t\t\t\t\"2021-08-05T12:00:34\": null       \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\"2019-08-05T12:00:34\": false,\n\t\t\t\"2020-08-05T12:00:34\": false,\n\t\t\t\"2021-08-05T12:00:34\": false\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"left\": DataType.Any, \"right\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Greater or equal\",\n    description=\"Checks if left is greater than or equal to right\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"f759e4c0-1468-0f2e-9740-41302b860193\",\n    revision_group_id=\"f759e4c0-1468-0f2e-9740-41302b860193\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.617461+00:00\"\n)\ndef main(*, left, right):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    try:\n        return {\"result\": left >= right}\n    except ValueError:\n        return {\"result\": left.ge(right)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "211c703a-891e-0dcd-a5d6-49756e02cf53",
          "name": "left",
          "data_type": "ANY"
        },
        {
          "id": "a1e4707a-d2ba-46ea-b866-627fd12bc5d0",
          "name": "right",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "6023ec09-572e-d0a9-b71c-78a85b9dac7b",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "8a7e43b9-ce04-796e-6b73-5ce67547122a",
    "revision_group_id": "8a7e43b9-ce04-796e-6b73-5ce67547122a",
    "name": "Smaller or equal",
    "description": "Checks if left is smaller than or equal to right",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.566445+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Smaller or Equal\n\n## Description\nThis component checks if left is smaller than or equal to right.\n\n## Inputs\n* **left** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n* **right** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **result** (Boolean, Pandas Series or Pandas DataFrame): The boolean result of the comparison.\n\n## Details\nThe component checks if left is smaller than or equal to right.\n\n## Examples\nThe json input of a typical call of this component where left is a Pandas Series and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": 1.2\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\"2019-08-01T15:20:12\": true,\n\t\t\"2019-08-01T15:44:12\": false,\n\t\t\"2019-08-03T16:20:15\": true,\n\t\t\"2019-08-05T12:00:34\": true\n\t}\n```\n\nThe json input of a typical call of this component where left is a Pandas DataFrame and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 4.8,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"b\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"right\": 4.8\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\t\"2019-08-05T12:00:34\": true\n\t\t\t},\n\t\t\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": false,\n\t\t\t\t\"2019-08-01T15:44:12\": true,\n\t\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\t\"2019-08-05T12:00:34\": false\n\t\t\t}\n\t\t}\n```\n\nThe json input of a typical call of this component where both left and right are Pandas Series is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": 27,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.6,\n\t\t\t\t\"2020-08-05T12:00:34\": 17,\n\t\t\t\t\"2021-08-05T12:00:34\": null       \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\"2019-08-05T12:00:34\": false,\n\t\t\t\"2020-08-05T12:00:34\": false,\n\t\t\t\"2021-08-05T12:00:34\": false\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"left\": DataType.Any, \"right\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Smaller or equal\",\n    description=\"Checks if left is smaller than or equal to right\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"8a7e43b9-ce04-796e-6b73-5ce67547122a\",\n    revision_group_id=\"8a7e43b9-ce04-796e-6b73-5ce67547122a\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.566445+00:00\"\n)\ndef main(*, left, right):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    try:\n        return {\"result\": left <= right}\n    except ValueError:\n        return {\"result\": left.le(right)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "848a21dd-e027-f27d-703e-defeeb667e7b",
          "name": "left",
          "data_type": "ANY"
        },
        {
          "id": "d4911144-ee8a-88f6-9c56-9019b1d97a9b",
          "name": "right",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "e69048fa-e602-19cd-058b-ff1491dde847",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "e6918e9e-aaaf-6f84-175a-fc2ac03ed85d",
    "revision_group_id": "e6918e9e-aaaf-6f84-175a-fc2ac03ed85d",
    "name": "Greater",
    "description": "Checks if left is greater than right",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.221351+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Greater\n\n## Description\nThis component checks if left is greater than right.\n\n## Inputs\n* **left** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n* **right** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **result** (Boolean, Pandas Series or Pandas DataFrame): The boolean result of the comparison.\n\n## Details\nThe component checks if left is greater than right.\n\n## Examples\nThe json input of a typical call of this component where left is a Pandas Series and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": 1\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\"2019-08-01T15:20:12\": true,\n\t\t\"2019-08-01T15:44:12\": false,\n\t\t\"2019-08-03T16:20:15\": false,\n\t\t\"2019-08-05T12:00:34\": false\n\t}\n```\n\nThe json input of a typical call of this component where left is a Pandas DataFrame and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"b\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"right\": 0.8\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\t\"2019-08-05T12:00:34\": false\n\t\t\t},\n\t\t\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": true,\n\t\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\t\"2019-08-05T12:00:34\": true\n\t\t\t}\n\t\t}\n\n\n```\n\nThe json input of a typical call of this component where both left and right are Pandas Series is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 27,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.6,\n\t\t\t\t\"2020-08-05T12:00:34\": 17,\n\t\t\t\t\"2021-08-05T12:00:34\": null       \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\"2019-08-05T12:00:34\": false,\n\t\t\t\"2020-08-05T12:00:34\": false,\n\t\t\t\"2021-08-05T12:00:34\": false\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"left\": DataType.Any, \"right\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Greater\",\n    description=\"Checks if left is greater than right\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"e6918e9e-aaaf-6f84-175a-fc2ac03ed85d\",\n    revision_group_id=\"e6918e9e-aaaf-6f84-175a-fc2ac03ed85d\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.221351+00:00\"\n)\ndef main(*, left, right):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    try:\n        return {\"result\": left > right}\n    except ValueError:\n        return {\"result\": left.gt(right)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "791d799b-e78f-53ce-b1e0-0f79ff260269",
          "name": "left",
          "data_type": "ANY"
        },
        {
          "id": "1422edfb-fa9c-a3cf-b846-9735f47a9ce7",
          "name": "right",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "3446dce1-6305-f454-ee2c-81b68aa33388",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "9f33cbbc-3935-e9f3-a682-99579e96a4d0",
    "revision_group_id": "9f33cbbc-3935-e9f3-a682-99579e96a4d0",
    "name": "Smaller",
    "description": "Checks if left is smaller than right",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.310140+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Smaller\n\n## Description\nThis component checks if left is smaller than right.\n\n## Inputs\n* **left** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric.\n* **right** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **result** (Boolean, Pandas Series or Pandas DataFrame): The boolean result of the comparison.\n\n## Details\nThe component checks if left is smaller than right.\n\n## Examples\nThe json input of a typical call of this component where left is a Pandas Series and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": 1\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\"2019-08-01T15:20:12\": false,\n\t\t\"2019-08-01T15:44:12\": false,\n\t\t\"2019-08-03T16:20:15\": true,\n\t\t\"2019-08-05T12:00:34\": true\n\t}\n```\n\nThe json input of a typical call of this component where left is a Pandas DataFrame and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"b\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"right\": 0.8\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": false,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\t\"2019-08-05T12:00:34\": true\n\t\t\t},\n\t\t\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": false,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\t\"2019-08-05T12:00:34\": false\n\t\t\t}\n\t\t}\n```\n\nThe json input of a typical call of this component where both left and right are Pandas Series is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 27,\n\t\t\t\t\"2019-08-03T16:20:15\": 3.6,\n\t\t\t\t\"2020-08-05T12:00:34\": 17,\n\t\t\t\t\"2021-08-05T12:00:34\": null       \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"2019-08-01T15:20:12\": false,\n\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\"2019-08-05T12:00:34\": false,\n\t\t\t\"2020-08-05T12:00:34\": false,\n\t\t\t\"2021-08-05T12:00:34\": false\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"left\": DataType.Any, \"right\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Smaller\",\n    description=\"Checks if left is smaller than right\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"9f33cbbc-3935-e9f3-a682-99579e96a4d0\",\n    revision_group_id=\"9f33cbbc-3935-e9f3-a682-99579e96a4d0\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.310140+00:00\"\n)\ndef main(*, left, right):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    try:\n        return {\"result\": left < right}\n    except ValueError:\n        return {\"result\": left.lt(right)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "6e8500dc-4913-a0a5-1bb4-33ba8dc46139",
          "name": "left",
          "data_type": "ANY"
        },
        {
          "id": "07d38fe6-da2d-84c6-6b3a-d68305a5ebc1",
          "name": "right",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "c66beab8-ecea-e4e1-9622-5336c9100ab0",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "9ccc8df5-5e68-46ff-bc2d-1fa82dae972c",
    "revision_group_id": "9ccc8df5-5e68-46ff-bc2d-1fa82dae972c",
    "name": "Equality",
    "description": "Checks if left is equal to right",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.478242+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Equality\n\n## Description\nThis component checks if left is equal to right.\n\n## Inputs\n* **left** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n* **right** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **result** (Boolean, Pandas Series or Pandas DataFrame): The boolean result of the comparison.\n\n## Details\nThe component checks if left is equal to right.\n\n## Examples\nThe json input of a typical call of this component where left is a Pandas Series and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": 1.2\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\"2019-08-01T15:20:12\": true,\n\t\t\"2019-08-01T15:44:12\": false,\n\t\t\"2019-08-03T16:20:15\": false,\n\t\t\"2019-08-05T12:00:34\": false\n\t}\n```\n\nThe json input of a typical call of this component where left is a Pandas DataFrame and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\"a\": {\n             \t\t        \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n          \t\t\"b\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"right\": 21.0\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": false,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\t\"2019-08-05T12:00:34\": false\n\t\t\t},\n\t\t\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": false,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\t\"2019-08-05T12:00:34\": false\n\t\t\t}\n\t\t}\n\n\n```\n\nThe json input of a typical call of this component where both left and right are Pandas Series is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 27,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2020-08-05T12:00:34\": 17,\n\t\t\t\t\"2021-08-05T12:00:34\": null       \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"2019-08-01T15:20:12\": false,\n\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\"2019-08-05T12:00:34\": false,\n\t\t\t\"2020-08-05T12:00:34\": false,\n\t\t\t\"2021-08-05T12:00:34\": false\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"left\": DataType.Any, \"right\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Equality\",\n    description=\"Checks if left is equal to right\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"9ccc8df5-5e68-46ff-bc2d-1fa82dae972c\",\n    revision_group_id=\"9ccc8df5-5e68-46ff-bc2d-1fa82dae972c\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.478242+00:00\"\n)\ndef main(*, left, right):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    try:\n        return {\"result\": left == right}\n    except ValueError:\n        return {\"result\": left.eq(right)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "786f3bb8-0407-3994-250e-694ebbad139b",
          "name": "left",
          "data_type": "ANY"
        },
        {
          "id": "37b7d91a-dcaf-2f71-17b4-86599388b27a",
          "name": "right",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "b1510007-ce75-05af-2907-faf5486ef7bc",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "a652465e-b479-1cc9-bf82-41f7cedc4963",
    "revision_group_id": "a652465e-b479-1cc9-bf82-41f7cedc4963",
    "name": "Select Column from DataFrame",
    "description": "Select a column from a DataFrame",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.829537+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Select Column from DataFrame\n\n## Description\nSelect a column from a DataFrame.\n\n## Inputs\n* **dataframe** (Pandas DataFrame): The DataFrame from which we want to select a column.\n* **column** (String): The column name of the column to select.\n\n## Outputs\n* **column_series** (Pandas Series): The selected column.\n\n## Details\nSelects the column by its name.\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"dataframe\": DataType.DataFrame, \"column\": DataType.String},\n    outputs={\"column_series\": DataType.Series},\n    name=\"Select Column from DataFrame\",\n    description=\"Select a column from a DataFrame\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"a652465e-b479-1cc9-bf82-41f7cedc4963\",\n    revision_group_id=\"a652465e-b479-1cc9-bf82-41f7cedc4963\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.829537+00:00\"\n)\ndef main(*, dataframe, column):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    return {\"column_series\": dataframe[column]}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "dcd1cb0e-50db-8c9b-b60c-a5b60cd33926",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        },
        {
          "id": "a7897d98-6b6a-74be-c748-da53a5ea6adb",
          "name": "column",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "f082d101-acbc-6834-8445-3d8c130af436",
          "name": "column_series",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "4ec3ef23-6bea-872d-1905-c9c6d06dddef",
    "revision_group_id": "4ec3ef23-6bea-872d-1905-c9c6d06dddef",
    "name": "Inequality",
    "description": "Checks if left is unequal to right",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.687616+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Inequality\n\n## Description\nThis component checks if left is unequal to right.\n\n## Inputs\n* **left** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric. \n* **right** (Integer, Float, Boolean, Pandas Series or Pandas DataFrame): Entries must be numeric.\n\n## Outputs\n* **result** (Boolean, Pandas Series or Pandas DataFrame): The boolean result of the comparison.\n\n## Details\nThe component checks if left is unequal to right.\n\n## Examples\nThe json input of a typical call of this component where left is a Pandas Series and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": 0.5\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\"2019-08-01T15:20:12\": true,\n\t\t\"2019-08-01T15:44:12\": false,\n\t\t\"2019-08-03T16:20:15\": true,\n\t\t\"2019-08-05T12:00:34\": false\n\t}\n```\n\nThe json input of a typical call of this component where left is a Pandas DataFrame and right is numeric is\n```\n{\n\t\"left\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"b\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 0.5,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"right\": 0.5\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"a\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\t\"2019-08-05T12:00:34\": false\n\t\t\t},\n\t\t\t\"b\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\t\"2019-08-05T12:00:34\": true\n\t\t\t}\n\t\t}\n\n\n```\n\nThe json input of a typical call of this component where both left and right are Pandas Series is\n```\n{\n\t\"left\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"right\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.0,\n\t\t\t\t\"2019-08-01T15:44:12\": 27,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.5,\n\t\t\t\t\"2020-08-05T12:00:34\": 17,\n\t\t\t\t\"2021-08-05T12:00:34\": null       \n\t}\n}\n```\nThe expected output is\n```\n\t\"result\": {\n\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\"2019-08-01T15:44:12\": false,\n\t\t\t\"2019-08-03T16:20:15\": true,\n\t\t\t\"2019-08-05T12:00:34\": false,\n\t\t\t\"2020-08-05T12:00:34\": false,\n\t\t\t\"2021-08-05T12:00:34\": false\n\t\t}\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"left\": DataType.Any, \"right\": DataType.Any},\n    outputs={\"result\": DataType.Any},\n    name=\"Inequality\",\n    description=\"Checks if left is unequal to right\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"4ec3ef23-6bea-872d-1905-c9c6d06dddef\",\n    revision_group_id=\"4ec3ef23-6bea-872d-1905-c9c6d06dddef\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.687616+00:00\"\n)\ndef main(*, left, right):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n \n    try:\n        return {\"result\": left != right}\n    except ValueError:\n        return {\"result\": left.ne(right)}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "4b0b61ae-d560-6687-7c97-fdd15d9798d8",
          "name": "left",
          "data_type": "ANY"
        },
        {
          "id": "3f8bcc87-a39f-7f4c-0943-e3efcd9b01f0",
          "name": "right",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "3f28c477-9d86-a82c-885b-4e8f2f967fb3",
          "name": "result",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "bf469c0a-d17c-ca6f-59ac-9838b2ff67ac",
    "revision_group_id": "bf469c0a-d17c-ca6f-59ac-9838b2ff67ac",
    "name": "Restrict to time interval",
    "description": "Returns the data belonging to some time interval",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.749503+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Restrict to time interval\n\n## Description\nThis component restricts a Pandas Series or Pandas DataFrame to a Pandas Series or Pandas DataFrame with respect to some given time interval.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): Indices must be datetimes, either without timezone name or with utc offset.\n* **start** (String): Date as popular format (e.g. \"10 Aug 2012 10:20:30\", \"2019-08-01T15:20:10\") or relative dates (e.g. \"yesterday -10 years\", \"1 hour ago -0500\"), either without timezone name or with utc offset.\n* **stop** (String): Date as popular format (e.g. \"10 Aug 2012 10:20:30\", \"2019-08-01T15:20:10\") or relative dates (e.g. \"yesterday -10 years\", \"1 hour ago -0500\"), either without timezone name or with utc offset.\n\n## Outputs\n* **interval** (Pandas Series or Pandas DataFrame): Contains data restricted to the indices between start and stop.\n\n## Details\nThe component restricts the input data to the time interval between start and stop. Entries with index before start or after stop are filtered. \n\n## Examples\nThe json input of a typical call of this component with a Pandas Series without timezone is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:10\": 3.3,\n\t\t\t\t\"2019-08-01T15:20:20\": 7.5,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t},\n\t\"start\": \"2019-08-01T15:20:15\",\n\t\"stop\": \"2020-08-01T15:20:30\"\n}\n```\nThe expected output is\n```\n\t\"interval\": {\n\t\t\t\t\"2019-08-01T15:20:20\": 7.5,\n\t\t\t\t\"2019-08-01T15:20:25\": 0.3,\n\t\t\t\t\"2019-08-01T15:20:30\": 0.5\n\t\t}\n```\n\nThe json input of a typical call of this component with a Pandas Series without utc offset is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2016-12-31 00:30:00+01:00\": 3.3,\n\t\t\t\t\"2016-12-31 00:30:10+01:00\": 7.5,\n\t\t\t\t\"2016-12-31 00:30:20+01:00\": 0.3,\n\t\t\t\t\"2016-12-31 00:30:30+01:00\": 0.5\n\t},\n\t\"start\": \"2016-12-31 00:30:10+01:00\",\n\t\"stop\": \"2016-12-31 00:30:20+01:00\"\n}\n```\nThe expected output is\n```\n\t\"interval\": {\n\t\t\t\t\"2016-12-31 00:30:10+00:00\": 7.5,\n\t\t\t\t\"2016-12-31 00:30:20+00:00\": 0.3\n\t\t}\n```",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\nimport dateparser\nimport pytz\nfrom pandas._libs.tslibs import OutOfBoundsDatetime, Timestamp\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"start\": DataType.String, \"stop\": DataType.String},\n    outputs={\"interval\": DataType.Any},\n    name=\"Restrict to time interval\",\n    description=\"Returns the data belonging to some time interval\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"bf469c0a-d17c-ca6f-59ac-9838b2ff67ac\",\n    revision_group_id=\"bf469c0a-d17c-ca6f-59ac-9838b2ff67ac\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.749503+00:00\"\n)\ndef main(*, data, start, stop):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if data.empty:\n        return {\"interval\": data}\n\n    try:\n        data.index = pd.to_datetime(data.index)\n    except ValueError:\n        data.index = pd.to_datetime(data.index, utc=True)\n\n    data = data.sort_index()\n\n    if start is not None:\n        try:\n            if data.index.tzinfo is None:\n                parsed_start_date = dateparser.parse(\n                    start,\n                    settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": False},\n                )\n            else:\n                parsed_start_date = dateparser.parse(\n                    start,\n                    settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": True},\n                ).replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError, AttributeError):\n            raise ValueError(f\"start timestamp could not be parsed: {start}\")\n        if parsed_start_date is None:\n            raise ValueError(f\"start timestamp could not be parsed: {start}\")\n    else:\n        parsed_start_date = None\n\n    if stop is not None:\n        try:\n            if data.index.tzinfo is None:\n                parsed_stop_date = dateparser.parse(\n                    stop,\n                    settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": False},\n                )\n            else:\n                parsed_stop_date = dateparser.parse(\n                    stop, settings={\"TIMEZONE\": \"UTC\", \"RETURN_AS_TIMEZONE_AWARE\": True}\n                ).replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError):\n            raise ValueError(f\"stop timestamp could not be parsed: {stop}\")\n        if parsed_stop_date is None:\n            raise ValueError(f\"start timestamp could not be parsed: {start}\")\n    else:\n        parsed_stop_date = None\n\n    if (\n        (parsed_start_date is not None)\n        and (parsed_stop_date is not None)\n        and (parsed_start_date > parsed_stop_date)\n    ):\n        raise ValueError(\"start timestamp cannot be after stop timestamp\")\n\n    if parsed_start_date is not None and parsed_stop_date is not None:\n        return {\"interval\": data.loc[parsed_start_date:parsed_stop_date]}\n    elif parsed_start_date is None and parsed_stop_date is not None:\n        return {\"interval\": data.loc[:parsed_stop_date]}\n    elif parsed_start_date is not None and parsed_stop_date is None:\n        return {\"interval\": data.loc[parsed_start_date:]}\n    else:\n        return {\"interval\": data}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "1039e08a-964f-2cc8-cffd-37d53078daf8",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "7e7ecf61-c319-f6be-1a3f-1526a879fd9a",
          "name": "start",
          "data_type": "STRING"
        },
        {
          "id": "a1154696-3e13-8fe2-ee80-3dea4e879b7d",
          "name": "stop",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "21fe8c45-8a45-9d81-4e17-0c73ca7a66f4",
          "name": "interval",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "18260aab-bdd6-af5c-cac1-7bafde85188f",
    "revision_group_id": "18260aab-bdd6-af5c-cac1-7bafde85188f",
    "name": "Filter",
    "description": "Filters data by filter_series",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.399056+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Filter\n\n## Description\nThis component filters a Pandas Series or a Pandas DataFrame by a boolean Pandas Series.\n\n## Inputs\n* **data** (Pandas Series or Pandas DataFrame): The input that should be filtered.\n* **filter_series** (Pandas Series): A Pandas Series with boolean entries.\n\n## Outputs\n* **filtered** (Pandas Series or Pandas DataFrame): The resulting Pandas Series or Pandas DataFrame. \n\n## Details\nThe index of the output contains the indices of data, where filter_series is True. The values of the output are the same as the original ones of data. \n\nNon boolean entries of filter_series are casted to boolean ones in advance to filtering.\n\n## Examples\nThe json input of a typical call of this component with two Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n\t},\n\t\"filter_series\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": true,\n\t\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\t\"2020-08-05T12:00:34\": true,\n\t\t\t\t\"2020-08-05T12:00:34\": false       \n\t}\n}\n```\nThe expected output is\n```\n\t\"filtered\": {\n\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\"2019-08-01T15:44:12\": null\n\t}\n\n```\n\nThe json input of a typical call of this component with a Pandas DataFrame and a Pandas Series is\n```\n{\n\t\"data\": {\n\t\t\t\"a\": {\n                               \"2019-08-01T15:20:12\": 1.2,\n\t\t\t\t\"2019-08-01T15:44:12\": null,\n\t\t\t\t\"2019-08-03T16:20:15\": 0.3,\n\t\t\t\t\"2019-08-05T12:00:34\": 0.5\n             },\n            \"b\": {\n                                \"2019-08-01T15:20:12\": 54.4,\n\t\t\t\t \"2019-08-01T15:44:12\": 4.3,\n\t\t\t\t \"2019-08-03T16:20:15\": 21.0,\n\t\t\t\t \"2019-08-05T12:00:34\": 7.5\n             }\n\t},\n\t\"filter_series\": {\n\t\t\t\t\"2019-08-01T15:20:12\": true,\n\t\t\t\t\"2019-08-01T15:44:12\": true,\n\t\t\t\t\"2019-08-03T16:20:15\": false,\n\t\t\t\t\"2020-08-05T12:00:34\": true,\n\t\t\t\t\"2020-08-05T12:00:34\": false       \n\t}\n}\n```\nThe expected output is\n```\n\t\"filtered\": {\n\t\t\"a\": {\n\t\t\t\"2019-08-01T15:20:12\": 1.2,\n\t\t\t\"2019-08-01T15:44:12\": null\n\t\t},\n\t\t\"b\": {\n\t\t\t\"2019-08-01T15:20:12\": 54.4,\n\t\t\t\"2019-08-01T15:44:12\": 4.3\n\t\t}\n\t}\n\n```\n\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType\n\nimport pandas as pd\nimport numpy as np\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"data\": DataType.Any, \"filter_series\": DataType.Series},\n    outputs={\"filtered\": DataType.Any},\n    name=\"Filter\",\n    description=\"Filters data by filter_series\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"18260aab-bdd6-af5c-cac1-7bafde85188f\",\n    revision_group_id=\"18260aab-bdd6-af5c-cac1-7bafde85188f\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.399056+00:00\"\n)\ndef main(*, data, filter_series):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    filter_bool = filter_series.astype(\"bool\")\n    return {\"filtered\": data[filter_bool.reindex(data.index, fill_value=False)]}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "ad0fb04c-fa46-f59d-5d59-054e6fc7b766",
          "name": "data",
          "data_type": "ANY"
        },
        {
          "id": "c84b0db5-bbe6-c5ef-a30d-79015134c4cf",
          "name": "filter_series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "4309e6d9-dc4d-781c-4ef4-e2d8fa1d195c",
          "name": "filtered",
          "data_type": "ANY"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "c8e3bc64-b214-6486-31db-92a8888d8991",
    "revision_group_id": "c8e3bc64-b214-6486-31db-92a8888d8991",
    "name": "Last Datetime Index",
    "description": "Extracts the last (maximum) datetime index",
    "category": "Basic",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:28.066065+00:00",
    "state": "RELEASED",
    "type": "COMPONENT",
    "documentation": "# Last Datetime Index\n\n## Description\nExtracts the last (maximum) datetime index\n\n## Inputs\n* **timeseries_data** (Any, expects a Pandas Series or Pandas DataFrame): Must have a datetime index.\n\n## Outputs\n* **last_index** (String): The last (maximum) timestamp occuring as index is returned as isoformat timestamp string.\n\n## Details\nTakes the maximum index and returns its as string.\n\n## Examples\nThe json input of a typical call of this component with a Pandas Series is\n```\n{\n\t\"timeseries_data\": {\n\t\t\t\t\"2019-08-01T15:50:12\": 0,\n\t\t\t\t\"2019-08-01T15:44:12\": 3,\n\t\t\t\t\"2019-08-03T16:20:15\": null  \n\t}\n}\n```\nThe expected output is\n```\n\t\"last_index\": 2019-08-03T16:20:15+00:00\n\n```\n",
    "content": "from hetdesrun.component.registration import register\nfrom hetdesrun.datatypes import DataType  # add your own imports here\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\n@register(\n    inputs={\"timeseries_data\": DataType.Any},\n    outputs={\"last_index\": DataType.String},\n    name=\"Last Datetime Index\",\n    description=\"Extracts the last (maximum) datetime index\",\n    category=\"Basic\",\n    version_tag=\"1.0.0\",\n    id=\"c8e3bc64-b214-6486-31db-92a8888d8991\",\n    revision_group_id=\"c8e3bc64-b214-6486-31db-92a8888d8991\",\n    state=\"RELEASED\",\n    released_timestamp=\"2022-02-09T17:33:28.066065+00:00\"\n)\ndef main(*, timeseries_data):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    if len(timeseries_data) == 0:\n        return {\"last_index\": None}\n\n    return {\"last_index\": timeseries_data.index.max().to_pydatetime().isoformat()}\n",
    "io_interface": {
      "inputs": [
        {
          "id": "06f2cfef-51fa-fe5f-1a71-8ccfe1fd7419",
          "name": "timeseries_data",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "a688a7d0-dede-d300-fd72-c6b76f42139f",
          "name": "last_index",
          "data_type": "STRING"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "0f902f9c-2d6f-471c-89f1-853e53c4848c",
    "revision_group_id": "916b006f-6fde-4ec6-aa5e-22c658c534e0",
    "name": "Moving Window MAD Band Filter Example",
    "description": "Example workflow to apply a moving window median absolute deviation (MAD) bandpass filter",
    "category": "Examples",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-11-17T10:37:31.743023+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "# Moving Window MAD Band Filter Example\n\n## Description\nThis workflow is an example of applying a moving window MAD bandpass filter on a timeseries.\n\n## Inputs\n* **series** (Pandas Series): Series for which the calculation is supposed to be performed. The indices must be datetimes.\n* **min_num_desired_datapoints_in_window** (Integer): Minimum number of datapoints supposed to be in each window.\n* **buffer_factor** (Float): Factor to multiply *min_num_desired_datapoints_in_window* with in order to control the expected number of datapoints inside each window.\n* **mad_scaling_factor** (Float): The calculated MADs are multiplied by this factor to adjust the width of the bandfilter at each point. The value 1.4836 makes it equivalent to the standard deviation.\n* **min_band_width_factor** (Float): Factor to calculate the minimum band width. The factor is multiplied with the median of the calculated MADs.\n\n## Outputs\n* **band_filter_plot** (Plotly JSON): The generated Plotly JSON. This is used by the hetida designer frontend for plotting the results.\n* **filtered** (Pandas Series): Outlier adjusted input series.\n\n## Details\nThe first step is the calculation of the window size using the component *Infer Window Size*. It is performed based on the median time difference between two consecutive datapoints which is assumed to be the expected time difference between two datapoints. The median is multiplied by **min_num_desired_datapoints_in_window** and **buffer_factor** which specifies the expected number of datapoints inside each window. The result is converted into a padas frequency string.\n\nThe next step is to calculate bandpass filter statistics and identify outlier. This is done using the component *Moving Window MAD Band Filter*. It calculates the median and median absolute deviation (MAD) for a moving window with the previously calculated size. The calculation is only performed if at least **min_num_desired_datapoints_in_window** datapoints are inside a window. The calculated MADs are multiplied by mad_scaling_factor to adjust the width of the bandfilter at each point.\nA minimum band width relative to the median of the MADs is set with min_band_width_factor. All MADs smaller than then the product of the min_band_width_factor and dhte median of the MADs are set to this value.\n\nThe workflow has two outputs. The first output is a visualization of the bandpass filter using the component *Band Filter Plot*. It contains the original series with marked outliers, the median and the calculated band. The other output is the outlier adjusted input series.\n\nMore details about the components can be found in their corresponding documentation.\n\n## Examples\nThe json input of a typical call of this workflow is\n```\n{\n    \"series\": {\n        \"2022-01-01T00:00:00Z\": 1.058,\n        \"2022-01-01T00:20:48Z\": 0.699,\n        \"2022-01-01T00:41:37Z\": 1.08,\n        \"2022-01-01T01:02:26Z\": 1.054,\n        \"2022-01-01T01:23:15Z\": 0.763,\n        \"2022-01-01T01:44:04Z\": 1.034,\n        \"2022-01-01T02:04:53Z\": 0.965,\n        \"2022-01-01T02:25:42Z\": 0.601,\n        \"2022-01-01T02:46:31Z\": 0.933,\n        \"2022-01-01T03:07:20Z\": 1.081,\n        \"2022-01-01T03:28:09Z\": 2.1,\n        \"2022-01-01T03:48:58Z\": 0.988,\n        \"2022-01-01T04:09:47Z\": 0.741,\n        \"2022-01-01T04:30:36Z\": 0.647,\n        \"2022-01-01T04:51:25Z\": 0.556,\n        \"2022-01-01T05:12:14Z\": 0.453,\n        \"2022-01-01T05:33:03Z\": 1.009,\n        \"2022-01-01T05:53:52Z\": 1.72,\n        \"2022-01-01T06:14:41Z\": 1.002,\n        \"2022-01-01T06:56:19Z\": 0.857,\n        \"2022-01-01T07:17:08Z\": 0.864,\n        \"2022-01-01T07:37:57Z\": 0.606,\n        \"2022-01-01T07:58:46Z\": 0.899,\n        \"2022-01-01T08:40:24Z\": 0.62,\n        \"2022-01-01T10:03:40Z\": 0.721,\n        \"2022-01-01T10:24:29Z\": 1.193,\n        \"2022-01-01T10:45:18Z\": 0.833,\n        \"2022-01-01T11:06:07Z\": 2.06,\n        \"2022-01-01T11:26:56Z\": 0.68,\n        \"2022-01-01T11:47:45Z\": 1.136,\n        \"2022-01-01T12:08:34Z\": 0.62,\n        \"2022-01-01T12:29:23Z\": 0.946,\n        \"2022-01-01T12:50:12Z\": 0.746,\n        \"2022-01-01T13:11:01Z\": 0.833,\n        \"2022-01-01T13:31:50Z\": 0.857,\n        \"2022-01-01T14:13:28Z\": 0.947,\n        \"2022-01-01T14:34:17Z\": 0.841,\n        \"2022-01-01T14:55:06Z\": 0.668,\n        \"2022-01-01T15:15:55Z\": 0.675,\n        \"2022-01-01T15:36:44Z\": 0.84,\n        \"2022-01-01T15:57:33Z\": 0.821,\n        \"2022-01-01T16:18:22Z\": 0.625,\n        \"2022-01-01T16:39:11Z\": 1.155,\n        \"2022-01-01T17:00:00Z\": 0.968\n    },\n    \"min_num_datapoints_in_window\": 10,\n    \"mad_scaling_factor\": 4.4478,\n    \"min_band_width_factor\": 1,\n    \"buffer_factor\": 1.4\n}\n```",
    "content": {
      "operators": [
        {
          "id": "72c87733-08db-431b-97de-da064f66fc05",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "Pass Through (Series)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -305,
            "y": 372
          }
        },
        {
          "id": "1d67d478-85a4-4ccf-bf69-b73b327d87fa",
          "revision_group_id": "57eea09f-d28e-89af-4e81-2027697a3f0f",
          "name": "Pass Through (Integer)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "57eea09f-d28e-89af-4e81-2027697a3f0f",
          "inputs": [
            {
              "id": "d7ee8fb5-c52b-431a-2a80-c11ca727d9ce",
              "name": "input",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "57043fae-046c-7dee-2f17-8e069a2dac90",
              "name": "output",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -305,
            "y": 497
          }
        },
        {
          "id": "ec91517d-99d0-4707-861e-5ede39da8ef6",
          "revision_group_id": "18260aab-bdd6-af5c-cac1-7bafde85188f",
          "name": "Filter",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "18260aab-bdd6-af5c-cac1-7bafde85188f",
          "inputs": [
            {
              "id": "ad0fb04c-fa46-f59d-5d59-054e6fc7b766",
              "name": "data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "c84b0db5-bbe6-c5ef-a30d-79015134c4cf",
              "name": "filter_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "4309e6d9-dc4d-781c-4ef4-e2d8fa1d195c",
              "name": "filtered",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1150,
            "y": 470
          }
        },
        {
          "id": "2a5444c1-6c91-4697-804d-6f27e0272e1e",
          "revision_group_id": "a9614fc3-e7a0-4df1-8a8c-a1c8cadeb84b",
          "name": "Infer Window Size",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "4615ec0d-99bd-40ba-a88b-643dd28fa6e7",
          "inputs": [
            {
              "id": "c85c22fe-6e56-4f3e-a969-552847ac013f",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "861001bc-7d9e-4315-8290-3af665a98417",
              "name": "min_num_desired_datapoints_in_window",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "57af13c4-c4be-4cc0-9d49-098154bc23bc",
              "name": "buffer_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "c8a9eff0-b531-482e-90d8-0d19903f7f4f",
              "name": "frequency_string",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 205,
            "y": 147
          }
        },
        {
          "id": "c6c815a9-60f3-4ef1-b6f2-54384cc15ec5",
          "revision_group_id": "02836778-e7d9-4352-952d-9927f34b58fe",
          "name": "Band Filter Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "ff2392cb-b0ff-4672-803f-4fb44ecca5b5",
          "inputs": [
            {
              "id": "1393fcf7-0562-4b47-b655-144e3dac4106",
              "name": "band_filter_dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "a36ab320-ae3d-48f0-b57c-5e541e987615",
              "name": "band_filter_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1150,
            "y": 372
          }
        },
        {
          "id": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
          "revision_group_id": "4cf6f5e7-e4de-4714-8929-5206c595a148",
          "name": "Moving Window MAD Band Filter",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bf698fbb-1e2e-47ca-a4f8-72b06b011985",
          "inputs": [
            {
              "id": "228b2073-8946-47d7-9bc5-e3f606413291",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "2890da86-d4dd-4ece-a917-8574da4692ef",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "77ec0e96-81ee-4a4d-a2a6-99ad0ab71bdf",
              "name": "min_num_datapoints_in_window",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3fbf12d9-e297-4e19-94a2-2b7ed3cba32f",
              "name": "mad_scaling_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "258ed00c-589a-4191-bf9b-9ba2d91986db",
              "name": "min_band_width_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "b783e836-dc11-4f7a-a642-07bd5d5a195c",
              "name": "band_filter_dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3160f65d-48ea-4942-b647-75034172c8bb",
              "name": "filter_mask",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 680,
            "y": 372
          }
        }
      ],
      "links": [
        {
          "id": "5ec774ae-1024-4543-83bd-798b6fc55315",
          "start": {
            "operator": "72c87733-08db-431b-97de-da064f66fc05",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "ec91517d-99d0-4707-861e-5ede39da8ef6",
            "connector": {
              "id": "ad0fb04c-fa46-f59d-5d59-054e6fc7b766",
              "name": "data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 65,
              "y": 442
            },
            {
              "x": 380,
              "y": 442
            },
            {
              "x": 405,
              "y": 607
            },
            {
              "x": 1075,
              "y": 607
            },
            {
              "x": 1080,
              "y": 542
            },
            {
              "x": 1140,
              "y": 540
            }
          ]
        },
        {
          "id": "4495bf4e-b1e0-42df-8b08-6d3e0d2a0a85",
          "start": {
            "operator": "72c87733-08db-431b-97de-da064f66fc05",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "2a5444c1-6c91-4697-804d-6f27e0272e1e",
            "connector": {
              "id": "c85c22fe-6e56-4f3e-a969-552847ac013f",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 65,
              "y": 442
            },
            {
              "x": 130,
              "y": 442
            },
            {
              "x": 175,
              "y": 217
            },
            {
              "x": 195,
              "y": 217
            }
          ]
        },
        {
          "id": "fb043c93-e9d2-4c62-a720-16c89c789c8e",
          "start": {
            "operator": "1d67d478-85a4-4ccf-bf69-b73b327d87fa",
            "connector": {
              "id": "57043fae-046c-7dee-2f17-8e069a2dac90",
              "name": "output",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "2a5444c1-6c91-4697-804d-6f27e0272e1e",
            "connector": {
              "id": "861001bc-7d9e-4315-8290-3af665a98417",
              "name": "min_num_desired_datapoints_in_window",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 65,
              "y": 567
            },
            {
              "x": 90,
              "y": 567
            },
            {
              "x": 155,
              "y": 247
            },
            {
              "x": 195,
              "y": 247
            }
          ]
        },
        {
          "id": "23aec92d-07a8-48ef-a04e-2d74f1d579e7",
          "start": {
            "operator": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
            "connector": {
              "id": "b783e836-dc11-4f7a-a642-07bd5d5a195c",
              "name": "band_filter_dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "c6c815a9-60f3-4ef1-b6f2-54384cc15ec5",
            "connector": {
              "id": "1393fcf7-0562-4b47-b655-144e3dac4106",
              "name": "band_filter_dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "afad524b-a2be-4d92-8f0e-8b9e95423fe9",
          "start": {
            "operator": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
            "connector": {
              "id": "3160f65d-48ea-4942-b647-75034172c8bb",
              "name": "filter_mask",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "ec91517d-99d0-4707-861e-5ede39da8ef6",
            "connector": {
              "id": "c84b0db5-bbe6-c5ef-a30d-79015134c4cf",
              "name": "filter_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 1050,
              "y": 472
            },
            {
              "x": 1090,
              "y": 472
            },
            {
              "x": 1105,
              "y": 567
            },
            {
              "x": 1140,
              "y": 570
            }
          ]
        },
        {
          "id": "4094feb8-8d63-4164-b2d1-d831defc1509",
          "start": {
            "operator": "2a5444c1-6c91-4697-804d-6f27e0272e1e",
            "connector": {
              "id": "c8a9eff0-b531-482e-90d8-0d19903f7f4f",
              "name": "frequency_string",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
            "connector": {
              "id": "2890da86-d4dd-4ece-a917-8574da4692ef",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 575,
              "y": 217
            },
            {
              "x": 615,
              "y": 217
            },
            {
              "x": 630,
              "y": 472
            },
            {
              "x": 670,
              "y": 472
            }
          ]
        },
        {
          "id": "31d27e89-9953-423d-8263-264783d7a6e7",
          "start": {
            "operator": "72c87733-08db-431b-97de-da064f66fc05",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
            "connector": {
              "id": "228b2073-8946-47d7-9bc5-e3f606413291",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "78e1c1e7-d653-4208-82cf-4b0902157d02",
          "start": {
            "operator": "1d67d478-85a4-4ccf-bf69-b73b327d87fa",
            "connector": {
              "id": "57043fae-046c-7dee-2f17-8e069a2dac90",
              "name": "output",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
            "connector": {
              "id": "77ec0e96-81ee-4a4d-a2a6-99ad0ab71bdf",
              "name": "min_num_datapoints_in_window",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 65,
              "y": 567
            },
            {
              "x": 90,
              "y": 567
            },
            {
              "x": 105,
              "y": 502
            },
            {
              "x": 670,
              "y": 502
            }
          ]
        },
        {
          "id": "ed6937de-4c82-4906-9b50-6ebb73f3a539",
          "start": {
            "connector": {
              "id": "ebfc029c-f71e-4938-8252-d30711d5c556",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": -555,
                "y": 432
              }
            }
          },
          "end": {
            "operator": "72c87733-08db-431b-97de-da064f66fc05",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "4834b7c1-0a31-4e3d-acfd-d837b15354c6",
          "start": {
            "connector": {
              "id": "11cacbef-ce5b-419e-bcca-b70c92a935aa",
              "name": "min_num_datapoints_in_window",
              "data_type": "INT",
              "position": {
                "x": -555,
                "y": 557
              }
            }
          },
          "end": {
            "operator": "1d67d478-85a4-4ccf-bf69-b73b327d87fa",
            "connector": {
              "id": "d7ee8fb5-c52b-431a-2a80-c11ca727d9ce",
              "name": "input",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "a2793d6c-dd32-4fbe-a4b9-8bb9d741290a",
          "start": {
            "connector": {
              "id": "835a3e98-d05e-49e4-a56e-fc3e18c0cb61",
              "name": "buffer_factor",
              "data_type": "FLOAT",
              "position": {
                "x": -45,
                "y": 267
              }
            }
          },
          "end": {
            "operator": "2a5444c1-6c91-4697-804d-6f27e0272e1e",
            "connector": {
              "id": "57af13c4-c4be-4cc0-9d49-098154bc23bc",
              "name": "buffer_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "3b0d4978-389c-4c10-bcb3-503396b71ef3",
          "start": {
            "connector": {
              "id": "c6f6805b-4dcf-4621-a213-9a3fe7d2b3d9",
              "name": "mad_scaling_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 430,
                "y": 522
              }
            }
          },
          "end": {
            "operator": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
            "connector": {
              "id": "3fbf12d9-e297-4e19-94a2-2b7ed3cba32f",
              "name": "mad_scaling_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "2c7c9101-95d2-4ab7-a15e-160e90b6d9f2",
          "start": {
            "connector": {
              "id": "26a6b9f1-8832-416c-9f87-7106905cbca5",
              "name": "min_band_width_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 430,
                "y": 552
              }
            }
          },
          "end": {
            "operator": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
            "connector": {
              "id": "258ed00c-589a-4191-bf9b-9ba2d91986db",
              "name": "min_band_width_factor",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "00a28ab0-3e68-46b9-b375-21a4e0d796bc",
          "start": {
            "operator": "ec91517d-99d0-4707-861e-5ede39da8ef6",
            "connector": {
              "id": "4309e6d9-dc4d-781c-4ef4-e2d8fa1d195c",
              "name": "filtered",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "e10bc7d3-bb16-4917-ade7-2a0f75847565",
              "name": "filtered",
              "data_type": "ANY",
              "position": {
                "x": 1600,
                "y": 530
              }
            }
          },
          "path": []
        },
        {
          "id": "eb215499-11f6-4045-9923-db1f3250ca2a",
          "start": {
            "operator": "c6c815a9-60f3-4ef1-b6f2-54384cc15ec5",
            "connector": {
              "id": "a36ab320-ae3d-48f0-b57c-5e541e987615",
              "name": "band_filter_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "e042973f-627e-4d6c-9763-753dc7ff89fd",
              "name": "band_filter_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1600,
                "y": 432
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "ebfc029c-f71e-4938-8252-d30711d5c556",
          "name": "series",
          "data_type": "SERIES",
          "operator_id": "72c87733-08db-431b-97de-da064f66fc05",
          "connector_id": "f103c395-92b6-444d-320a-93950ed6d857",
          "operator_name": "Pass Through (Series)",
          "connector_name": "input",
          "position": {
            "x": -555,
            "y": 432
          }
        },
        {
          "id": "11cacbef-ce5b-419e-bcca-b70c92a935aa",
          "name": "min_num_datapoints_in_window",
          "data_type": "INT",
          "operator_id": "1d67d478-85a4-4ccf-bf69-b73b327d87fa",
          "connector_id": "d7ee8fb5-c52b-431a-2a80-c11ca727d9ce",
          "operator_name": "Pass Through (Integer)",
          "connector_name": "input",
          "position": {
            "x": -555,
            "y": 557
          }
        },
        {
          "id": "835a3e98-d05e-49e4-a56e-fc3e18c0cb61",
          "name": "buffer_factor",
          "data_type": "FLOAT",
          "operator_id": "2a5444c1-6c91-4697-804d-6f27e0272e1e",
          "connector_id": "57af13c4-c4be-4cc0-9d49-098154bc23bc",
          "operator_name": "Infer Window Size",
          "connector_name": "buffer_factor",
          "position": {
            "x": -45,
            "y": 267
          }
        },
        {
          "id": "c6f6805b-4dcf-4621-a213-9a3fe7d2b3d9",
          "name": "mad_scaling_factor",
          "data_type": "FLOAT",
          "operator_id": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
          "connector_id": "3fbf12d9-e297-4e19-94a2-2b7ed3cba32f",
          "operator_name": "Moving Window MAD Band Filter",
          "connector_name": "mad_scaling_factor",
          "position": {
            "x": 430,
            "y": 522
          }
        },
        {
          "id": "26a6b9f1-8832-416c-9f87-7106905cbca5",
          "name": "min_band_width_factor",
          "data_type": "FLOAT",
          "operator_id": "44eac08d-ca1e-4837-8e3b-046bee0a1b0b",
          "connector_id": "258ed00c-589a-4191-bf9b-9ba2d91986db",
          "operator_name": "Moving Window MAD Band Filter",
          "connector_name": "min_band_width_factor",
          "position": {
            "x": 430,
            "y": 552
          }
        }
      ],
      "outputs": [
        {
          "id": "e10bc7d3-bb16-4917-ade7-2a0f75847565",
          "name": "filtered",
          "data_type": "ANY",
          "operator_id": "ec91517d-99d0-4707-861e-5ede39da8ef6",
          "connector_id": "4309e6d9-dc4d-781c-4ef4-e2d8fa1d195c",
          "operator_name": "Filter",
          "connector_name": "filtered",
          "position": {
            "x": 1600,
            "y": 530
          }
        },
        {
          "id": "e042973f-627e-4d6c-9763-753dc7ff89fd",
          "name": "band_filter_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "c6c815a9-60f3-4ef1-b6f2-54384cc15ec5",
          "connector_id": "a36ab320-ae3d-48f0-b57c-5e541e987615",
          "operator_name": "Band Filter Plot",
          "connector_name": "band_filter_plot",
          "position": {
            "x": 1600,
            "y": 432
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "ebfc029c-f71e-4938-8252-d30711d5c556",
          "name": "series",
          "data_type": "SERIES"
        },
        {
          "id": "11cacbef-ce5b-419e-bcca-b70c92a935aa",
          "name": "min_num_datapoints_in_window",
          "data_type": "INT"
        },
        {
          "id": "835a3e98-d05e-49e4-a56e-fc3e18c0cb61",
          "name": "buffer_factor",
          "data_type": "FLOAT"
        },
        {
          "id": "c6f6805b-4dcf-4621-a213-9a3fe7d2b3d9",
          "name": "mad_scaling_factor",
          "data_type": "FLOAT"
        },
        {
          "id": "26a6b9f1-8832-416c-9f87-7106905cbca5",
          "name": "min_band_width_factor",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "e10bc7d3-bb16-4917-ade7-2a0f75847565",
          "name": "filtered",
          "data_type": "ANY"
        },
        {
          "id": "e042973f-627e-4d6c-9763-753dc7ff89fd",
          "name": "band_filter_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2022-01-01T00:00:00Z\": 1.058,\n    \"2022-01-01T00:20:48Z\": 0.699,\n    \"2022-01-01T00:41:37Z\": 1.08,\n    \"2022-01-01T01:02:26Z\": 1.054,\n    \"2022-01-01T01:23:15Z\": 0.763,\n    \"2022-01-01T01:44:04Z\": 1.034,\n    \"2022-01-01T02:04:53Z\": 0.965,\n    \"2022-01-01T02:25:42Z\": 0.601,\n    \"2022-01-01T02:46:31Z\": 0.933,\n    \"2022-01-01T03:07:20Z\": 1.081,\n    \"2022-01-01T03:28:09Z\": 2.1,\n    \"2022-01-01T03:48:58Z\": 0.988,\n    \"2022-01-01T04:09:47Z\": 0.741,\n    \"2022-01-01T04:30:36Z\": 0.647,\n    \"2022-01-01T04:51:25Z\": 0.556,\n    \"2022-01-01T05:12:14Z\": 0.453,\n    \"2022-01-01T05:33:03Z\": 1.009,\n    \"2022-01-01T05:53:52Z\": 1.72,\n    \"2022-01-01T06:14:41Z\": 1.002,\n    \"2022-01-01T06:56:19Z\": 0.857,\n    \"2022-01-01T07:17:08Z\": 0.864,\n    \"2022-01-01T07:37:57Z\": 0.606,\n    \"2022-01-01T07:58:46Z\": 0.899,\n    \"2022-01-01T08:40:24Z\": 0.62,\n    \"2022-01-01T10:03:40Z\": 0.721,\n    \"2022-01-01T10:24:29Z\": 1.193,\n    \"2022-01-01T10:45:18Z\": 0.833,\n    \"2022-01-01T11:06:07Z\": 2.06,\n    \"2022-01-01T11:26:56Z\": 0.68,\n    \"2022-01-01T11:47:45Z\": 1.136,\n    \"2022-01-01T12:08:34Z\": 0.62,\n    \"2022-01-01T12:29:23Z\": 0.946,\n    \"2022-01-01T12:50:12Z\": 0.746,\n    \"2022-01-01T13:11:01Z\": 0.833,\n    \"2022-01-01T13:31:50Z\": 0.857,\n    \"2022-01-01T14:13:28Z\": 0.947,\n    \"2022-01-01T14:34:17Z\": 0.841,\n    \"2022-01-01T14:55:06Z\": 0.668,\n    \"2022-01-01T15:15:55Z\": 0.675,\n    \"2022-01-01T15:36:44Z\": 0.84,\n    \"2022-01-01T15:57:33Z\": 0.821,\n    \"2022-01-01T16:18:22Z\": 0.625,\n    \"2022-01-01T16:39:11Z\": 1.155,\n    \"2022-01-01T17:00:00Z\": 0.968\n}"
          }
        },
        {
          "workflow_input_name": "min_num_datapoints_in_window",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "10"
          }
        },
        {
          "workflow_input_name": "buffer_factor",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "1.4"
          }
        },
        {
          "workflow_input_name": "mad_scaling_factor",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "4.4478"
          }
        },
        {
          "workflow_input_name": "min_band_width_factor",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "1"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "67c14cf2-cd4e-410e-9aca-6664273ccc3f",
    "revision_group_id": "b123bfb6-f8ee-422f-bbf8-01668a471e88",
    "name": "Iso Forest Example",
    "description": "Example of a simple Isolation Forest application",
    "category": "Examples",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T16:33:36.866188+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "# Isolation Forest Example\n\nThis workflow is an example of applying an isolation forest to two dimensional data.\n\n## Examples\nThe json input of a typical call of this workflow is\n```\n{\n\t\"n_estimators\": 100,\n\t\"n_grid\": 30,\n\t\"x_min\": -3,\n\t\"x_max\": 3,\n\t\"y_min\": -3,\n\t\"y_max\": -3,\n\t\"x_vals\": [\n    1.4926660699038274,\n    1.4486349492003316,\n    1.545047079429781,\n    1.7766562040081353,\n    1.2505807659318178,\n    1.6015711927047858,\n    1.628988596847932,\n    1.3396458715336392,\n    1.5840278529595246,\n    1.5086498128421368,\n    1.3082738460682675,\n    1.3551707245420266,\n    1.3047677269059343,\n    1.1957268596520985,\n    1.589771312984813,\n    1.455975793914552,\n    1.5915332443748391,\n    1.0671794302585895,\n    1.4328184789507228,\n    1.4300797641482066,\n    1.371593563914245,\n    1.3572668951439502,\n    1.073447752937404,\n    1.3622193297093497,\n    1.428768499159345,\n    1.22152512422022,\n    1.3652527468390385,\n    1.1973235753000264,\n    1.7253995801240305,\n    1.2580476038654282,\n    1.0545478426862762,\n    1.0117721362450705,\n    1.1578791662770598,\n    1.4706967921465253,\n    1.588673694719522,\n    1.185161619439323,\n    1.2706084301887324,\n    1.2254392300237396,\n    1.7309807975814855,\n    1.5866646984481378,\n    1.5077532976521568,\n    1.4359288380645205,\n    1.7056115478250309,\n    1.0703683587846597,\n    1.29130889779744,\n    1.6538359776885998,\n    1.4408159435606198,\n    1.1711791234593394,\n    1.525617905177659,\n    1.3187467930742898,\n    1.1115703000418213,\n    1.4046511262516268,\n    1.4403180151820365,\n    1.567297459401348,\n    1.1779609522464416,\n    1.5797056640945897,\n    1.4524569179306048,\n    1.407045057481754,\n    1.5290660426464773,\n    1.312071762829413,\n    1.345359637593347,\n    1.2316969297005265,\n    1.6378821897273843,\n    1.2760642118414534,\n    1.4956937623910904,\n    1.4929910048093062,\n    1.373894134260888,\n    1.5852288324502943,\n    0.9717649740689998,\n    1.6427129664223548,\n    1.2175972616435877,\n    1.297969018791878,\n    1.7029654724987484,\n    1.3783156340185647,\n    1.4904271715813147,\n    1.5066028188739558,\n    1.394587992612211,\n    1.4913153695897412,\n    1.4618294119028437,\n    1.1675132195545495,\n    1.2606787057262103,\n    1.624438289562031,\n    1.6646727011995104,\n    1.4031978084488723,\n    1.5277458347696196,\n    1.360746288775963,\n    1.129613467970032,\n    1.2690961302828818,\n    1.3087356812416346,\n    1.3779695333918085,\n    1.635634797786497,\n    1.4567666800055838,\n    1.4339967622398162,\n    1.5791665539292576,\n    1.4127552468820894,\n    1.5778551373589544,\n    1.4546758126796373,\n    1.1843789383694558,\n    1.4510047706096545,\n    1.2788758326875431,\n    0.37509562822595954,\n    -0.34833296100822775,\n    1.1273700107814664,\n    -0.5828114496740056,\n    -0.6019201001434932,\n    0.14597543451058187,\n    0.4926503544251617,\n    0.2154680856803482,\n    -0.2551963406058142,\n    -0.002139457430137104,\n    0.8030161690272482,\n    -0.3932162493293685,\n    0.04430883519637191,\n    0.7563416189031987,\n    0.2806832923291206,\n    -0.08208686777845176,\n    0.653910377510926,\n    0.6807191115282479,\n    0.634442822437029,\n    0.6345290120742698,\n    0.25383982484036116,\n    0.09012530518517568,\n    0.5408800137167201,\n    -0.364037407191779,\n    0.2546865562237355,\n    -0.715008247735518,\n    -0.2621021415447864,\n    -0.369978761751941,\n    0.02091628468984047,\n    -0.27296252015885136,\n    0.4160040529569704,\n    -0.2833210193862059,\n    0.046027225855469735,\n    0.4255764331914481,\n    0.07521963068477625,\n    -0.15295839482360765,\n    0.4238010375247674,\n    0.045623542908158676,\n    0.05272157594920685,\n    0.6908365450933313,\n    -0.29926365774968744,\n    0.07313273053381897,\n    -0.46444785076574824,\n    0.1617790151198573,\n    0.3986000441110601,\n    -0.41386821810115715,\n    0.03098605262556761,\n    0.18254492624528804,\n    0.5308633932968424,\n    0.590488113956624\n\t],\n\t\"y_vals\": [\n    2.0918517166758996,\n    1.6351422204287251,\n    1.8909793726027093,\n    2.4315905044436,\n    1.2556615935484583,\n    2.5702117297997114,\n    1.828156926028834,\n    1.6570902517443413,\n    1.7755659201933875,\n    2.0584771141139524,\n    1.1923644450629016,\n    1.387518764804023,\n    1.336018039038431,\n    1.1558574252722362,\n    1.9366961318653109,\n    2.209024991981343,\n    1.18387329850153,\n    0.6707142277076383,\n    1.7757872413025966,\n    1.2597629314242684,\n    1.2592926437264724,\n    1.5912556780223743,\n    1.1741298861403284,\n    2.083498869097698,\n    1.7448564657681116,\n    1.0509356347394387,\n    1.5073314682128234,\n    1.4379901603919265,\n    2.256544139716419,\n    1.4042133510277481,\n    1.3046580436879884,\n    0.9435742957892798,\n    0.7083373528683592,\n    1.4271506957803295,\n    1.9626931721097658,\n    1.260008631880525,\n    1.6062375804929343,\n    1.260234551919691,\n    2.2832867901268656,\n    1.7195152120168693,\n    2.179155855348661,\n    1.7018714811783155,\n    2.094304638395985,\n    0.8383702568387296,\n    1.4046944860149435,\n    2.3567742096381186,\n    1.6611731095559992,\n    1.3664794499362192,\n    1.6608608072628446,\n    1.8016440494619854,\n    1.1962660333154607,\n    2.0264224150527865,\n    2.0660797791339602,\n    1.6572699064846772,\n    1.0201013998608686,\n    1.5964380435070094,\n    1.643388772464401,\n    1.7935542861821359,\n    2.534110569612279,\n    1.568169829186863,\n    1.4832137965448795,\n    0.6673825045834174,\n    2.32989012884861,\n    1.3736537956097497,\n    1.5270363292351354,\n    2.4747877068655617,\n    1.0965899798461711,\n    1.864573458282914,\n    0.41062815588379964,\n    2.356678032367604,\n    1.2541726055895042,\n    1.426505717423786,\n    2.479776486356604,\n    1.8623157346321435,\n    1.5631520074165364,\n    1.673091871655569,\n    1.3830289178033452,\n    2.2563192073461384,\n    1.4696583765860083,\n    0.730494372366963,\n    1.3529801574485372,\n    1.5027970745588133,\n    2.346001076054482,\n    1.645770679826545,\n    2.0197152222035744,\n    1.405376767215388,\n    1.0640404860675394,\n    1.3456315961155996,\n    1.8790157397383584,\n    1.5337356541992504,\n    2.0890407511051685,\n    1.645689005110392,\n    1.7507039669819613,\n    1.406285313513008,\n    1.5986223975391751,\n    2.1774012998349765,\n    1.7434766038349168,\n    1.210123795100509,\n    1.753978223324373,\n    0.8933229057108552,\n    0.24746883487630933,\n    0.11100046749003192,\n    0.02828592739501881,\n    0.11690155289367475,\n    0.08733786278367306,\n    0.1788892936949697,\n    0.18430378100996064,\n    0.07471532585846613,\n    0.2769387623394832,\n    -0.09008184046979803,\n    0.07339491751946536,\n    0.28334568317103104,\n    0.008365597726208943,\n    0.3372043953342152,\n    0.22858171831554708,\n    0.008250420561521699,\n    0.3074906219622352,\n    0.11450092763470078,\n    0.20194233068818632,\n    0.0008354561561721291,\n    -0.11307439734807545,\n    -0.2473543352654944,\n    -0.0006302527890497539,\n    0.08514825206658988,\n    0.29330191199417466,\n    0.4601618524597455,\n    0.08430889361236013,\n    0.679311889763907,\n    -0.11966688458500557,\n    -0.1463627937254497,\n    0.2511802344795063,\n    -0.34254425046386805,\n    0.012058287564334719,\n    -0.0022185432263827493,\n    0.10415179706731398,\n    0.3139573580374533,\n    0.14076135159552336,\n    0.26220050962720653,\n    0.1660724099309663,\n    0.08783230828142724,\n    0.02921333386045459,\n    -0.25771327737864314,\n    -0.04941755595508762,\n    -0.08274956154442475,\n    0.1983390560254339,\n    -0.0708022007026434,\n    0.16920349147091363,\n    0.1987969781712029,\n    0.10074440858861015,\n    0.1225206078269434\n]\n}\n```\n",
    "content": {
      "operators": [
        {
          "id": "1ecddb98-6ae1-48b0-b125-20d3b4e3118c",
          "revision_group_id": "a4064897-66d3-9601-328e-5ae9036665c5",
          "name": "Name Series",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "a4064897-66d3-9601-328e-5ae9036665c5",
          "inputs": [
            {
              "id": "5336c0a5-97ac-d436-ae5f-ee75fa8c8b40",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "44d0fd6a-4f72-3ec1-d5dc-4f8df7029652",
              "name": "name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "44dc198e-d6b6-535f-f2c8-c8bae74acdf1",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 170,
            "y": 310
          }
        },
        {
          "id": "74608f8a-d973-4add-9764-ad3348b3bb57",
          "revision_group_id": "096c6181-4ba5-0ee7-361a-3c32eee8c0c2",
          "name": "2D Grid Generator",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "096c6181-4ba5-0ee7-361a-3c32eee8c0c2",
          "inputs": [
            {
              "id": "64245bba-7e81-ef0a-941d-2f9b5b43d044",
              "name": "n",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "02a7f8f6-0fb5-5a65-12d7-a21d61cdd271",
              "name": "x_max",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "4ef2610a-4321-004c-aee8-5cbf87ac1a49",
              "name": "x_min",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "80fb9d9d-d926-8cb6-6a41-777ba806f6ea",
              "name": "y_max",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "b3492592-b3e8-caaa-a4d4-4670d110d7f0",
              "name": "y_min",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "474c27a3-df58-7b9f-ff7e-d57a2e416fb9",
              "name": "x_indices",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "597905f3-db79-f46b-db04-dc22cdadf449",
              "name": "x_values",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "0e368818-fdfb-6796-a463-8bd9d5ff03e5",
              "name": "y_indices",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "38be3a38-8761-fc80-cab0-da2c12f4a9c8",
              "name": "y_values",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 160,
            "y": 30
          }
        },
        {
          "id": "d1b7342b-0efa-4a01-b239-d82834d1583f",
          "revision_group_id": "cdec1d55-5bb6-8e8d-4571-fbc0ebf5a354",
          "name": "Isolation Forest",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "cdec1d55-5bb6-8e8d-4571-fbc0ebf5a354",
          "inputs": [
            {
              "id": "9861c5a4-1e37-54af-70be-f4e7b81d1f64",
              "name": "n_estimators",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "bc5ae666-e1fb-9189-8f72-d681eb5dcfde",
              "name": "test_data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "017e5542-46dd-e1aa-d6f8-4026dcad3d44",
              "name": "train_data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "4594161b-f878-09c3-ab66-c1803728ea62",
              "name": "decision_function_values",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "68234ebe-51c0-96b9-c95b-86548f09e79c",
              "name": "trained_model",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1190,
            "y": 180
          }
        },
        {
          "id": "2ae1a251-3d86-4323-ae64-0702cfb5a4cf",
          "revision_group_id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
          "name": "Combine as named column into DataFrame",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
          "inputs": [
            {
              "id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
              "name": "column_name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 705,
            "y": 280
          }
        },
        {
          "id": "177db51b-6a68-4808-8e09-1a6d87f3e579",
          "revision_group_id": "a4064897-66d3-9601-328e-5ae9036665c5",
          "name": "Name Series (2)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "a4064897-66d3-9601-328e-5ae9036665c5",
          "inputs": [
            {
              "id": "5336c0a5-97ac-d436-ae5f-ee75fa8c8b40",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "44d0fd6a-4f72-3ec1-d5dc-4f8df7029652",
              "name": "name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "44dc198e-d6b6-535f-f2c8-c8bae74acdf1",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 175,
            "y": 460
          }
        },
        {
          "id": "3fdbf041-322b-4c7b-b953-10f6cef4b905",
          "revision_group_id": "68f91351-a1f5-9959-414a-2c72003f3226",
          "name": "Combine into DataFrame",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "68f91351-a1f5-9959-414a-2c72003f3226",
          "inputs": [
            {
              "id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 700,
            "y": 120
          }
        },
        {
          "id": "4983a39a-88c8-4683-a79d-9321eabe30eb",
          "revision_group_id": "d1fb4ae5-ef27-26b8-7a58-40b7cd8412e7",
          "name": "Forget",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "d1fb4ae5-ef27-26b8-7a58-40b7cd8412e7",
          "inputs": [
            {
              "id": "b7803aec-db20-6bea-970f-0566ded49a7c",
              "name": "input",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [],
          "position": {
            "x": 1610,
            "y": 210
          }
        },
        {
          "id": "e362967a-fa2d-4d7c-8ef9-e58eceb45e2b",
          "revision_group_id": "f7530499-51b2-dd01-0d21-c24ee6f8c37e",
          "name": "Contour Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "f7530499-51b2-dd01-0d21-c24ee6f8c37e",
          "inputs": [
            {
              "id": "829cbd05-7a33-c931-b16e-a105f9a7c885",
              "name": "x",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "54e9008c-0451-9e1c-c334-31e3887a4b07",
              "name": "y",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "455f7a00-c731-b2ba-ee84-8d8b567bd50e",
              "name": "z",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "53dff70b-364f-e5b7-fbb4-c293a5d2f339",
              "name": "contour_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1610,
            "y": -160
          }
        }
      ],
      "links": [
        {
          "id": "4497b894-dba0-4555-8b63-eb2b993c7592",
          "start": {
            "operator": "177db51b-6a68-4808-8e09-1a6d87f3e579",
            "connector": {
              "id": "44dc198e-d6b6-535f-f2c8-c8bae74acdf1",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "2ae1a251-3d86-4323-ae64-0702cfb5a4cf",
            "connector": {
              "id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e9fa0523-dfc8-4c47-ab9b-7ac64eff87ea",
          "start": {
            "operator": "1ecddb98-6ae1-48b0-b125-20d3b4e3118c",
            "connector": {
              "id": "44dc198e-d6b6-535f-f2c8-c8bae74acdf1",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "2ae1a251-3d86-4323-ae64-0702cfb5a4cf",
            "connector": {
              "id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "8bf65f5f-7267-4ace-b137-2ba57500c4df",
          "start": {
            "connector": {
              "id": "196c78f4-6b9a-4476-9b37-ec80986a6a47",
              "name": "x_vals",
              "data_type": "SERIES",
              "position": {
                "x": -50,
                "y": 520
              }
            }
          },
          "end": {
            "operator": "177db51b-6a68-4808-8e09-1a6d87f3e579",
            "connector": {
              "id": "5336c0a5-97ac-d436-ae5f-ee75fa8c8b40",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "2f1644a8-6638-4c54-a343-6300f001d693",
          "start": {
            "connector": {
              "id": "1c3224e0-90e6-4d03-9160-3a9417c27841",
              "name": "y_vals",
              "data_type": "SERIES",
              "position": {
                "x": -50,
                "y": 370
              }
            }
          },
          "end": {
            "operator": "1ecddb98-6ae1-48b0-b125-20d3b4e3118c",
            "connector": {
              "id": "5336c0a5-97ac-d436-ae5f-ee75fa8c8b40",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "0f52855d-a57b-4ac5-a5f8-db3eadb51240",
          "start": {
            "operator": "e362967a-fa2d-4d7c-8ef9-e58eceb45e2b",
            "connector": {
              "id": "53dff70b-364f-e5b7-fbb4-c293a5d2f339",
              "name": "contour_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "5dcdf141-590f-42d6-86bd-460af86147a7",
              "name": "contour_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 2010,
                "y": -100
              }
            }
          },
          "path": []
        },
        {
          "id": "4281ddc6-af44-4e72-bbdc-f2a7e9cef9fc",
          "start": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "597905f3-db79-f46b-db04-dc22cdadf449",
              "name": "x_values",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "3fdbf041-322b-4c7b-b953-10f6cef4b905",
            "connector": {
              "id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "0f2c8fd5-2032-4f0a-9bb7-39054ae7e4c5",
          "start": {
            "connector": {
              "id": "b817a8f6-764d-4003-96c4-b8ba52981fb1",
              "name": "n_grid",
              "data_type": "INT",
              "position": {
                "x": -60,
                "y": 90
              }
            }
          },
          "end": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "64245bba-7e81-ef0a-941d-2f9b5b43d044",
              "name": "n",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "deb0c00b-88c7-4930-8c22-12d18c395fdd",
          "start": {
            "connector": {
              "id": "f468e81c-0e8f-4869-a268-892a391327d6",
              "name": "x_max",
              "data_type": "FLOAT",
              "position": {
                "x": -60,
                "y": 120
              }
            }
          },
          "end": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "02a7f8f6-0fb5-5a65-12d7-a21d61cdd271",
              "name": "x_max",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "978a06f2-1e4c-4df2-bbb6-e3e7bbd43929",
          "start": {
            "connector": {
              "id": "d5c0c6b6-3b9d-48ed-9c40-70ecf14a3d0d",
              "name": "x_min",
              "data_type": "FLOAT",
              "position": {
                "x": -60,
                "y": 150
              }
            }
          },
          "end": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "4ef2610a-4321-004c-aee8-5cbf87ac1a49",
              "name": "x_min",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "89c5c8fb-dad1-402e-9ad9-787ab19b762b",
          "start": {
            "connector": {
              "id": "1cabf944-d63e-4d0d-a1e7-d6c0ffb193c5",
              "name": "y_max",
              "data_type": "FLOAT",
              "position": {
                "x": -60,
                "y": 180
              }
            }
          },
          "end": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "80fb9d9d-d926-8cb6-6a41-777ba806f6ea",
              "name": "y_max",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "81604791-271e-4c79-9f08-19cbf260d39f",
          "start": {
            "connector": {
              "id": "2c212317-15a7-4599-b1f2-b6333a6c7a2b",
              "name": "y_min",
              "data_type": "FLOAT",
              "position": {
                "x": -60,
                "y": 210
              }
            }
          },
          "end": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "b3492592-b3e8-caaa-a4d4-4670d110d7f0",
              "name": "y_min",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "54162076-43a3-4ac1-ab30-9854b5a1ac0b",
          "start": {
            "operator": "d1b7342b-0efa-4a01-b239-d82834d1583f",
            "connector": {
              "id": "4594161b-f878-09c3-ab66-c1803728ea62",
              "name": "decision_function_values",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "e362967a-fa2d-4d7c-8ef9-e58eceb45e2b",
            "connector": {
              "id": "455f7a00-c731-b2ba-ee84-8d8b567bd50e",
              "name": "z",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "fb64fdd5-d9b2-4e73-a480-3436d150d49f",
          "start": {
            "operator": "d1b7342b-0efa-4a01-b239-d82834d1583f",
            "connector": {
              "id": "68234ebe-51c0-96b9-c95b-86548f09e79c",
              "name": "trained_model",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "4983a39a-88c8-4683-a79d-9321eabe30eb",
            "connector": {
              "id": "b7803aec-db20-6bea-970f-0566ded49a7c",
              "name": "input",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "dc00bb92-a52e-4a8a-a91c-6c88cd85f9f1",
          "start": {
            "operator": "3fdbf041-322b-4c7b-b953-10f6cef4b905",
            "connector": {
              "id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "d1b7342b-0efa-4a01-b239-d82834d1583f",
            "connector": {
              "id": "bc5ae666-e1fb-9189-8f72-d681eb5dcfde",
              "name": "test_data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "23fc5984-daf8-482b-859b-3a8eef53f0ce",
          "start": {
            "operator": "2ae1a251-3d86-4323-ae64-0702cfb5a4cf",
            "connector": {
              "id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "d1b7342b-0efa-4a01-b239-d82834d1583f",
            "connector": {
              "id": "017e5542-46dd-e1aa-d6f8-4026dcad3d44",
              "name": "train_data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "a8afb568-965a-4ea0-aaa6-bb23dd373ed5",
          "start": {
            "connector": {
              "id": "8a569d4a-863a-4800-abb5-819cc1e8a030",
              "name": "n_estimators",
              "data_type": "INT",
              "position": {
                "x": 940,
                "y": 240
              }
            }
          },
          "end": {
            "operator": "d1b7342b-0efa-4a01-b239-d82834d1583f",
            "connector": {
              "id": "9861c5a4-1e37-54af-70be-f4e7b81d1f64",
              "name": "n_estimators",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "4001126b-12d1-4879-b911-f5dcd60c9aca",
          "start": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "38be3a38-8761-fc80-cab0-da2c12f4a9c8",
              "name": "y_values",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "3fdbf041-322b-4c7b-b953-10f6cef4b905",
            "connector": {
              "id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "8ca7a384-d0eb-4871-8022-6097bd5dce0c",
          "start": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "474c27a3-df58-7b9f-ff7e-d57a2e416fb9",
              "name": "x_indices",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "e362967a-fa2d-4d7c-8ef9-e58eceb45e2b",
            "connector": {
              "id": "829cbd05-7a33-c931-b16e-a105f9a7c885",
              "name": "x",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "c0d9a49c-3fbf-4ef5-88fa-690d17b9ce02",
          "start": {
            "operator": "74608f8a-d973-4add-9764-ad3348b3bb57",
            "connector": {
              "id": "0e368818-fdfb-6796-a463-8bd9d5ff03e5",
              "name": "y_indices",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "e362967a-fa2d-4d7c-8ef9-e58eceb45e2b",
            "connector": {
              "id": "54e9008c-0451-9e1c-c334-31e3887a4b07",
              "name": "y",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "088d81cf-caa3-4fd4-ab7a-e1538de3b559",
          "start": {
            "connector": {
              "id": "088d81cf-caa3-4fd4-ab7a-e1538de3b559",
              "data_type": "STRING",
              "position": {
                "x": -200,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "1ecddb98-6ae1-48b0-b125-20d3b4e3118c",
            "connector": {
              "id": "44d0fd6a-4f72-3ec1-d5dc-4f8df7029652",
              "name": "name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "a062167b-8fe0-4a48-bd94-552039a4f7af",
          "start": {
            "connector": {
              "id": "a062167b-8fe0-4a48-bd94-552039a4f7af",
              "data_type": "STRING",
              "position": {
                "x": -200,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "2ae1a251-3d86-4323-ae64-0702cfb5a4cf",
            "connector": {
              "id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
              "name": "column_name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "d4ee291f-4476-447d-a161-a6b16fdaf205",
          "start": {
            "connector": {
              "id": "d4ee291f-4476-447d-a161-a6b16fdaf205",
              "data_type": "STRING",
              "position": {
                "x": -200,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "177db51b-6a68-4808-8e09-1a6d87f3e579",
            "connector": {
              "id": "44d0fd6a-4f72-3ec1-d5dc-4f8df7029652",
              "name": "name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "1c3224e0-90e6-4d03-9160-3a9417c27841",
          "name": "y_vals",
          "data_type": "SERIES",
          "operator_id": "1ecddb98-6ae1-48b0-b125-20d3b4e3118c",
          "connector_id": "5336c0a5-97ac-d436-ae5f-ee75fa8c8b40",
          "operator_name": "Name Series (2)",
          "connector_name": "input",
          "position": {
            "x": -50,
            "y": 370
          }
        },
        {
          "id": "b817a8f6-764d-4003-96c4-b8ba52981fb1",
          "name": "n_grid",
          "data_type": "INT",
          "operator_id": "74608f8a-d973-4add-9764-ad3348b3bb57",
          "connector_id": "64245bba-7e81-ef0a-941d-2f9b5b43d044",
          "operator_name": "2D Grid Generator",
          "connector_name": "n",
          "position": {
            "x": -60,
            "y": 90
          }
        },
        {
          "id": "f468e81c-0e8f-4869-a268-892a391327d6",
          "name": "x_max",
          "data_type": "FLOAT",
          "operator_id": "74608f8a-d973-4add-9764-ad3348b3bb57",
          "connector_id": "02a7f8f6-0fb5-5a65-12d7-a21d61cdd271",
          "operator_name": "2D Grid Generator",
          "connector_name": "x_max",
          "position": {
            "x": -60,
            "y": 120
          }
        },
        {
          "id": "d5c0c6b6-3b9d-48ed-9c40-70ecf14a3d0d",
          "name": "x_min",
          "data_type": "FLOAT",
          "operator_id": "74608f8a-d973-4add-9764-ad3348b3bb57",
          "connector_id": "4ef2610a-4321-004c-aee8-5cbf87ac1a49",
          "operator_name": "2D Grid Generator",
          "connector_name": "x_min",
          "position": {
            "x": -60,
            "y": 150
          }
        },
        {
          "id": "1cabf944-d63e-4d0d-a1e7-d6c0ffb193c5",
          "name": "y_max",
          "data_type": "FLOAT",
          "operator_id": "74608f8a-d973-4add-9764-ad3348b3bb57",
          "connector_id": "80fb9d9d-d926-8cb6-6a41-777ba806f6ea",
          "operator_name": "2D Grid Generator",
          "connector_name": "y_max",
          "position": {
            "x": -60,
            "y": 180
          }
        },
        {
          "id": "2c212317-15a7-4599-b1f2-b6333a6c7a2b",
          "name": "y_min",
          "data_type": "FLOAT",
          "operator_id": "74608f8a-d973-4add-9764-ad3348b3bb57",
          "connector_id": "b3492592-b3e8-caaa-a4d4-4670d110d7f0",
          "operator_name": "2D Grid Generator",
          "connector_name": "y_min",
          "position": {
            "x": -60,
            "y": 210
          }
        },
        {
          "id": "8a569d4a-863a-4800-abb5-819cc1e8a030",
          "name": "n_estimators",
          "data_type": "INT",
          "operator_id": "d1b7342b-0efa-4a01-b239-d82834d1583f",
          "connector_id": "9861c5a4-1e37-54af-70be-f4e7b81d1f64",
          "operator_name": "Isolation Forest",
          "connector_name": "n_estimators",
          "position": {
            "x": 940,
            "y": 240
          }
        },
        {
          "id": "196c78f4-6b9a-4476-9b37-ec80986a6a47",
          "name": "x_vals",
          "data_type": "SERIES",
          "operator_id": "177db51b-6a68-4808-8e09-1a6d87f3e579",
          "connector_id": "5336c0a5-97ac-d436-ae5f-ee75fa8c8b40",
          "operator_name": "Name Series",
          "connector_name": "input",
          "position": {
            "x": -50,
            "y": 520
          }
        }
      ],
      "outputs": [
        {
          "id": "5dcdf141-590f-42d6-86bd-460af86147a7",
          "name": "contour_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "e362967a-fa2d-4d7c-8ef9-e58eceb45e2b",
          "connector_id": "53dff70b-364f-e5b7-fbb4-c293a5d2f339",
          "operator_name": "Contour Plot",
          "connector_name": "contour_plot",
          "position": {
            "x": 2010,
            "y": -100
          }
        }
      ],
      "constants": [
        {
          "id": "088d81cf-caa3-4fd4-ab7a-e1538de3b559",
          "data_type": "STRING",
          "operator_id": "1ecddb98-6ae1-48b0-b125-20d3b4e3118c",
          "connector_id": "44d0fd6a-4f72-3ec1-d5dc-4f8df7029652",
          "operator_name": "Name Series (2)",
          "connector_name": "name",
          "position": {
            "x": -200,
            "y": 0
          },
          "value": "y"
        },
        {
          "id": "a062167b-8fe0-4a48-bd94-552039a4f7af",
          "data_type": "STRING",
          "operator_id": "2ae1a251-3d86-4323-ae64-0702cfb5a4cf",
          "connector_id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
          "operator_name": "Combine as named column into DataFrame",
          "connector_name": "column_name",
          "position": {
            "x": -200,
            "y": 0
          },
          "value": "y"
        },
        {
          "id": "d4ee291f-4476-447d-a161-a6b16fdaf205",
          "data_type": "STRING",
          "operator_id": "177db51b-6a68-4808-8e09-1a6d87f3e579",
          "connector_id": "44d0fd6a-4f72-3ec1-d5dc-4f8df7029652",
          "operator_name": "Name Series",
          "connector_name": "name",
          "position": {
            "x": -200,
            "y": 0
          },
          "value": "x"
        }
      ]
    },
    "io_interface": {
      "inputs": [
        {
          "id": "1c3224e0-90e6-4d03-9160-3a9417c27841",
          "name": "y_vals",
          "data_type": "SERIES"
        },
        {
          "id": "b817a8f6-764d-4003-96c4-b8ba52981fb1",
          "name": "n_grid",
          "data_type": "INT"
        },
        {
          "id": "f468e81c-0e8f-4869-a268-892a391327d6",
          "name": "x_max",
          "data_type": "FLOAT"
        },
        {
          "id": "d5c0c6b6-3b9d-48ed-9c40-70ecf14a3d0d",
          "name": "x_min",
          "data_type": "FLOAT"
        },
        {
          "id": "1cabf944-d63e-4d0d-a1e7-d6c0ffb193c5",
          "name": "y_max",
          "data_type": "FLOAT"
        },
        {
          "id": "2c212317-15a7-4599-b1f2-b6333a6c7a2b",
          "name": "y_min",
          "data_type": "FLOAT"
        },
        {
          "id": "8a569d4a-863a-4800-abb5-819cc1e8a030",
          "name": "n_estimators",
          "data_type": "INT"
        },
        {
          "id": "196c78f4-6b9a-4476-9b37-ec80986a6a47",
          "name": "x_vals",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "5dcdf141-590f-42d6-86bd-460af86147a7",
          "name": "contour_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "x_vals",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "[1.4926660699038274,  1.4486349492003316,  1.545047079429781,  1.7766562040081353,  1.2505807659318178,  1.6015711927047858,  1.628988596847932,  1.3396458715336392,  1.5840278529595246,  1.5086498128421368,  1.3082738460682675,  1.3551707245420266,  1.3047677269059343,  1.1957268596520985,  1.589771312984813,  1.455975793914552,  1.5915332443748391,  1.0671794302585895,  1.4328184789507228,  1.4300797641482066,  1.371593563914245,  1.3572668951439502,  1.073447752937404,  1.3622193297093497,  1.428768499159345,  1.22152512422022,  1.3652527468390385,  1.1973235753000264,  1.7253995801240305,  1.2580476038654282,  1.0545478426862762,  1.0117721362450705,  1.1578791662770598,  1.4706967921465253,  1.588673694719522,  1.185161619439323,  1.2706084301887324,  1.2254392300237396,  1.7309807975814855,  1.5866646984481378,  1.5077532976521568,  1.4359288380645205,  1.7056115478250309,  1.0703683587846597,  1.29130889779744,  1.6538359776885998,  1.4408159435606198,  1.1711791234593394,  1.525617905177659,  1.3187467930742898,  1.1115703000418213,  1.4046511262516268,  1.4403180151820365,  1.567297459401348,  1.1779609522464416,  1.5797056640945897,  1.4524569179306048,  1.407045057481754,  1.5290660426464773,  1.312071762829413,  1.345359637593347,  1.2316969297005265,  1.6378821897273843,  1.2760642118414534,  1.4956937623910904,  1.4929910048093062,  1.373894134260888,  1.5852288324502943,  0.9717649740689998,  1.6427129664223548,  1.2175972616435877,  1.297969018791878,  1.7029654724987484,  1.3783156340185647,  1.4904271715813147,  1.5066028188739558,  1.394587992612211,  1.4913153695897412,  1.4618294119028437,  1.1675132195545495,  1.2606787057262103,  1.624438289562031,  1.6646727011995104,  1.4031978084488723,  1.5277458347696196,  1.360746288775963,  1.129613467970032,  1.2690961302828818,  1.3087356812416346,  1.3779695333918085,  1.635634797786497,  1.4567666800055838,  1.4339967622398162,  1.5791665539292576,  1.4127552468820894,  1.5778551373589544,  1.4546758126796373,  1.1843789383694558,  1.4510047706096545,  1.2788758326875431,  0.37509562822595954,  -0.34833296100822775,  1.1273700107814664,  -0.5828114496740056,  -0.6019201001434932,  0.14597543451058187,  0.4926503544251617,  0.2154680856803482,  -0.2551963406058142,  -0.002139457430137104,  0.8030161690272482,  -0.3932162493293685,  0.04430883519637191,  0.7563416189031987,  0.2806832923291206,  -0.08208686777845176,  0.653910377510926,  0.6807191115282479,  0.634442822437029,  0.6345290120742698,  0.25383982484036116,  0.09012530518517568,  0.5408800137167201,  -0.364037407191779,  0.2546865562237355,  -0.715008247735518,  -0.2621021415447864,  -0.369978761751941,  0.02091628468984047,  -0.27296252015885136,  0.4160040529569704,  -0.2833210193862059,  0.046027225855469735,  0.4255764331914481,  0.07521963068477625,  -0.15295839482360765,  0.4238010375247674,  0.045623542908158676,  0.05272157594920685,  0.6908365450933313,  -0.29926365774968744,  0.07313273053381897,  -0.46444785076574824,  0.1617790151198573,  0.3986000441110601,  -0.41386821810115715,  0.03098605262556761,  0.18254492624528804,  0.5308633932968424,  0.590488113956624]"
          }
        },
        {
          "workflow_input_name": "y_vals",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "[2.0918517166758996,  1.6351422204287251,  1.8909793726027093,  2.4315905044436,  1.2556615935484583,  2.5702117297997114,  1.828156926028834,  1.6570902517443413,  1.7755659201933875,  2.0584771141139524,  1.1923644450629016,  1.387518764804023,  1.336018039038431,  1.1558574252722362,  1.9366961318653109,  2.209024991981343,  1.18387329850153,  0.6707142277076383,  1.7757872413025966,  1.2597629314242684,  1.2592926437264724,  1.5912556780223743,  1.1741298861403284,  2.083498869097698,  1.7448564657681116,  1.0509356347394387,  1.5073314682128234,  1.4379901603919265,  2.256544139716419,  1.4042133510277481,  1.3046580436879884,  0.9435742957892798,  0.7083373528683592,  1.4271506957803295,  1.9626931721097658,  1.260008631880525,  1.6062375804929343,  1.260234551919691,  2.2832867901268656,  1.7195152120168693,  2.179155855348661,  1.7018714811783155,  2.094304638395985,  0.8383702568387296,  1.4046944860149435,  2.3567742096381186,  1.6611731095559992,  1.3664794499362192,  1.6608608072628446,  1.8016440494619854,  1.1962660333154607,  2.0264224150527865,  2.0660797791339602,  1.6572699064846772,  1.0201013998608686,  1.5964380435070094,  1.643388772464401,  1.7935542861821359,  2.534110569612279,  1.568169829186863,  1.4832137965448795,  0.6673825045834174,  2.32989012884861,  1.3736537956097497,  1.5270363292351354,  2.4747877068655617,  1.0965899798461711,  1.864573458282914,  0.41062815588379964,  2.356678032367604,  1.2541726055895042,  1.426505717423786,  2.479776486356604,  1.8623157346321435,  1.5631520074165364,  1.673091871655569,  1.3830289178033452,  2.2563192073461384,  1.4696583765860083,  0.730494372366963,  1.3529801574485372,  1.5027970745588133,  2.346001076054482,  1.645770679826545,  2.0197152222035744,  1.405376767215388,  1.0640404860675394,  1.3456315961155996,  1.8790157397383584,  1.5337356541992504,  2.0890407511051685,  1.645689005110392,  1.7507039669819613,  1.406285313513008,  1.5986223975391751,  2.1774012998349765,  1.7434766038349168,  1.210123795100509,  1.753978223324373,  0.8933229057108552,  0.24746883487630933,  0.11100046749003192,  0.02828592739501881,  0.11690155289367475,  0.08733786278367306,  0.1788892936949697,  0.18430378100996064,  0.07471532585846613,  0.2769387623394832,  -0.09008184046979803,  0.07339491751946536,  0.28334568317103104,  0.008365597726208943,  0.3372043953342152,  0.22858171831554708,  0.008250420561521699,  0.3074906219622352,  0.11450092763470078,  0.20194233068818632,  0.0008354561561721291,  -0.11307439734807545,  -0.2473543352654944,  -0.0006302527890497539,  0.08514825206658988,  0.29330191199417466,  0.4601618524597455,  0.08430889361236013,  0.679311889763907,  -0.11966688458500557,  -0.1463627937254497,  0.2511802344795063,  -0.34254425046386805,  0.012058287564334719,  -0.0022185432263827493,  0.10415179706731398,  0.3139573580374533,  0.14076135159552336,  0.26220050962720653,  0.1660724099309663,  0.08783230828142724,  0.02921333386045459,  -0.25771327737864314,  -0.04941755595508762,  -0.08274956154442475,  0.1983390560254339,  -0.0708022007026434,  0.16920349147091363,  0.1987969781712029,  0.10074440858861015,  0.1225206078269434]"
          }
        },
        {
          "workflow_input_name": "n_estimators",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "100"
          }
        },
        {
          "workflow_input_name": "n_grid",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "30"
          }
        },
        {
          "workflow_input_name": "x_max",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "3"
          }
        },
        {
          "workflow_input_name": "x_min",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "-3"
          }
        },
        {
          "workflow_input_name": "y_max",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "3"
          }
        },
        {
          "workflow_input_name": "y_min",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "-3"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "806df1b9-2fc8-4463-943f-3d258c569663",
    "revision_group_id": "9fb25660-ad44-48c9-810a-0badc153e192",
    "name": "Univariate Linear RUL Regression Example",
    "description": "Example workflow demonstrating Univariate Linear RUL Regression",
    "category": "Examples",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T16:33:36.568299+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "## Univariate Linear RUL Regression Example\n\nThis workflow demonstrates a linear regression in order to determine remaining useful life (RUL).\n\nThis workflow can for example be used as an operator in another workflow where other operators may contain data preparation steps like cleaning or filtering.\n\n## Examples\nThe json input of a typical call of this workflow is\n```\n{\n\t\"num_days_forecast\": 30,\n\t\"limit\": 1.3,\n\t\"inp_series\": {\n    \"2020-05-01T00:00:00.000Z\": 2.5340945967,\n    \"2020-05-01T01:00:00.000Z\": 2.5658768256,\n    \"2020-05-01T02:00:00.000Z\": 2.570679579,\n    \"2020-05-01T03:00:00.000Z\": 2.5618633791,\n    \"2020-05-01T04:00:00.000Z\": 2.5709272918,\n    \"2020-05-01T05:00:00.000Z\": 2.5447713467,\n    \"2020-05-01T06:00:00.000Z\": 2.544863302,\n    \"2020-05-01T07:00:00.000Z\": 2.5890837968,\n    \"2020-05-01T08:00:00.000Z\": 2.5646962713,\n    \"2020-05-01T09:00:00.000Z\": 2.5335594298,\n    \"2020-05-01T10:00:00.000Z\": 2.5570004281,\n    \"2020-05-01T11:00:00.000Z\": 2.5279007185,\n    \"2020-05-01T12:00:00.000Z\": 2.5180691208,\n    \"2020-05-01T13:00:00.000Z\": 2.5425170109,\n    \"2020-05-01T14:00:00.000Z\": 2.5193970292,\n    \"2020-05-01T15:00:00.000Z\": 2.505462918,\n    \"2020-05-01T16:00:00.000Z\": 2.5569998157,\n    \"2020-05-01T17:00:00.000Z\": 2.507311926,\n    \"2020-05-01T18:00:00.000Z\": 2.498353005,\n    \"2020-05-01T19:00:00.000Z\": 2.546221722,\n    \"2020-05-01T20:00:00.000Z\": 2.5223358532,\n    \"2020-05-01T21:00:00.000Z\": 2.4936112195,\n    \"2020-05-01T22:00:00.000Z\": 2.4929833196,\n    \"2020-05-01T23:00:00.000Z\": 2.5375547278,\n    \"2020-05-02T00:00:00.000Z\": 2.5104412318,\n    \"2020-05-02T01:00:00.000Z\": 2.5113524681,\n    \"2020-05-02T02:00:00.000Z\": 2.5337742397,\n    \"2020-05-02T03:00:00.000Z\": 2.5038516369,\n    \"2020-05-02T04:00:00.000Z\": 2.4963372908,\n    \"2020-05-02T05:00:00.000Z\": 2.5195275913,\n    \"2020-05-02T06:00:00.000Z\": 2.4935793186,\n    \"2020-05-02T07:00:00.000Z\": 2.5164266646,\n    \"2020-05-02T08:00:00.000Z\": 2.5185465582,\n    \"2020-05-02T09:00:00.000Z\": 2.5350140943,\n    \"2020-05-02T10:00:00.000Z\": 2.5117286988,\n    \"2020-05-02T11:00:00.000Z\": 2.5082871799,\n    \"2020-05-02T12:00:00.000Z\": 2.5149836071,\n    \"2020-05-02T13:00:00.000Z\": 2.5028807486,\n    \"2020-05-02T14:00:00.000Z\": 2.523517088,\n    \"2020-05-02T15:00:00.000Z\": 2.554328315,\n    \"2020-05-02T16:00:00.000Z\": 2.4982672405,\n    \"2020-05-02T17:00:00.000Z\": 2.5212582072,\n    \"2020-05-02T18:00:00.000Z\": 2.5408671362,\n    \"2020-05-02T19:00:00.000Z\": 2.534927499,\n    \"2020-05-02T20:00:00.000Z\": 2.5499492231,\n    \"2020-05-02T21:00:00.000Z\": 2.506651042,\n    \"2020-05-02T22:00:00.000Z\": 2.5362261202,\n    \"2020-05-02T23:00:00.000Z\": 2.5289785015,\n    \"2020-05-03T00:00:00.000Z\": 2.5439596654,\n    \"2020-05-03T01:00:00.000Z\": 2.5349408476,\n    \"2020-05-03T02:00:00.000Z\": 2.4928973472,\n    \"2020-05-03T03:00:00.000Z\": 2.5235283235,\n    \"2020-05-03T04:00:00.000Z\": 2.4952145471,\n    \"2020-05-03T05:00:00.000Z\": 2.5357483131,\n    \"2020-05-03T06:00:00.000Z\": 2.4875558337,\n    \"2020-05-03T07:00:00.000Z\": 2.4976392088,\n    \"2020-05-03T08:00:00.000Z\": 2.4934381565,\n    \"2020-05-03T09:00:00.000Z\": 2.5499418548,\n    \"2020-05-03T10:00:00.000Z\": 2.5353427119,\n    \"2020-05-03T11:00:00.000Z\": 2.5438575598,\n    \"2020-05-03T12:00:00.000Z\": 2.5477980799,\n    \"2020-05-03T13:00:00.000Z\": 2.5353353389,\n    \"2020-05-03T14:00:00.000Z\": 2.490339555,\n    \"2020-05-03T15:00:00.000Z\": 2.5258760102,\n    \"2020-05-03T16:00:00.000Z\": 2.4909430024,\n    \"2020-05-03T17:00:00.000Z\": 2.5418209819,\n    \"2020-05-03T18:00:00.000Z\": 2.4963330331,\n    \"2020-05-03T19:00:00.000Z\": 2.4893977942,\n    \"2020-05-03T20:00:00.000Z\": 2.5157624715,\n    \"2020-05-03T21:00:00.000Z\": 2.5332988324,\n    \"2020-05-03T22:00:00.000Z\": 2.5080267414,\n    \"2020-05-03T23:00:00.000Z\": 2.5110675161,\n    \"2020-05-04T00:00:00.000Z\": 2.4916789597,\n    \"2020-05-04T01:00:00.000Z\": 2.4857544538,\n    \"2020-05-04T02:00:00.000Z\": 2.5523625847,\n    \"2020-05-04T03:00:00.000Z\": 2.5161945193,\n    \"2020-05-04T04:00:00.000Z\": 2.5031237636,\n    \"2020-05-04T05:00:00.000Z\": 2.499693572,\n    \"2020-05-04T06:00:00.000Z\": 2.5310847546,\n    \"2020-05-04T07:00:00.000Z\": 2.5294701706,\n    \"2020-05-04T08:00:00.000Z\": 2.4953251286,\n    \"2020-05-04T09:00:00.000Z\": 2.5145793132,\n    \"2020-05-04T10:00:00.000Z\": 2.537795696,\n    \"2020-05-04T11:00:00.000Z\": 2.5177948972,\n    \"2020-05-04T12:00:00.000Z\": 2.4771575641,\n    \"2020-05-04T13:00:00.000Z\": 2.4766223173,\n    \"2020-05-04T14:00:00.000Z\": 2.4866457947,\n    \"2020-05-04T15:00:00.000Z\": 2.4773926315,\n    \"2020-05-04T16:00:00.000Z\": 2.4849491065,\n    \"2020-05-04T17:00:00.000Z\": 2.4614148496,\n    \"2020-05-04T18:00:00.000Z\": 2.5140566144,\n    \"2020-05-04T19:00:00.000Z\": 2.4610181004,\n    \"2020-05-04T20:00:00.000Z\": 2.5032041998,\n    \"2020-05-04T21:00:00.000Z\": 2.4602600843,\n    \"2020-05-04T22:00:00.000Z\": 2.4425060895,\n    \"2020-05-04T23:00:00.000Z\": 2.4887562624,\n    \"2020-05-05T00:00:00.000Z\": 2.4587981472,\n    \"2020-05-05T01:00:00.000Z\": 2.4976287919,\n    \"2020-05-05T02:00:00.000Z\": 2.4759566315,\n    \"2020-05-05T03:00:00.000Z\": 2.4983647141,\n    \"2020-05-05T04:00:00.000Z\": 2.4481869955,\n    \"2020-05-05T05:00:00.000Z\": 2.4620033756,\n    \"2020-05-05T06:00:00.000Z\": 2.4722438504,\n    \"2020-05-05T07:00:00.000Z\": 2.4836028877,\n    \"2020-05-05T08:00:00.000Z\": 2.4999365634,\n    \"2020-05-05T09:00:00.000Z\": 2.4590343725,\n    \"2020-05-05T10:00:00.000Z\": 2.485029072,\n    \"2020-05-05T11:00:00.000Z\": 2.4832933203,\n    \"2020-05-05T12:00:00.000Z\": 2.4493189797,\n    \"2020-05-05T13:00:00.000Z\": 2.4555612652,\n    \"2020-05-05T14:00:00.000Z\": 2.4331822011,\n    \"2020-05-05T15:00:00.000Z\": 2.4437542619,\n    \"2020-05-05T16:00:00.000Z\": 2.4103224236,\n    \"2020-05-05T17:00:00.000Z\": 2.4599756767,\n    \"2020-05-05T18:00:00.000Z\": 2.4195711603,\n    \"2020-05-05T19:00:00.000Z\": 2.4204898355,\n    \"2020-05-05T20:00:00.000Z\": 2.4271840023,\n    \"2020-05-05T21:00:00.000Z\": 2.4093728506,\n    \"2020-05-05T22:00:00.000Z\": 2.4287596847,\n    \"2020-05-05T23:00:00.000Z\": 2.4502553829,\n    \"2020-05-06T00:00:00.000Z\": 2.4032112072,\n    \"2020-05-06T01:00:00.000Z\": 2.4164635616,\n    \"2020-05-06T02:00:00.000Z\": 2.3964321581,\n    \"2020-05-06T03:00:00.000Z\": 2.4296400627,\n    \"2020-05-06T04:00:00.000Z\": 2.4597693405,\n    \"2020-05-06T05:00:00.000Z\": 2.4051327723,\n    \"2020-05-06T06:00:00.000Z\": 2.39231384,\n    \"2020-05-06T07:00:00.000Z\": 2.4227524163,\n    \"2020-05-06T08:00:00.000Z\": 2.4241047304,\n    \"2020-05-06T09:00:00.000Z\": 2.383595989,\n    \"2020-05-06T10:00:00.000Z\": 2.3830219146,\n    \"2020-05-06T11:00:00.000Z\": 2.391330956,\n    \"2020-05-06T12:00:00.000Z\": 2.4083971686,\n    \"2020-05-06T13:00:00.000Z\": 2.4019011994,\n    \"2020-05-06T14:00:00.000Z\": 2.3741282476,\n    \"2020-05-06T15:00:00.000Z\": 2.408673447,\n    \"2020-05-06T16:00:00.000Z\": 2.3888631077,\n    \"2020-05-06T17:00:00.000Z\": 2.3805006535,\n    \"2020-05-06T18:00:00.000Z\": 2.4118540536,\n    \"2020-05-06T19:00:00.000Z\": 2.3915179257,\n    \"2020-05-06T20:00:00.000Z\": 2.3692830106,\n    \"2020-05-06T21:00:00.000Z\": 2.4088917478,\n    \"2020-05-06T22:00:00.000Z\": 2.3724274396,\n    \"2020-05-06T23:00:00.000Z\": 2.3524618611,\n    \"2020-05-07T00:00:00.000Z\": 2.3824901899,\n    \"2020-05-07T01:00:00.000Z\": 2.39644748,\n    \"2020-05-07T02:00:00.000Z\": 2.4080285331,\n    \"2020-05-07T03:00:00.000Z\": 2.3540845158,\n    \"2020-05-07T04:00:00.000Z\": 2.377081574,\n    \"2020-05-07T05:00:00.000Z\": 2.3825706704,\n    \"2020-05-07T06:00:00.000Z\": 2.3969814116,\n    \"2020-05-07T07:00:00.000Z\": 2.3902110487,\n    \"2020-05-07T08:00:00.000Z\": 2.8876608764,\n    \"2020-05-07T09:00:00.000Z\": 2.8554512351,\n    \"2020-05-07T10:00:00.000Z\": 2.9011506947,\n    \"2020-05-07T11:00:00.000Z\": 2.8739810027,\n    \"2020-05-07T12:00:00.000Z\": 2.8642327429,\n    \"2020-05-07T13:00:00.000Z\": 2.8609388862,\n    \"2020-05-07T14:00:00.000Z\": 2.8691609675,\n    \"2020-05-07T15:00:00.000Z\": 2.8516302986,\n    \"2020-05-07T16:00:00.000Z\": 2.8860791586,\n    \"2020-05-07T17:00:00.000Z\": 2.8417859745,\n    \"2020-05-07T18:00:00.000Z\": 2.8577750865,\n    \"2020-05-07T19:00:00.000Z\": 2.861678322,\n    \"2020-05-07T20:00:00.000Z\": 2.8064804686,\n    \"2020-05-07T21:00:00.000Z\": 2.8447594889,\n    \"2020-05-07T22:00:00.000Z\": 2.855936299,\n    \"2020-05-07T23:00:00.000Z\": 2.8142863343,\n    \"2020-05-08T00:00:00.000Z\": 2.8373024815,\n    \"2020-05-08T01:00:00.000Z\": 2.8435283639,\n    \"2020-05-08T02:00:00.000Z\": 2.8654301284,\n    \"2020-05-08T03:00:00.000Z\": 2.821334943,\n    \"2020-05-08T04:00:00.000Z\": 2.8432670041,\n    \"2020-05-08T05:00:00.000Z\": 2.8557929741,\n    \"2020-05-08T06:00:00.000Z\": 2.8156375097,\n    \"2020-05-08T07:00:00.000Z\": 2.855427583,\n    \"2020-05-08T08:00:00.000Z\": 2.8338698983,\n    \"2020-05-08T09:00:00.000Z\": 2.8455777397,\n    \"2020-05-08T10:00:00.000Z\": 2.8302046473,\n    \"2020-05-08T11:00:00.000Z\": 2.811772505,\n    \"2020-05-08T12:00:00.000Z\": 2.8327504575,\n    \"2020-05-08T13:00:00.000Z\": 2.8149162137,\n    \"2020-05-08T14:00:00.000Z\": 2.8418180107,\n    \"2020-05-08T15:00:00.000Z\": 2.77624676,\n    \"2020-05-08T16:00:00.000Z\": 2.7750554183,\n    \"2020-05-08T17:00:00.000Z\": 2.8217362031,\n    \"2020-05-08T18:00:00.000Z\": 2.7887413672,\n    \"2020-05-08T19:00:00.000Z\": 2.8221631708,\n    \"2020-05-08T20:00:00.000Z\": 2.7607433072,\n    \"2020-05-08T21:00:00.000Z\": 2.8068503911,\n    \"2020-05-08T22:00:00.000Z\": 2.8275220851,\n    \"2020-05-08T23:00:00.000Z\": 2.7854105273,\n    \"2020-05-09T00:00:00.000Z\": 2.8234034853,\n    \"2020-05-09T01:00:00.000Z\": 2.7770116762,\n    \"2020-05-09T02:00:00.000Z\": 2.8169012822,\n    \"2020-05-09T03:00:00.000Z\": 2.7867158786,\n    \"2020-05-09T04:00:00.000Z\": 2.7771182754,\n    \"2020-05-09T05:00:00.000Z\": 2.8149487573,\n    \"2020-05-09T06:00:00.000Z\": 2.804412661,\n    \"2020-05-09T07:00:00.000Z\": 2.8110121218,\n    \"2020-05-09T08:00:00.000Z\": 2.7997556599,\n    \"2020-05-09T09:00:00.000Z\": 2.827594843,\n    \"2020-05-09T10:00:00.000Z\": 2.8026913184,\n    \"2020-05-09T11:00:00.000Z\": 2.7666065452,\n    \"2020-05-09T12:00:00.000Z\": 2.8146925781,\n    \"2020-05-09T13:00:00.000Z\": 2.8285910075,\n    \"2020-05-09T14:00:00.000Z\": 2.819171443,\n    \"2020-05-09T15:00:00.000Z\": 2.8276060552,\n    \"2020-05-09T16:00:00.000Z\": 2.786607283,\n    \"2020-05-09T17:00:00.000Z\": 2.8048391834,\n    \"2020-05-09T18:00:00.000Z\": 2.8159184436,\n    \"2020-05-09T19:00:00.000Z\": 2.7891395973,\n    \"2020-05-09T20:00:00.000Z\": 2.8116468863,\n    \"2020-05-09T21:00:00.000Z\": 2.7978174856,\n    \"2020-05-09T22:00:00.000Z\": 2.7989229558,\n    \"2020-05-09T23:00:00.000Z\": 2.7688699705,\n    \"2020-05-10T00:00:00.000Z\": 2.8017221595,\n    \"2020-05-10T01:00:00.000Z\": 2.772552825,\n    \"2020-05-10T02:00:00.000Z\": 2.7706036817,\n    \"2020-05-10T03:00:00.000Z\": 2.8012202962,\n    \"2020-05-10T04:00:00.000Z\": 2.785791312,\n    \"2020-05-10T05:00:00.000Z\": 2.7742417236,\n    \"2020-05-10T06:00:00.000Z\": 2.7712404497,\n    \"2020-05-10T07:00:00.000Z\": 2.8023151587,\n    \"2020-05-10T08:00:00.000Z\": 2.8038778267,\n    \"2020-05-10T09:00:00.000Z\": 2.7654629581,\n    \"2020-05-10T10:00:00.000Z\": 2.7723918403,\n    \"2020-05-10T11:00:00.000Z\": 2.7758481247,\n    \"2020-05-10T12:00:00.000Z\": 2.767177124,\n    \"2020-05-10T13:00:00.000Z\": 2.7656505946,\n    \"2020-05-10T14:00:00.000Z\": 2.7967909952,\n    \"2020-05-10T15:00:00.000Z\": 2.7623871484,\n    \"2020-05-10T16:00:00.000Z\": 2.7634893745,\n    \"2020-05-10T17:00:00.000Z\": 2.8194647161,\n    \"2020-05-10T18:00:00.000Z\": 2.770016505,\n    \"2020-05-10T19:00:00.000Z\": 2.791569751,\n    \"2020-05-10T20:00:00.000Z\": 2.7731723248,\n    \"2020-05-10T21:00:00.000Z\": 2.7867953525,\n    \"2020-05-10T22:00:00.000Z\": 2.779407642,\n    \"2020-05-10T23:00:00.000Z\": 2.8176463762,\n    \"2020-05-11T00:00:00.000Z\": 2.7962230453,\n    \"2020-05-11T01:00:00.000Z\": 2.7806077636,\n    \"2020-05-11T02:00:00.000Z\": 2.8055549689,\n    \"2020-05-11T03:00:00.000Z\": 2.7778179322,\n    \"2020-05-11T04:00:00.000Z\": 2.7663530922,\n    \"2020-05-11T05:00:00.000Z\": 2.8133794994,\n    \"2020-05-11T06:00:00.000Z\": 2.8175014886,\n    \"2020-05-11T07:00:00.000Z\": 2.8094160034,\n    \"2020-05-11T08:00:00.000Z\": 2.7852624609,\n    \"2020-05-11T09:00:00.000Z\": 2.7784953118,\n    \"2020-05-11T10:00:00.000Z\": 2.7841129905,\n    \"2020-05-11T11:00:00.000Z\": 2.7954359299,\n    \"2020-05-11T12:00:00.000Z\": 2.7670627932,\n    \"2020-05-11T13:00:00.000Z\": 2.7513481564,\n    \"2020-05-11T14:00:00.000Z\": 2.7789241783,\n    \"2020-05-11T15:00:00.000Z\": 2.7950077875,\n    \"2020-05-11T16:00:00.000Z\": 2.7340843339,\n    \"2020-05-11T17:00:00.000Z\": 2.7706471042,\n    \"2020-05-11T18:00:00.000Z\": 2.7340350929,\n    \"2020-05-11T19:00:00.000Z\": 2.7857325803,\n    \"2020-05-11T20:00:00.000Z\": 2.7754412275,\n    \"2020-05-11T21:00:00.000Z\": 2.7255128288,\n    \"2020-05-11T22:00:00.000Z\": 2.7736621437,\n    \"2020-05-11T23:00:00.000Z\": 2.7741544669,\n    \"2020-05-12T00:00:00.000Z\": 2.7567000156,\n    \"2020-05-12T01:00:00.000Z\": 2.7286863092,\n    \"2020-05-12T02:00:00.000Z\": 2.7251265494,\n    \"2020-05-12T03:00:00.000Z\": 2.7373543428,\n    \"2020-05-12T04:00:00.000Z\": 2.7232293938,\n    \"2020-05-12T05:00:00.000Z\": 2.7407298649,\n    \"2020-05-12T06:00:00.000Z\": 2.7512581857,\n    \"2020-05-12T07:00:00.000Z\": 2.720196368,\n    \"2020-05-12T08:00:00.000Z\": 2.7268853219,\n    \"2020-05-12T09:00:00.000Z\": 2.7248220638,\n    \"2020-05-12T10:00:00.000Z\": 2.7589560897,\n    \"2020-05-12T11:00:00.000Z\": 2.7355221787,\n    \"2020-05-12T12:00:00.000Z\": 2.7154885845,\n    \"2020-05-12T13:00:00.000Z\": 2.6972396153,\n    \"2020-05-12T14:00:00.000Z\": 2.6945708743,\n    \"2020-05-12T15:00:00.000Z\": 2.728854137,\n    \"2020-05-12T16:00:00.000Z\": 2.741924416,\n    \"2020-05-12T17:00:00.000Z\": 2.681514517,\n    \"2020-05-12T18:00:00.000Z\": 2.7359950179,\n    \"2020-05-12T19:00:00.000Z\": 2.7258032095,\n    \"2020-05-12T20:00:00.000Z\": 2.7151585953,\n    \"2020-05-12T21:00:00.000Z\": 2.6768890865,\n    \"2020-05-12T22:00:00.000Z\": 2.7274083591,\n    \"2020-05-12T23:00:00.000Z\": 2.6761276008,\n    \"2020-05-13T00:00:00.000Z\": 2.7166516426,\n    \"2020-05-13T01:00:00.000Z\": 2.6845210743,\n    \"2020-05-13T02:00:00.000Z\": 2.7179678993,\n    \"2020-05-13T03:00:00.000Z\": 2.6928699958,\n    \"2020-05-13T04:00:00.000Z\": 2.7208969343,\n    \"2020-05-13T05:00:00.000Z\": 2.6712462796,\n    \"2020-05-13T06:00:00.000Z\": 2.7076362206,\n    \"2020-05-13T07:00:00.000Z\": 2.7303837224,\n    \"2020-05-13T08:00:00.000Z\": 2.7057166449,\n    \"2020-05-13T09:00:00.000Z\": 2.6738723965,\n    \"2020-05-13T10:00:00.000Z\": 2.6983200178,\n    \"2020-05-13T11:00:00.000Z\": 2.7183696993,\n    \"2020-05-13T12:00:00.000Z\": 2.6584979712,\n    \"2020-05-13T13:00:00.000Z\": 2.7019644564,\n    \"2020-05-13T14:00:00.000Z\": 2.6980747823,\n    \"2020-05-13T15:00:00.000Z\": 2.6837261034,\n    \"2020-05-13T16:00:00.000Z\": 2.6480272182,\n    \"2020-05-13T17:00:00.000Z\": 2.6373243943,\n    \"2020-05-13T18:00:00.000Z\": 2.6789372856,\n    \"2020-05-13T19:00:00.000Z\": 2.6539083585,\n    \"2020-05-13T20:00:00.000Z\": 2.6905034117,\n    \"2020-05-13T21:00:00.000Z\": 2.6637545007,\n    \"2020-05-13T22:00:00.000Z\": 2.6615138317,\n    \"2020-05-13T23:00:00.000Z\": 2.6877730651,\n    \"2020-05-14T00:00:00.000Z\": 2.6778959828,\n    \"2020-05-14T01:00:00.000Z\": 2.6791458864,\n    \"2020-05-14T02:00:00.000Z\": 2.6282751287,\n    \"2020-05-14T03:00:00.000Z\": 2.691481752,\n    \"2020-05-14T04:00:00.000Z\": 2.6438410933,\n    \"2020-05-14T05:00:00.000Z\": 2.6446438349,\n    \"2020-05-14T06:00:00.000Z\": 2.6664778986,\n    \"2020-05-14T07:00:00.000Z\": 2.6749865152,\n    \"2020-05-14T08:00:00.000Z\": 2.6197573996,\n    \"2020-05-14T09:00:00.000Z\": 2.63033336,\n    \"2020-05-14T10:00:00.000Z\": 2.6196842281,\n    \"2020-05-14T11:00:00.000Z\": 2.665106046,\n    \"2020-05-14T12:00:00.000Z\": 2.653752376,\n    \"2020-05-14T13:00:00.000Z\": 2.6624281378,\n    \"2020-05-14T14:00:00.000Z\": 2.6601045184,\n    \"2020-05-14T15:00:00.000Z\": 2.6642180189,\n    \"2020-05-14T16:00:00.000Z\": 2.6121169417,\n    \"2020-05-14T17:00:00.000Z\": 2.617543464,\n    \"2020-05-14T18:00:00.000Z\": 2.6513501098,\n    \"2020-05-14T19:00:00.000Z\": 2.6522931433,\n    \"2020-05-14T20:00:00.000Z\": 2.6010705104,\n    \"2020-05-14T21:00:00.000Z\": 2.6449498766,\n    \"2020-05-14T22:00:00.000Z\": 2.5983408246,\n    \"2020-05-14T23:00:00.000Z\": 2.5985499313,\n    \"2020-05-15T00:00:00.000Z\": 2.6413951229,\n    \"2020-05-15T01:00:00.000Z\": 2.6424818539,\n    \"2020-05-15T02:00:00.000Z\": 2.5927885137,\n    \"2020-05-15T03:00:00.000Z\": 2.6240514022,\n    \"2020-05-15T04:00:00.000Z\": 2.5925715035,\n    \"2020-05-15T05:00:00.000Z\": 2.6138055716,\n    \"2020-05-15T06:00:00.000Z\": 2.5910883652,\n    \"2020-05-15T07:00:00.000Z\": 2.5769435193,\n    \"2020-05-15T08:00:00.000Z\": 2.6266156697,\n    \"2020-05-15T09:00:00.000Z\": 2.6374539388,\n    \"2020-05-15T10:00:00.000Z\": 2.5787424447,\n    \"2020-05-15T11:00:00.000Z\": 2.5678192952,\n    \"2020-05-15T12:00:00.000Z\": 2.6153927681,\n    \"2020-05-15T13:00:00.000Z\": 2.5853832131,\n    \"2020-05-15T14:00:00.000Z\": 2.6132661902,\n    \"2020-05-15T15:00:00.000Z\": 2.5931169794,\n    \"2020-05-15T16:00:00.000Z\": 2.5833136246,\n    \"2020-05-15T17:00:00.000Z\": 2.591572653,\n    \"2020-05-15T18:00:00.000Z\": 2.5957702589,\n    \"2020-05-15T19:00:00.000Z\": 2.5913523358,\n    \"2020-05-15T20:00:00.000Z\": 2.601923737,\n    \"2020-05-15T21:00:00.000Z\": 2.5841345704,\n    \"2020-05-15T22:00:00.000Z\": 2.5392555788,\n    \"2020-05-15T23:00:00.000Z\": 2.5391458001,\n    \"2020-05-16T00:00:00.000Z\": 2.5678552605,\n    \"2020-05-16T01:00:00.000Z\": 2.5837382437,\n    \"2020-05-16T02:00:00.000Z\": 2.575568777,\n    \"2020-05-16T03:00:00.000Z\": 2.5546579073,\n    \"2020-05-16T04:00:00.000Z\": 2.5788964958,\n    \"2020-05-16T05:00:00.000Z\": 2.5711382881,\n    \"2020-05-16T06:00:00.000Z\": 2.5954454415,\n    \"2020-05-16T07:00:00.000Z\": 2.5547805625,\n    \"2020-05-16T08:00:00.000Z\": 2.5734597485,\n    \"2020-05-16T09:00:00.000Z\": 2.5353495222,\n    \"2020-05-16T10:00:00.000Z\": 2.5712632657,\n    \"2020-05-16T11:00:00.000Z\": 2.5893826923,\n    \"2020-05-16T12:00:00.000Z\": 2.5872103903,\n    \"2020-05-16T13:00:00.000Z\": 2.5923852379,\n    \"2020-05-16T14:00:00.000Z\": 2.5792818832,\n    \"2020-05-16T15:00:00.000Z\": 2.5990198819,\n    \"2020-05-16T16:00:00.000Z\": 2.5778749408,\n    \"2020-05-16T17:00:00.000Z\": 2.543925516,\n    \"2020-05-16T18:00:00.000Z\": 2.5972598182,\n    \"2020-05-16T19:00:00.000Z\": 2.5423908565,\n    \"2020-05-16T20:00:00.000Z\": 2.5578227224,\n    \"2020-05-16T21:00:00.000Z\": 2.5858883985,\n    \"2020-05-16T22:00:00.000Z\": 2.5805623562,\n    \"2020-05-16T23:00:00.000Z\": 2.5448297192,\n    \"2020-05-17T00:00:00.000Z\": 2.5491601489,\n    \"2020-05-17T01:00:00.000Z\": 2.5731124094,\n    \"2020-05-17T02:00:00.000Z\": 2.5736406969,\n    \"2020-05-17T03:00:00.000Z\": 2.5626850061,\n    \"2020-05-17T04:00:00.000Z\": 2.5436138376,\n    \"2020-05-17T05:00:00.000Z\": 2.5855244367,\n    \"2020-05-17T06:00:00.000Z\": 2.5701957181,\n    \"2020-05-17T07:00:00.000Z\": 2.5898424455,\n    \"2020-05-17T08:00:00.000Z\": 2.5407796698,\n    \"2020-05-17T09:00:00.000Z\": 2.6043293124,\n    \"2020-05-17T10:00:00.000Z\": 2.5897971392,\n    \"2020-05-17T11:00:00.000Z\": 2.591151675,\n    \"2020-05-17T12:00:00.000Z\": 2.5381999262,\n    \"2020-05-17T13:00:00.000Z\": 2.5496228887,\n    \"2020-05-17T14:00:00.000Z\": 2.5541065096,\n    \"2020-05-17T15:00:00.000Z\": 2.5871030528,\n    \"2020-05-17T16:00:00.000Z\": 2.6038788497,\n    \"2020-05-17T17:00:00.000Z\": 2.5506534759,\n    \"2020-05-17T18:00:00.000Z\": 2.5866884411,\n    \"2020-05-17T19:00:00.000Z\": 2.5455842598,\n    \"2020-05-17T20:00:00.000Z\": 2.5487742565,\n    \"2020-05-17T21:00:00.000Z\": 2.5406442875,\n    \"2020-05-17T22:00:00.000Z\": 2.5737797011,\n    \"2020-05-17T23:00:00.000Z\": 2.5390274429,\n    \"2020-05-18T00:00:00.000Z\": 2.561363499,\n    \"2020-05-18T01:00:00.000Z\": 2.5911964892,\n    \"2020-05-18T02:00:00.000Z\": 2.5796647228,\n    \"2020-05-18T03:00:00.000Z\": 2.5697442187,\n    \"2020-05-18T04:00:00.000Z\": 2.5946197386,\n    \"2020-05-18T05:00:00.000Z\": 2.6040066764,\n    \"2020-05-18T06:00:00.000Z\": 2.5510987719,\n    \"2020-05-18T07:00:00.000Z\": 2.5467777836,\n    \"2020-05-18T08:00:00.000Z\": 2.5285608801,\n    \"2020-05-18T09:00:00.000Z\": 2.5624147864,\n    \"2020-05-18T10:00:00.000Z\": 2.5722812283,\n    \"2020-05-18T11:00:00.000Z\": 2.5278309885,\n    \"2020-05-18T12:00:00.000Z\": 2.5354241218,\n    \"2020-05-18T13:00:00.000Z\": 2.5589556058,\n    \"2020-05-18T14:00:00.000Z\": 2.5464946567,\n    \"2020-05-18T15:00:00.000Z\": 2.5107928288,\n    \"2020-05-18T16:00:00.000Z\": 2.5077725848,\n    \"2020-05-18T17:00:00.000Z\": 2.5586393555,\n    \"2020-05-18T18:00:00.000Z\": 2.5007512067,\n    \"2020-05-18T19:00:00.000Z\": 2.5039389529,\n    \"2020-05-18T20:00:00.000Z\": 2.4914330926,\n    \"2020-05-18T21:00:00.000Z\": 2.5565952434,\n    \"2020-05-18T22:00:00.000Z\": 2.5287467728,\n    \"2020-05-18T23:00:00.000Z\": 2.522552616,\n    \"2020-05-19T00:00:00.000Z\": 2.549253813,\n    \"2020-05-19T01:00:00.000Z\": 2.556982035,\n    \"2020-05-19T02:00:00.000Z\": 2.5008039191,\n    \"2020-05-19T03:00:00.000Z\": 2.4974688627,\n    \"2020-05-19T04:00:00.000Z\": 2.5190140812,\n    \"2020-05-19T05:00:00.000Z\": 2.4941905269,\n    \"2020-05-19T06:00:00.000Z\": 2.5027892972,\n    \"2020-05-19T07:00:00.000Z\": 2.4878828835,\n    \"2020-05-19T08:00:00.000Z\": 2.5477026977,\n    \"2020-05-19T09:00:00.000Z\": 2.5224390682,\n    \"2020-05-19T10:00:00.000Z\": 2.535521406,\n    \"2020-05-19T11:00:00.000Z\": 2.5355743475,\n    \"2020-05-19T12:00:00.000Z\": 2.4792855611,\n    \"2020-05-19T13:00:00.000Z\": 2.5215776496,\n    \"2020-05-19T14:00:00.000Z\": 2.5044866209,\n    \"2020-05-19T15:00:00.000Z\": 2.4703409983,\n    \"2020-05-19T16:00:00.000Z\": 2.4601050583,\n    \"2020-05-19T17:00:00.000Z\": 2.4696577071,\n    \"2020-05-19T18:00:00.000Z\": 2.4938061169,\n    \"2020-05-19T19:00:00.000Z\": 2.5085306803,\n    \"2020-05-19T20:00:00.000Z\": 2.4842918727,\n    \"2020-05-19T21:00:00.000Z\": 2.4808950741,\n    \"2020-05-19T22:00:00.000Z\": 2.4660397747,\n    \"2020-05-19T23:00:00.000Z\": 2.4943824127,\n    \"2020-05-20T00:00:00.000Z\": 2.4817219064,\n    \"2020-05-20T01:00:00.000Z\": 2.5147926716,\n    \"2020-05-20T02:00:00.000Z\": 2.470617541,\n    \"2020-05-20T03:00:00.000Z\": 2.4616569742,\n    \"2020-05-20T04:00:00.000Z\": 2.4553394116,\n    \"2020-05-20T05:00:00.000Z\": 2.4874017253,\n    \"2020-05-20T06:00:00.000Z\": 2.4713692517,\n    \"2020-05-20T07:00:00.000Z\": 2.442824733,\n    \"2020-05-20T08:00:00.000Z\": 2.4667143821,\n    \"2020-05-20T09:00:00.000Z\": 2.4675433882,\n    \"2020-05-20T10:00:00.000Z\": 2.4729672287,\n    \"2020-05-20T11:00:00.000Z\": 2.4588428232,\n    \"2020-05-20T12:00:00.000Z\": 2.447491051,\n    \"2020-05-20T13:00:00.000Z\": 2.4471712469,\n    \"2020-05-20T14:00:00.000Z\": 2.4346698167,\n    \"2020-05-20T15:00:00.000Z\": 2.4578873391,\n    \"2020-05-20T16:00:00.000Z\": 2.4737688817,\n    \"2020-05-20T17:00:00.000Z\": 2.44960546,\n    \"2020-05-20T18:00:00.000Z\": 2.4650394974,\n    \"2020-05-20T19:00:00.000Z\": 2.4429578423,\n    \"2020-05-20T20:00:00.000Z\": 2.4125596516,\n    \"2020-05-20T21:00:00.000Z\": 2.4147819577,\n    \"2020-05-20T22:00:00.000Z\": 2.4481842665,\n    \"2020-05-20T23:00:00.000Z\": 2.4224650937,\n    \"2020-05-21T00:00:00.000Z\": 2.4026664814,\n    \"2020-05-21T01:00:00.000Z\": 2.466764339,\n    \"2020-05-21T02:00:00.000Z\": 2.4513187372,\n    \"2020-05-21T03:00:00.000Z\": 2.458536271,\n    \"2020-05-21T04:00:00.000Z\": 2.4245890798,\n    \"2020-05-21T05:00:00.000Z\": 2.4688075588,\n    \"2020-05-21T06:00:00.000Z\": 2.4405861286,\n    \"2020-05-21T07:00:00.000Z\": 2.3964599329,\n    \"2020-05-21T08:00:00.000Z\": 2.435074941,\n    \"2020-05-21T09:00:00.000Z\": 2.4060865447,\n    \"2020-05-21T10:00:00.000Z\": 2.4452533621,\n    \"2020-05-21T11:00:00.000Z\": 2.3889190886,\n    \"2020-05-21T12:00:00.000Z\": 2.3827470555,\n    \"2020-05-21T13:00:00.000Z\": 2.3999072124,\n    \"2020-05-21T14:00:00.000Z\": 2.3811214257,\n    \"2020-05-21T15:00:00.000Z\": 2.3957512349,\n    \"2020-05-21T16:00:00.000Z\": 2.367176444,\n    \"2020-05-21T17:00:00.000Z\": 2.3667989162,\n    \"2020-05-21T18:00:00.000Z\": 2.4097563074,\n    \"2020-05-21T19:00:00.000Z\": 2.364553978,\n    \"2020-05-21T20:00:00.000Z\": 2.3876010939,\n    \"2020-05-21T21:00:00.000Z\": 2.3854184921,\n    \"2020-05-21T22:00:00.000Z\": 2.3732121899,\n    \"2020-05-21T23:00:00.000Z\": 2.3901082352,\n    \"2020-05-22T00:00:00.000Z\": 2.3737547667,\n    \"2020-05-22T01:00:00.000Z\": 2.3845882331,\n    \"2020-05-22T02:00:00.000Z\": 2.3605831468,\n    \"2020-05-22T03:00:00.000Z\": 2.3828253831,\n    \"2020-05-22T04:00:00.000Z\": 2.3717004247,\n    \"2020-05-22T05:00:00.000Z\": 2.3632612577,\n    \"2020-05-22T06:00:00.000Z\": 2.3792611882,\n    \"2020-05-22T07:00:00.000Z\": 2.3633100994,\n    \"2020-05-22T08:00:00.000Z\": 2.3894403828,\n    \"2020-05-22T09:00:00.000Z\": 2.3584370477,\n    \"2020-05-22T10:00:00.000Z\": 2.3933310636,\n    \"2020-05-22T11:00:00.000Z\": 2.3871154084,\n    \"2020-05-22T12:00:00.000Z\": 2.380782142,\n    \"2020-05-22T13:00:00.000Z\": 2.3701802855,\n    \"2020-05-22T14:00:00.000Z\": 2.3835220151,\n    \"2020-05-22T15:00:00.000Z\": 2.3760978453,\n    \"2020-05-22T16:00:00.000Z\": 2.3373011628,\n    \"2020-05-22T17:00:00.000Z\": 2.3382425414,\n    \"2020-05-22T18:00:00.000Z\": 2.3650870754,\n    \"2020-05-22T19:00:00.000Z\": 2.3587905078,\n    \"2020-05-22T20:00:00.000Z\": 2.3215876808,\n    \"2020-05-22T21:00:00.000Z\": 2.3288642393,\n    \"2020-05-22T22:00:00.000Z\": 2.3696680585,\n    \"2020-05-22T23:00:00.000Z\": 2.3575409325,\n    \"2020-05-23T00:00:00.000Z\": 2.317467971,\n    \"2020-05-23T01:00:00.000Z\": 2.3163217478,\n    \"2020-05-23T02:00:00.000Z\": 2.3497703926,\n    \"2020-05-23T03:00:00.000Z\": 2.3673813145,\n    \"2020-05-23T04:00:00.000Z\": 2.348324602,\n    \"2020-05-23T05:00:00.000Z\": 2.3183434648,\n    \"2020-05-23T06:00:00.000Z\": 2.3177696674,\n    \"2020-05-23T07:00:00.000Z\": 2.3515651594,\n    \"2020-05-23T08:00:00.000Z\": 2.3128771772,\n    \"2020-05-23T09:00:00.000Z\": 2.3163857401,\n    \"2020-05-23T10:00:00.000Z\": 2.356220498,\n    \"2020-05-23T11:00:00.000Z\": 2.3230863058,\n    \"2020-05-23T12:00:00.000Z\": 2.3222366944,\n    \"2020-05-23T13:00:00.000Z\": 2.3503805409,\n    \"2020-05-23T14:00:00.000Z\": 2.3635722983,\n    \"2020-05-23T15:00:00.000Z\": 2.3646286918,\n    \"2020-05-23T16:00:00.000Z\": 2.3578381079,\n    \"2020-05-23T17:00:00.000Z\": 2.3176569752,\n    \"2020-05-23T18:00:00.000Z\": 2.3414491826,\n    \"2020-05-23T19:00:00.000Z\": 2.331806027,\n    \"2020-05-23T20:00:00.000Z\": 2.3117808223,\n    \"2020-05-23T21:00:00.000Z\": 2.3753074369,\n    \"2020-05-23T22:00:00.000Z\": 2.3113172098,\n    \"2020-05-23T23:00:00.000Z\": 2.3265853179,\n    \"2020-05-24T00:00:00.000Z\": 2.3732642937,\n    \"2020-05-24T01:00:00.000Z\": 2.3680356495,\n    \"2020-05-24T02:00:00.000Z\": 2.374909295,\n    \"2020-05-24T03:00:00.000Z\": 2.3493766638,\n    \"2020-05-24T04:00:00.000Z\": 2.3359450082,\n    \"2020-05-24T05:00:00.000Z\": 2.37211517,\n    \"2020-05-24T06:00:00.000Z\": 2.3623120316,\n    \"2020-05-24T07:00:00.000Z\": 2.3301069077,\n    \"2020-05-24T08:00:00.000Z\": 2.3729559093,\n    \"2020-05-24T09:00:00.000Z\": 2.3609485986,\n    \"2020-05-24T10:00:00.000Z\": 2.3424942096,\n    \"2020-05-24T11:00:00.000Z\": 2.3197571838,\n    \"2020-05-24T12:00:00.000Z\": 2.3710370622,\n    \"2020-05-24T13:00:00.000Z\": 2.3179119157,\n    \"2020-05-24T14:00:00.000Z\": 2.3416944935,\n    \"2020-05-24T15:00:00.000Z\": 2.3370203896,\n    \"2020-05-24T16:00:00.000Z\": 2.3538106751,\n    \"2020-05-24T17:00:00.000Z\": 2.3291531084,\n    \"2020-05-24T18:00:00.000Z\": 2.3345230688,\n    \"2020-05-24T19:00:00.000Z\": 2.3722221681,\n    \"2020-05-24T20:00:00.000Z\": 2.3386888412,\n    \"2020-05-24T21:00:00.000Z\": 2.3352960009,\n    \"2020-05-24T22:00:00.000Z\": 2.362323786,\n    \"2020-05-24T23:00:00.000Z\": 2.3393720985,\n    \"2020-05-25T00:00:00.000Z\": 2.3250893285,\n    \"2020-05-25T01:00:00.000Z\": 2.3335853665,\n    \"2020-05-25T02:00:00.000Z\": 2.3342798565,\n    \"2020-05-25T03:00:00.000Z\": 2.355586723,\n    \"2020-05-25T04:00:00.000Z\": 2.3375514173,\n    \"2020-05-25T05:00:00.000Z\": 2.3414990313,\n    \"2020-05-25T06:00:00.000Z\": 2.3436017427,\n    \"2020-05-25T07:00:00.000Z\": 2.3293509691,\n    \"2020-05-25T08:00:00.000Z\": 2.3704824342,\n    \"2020-05-25T09:00:00.000Z\": 2.327739129,\n    \"2020-05-25T10:00:00.000Z\": 2.3141902095,\n    \"2020-05-25T11:00:00.000Z\": 2.3037736953,\n    \"2020-05-25T12:00:00.000Z\": 2.3481850616,\n    \"2020-05-25T13:00:00.000Z\": 2.3378050724,\n    \"2020-05-25T14:00:00.000Z\": 2.3519978131,\n    \"2020-05-25T15:00:00.000Z\": 2.3111453787,\n    \"2020-05-25T16:00:00.000Z\": 2.3117858997,\n    \"2020-05-25T17:00:00.000Z\": 2.3437823839,\n    \"2020-05-25T18:00:00.000Z\": 2.2985355935,\n    \"2020-05-25T19:00:00.000Z\": 2.2889319628,\n    \"2020-05-25T20:00:00.000Z\": 2.3141072335,\n    \"2020-05-25T21:00:00.000Z\": 2.2663323608,\n    \"2020-05-25T22:00:00.000Z\": 2.2663467487,\n    \"2020-05-25T23:00:00.000Z\": 2.3139569202,\n    \"2020-05-26T00:00:00.000Z\": 2.3129660677,\n    \"2020-05-26T01:00:00.000Z\": 2.2993218542,\n    \"2020-05-26T02:00:00.000Z\": 2.2902738561,\n    \"2020-05-26T03:00:00.000Z\": 2.3081958222,\n    \"2020-05-26T04:00:00.000Z\": 2.2772477378,\n    \"2020-05-26T05:00:00.000Z\": 2.2833754102,\n    \"2020-05-26T06:00:00.000Z\": 2.298624666,\n    \"2020-05-26T07:00:00.000Z\": 2.3208954595,\n    \"2020-05-26T08:00:00.000Z\": 2.3117240553,\n    \"2020-05-26T09:00:00.000Z\": 2.2581707124,\n    \"2020-05-26T10:00:00.000Z\": 2.3074877882,\n    \"2020-05-26T11:00:00.000Z\": 2.2788177398,\n    \"2020-05-26T12:00:00.000Z\": 2.28910202,\n    \"2020-05-26T13:00:00.000Z\": 2.2542432777,\n    \"2020-05-26T14:00:00.000Z\": 2.2889851565,\n    \"2020-05-26T15:00:00.000Z\": 2.2558450265,\n    \"2020-05-26T16:00:00.000Z\": 2.2350560292,\n    \"2020-05-26T17:00:00.000Z\": 2.2520909581,\n    \"2020-05-26T18:00:00.000Z\": 2.2404024881,\n    \"2020-05-26T19:00:00.000Z\": 2.2450243247,\n    \"2020-05-26T20:00:00.000Z\": 2.2414637677,\n    \"2020-05-26T21:00:00.000Z\": 2.2549509291,\n    \"2020-05-26T22:00:00.000Z\": 2.2677979399,\n    \"2020-05-26T23:00:00.000Z\": 2.2591624133,\n    \"2020-05-27T00:00:00.000Z\": 2.2643949437,\n    \"2020-05-27T01:00:00.000Z\": 2.2324029864,\n    \"2020-05-27T02:00:00.000Z\": 2.2204872979,\n    \"2020-05-27T03:00:00.000Z\": 2.2671816003,\n    \"2020-05-27T04:00:00.000Z\": 2.2306875543,\n    \"2020-05-27T05:00:00.000Z\": 2.2269123244,\n    \"2020-05-27T06:00:00.000Z\": 2.2200746478,\n    \"2020-05-27T07:00:00.000Z\": 2.2452332587,\n    \"2020-05-27T08:00:00.000Z\": 2.2781186957,\n    \"2020-05-27T09:00:00.000Z\": 2.2682838438,\n    \"2020-05-27T10:00:00.000Z\": 2.2457983355,\n    \"2020-05-27T11:00:00.000Z\": 2.2482833103,\n    \"2020-05-27T12:00:00.000Z\": 2.2440763375,\n    \"2020-05-27T13:00:00.000Z\": 2.2496754332,\n    \"2020-05-27T14:00:00.000Z\": 2.2377133006,\n    \"2020-05-27T15:00:00.000Z\": 2.2295662521,\n    \"2020-05-27T16:00:00.000Z\": 2.2425895424,\n    \"2020-05-27T17:00:00.000Z\": 2.1867354651,\n    \"2020-05-27T18:00:00.000Z\": 2.2163906738,\n    \"2020-05-27T19:00:00.000Z\": 2.2085768065,\n    \"2020-05-27T20:00:00.000Z\": 2.2285712981,\n    \"2020-05-27T21:00:00.000Z\": 2.1805731795,\n    \"2020-05-27T22:00:00.000Z\": 2.22810313,\n    \"2020-05-27T23:00:00.000Z\": 2.2138538519,\n    \"2020-05-28T00:00:00.000Z\": 2.2441786299,\n    \"2020-05-28T01:00:00.000Z\": 2.1803427779,\n    \"2020-05-28T02:00:00.000Z\": 2.1992977156,\n    \"2020-05-28T03:00:00.000Z\": 2.2416509924,\n    \"2020-05-28T04:00:00.000Z\": 2.2079578008,\n    \"2020-05-28T05:00:00.000Z\": 2.2354591923,\n    \"2020-05-28T06:00:00.000Z\": 2.2412756431,\n    \"2020-05-28T07:00:00.000Z\": 2.1753252775,\n    \"2020-05-28T08:00:00.000Z\": 2.2150658764,\n    \"2020-05-28T09:00:00.000Z\": 2.1862375701,\n    \"2020-05-28T10:00:00.000Z\": 2.2181060672,\n    \"2020-05-28T11:00:00.000Z\": 2.2245614275,\n    \"2020-05-28T12:00:00.000Z\": 2.2105838228,\n    \"2020-05-28T13:00:00.000Z\": 2.1950357091,\n    \"2020-05-28T14:00:00.000Z\": 2.2175681951,\n    \"2020-05-28T15:00:00.000Z\": 2.2071353605,\n    \"2020-05-28T16:00:00.000Z\": 2.1753563139,\n    \"2020-05-28T17:00:00.000Z\": 2.1543748944,\n    \"2020-05-28T18:00:00.000Z\": 2.1911450449,\n    \"2020-05-28T19:00:00.000Z\": 2.1370935896,\n    \"2020-05-28T20:00:00.000Z\": 2.1732676508,\n    \"2020-05-28T21:00:00.000Z\": 2.1649085713,\n    \"2020-05-28T22:00:00.000Z\": 2.1334434498,\n    \"2020-05-28T23:00:00.000Z\": 2.1373257318,\n    \"2020-05-29T00:00:00.000Z\": 2.1415503769,\n    \"2020-05-29T01:00:00.000Z\": 2.1741583417,\n    \"2020-05-29T02:00:00.000Z\": 2.1300865559,\n    \"2020-05-29T03:00:00.000Z\": 2.187064251,\n    \"2020-05-29T04:00:00.000Z\": 2.1513825069,\n    \"2020-05-29T05:00:00.000Z\": 2.148031209,\n    \"2020-05-29T06:00:00.000Z\": 2.1331376479,\n    \"2020-05-29T07:00:00.000Z\": 2.1866245451,\n    \"2020-05-29T08:00:00.000Z\": 2.1624172082,\n    \"2020-05-29T09:00:00.000Z\": 2.1499761981,\n    \"2020-05-29T10:00:00.000Z\": 2.1777404933,\n    \"2020-05-29T11:00:00.000Z\": 2.1764986815,\n    \"2020-05-29T12:00:00.000Z\": 2.1468509665,\n    \"2020-05-29T13:00:00.000Z\": 2.1455738939,\n    \"2020-05-29T14:00:00.000Z\": 2.1549592857,\n    \"2020-05-29T15:00:00.000Z\": 2.1269280095,\n    \"2020-05-29T16:00:00.000Z\": 2.1164827024,\n    \"2020-05-29T17:00:00.000Z\": 2.1100834923,\n    \"2020-05-29T18:00:00.000Z\": 2.1519334744,\n    \"2020-05-29T19:00:00.000Z\": 2.1371329129,\n    \"2020-05-29T20:00:00.000Z\": 2.1307888009,\n    \"2020-05-29T21:00:00.000Z\": 2.0880198804,\n    \"2020-05-29T22:00:00.000Z\": 2.127288623,\n    \"2020-05-29T23:00:00.000Z\": 2.1287463572,\n    \"2020-05-30T00:00:00.000Z\": 2.1008850918,\n    \"2020-05-30T01:00:00.000Z\": 2.1057585274,\n    \"2020-05-30T02:00:00.000Z\": 2.094936324,\n    \"2020-05-30T03:00:00.000Z\": 2.1372542762,\n    \"2020-05-30T04:00:00.000Z\": 2.1179414143,\n    \"2020-05-30T05:00:00.000Z\": 2.1476393765,\n    \"2020-05-30T06:00:00.000Z\": 2.1205701259,\n    \"2020-05-30T07:00:00.000Z\": 2.1262053678,\n    \"2020-05-30T08:00:00.000Z\": 2.1034287209,\n    \"2020-05-30T09:00:00.000Z\": 2.1354021483,\n    \"2020-05-30T10:00:00.000Z\": 2.1334894546,\n    \"2020-05-30T11:00:00.000Z\": 2.1229640927,\n    \"2020-05-30T12:00:00.000Z\": 2.1171839151,\n    \"2020-05-30T13:00:00.000Z\": 2.1067720936,\n    \"2020-05-30T14:00:00.000Z\": 2.0950818038,\n    \"2020-05-30T15:00:00.000Z\": 2.1165297234,\n    \"2020-05-30T16:00:00.000Z\": 2.0956712067,\n    \"2020-05-30T17:00:00.000Z\": 2.1244171597,\n    \"2020-05-30T18:00:00.000Z\": 2.1326702003,\n    \"2020-05-30T19:00:00.000Z\": 2.1150019978,\n    \"2020-05-30T20:00:00.000Z\": 2.1278116649,\n    \"2020-05-30T21:00:00.000Z\": 2.0869849234,\n    \"2020-05-30T22:00:00.000Z\": 2.125263829,\n    \"2020-05-30T23:00:00.000Z\": 2.1139123953,\n    \"2020-05-31T00:00:00.000Z\": 2.1152377215,\n    \"2020-05-31T01:00:00.000Z\": 2.1327071907,\n    \"2020-05-31T02:00:00.000Z\": 2.1167130658,\n    \"2020-05-31T03:00:00.000Z\": 2.1544416014,\n    \"2020-05-31T04:00:00.000Z\": 2.0879369852,\n    \"2020-05-31T05:00:00.000Z\": 2.1003692503,\n    \"2020-05-31T06:00:00.000Z\": 2.1174453335,\n    \"2020-05-31T07:00:00.000Z\": 2.1327697996,\n    \"2020-05-31T08:00:00.000Z\": 2.1119295366,\n    \"2020-05-31T09:00:00.000Z\": 2.1069297046,\n    \"2020-05-31T10:00:00.000Z\": 2.1386254617,\n    \"2020-05-31T11:00:00.000Z\": 2.1337873369,\n    \"2020-05-31T12:00:00.000Z\": 2.1320484796,\n    \"2020-05-31T13:00:00.000Z\": 2.1413517653,\n    \"2020-05-31T14:00:00.000Z\": 2.1145457701,\n    \"2020-05-31T15:00:00.000Z\": 2.1302952654,\n    \"2020-05-31T16:00:00.000Z\": 2.1023544041,\n    \"2020-05-31T17:00:00.000Z\": 2.0877782935,\n    \"2020-05-31T18:00:00.000Z\": 2.0851633362,\n    \"2020-05-31T19:00:00.000Z\": 2.1097252537,\n    \"2020-05-31T20:00:00.000Z\": 2.0969373432,\n    \"2020-05-31T21:00:00.000Z\": 2.1420687879,\n    \"2020-05-31T22:00:00.000Z\": 2.1491158273,\n    \"2020-05-31T23:00:00.000Z\": 2.124131625,\n    \"2020-06-01T00:00:00.000Z\": 2.1425570685,\n    \"2020-06-01T01:00:00.000Z\": 2.1430335317,\n    \"2020-06-01T02:00:00.000Z\": 2.0961178869,\n    \"2020-06-01T03:00:00.000Z\": 2.091500574,\n    \"2020-06-01T04:00:00.000Z\": 2.1289326241,\n    \"2020-06-01T05:00:00.000Z\": 2.1001815773,\n    \"2020-06-01T06:00:00.000Z\": 2.0956116776,\n    \"2020-06-01T07:00:00.000Z\": 2.1276899602,\n    \"2020-06-01T08:00:00.000Z\": 2.0883829359,\n    \"2020-06-01T09:00:00.000Z\": 2.1191745956,\n    \"2020-06-01T10:00:00.000Z\": 2.1359184385,\n    \"2020-06-01T11:00:00.000Z\": 2.1150058764,\n    \"2020-06-01T12:00:00.000Z\": 2.1059588226,\n    \"2020-06-01T13:00:00.000Z\": 2.1100688769,\n    \"2020-06-01T14:00:00.000Z\": 2.092024714,\n    \"2020-06-01T15:00:00.000Z\": 2.0816991334,\n    \"2020-06-01T16:00:00.000Z\": 2.0674233713,\n    \"2020-06-01T17:00:00.000Z\": 2.0731764502,\n    \"2020-06-01T18:00:00.000Z\": 2.0602776299,\n    \"2020-06-01T19:00:00.000Z\": 2.0453738282,\n    \"2020-06-01T20:00:00.000Z\": 2.0585446903,\n    \"2020-06-01T21:00:00.000Z\": 2.0987198157,\n    \"2020-06-01T22:00:00.000Z\": 2.0422762919,\n    \"2020-06-01T23:00:00.000Z\": 2.1045616634,\n    \"2020-06-02T00:00:00.000Z\": 2.1073579135,\n    \"2020-06-02T01:00:00.000Z\": 2.0780935507,\n    \"2020-06-02T02:00:00.000Z\": 2.0729714237,\n    \"2020-06-02T03:00:00.000Z\": 2.0573977155,\n    \"2020-06-02T04:00:00.000Z\": 2.0608699953,\n    \"2020-06-02T05:00:00.000Z\": 2.0714640979,\n    \"2020-06-02T06:00:00.000Z\": 2.094514572,\n    \"2020-06-02T07:00:00.000Z\": 2.1033975554,\n    \"2020-06-02T08:00:00.000Z\": 2.0476842497,\n    \"2020-06-02T09:00:00.000Z\": 2.0913142616,\n    \"2020-06-02T10:00:00.000Z\": 2.0336843467,\n    \"2020-06-02T11:00:00.000Z\": 2.0383831388,\n    \"2020-06-02T12:00:00.000Z\": 2.0418092971,\n    \"2020-06-02T13:00:00.000Z\": 2.0649145453,\n    \"2020-06-02T14:00:00.000Z\": 2.0512161839,\n    \"2020-06-02T15:00:00.000Z\": 2.0686642896,\n    \"2020-06-02T16:00:00.000Z\": 2.0598713812,\n    \"2020-06-02T17:00:00.000Z\": 2.0219322476,\n    \"2020-06-02T18:00:00.000Z\": 2.0351501934,\n    \"2020-06-02T19:00:00.000Z\": 2.0266163426,\n    \"2020-06-02T20:00:00.000Z\": 2.0644049299,\n    \"2020-06-02T21:00:00.000Z\": 2.016462477,\n    \"2020-06-02T22:00:00.000Z\": 2.050952448,\n    \"2020-06-02T23:00:00.000Z\": 2.0540254954,\n    \"2020-06-03T00:00:00.000Z\": 2.0210876923,\n    \"2020-06-03T01:00:00.000Z\": 2.0509779924,\n    \"2020-06-03T02:00:00.000Z\": 1.9978356372,\n    \"2020-06-03T03:00:00.000Z\": 2.0218252491,\n    \"2020-06-03T04:00:00.000Z\": 2.0153880438,\n    \"2020-06-03T05:00:00.000Z\": 2.0631142101,\n    \"2020-06-03T06:00:00.000Z\": 2.0265129691,\n    \"2020-06-03T07:00:00.000Z\": 2.0129508505,\n    \"2020-06-03T08:00:00.000Z\": 2.0249723556,\n    \"2020-06-03T09:00:00.000Z\": 2.0305358457,\n    \"2020-06-03T10:00:00.000Z\": 2.0089213589,\n    \"2020-06-03T11:00:00.000Z\": 2.0247600939,\n    \"2020-06-03T12:00:00.000Z\": 1.9836005561,\n    \"2020-06-03T13:00:00.000Z\": 2.0217152172,\n    \"2020-06-03T14:00:00.000Z\": 1.9796010588,\n    \"2020-06-03T15:00:00.000Z\": 1.9818004199,\n    \"2020-06-03T16:00:00.000Z\": 2.0308196048,\n    \"2020-06-03T17:00:00.000Z\": 1.9945792697,\n    \"2020-06-03T18:00:00.000Z\": 1.963538552,\n    \"2020-06-03T19:00:00.000Z\": 1.974156957,\n    \"2020-06-03T20:00:00.000Z\": 1.9956456414,\n    \"2020-06-03T21:00:00.000Z\": 1.9907259797,\n    \"2020-06-03T22:00:00.000Z\": 1.9962944007,\n    \"2020-06-03T23:00:00.000Z\": 1.9605906684,\n    \"2020-06-04T00:00:00.000Z\": 2.0150474252,\n    \"2020-06-04T01:00:00.000Z\": 1.9720500907,\n    \"2020-06-04T02:00:00.000Z\": 2.0157201445,\n    \"2020-06-04T03:00:00.000Z\": 1.9646814322,\n    \"2020-06-04T04:00:00.000Z\": 1.9730844286,\n    \"2020-06-04T05:00:00.000Z\": 2.0107599578,\n    \"2020-06-04T06:00:00.000Z\": 2.0072156705,\n    \"2020-06-04T07:00:00.000Z\": 2.0048548668,\n    \"2020-06-04T08:00:00.000Z\": 1.9958200518,\n    \"2020-06-04T09:00:00.000Z\": 1.9679680676,\n    \"2020-06-04T10:00:00.000Z\": 1.9793470877,\n    \"2020-06-04T11:00:00.000Z\": 1.9592617077,\n    \"2020-06-04T12:00:00.000Z\": 1.9887023322,\n    \"2020-06-04T13:00:00.000Z\": 1.9344542709,\n    \"2020-06-04T14:00:00.000Z\": 1.9880870209,\n    \"2020-06-04T15:00:00.000Z\": 1.9461746893,\n    \"2020-06-04T16:00:00.000Z\": 1.9825521986,\n    \"2020-06-04T17:00:00.000Z\": 1.979853137,\n    \"2020-06-04T18:00:00.000Z\": 1.9343908128,\n    \"2020-06-04T19:00:00.000Z\": 1.9542340726,\n    \"2020-06-04T20:00:00.000Z\": 1.9194681724,\n    \"2020-06-04T21:00:00.000Z\": 1.9475225896,\n    \"2020-06-04T22:00:00.000Z\": 1.9186403536,\n    \"2020-06-04T23:00:00.000Z\": 1.9089691019,\n    \"2020-06-05T00:00:00.000Z\": 1.9347044622,\n    \"2020-06-05T01:00:00.000Z\": 1.9686426954,\n    \"2020-06-05T02:00:00.000Z\": 1.9347011013,\n    \"2020-06-05T03:00:00.000Z\": 1.9123184662,\n    \"2020-06-05T04:00:00.000Z\": 1.9501929906,\n    \"2020-06-05T05:00:00.000Z\": 1.9495252168,\n    \"2020-06-05T06:00:00.000Z\": 1.936373197,\n    \"2020-06-05T07:00:00.000Z\": 1.9554062787,\n    \"2020-06-05T08:00:00.000Z\": 1.9487862742,\n    \"2020-06-05T09:00:00.000Z\": 1.897130141,\n    \"2020-06-05T10:00:00.000Z\": 1.9151998984,\n    \"2020-06-05T11:00:00.000Z\": 1.9167378534,\n    \"2020-06-05T12:00:00.000Z\": 1.9230983108,\n    \"2020-06-05T13:00:00.000Z\": 1.9058410026,\n    \"2020-06-05T14:00:00.000Z\": 1.922041465,\n    \"2020-06-05T15:00:00.000Z\": 1.9168180426,\n    \"2020-06-05T16:00:00.000Z\": 1.9089082012,\n    \"2020-06-05T17:00:00.000Z\": 1.8950817099,\n    \"2020-06-05T18:00:00.000Z\": 1.8881599743,\n    \"2020-06-05T19:00:00.000Z\": 1.86709386,\n    \"2020-06-05T20:00:00.000Z\": 1.8847201573,\n    \"2020-06-05T21:00:00.000Z\": 1.9280194342,\n    \"2020-06-05T22:00:00.000Z\": 1.8687165683,\n    \"2020-06-05T23:00:00.000Z\": 1.9175760407,\n    \"2020-06-06T00:00:00.000Z\": 1.9144149245,\n    \"2020-06-06T01:00:00.000Z\": 1.9048689942,\n    \"2020-06-06T02:00:00.000Z\": 1.90828592,\n    \"2020-06-06T03:00:00.000Z\": 1.9297969376,\n    \"2020-06-06T04:00:00.000Z\": 1.9149704211,\n    \"2020-06-06T05:00:00.000Z\": 1.8929761375,\n    \"2020-06-06T06:00:00.000Z\": 1.8971279541,\n    \"2020-06-06T07:00:00.000Z\": 1.9263268993,\n    \"2020-06-06T08:00:00.000Z\": 1.8958174786,\n    \"2020-06-06T09:00:00.000Z\": 1.8761773916,\n    \"2020-06-06T10:00:00.000Z\": 1.8660876667,\n    \"2020-06-06T11:00:00.000Z\": 1.8916842966,\n    \"2020-06-06T12:00:00.000Z\": 1.9127603337,\n    \"2020-06-06T13:00:00.000Z\": 1.9011050005,\n    \"2020-06-06T14:00:00.000Z\": 1.8896462276,\n    \"2020-06-06T15:00:00.000Z\": 1.8711809414,\n    \"2020-06-06T16:00:00.000Z\": 1.8916412969,\n    \"2020-06-06T17:00:00.000Z\": 1.8800334125,\n    \"2020-06-06T18:00:00.000Z\": 1.8642478045,\n    \"2020-06-06T19:00:00.000Z\": 1.8957160305,\n    \"2020-06-06T20:00:00.000Z\": 1.9129895837,\n    \"2020-06-06T21:00:00.000Z\": 1.8864261351,\n    \"2020-06-06T22:00:00.000Z\": 1.874593256,\n    \"2020-06-06T23:00:00.000Z\": 1.8760368949,\n    \"2020-06-07T00:00:00.000Z\": 1.9109769621,\n    \"2020-06-07T01:00:00.000Z\": 1.8716809077,\n    \"2020-06-07T02:00:00.000Z\": 1.9041580864,\n    \"2020-06-07T03:00:00.000Z\": 1.8750807346,\n    \"2020-06-07T04:00:00.000Z\": 1.9202575144,\n    \"2020-06-07T05:00:00.000Z\": 1.8610116065,\n    \"2020-06-07T06:00:00.000Z\": 1.8945901134,\n    \"2020-06-07T07:00:00.000Z\": 1.8946142489,\n    \"2020-06-07T08:00:00.000Z\": 1.8614582248,\n    \"2020-06-07T09:00:00.000Z\": 1.863572688,\n    \"2020-06-07T10:00:00.000Z\": 1.9297434778,\n    \"2020-06-07T11:00:00.000Z\": 1.9187304684,\n    \"2020-06-07T12:00:00.000Z\": 1.9298306208,\n    \"2020-06-07T13:00:00.000Z\": 1.8608512867,\n    \"2020-06-07T14:00:00.000Z\": 1.9118411163,\n    \"2020-06-07T15:00:00.000Z\": 1.9066744163,\n    \"2020-06-07T16:00:00.000Z\": 1.9116551009,\n    \"2020-06-07T17:00:00.000Z\": 1.8828661629,\n    \"2020-06-07T18:00:00.000Z\": 1.8866379428,\n    \"2020-06-07T19:00:00.000Z\": 1.8788772036,\n    \"2020-06-07T20:00:00.000Z\": 1.9042945734,\n    \"2020-06-07T21:00:00.000Z\": 1.9056594968,\n    \"2020-06-07T22:00:00.000Z\": 1.8887214568,\n    \"2020-06-07T23:00:00.000Z\": 1.8835326276,\n    \"2020-06-08T00:00:00.000Z\": 1.9284506235,\n    \"2020-06-08T01:00:00.000Z\": 1.9143168494,\n    \"2020-06-08T02:00:00.000Z\": 1.9007075218,\n    \"2020-06-08T03:00:00.000Z\": 1.8777673036,\n    \"2020-06-08T04:00:00.000Z\": 1.8952513778,\n    \"2020-06-08T05:00:00.000Z\": 1.9264865217,\n    \"2020-06-08T06:00:00.000Z\": 1.8817259003,\n    \"2020-06-08T07:00:00.000Z\": 1.921584556,\n    \"2020-06-08T08:00:00.000Z\": 1.9018817759,\n    \"2020-06-08T09:00:00.000Z\": 1.859008478,\n    \"2020-06-08T10:00:00.000Z\": 1.8824316125,\n    \"2020-06-08T11:00:00.000Z\": 1.8904210058,\n    \"2020-06-08T12:00:00.000Z\": 1.8955465242,\n    \"2020-06-08T13:00:00.000Z\": 1.87751679,\n    \"2020-06-08T14:00:00.000Z\": 1.8580814686,\n    \"2020-06-08T15:00:00.000Z\": 1.8642935056,\n    \"2020-06-08T16:00:00.000Z\": 1.8605427948,\n    \"2020-06-08T17:00:00.000Z\": 1.8785871911,\n    \"2020-06-08T18:00:00.000Z\": 1.8686244945,\n    \"2020-06-08T19:00:00.000Z\": 1.8326614693,\n    \"2020-06-08T20:00:00.000Z\": 1.8783741861,\n    \"2020-06-08T21:00:00.000Z\": 1.8839774383,\n    \"2020-06-08T22:00:00.000Z\": 1.8581453184,\n    \"2020-06-08T23:00:00.000Z\": 1.8737832229,\n    \"2020-06-09T00:00:00.000Z\": 1.825608836,\n    \"2020-06-09T01:00:00.000Z\": 1.8419542375,\n    \"2020-06-09T02:00:00.000Z\": 1.8341249644,\n    \"2020-06-09T03:00:00.000Z\": 1.8737361118,\n    \"2020-06-09T04:00:00.000Z\": 1.8373356528,\n    \"2020-06-09T05:00:00.000Z\": 1.8610829866,\n    \"2020-06-09T06:00:00.000Z\": 1.8647217478,\n    \"2020-06-09T07:00:00.000Z\": 1.8542354706,\n    \"2020-06-09T08:00:00.000Z\": 1.8584044488,\n    \"2020-06-09T09:00:00.000Z\": 1.8574092583,\n    \"2020-06-09T10:00:00.000Z\": 1.8314458281,\n    \"2020-06-09T11:00:00.000Z\": 1.8291249077,\n    \"2020-06-09T12:00:00.000Z\": 1.794912816,\n    \"2020-06-09T13:00:00.000Z\": 1.806780492,\n    \"2020-06-09T14:00:00.000Z\": 1.8515750872,\n    \"2020-06-09T15:00:00.000Z\": 1.7881377768,\n    \"2020-06-09T16:00:00.000Z\": 1.782908594,\n    \"2020-06-09T17:00:00.000Z\": 1.7871490101,\n    \"2020-06-09T18:00:00.000Z\": 1.7824570591,\n    \"2020-06-09T19:00:00.000Z\": 1.8381627319,\n    \"2020-06-09T20:00:00.000Z\": 1.7788963713,\n    \"2020-06-09T21:00:00.000Z\": 1.8135459458,\n    \"2020-06-09T22:00:00.000Z\": 1.7706291347,\n    \"2020-06-09T23:00:00.000Z\": 1.7832814738,\n    \"2020-06-10T00:00:00.000Z\": 1.7915501526,\n    \"2020-06-10T01:00:00.000Z\": 1.797562649,\n    \"2020-06-10T02:00:00.000Z\": 1.810740465,\n    \"2020-06-10T03:00:00.000Z\": 1.8039826415,\n    \"2020-06-10T04:00:00.000Z\": 1.8061031814,\n    \"2020-06-10T05:00:00.000Z\": 1.7798470634,\n    \"2020-06-10T06:00:00.000Z\": 1.824419133,\n    \"2020-06-10T07:00:00.000Z\": 1.7714949585,\n    \"2020-06-10T08:00:00.000Z\": 1.8110842269,\n    \"2020-06-10T09:00:00.000Z\": 1.7653148984,\n    \"2020-06-10T10:00:00.000Z\": 1.7642104437,\n    \"2020-06-10T11:00:00.000Z\": 1.7882945391,\n    \"2020-06-10T12:00:00.000Z\": 1.7510199158,\n    \"2020-06-10T13:00:00.000Z\": 1.7602817891,\n    \"2020-06-10T14:00:00.000Z\": 1.7692896514,\n    \"2020-06-10T15:00:00.000Z\": 1.7816856687,\n    \"2020-06-10T16:00:00.000Z\": 1.7726023267,\n    \"2020-06-10T17:00:00.000Z\": 1.7529701599,\n    \"2020-06-10T18:00:00.000Z\": 1.7944730908,\n    \"2020-06-10T19:00:00.000Z\": 1.7959826561,\n    \"2020-06-10T20:00:00.000Z\": 1.7262595779,\n    \"2020-06-10T21:00:00.000Z\": 1.7599426932,\n    \"2020-06-10T22:00:00.000Z\": 1.7942664293,\n    \"2020-06-10T23:00:00.000Z\": 1.7568792181,\n    \"2020-06-11T00:00:00.000Z\": 1.7503584801,\n    \"2020-06-11T01:00:00.000Z\": 1.772818345,\n    \"2020-06-11T02:00:00.000Z\": 1.7599267103,\n    \"2020-06-11T03:00:00.000Z\": 1.7543246604,\n    \"2020-06-11T04:00:00.000Z\": 1.7716360143,\n    \"2020-06-11T05:00:00.000Z\": 1.7497533172,\n    \"2020-06-11T06:00:00.000Z\": 1.7296714486,\n    \"2020-06-11T07:00:00.000Z\": 1.7868207192,\n    \"2020-06-11T08:00:00.000Z\": 1.7441884421,\n    \"2020-06-11T09:00:00.000Z\": 1.7268847381,\n    \"2020-06-11T10:00:00.000Z\": 1.7372780067,\n    \"2020-06-11T11:00:00.000Z\": 1.7531690232,\n    \"2020-06-11T12:00:00.000Z\": 1.7563962807,\n    \"2020-06-11T13:00:00.000Z\": 1.7337006137,\n    \"2020-06-11T14:00:00.000Z\": 1.7567559875,\n    \"2020-06-11T15:00:00.000Z\": 1.7314396428\n    }\n}\n```\n",
    "content": {
      "operators": [
        {
          "id": "82132623-2aaa-4797-b478-3857d93bde09",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "Obtain Training Series",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 90,
            "y": 290
          }
        },
        {
          "id": "ea68a5a4-540e-4a39-b958-d25a08bd8f40",
          "revision_group_id": "2f511674-f766-748d-2de3-ad5e62e10a1a",
          "name": "Obtain Limit Value",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "2f511674-f766-748d-2de3-ad5e62e10a1a",
          "inputs": [
            {
              "id": "c57127e7-6b84-03f8-6ef1-dcd7232bf3bf",
              "name": "input",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "9cef5ade-69f0-3cdb-4279-3d49fc9914fc",
              "name": "output",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 95,
            "y": 160
          }
        },
        {
          "id": "a1f1affa-03ca-4896-91a2-dbf9580d9105",
          "revision_group_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "name": "Pass Through Limit Violation Timestamp",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "inputs": [
            {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1260,
            "y": 370
          }
        },
        {
          "id": "4426ace6-15a5-4a0b-927b-558d50c28915",
          "revision_group_id": "8d61a267-3a71-51cd-2817-48c320469d6b",
          "name": "Univariate Linear RUL Regression",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "8d61a267-3a71-51cd-2817-48c320469d6b",
          "inputs": [
            {
              "id": "6c78164c-2fa7-90d0-bfbd-a09a571046b5",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "278dc2d7-73da-3c38-a1ad-ea7d186ac887",
              "name": "num_pred_series_future_days",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "425f3ef8-e7ae-6ba9-c2c1-dcc594b3c61a",
              "name": "pred_series_frequency",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "c482c011-a393-ff58-67d6-c4caec939083",
              "name": "timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "cf404526-75de-f1ff-f961-200e99dde8d6",
              "name": "intercept",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "9643ae27-3cb4-f5a7-886d-5865d206486c",
              "name": "limit_violation_prediction_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "2ac7a056-8d7c-b5a7-f35a-d3676a77afbf",
              "name": "pred_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "1828c68d-c5c9-f31a-f2e9-3493409f53ed",
              "name": "slope",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 605,
            "y": 200
          }
        },
        {
          "id": "1ff7ea36-4444-4d39-ba14-5702b5c52d32",
          "revision_group_id": "9c3f88ce-1311-241e-18b7-acf7d3f5a051",
          "name": "Univariate Linear RUL Regression Result Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "9c3f88ce-1311-241e-18b7-acf7d3f5a051",
          "inputs": [
            {
              "id": "64734a41-f66b-9394-b961-44dd0b5e74f1",
              "name": "base_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "c53283a0-82e6-c162-6d79-1acc92206950",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "e2f270a0-3c80-9f57-776e-ecc396268ac1",
              "name": "limit_violation_prediction_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "120f0e00-3ee6-743b-22a9-b0f1481c7b60",
              "name": "predictions",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "aebbc55f-1e4a-c035-bbd0-2475307536c9",
              "name": "rul_regression_result_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1260,
            "y": 170
          }
        }
      ],
      "links": [
        {
          "id": "316ede77-4f73-4414-9798-c8043ee623bb",
          "start": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "2ac7a056-8d7c-b5a7-f35a-d3676a77afbf",
              "name": "pred_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "1ff7ea36-4444-4d39-ba14-5702b5c52d32",
            "connector": {
              "id": "120f0e00-3ee6-743b-22a9-b0f1481c7b60",
              "name": "predictions",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "b200521f-3c14-48df-9c04-b051dbec6104",
          "start": {
            "operator": "ea68a5a4-540e-4a39-b958-d25a08bd8f40",
            "connector": {
              "id": "9cef5ade-69f0-3cdb-4279-3d49fc9914fc",
              "name": "output",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "6c78164c-2fa7-90d0-bfbd-a09a571046b5",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "781213be-e918-40b1-b02b-750228867ba4",
          "start": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "9643ae27-3cb4-f5a7-886d-5865d206486c",
              "name": "limit_violation_prediction_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "1ff7ea36-4444-4d39-ba14-5702b5c52d32",
            "connector": {
              "id": "e2f270a0-3c80-9f57-776e-ecc396268ac1",
              "name": "limit_violation_prediction_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "c44fe909-dd41-40f5-806a-b09b0e2a1132",
          "start": {
            "operator": "82132623-2aaa-4797-b478-3857d93bde09",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "c482c011-a393-ff58-67d6-c4caec939083",
              "name": "timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "c6b15788-8123-493e-af54-d570a1c367aa",
          "start": {
            "operator": "82132623-2aaa-4797-b478-3857d93bde09",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "1ff7ea36-4444-4d39-ba14-5702b5c52d32",
            "connector": {
              "id": "64734a41-f66b-9394-b961-44dd0b5e74f1",
              "name": "base_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 460,
              "y": 360
            },
            {
              "x": 580,
              "y": 445
            },
            {
              "x": 980,
              "y": 445
            },
            {
              "x": 1250,
              "y": 240
            }
          ]
        },
        {
          "id": "66b78846-a1b0-4caf-978d-22e673644abf",
          "start": {
            "connector": {
              "id": "890386ce-5e0c-4a24-b714-b49f0de93a3a",
              "name": "inp_series",
              "data_type": "SERIES",
              "position": {
                "x": -130,
                "y": 350
              }
            }
          },
          "end": {
            "operator": "82132623-2aaa-4797-b478-3857d93bde09",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "264cf033-e0f7-43e6-a40c-305e56de1036",
          "start": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "cf404526-75de-f1ff-f961-200e99dde8d6",
              "name": "intercept",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "93cf92d4-4082-464e-bc21-724513e59d41",
              "name": "intercept",
              "data_type": "FLOAT",
              "position": {
                "x": 1100,
                "y": 60
              }
            }
          },
          "path": []
        },
        {
          "id": "2a0317ae-7302-44a9-aa6f-43c2b8b58b9b",
          "start": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "1828c68d-c5c9-f31a-f2e9-3493409f53ed",
              "name": "slope",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "02699d2d-865e-493a-bae2-7e79577d549c",
              "name": "slope",
              "data_type": "FLOAT",
              "position": {
                "x": 1100,
                "y": 490
              }
            }
          },
          "path": []
        },
        {
          "id": "680f81a3-ad76-41b0-b08e-1c33ddcd594e",
          "start": {
            "operator": "1ff7ea36-4444-4d39-ba14-5702b5c52d32",
            "connector": {
              "id": "aebbc55f-1e4a-c035-bbd0-2475307536c9",
              "name": "rul_regression_result_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "8a4a9698-5d7f-401a-b6f6-bc2f549d9395",
              "name": "rul_regression_result_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1710,
                "y": 230
              }
            }
          },
          "path": []
        },
        {
          "id": "e1430832-39f7-470d-ad46-4bb4f0f30a31",
          "start": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "9643ae27-3cb4-f5a7-886d-5865d206486c",
              "name": "limit_violation_prediction_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "a1f1affa-03ca-4896-91a2-dbf9580d9105",
            "connector": {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "12ccac3f-b892-427e-83e9-0025690a675b",
          "start": {
            "operator": "a1f1affa-03ca-4896-91a2-dbf9580d9105",
            "connector": {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "aa7edab2-3da0-48b9-bbd0-ed6f3136f8ed",
              "name": "limit_violation_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 1710,
                "y": 430
              }
            }
          },
          "path": []
        },
        {
          "id": "c6a90aee-f59e-4216-a90c-ce739031c4e3",
          "start": {
            "operator": "ea68a5a4-540e-4a39-b958-d25a08bd8f40",
            "connector": {
              "id": "9cef5ade-69f0-3cdb-4279-3d49fc9914fc",
              "name": "output",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "1ff7ea36-4444-4d39-ba14-5702b5c52d32",
            "connector": {
              "id": "c53283a0-82e6-c162-6d79-1acc92206950",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 465,
              "y": 230
            },
            {
              "x": 570,
              "y": 145
            },
            {
              "x": 960,
              "y": 145
            },
            {
              "x": 1250,
              "y": 270
            }
          ]
        },
        {
          "id": "21beb3c4-28bb-4deb-bd5f-1cfd463d7181",
          "start": {
            "connector": {
              "id": "b338e339-93a5-4f0e-b1d4-165e70b1e794",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": -155,
                "y": 220
              }
            }
          },
          "end": {
            "operator": "ea68a5a4-540e-4a39-b958-d25a08bd8f40",
            "connector": {
              "id": "c57127e7-6b84-03f8-6ef1-dcd7232bf3bf",
              "name": "input",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "1ea2c5df-9b17-4572-832b-3d7f3afd1c88",
          "start": {
            "connector": {
              "id": "2d5dfada-f777-4067-a065-41ffd2994817",
              "name": "num_days_forecast",
              "data_type": "INT",
              "position": {
                "x": -150,
                "y": 260
              }
            }
          },
          "end": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "278dc2d7-73da-3c38-a1ad-ea7d186ac887",
              "name": "num_pred_series_future_days",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 20,
              "y": 270
            },
            {
              "x": 480,
              "y": 275
            },
            {
              "x": 595,
              "y": 300
            }
          ]
        },
        {
          "id": "7b73f9d6-d469-4b2a-956f-557daaf4ccf4",
          "start": {
            "connector": {
              "id": "7b73f9d6-d469-4b2a-956f-557daaf4ccf4",
              "data_type": "STRING",
              "position": {
                "x": -200,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "4426ace6-15a5-4a0b-927b-558d50c28915",
            "connector": {
              "id": "425f3ef8-e7ae-6ba9-c2c1-dcc594b3c61a",
              "name": "pred_series_frequency",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "890386ce-5e0c-4a24-b714-b49f0de93a3a",
          "name": "inp_series",
          "data_type": "SERIES",
          "operator_id": "82132623-2aaa-4797-b478-3857d93bde09",
          "connector_id": "f103c395-92b6-444d-320a-93950ed6d857",
          "operator_name": "Obtain Training Series",
          "connector_name": "input",
          "position": {
            "x": -130,
            "y": 350
          }
        },
        {
          "id": "b338e339-93a5-4f0e-b1d4-165e70b1e794",
          "name": "limit",
          "data_type": "FLOAT",
          "operator_id": "ea68a5a4-540e-4a39-b958-d25a08bd8f40",
          "connector_id": "c57127e7-6b84-03f8-6ef1-dcd7232bf3bf",
          "operator_name": "Obtain Limit Value",
          "connector_name": "input",
          "position": {
            "x": -155,
            "y": 220
          }
        },
        {
          "id": "2d5dfada-f777-4067-a065-41ffd2994817",
          "name": "num_days_forecast",
          "data_type": "INT",
          "operator_id": "4426ace6-15a5-4a0b-927b-558d50c28915",
          "connector_id": "278dc2d7-73da-3c38-a1ad-ea7d186ac887",
          "operator_name": "Univariate Linear RUL Regression",
          "connector_name": "num_pred_series_future_days",
          "position": {
            "x": -150,
            "y": 260
          }
        }
      ],
      "outputs": [
        {
          "id": "aa7edab2-3da0-48b9-bbd0-ed6f3136f8ed",
          "name": "limit_violation_timestamp",
          "data_type": "STRING",
          "operator_id": "a1f1affa-03ca-4896-91a2-dbf9580d9105",
          "connector_id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
          "operator_name": "Pass Through Limit Violation Timestamp",
          "connector_name": "output",
          "position": {
            "x": 1710,
            "y": 430
          }
        },
        {
          "id": "93cf92d4-4082-464e-bc21-724513e59d41",
          "name": "intercept",
          "data_type": "FLOAT",
          "operator_id": "4426ace6-15a5-4a0b-927b-558d50c28915",
          "connector_id": "cf404526-75de-f1ff-f961-200e99dde8d6",
          "operator_name": "Univariate Linear RUL Regression",
          "connector_name": "intercept",
          "position": {
            "x": 1100,
            "y": 60
          }
        },
        {
          "id": "02699d2d-865e-493a-bae2-7e79577d549c",
          "name": "slope",
          "data_type": "FLOAT",
          "operator_id": "4426ace6-15a5-4a0b-927b-558d50c28915",
          "connector_id": "1828c68d-c5c9-f31a-f2e9-3493409f53ed",
          "operator_name": "Univariate Linear RUL Regression",
          "connector_name": "slope",
          "position": {
            "x": 1100,
            "y": 490
          }
        },
        {
          "id": "8a4a9698-5d7f-401a-b6f6-bc2f549d9395",
          "name": "rul_regression_result_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "1ff7ea36-4444-4d39-ba14-5702b5c52d32",
          "connector_id": "aebbc55f-1e4a-c035-bbd0-2475307536c9",
          "operator_name": "Univariate Linear RUL Regression Result Plot",
          "connector_name": "rul_regression_result_plot",
          "position": {
            "x": 1710,
            "y": 230
          }
        }
      ],
      "constants": [
        {
          "id": "7b73f9d6-d469-4b2a-956f-557daaf4ccf4",
          "data_type": "STRING",
          "operator_id": "4426ace6-15a5-4a0b-927b-558d50c28915",
          "connector_id": "425f3ef8-e7ae-6ba9-c2c1-dcc594b3c61a",
          "operator_name": "Univariate Linear RUL Regression",
          "connector_name": "pred_series_frequency",
          "position": {
            "x": -200,
            "y": 0
          },
          "value": "5min"
        }
      ]
    },
    "io_interface": {
      "inputs": [
        {
          "id": "890386ce-5e0c-4a24-b714-b49f0de93a3a",
          "name": "inp_series",
          "data_type": "SERIES"
        },
        {
          "id": "b338e339-93a5-4f0e-b1d4-165e70b1e794",
          "name": "limit",
          "data_type": "FLOAT"
        },
        {
          "id": "2d5dfada-f777-4067-a065-41ffd2994817",
          "name": "num_days_forecast",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "aa7edab2-3da0-48b9-bbd0-ed6f3136f8ed",
          "name": "limit_violation_timestamp",
          "data_type": "STRING"
        },
        {
          "id": "93cf92d4-4082-464e-bc21-724513e59d41",
          "name": "intercept",
          "data_type": "FLOAT"
        },
        {
          "id": "02699d2d-865e-493a-bae2-7e79577d549c",
          "name": "slope",
          "data_type": "FLOAT"
        },
        {
          "id": "8a4a9698-5d7f-401a-b6f6-bc2f549d9395",
          "name": "rul_regression_result_plot",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "inp_series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\"2020-05-01T00:00:00.000Z\":2.5340945967,\"2020-05-01T01:00:00.000Z\":2.5658768256,\"2020-05-01T02:00:00.000Z\":2.570679579,\"2020-05-01T03:00:00.000Z\":2.5618633791,\"2020-05-01T04:00:00.000Z\":2.5709272918,\"2020-05-01T05:00:00.000Z\":2.5447713467,\"2020-05-01T06:00:00.000Z\":2.544863302,\"2020-05-01T07:00:00.000Z\":2.5890837968,\"2020-05-01T08:00:00.000Z\":2.5646962713,\"2020-05-01T09:00:00.000Z\":2.5335594298,\"2020-05-01T10:00:00.000Z\":2.5570004281,\"2020-05-01T11:00:00.000Z\":2.5279007185,\"2020-05-01T12:00:00.000Z\":2.5180691208,\"2020-05-01T13:00:00.000Z\":2.5425170109,\"2020-05-01T14:00:00.000Z\":2.5193970292,\"2020-05-01T15:00:00.000Z\":2.505462918,\"2020-05-01T16:00:00.000Z\":2.5569998157,\"2020-05-01T17:00:00.000Z\":2.507311926,\"2020-05-01T18:00:00.000Z\":2.498353005,\"2020-05-01T19:00:00.000Z\":2.546221722,\"2020-05-01T20:00:00.000Z\":2.5223358532,\"2020-05-01T21:00:00.000Z\":2.4936112195,\"2020-05-01T22:00:00.000Z\":2.4929833196,\"2020-05-01T23:00:00.000Z\":2.5375547278,\"2020-05-02T00:00:00.000Z\":2.5104412318,\"2020-05-02T01:00:00.000Z\":2.5113524681,\"2020-05-02T02:00:00.000Z\":2.5337742397,\"2020-05-02T03:00:00.000Z\":2.5038516369,\"2020-05-02T04:00:00.000Z\":2.4963372908,\"2020-05-02T05:00:00.000Z\":2.5195275913,\"2020-05-02T06:00:00.000Z\":2.4935793186,\"2020-05-02T07:00:00.000Z\":2.5164266646,\"2020-05-02T08:00:00.000Z\":2.5185465582,\"2020-05-02T09:00:00.000Z\":2.5350140943,\"2020-05-02T10:00:00.000Z\":2.5117286988,\"2020-05-02T11:00:00.000Z\":2.5082871799,\"2020-05-02T12:00:00.000Z\":2.5149836071,\"2020-05-02T13:00:00.000Z\":2.5028807486,\"2020-05-02T14:00:00.000Z\":2.523517088,\"2020-05-02T15:00:00.000Z\":2.554328315,\"2020-05-02T16:00:00.000Z\":2.4982672405,\"2020-05-02T17:00:00.000Z\":2.5212582072,\"2020-05-02T18:00:00.000Z\":2.5408671362,\"2020-05-02T19:00:00.000Z\":2.534927499,\"2020-05-02T20:00:00.000Z\":2.5499492231,\"2020-05-02T21:00:00.000Z\":2.506651042,\"2020-05-02T22:00:00.000Z\":2.5362261202,\"2020-05-02T23:00:00.000Z\":2.5289785015,\"2020-05-03T00:00:00.000Z\":2.5439596654,\"2020-05-03T01:00:00.000Z\":2.5349408476,\"2020-05-03T02:00:00.000Z\":2.4928973472,\"2020-05-03T03:00:00.000Z\":2.5235283235,\"2020-05-03T04:00:00.000Z\":2.4952145471,\"2020-05-03T05:00:00.000Z\":2.5357483131,\"2020-05-03T06:00:00.000Z\":2.4875558337,\"2020-05-03T07:00:00.000Z\":2.4976392088,\"2020-05-03T08:00:00.000Z\":2.4934381565,\"2020-05-03T09:00:00.000Z\":2.5499418548,\"2020-05-03T10:00:00.000Z\":2.5353427119,\"2020-05-03T11:00:00.000Z\":2.5438575598,\"2020-05-03T12:00:00.000Z\":2.5477980799,\"2020-05-03T13:00:00.000Z\":2.5353353389,\"2020-05-03T14:00:00.000Z\":2.490339555,\"2020-05-03T15:00:00.000Z\":2.5258760102,\"2020-05-03T16:00:00.000Z\":2.4909430024,\"2020-05-03T17:00:00.000Z\":2.5418209819,\"2020-05-03T18:00:00.000Z\":2.4963330331,\"2020-05-03T19:00:00.000Z\":2.4893977942,\"2020-05-03T20:00:00.000Z\":2.5157624715,\"2020-05-03T21:00:00.000Z\":2.5332988324,\"2020-05-03T22:00:00.000Z\":2.5080267414,\"2020-05-03T23:00:00.000Z\":2.5110675161,\"2020-05-04T00:00:00.000Z\":2.4916789597,\"2020-05-04T01:00:00.000Z\":2.4857544538,\"2020-05-04T02:00:00.000Z\":2.5523625847,\"2020-05-04T03:00:00.000Z\":2.5161945193,\"2020-05-04T04:00:00.000Z\":2.5031237636,\"2020-05-04T05:00:00.000Z\":2.499693572,\"2020-05-04T06:00:00.000Z\":2.5310847546,\"2020-05-04T07:00:00.000Z\":2.5294701706,\"2020-05-04T08:00:00.000Z\":2.4953251286,\"2020-05-04T09:00:00.000Z\":2.5145793132,\"2020-05-04T10:00:00.000Z\":2.537795696,\"2020-05-04T11:00:00.000Z\":2.5177948972,\"2020-05-04T12:00:00.000Z\":2.4771575641,\"2020-05-04T13:00:00.000Z\":2.4766223173,\"2020-05-04T14:00:00.000Z\":2.4866457947,\"2020-05-04T15:00:00.000Z\":2.4773926315,\"2020-05-04T16:00:00.000Z\":2.4849491065,\"2020-05-04T17:00:00.000Z\":2.4614148496,\"2020-05-04T18:00:00.000Z\":2.5140566144,\"2020-05-04T19:00:00.000Z\":2.4610181004,\"2020-05-04T20:00:00.000Z\":2.5032041998,\"2020-05-04T21:00:00.000Z\":2.4602600843,\"2020-05-04T22:00:00.000Z\":2.4425060895,\"2020-05-04T23:00:00.000Z\":2.4887562624,\"2020-05-05T00:00:00.000Z\":2.4587981472,\"2020-05-05T01:00:00.000Z\":2.4976287919,\"2020-05-05T02:00:00.000Z\":2.4759566315,\"2020-05-05T03:00:00.000Z\":2.4983647141,\"2020-05-05T04:00:00.000Z\":2.4481869955,\"2020-05-05T05:00:00.000Z\":2.4620033756,\"2020-05-05T06:00:00.000Z\":2.4722438504,\"2020-05-05T07:00:00.000Z\":2.4836028877,\"2020-05-05T08:00:00.000Z\":2.4999365634,\"2020-05-05T09:00:00.000Z\":2.4590343725,\"2020-05-05T10:00:00.000Z\":2.485029072,\"2020-05-05T11:00:00.000Z\":2.4832933203,\"2020-05-05T12:00:00.000Z\":2.4493189797,\"2020-05-05T13:00:00.000Z\":2.4555612652,\"2020-05-05T14:00:00.000Z\":2.4331822011,\"2020-05-05T15:00:00.000Z\":2.4437542619,\"2020-05-05T16:00:00.000Z\":2.4103224236,\"2020-05-05T17:00:00.000Z\":2.4599756767,\"2020-05-05T18:00:00.000Z\":2.4195711603,\"2020-05-05T19:00:00.000Z\":2.4204898355,\"2020-05-05T20:00:00.000Z\":2.4271840023,\"2020-05-05T21:00:00.000Z\":2.4093728506,\"2020-05-05T22:00:00.000Z\":2.4287596847,\"2020-05-05T23:00:00.000Z\":2.4502553829,\"2020-05-06T00:00:00.000Z\":2.4032112072,\"2020-05-06T01:00:00.000Z\":2.4164635616,\"2020-05-06T02:00:00.000Z\":2.3964321581,\"2020-05-06T03:00:00.000Z\":2.4296400627,\"2020-05-06T04:00:00.000Z\":2.4597693405,\"2020-05-06T05:00:00.000Z\":2.4051327723,\"2020-05-06T06:00:00.000Z\":2.39231384,\"2020-05-06T07:00:00.000Z\":2.4227524163,\"2020-05-06T08:00:00.000Z\":2.4241047304,\"2020-05-06T09:00:00.000Z\":2.383595989,\"2020-05-06T10:00:00.000Z\":2.3830219146,\"2020-05-06T11:00:00.000Z\":2.391330956,\"2020-05-06T12:00:00.000Z\":2.4083971686,\"2020-05-06T13:00:00.000Z\":2.4019011994,\"2020-05-06T14:00:00.000Z\":2.3741282476,\"2020-05-06T15:00:00.000Z\":2.408673447,\"2020-05-06T16:00:00.000Z\":2.3888631077,\"2020-05-06T17:00:00.000Z\":2.3805006535,\"2020-05-06T18:00:00.000Z\":2.4118540536,\"2020-05-06T19:00:00.000Z\":2.3915179257,\"2020-05-06T20:00:00.000Z\":2.3692830106,\"2020-05-06T21:00:00.000Z\":2.4088917478,\"2020-05-06T22:00:00.000Z\":2.3724274396,\"2020-05-06T23:00:00.000Z\":2.3524618611,\"2020-05-07T00:00:00.000Z\":2.3824901899,\"2020-05-07T01:00:00.000Z\":2.39644748,\"2020-05-07T02:00:00.000Z\":2.4080285331,\"2020-05-07T03:00:00.000Z\":2.3540845158,\"2020-05-07T04:00:00.000Z\":2.377081574,\"2020-05-07T05:00:00.000Z\":2.3825706704,\"2020-05-07T06:00:00.000Z\":2.3969814116,\"2020-05-07T07:00:00.000Z\":2.3902110487,\"2020-05-07T08:00:00.000Z\":2.8876608764,\"2020-05-07T09:00:00.000Z\":2.8554512351,\"2020-05-07T10:00:00.000Z\":2.9011506947,\"2020-05-07T11:00:00.000Z\":2.8739810027,\"2020-05-07T12:00:00.000Z\":2.8642327429,\"2020-05-07T13:00:00.000Z\":2.8609388862,\"2020-05-07T14:00:00.000Z\":2.8691609675,\"2020-05-07T15:00:00.000Z\":2.8516302986,\"2020-05-07T16:00:00.000Z\":2.8860791586,\"2020-05-07T17:00:00.000Z\":2.8417859745,\"2020-05-07T18:00:00.000Z\":2.8577750865,\"2020-05-07T19:00:00.000Z\":2.861678322,\"2020-05-07T20:00:00.000Z\":2.8064804686,\"2020-05-07T21:00:00.000Z\":2.8447594889,\"2020-05-07T22:00:00.000Z\":2.855936299,\"2020-05-07T23:00:00.000Z\":2.8142863343,\"2020-05-08T00:00:00.000Z\":2.8373024815,\"2020-05-08T01:00:00.000Z\":2.8435283639,\"2020-05-08T02:00:00.000Z\":2.8654301284,\"2020-05-08T03:00:00.000Z\":2.821334943,\"2020-05-08T04:00:00.000Z\":2.8432670041,\"2020-05-08T05:00:00.000Z\":2.8557929741,\"2020-05-08T06:00:00.000Z\":2.8156375097,\"2020-05-08T07:00:00.000Z\":2.855427583,\"2020-05-08T08:00:00.000Z\":2.8338698983,\"2020-05-08T09:00:00.000Z\":2.8455777397,\"2020-05-08T10:00:00.000Z\":2.8302046473,\"2020-05-08T11:00:00.000Z\":2.811772505,\"2020-05-08T12:00:00.000Z\":2.8327504575,\"2020-05-08T13:00:00.000Z\":2.8149162137,\"2020-05-08T14:00:00.000Z\":2.8418180107,\"2020-05-08T15:00:00.000Z\":2.77624676,\"2020-05-08T16:00:00.000Z\":2.7750554183,\"2020-05-08T17:00:00.000Z\":2.8217362031,\"2020-05-08T18:00:00.000Z\":2.7887413672,\"2020-05-08T19:00:00.000Z\":2.8221631708,\"2020-05-08T20:00:00.000Z\":2.7607433072,\"2020-05-08T21:00:00.000Z\":2.8068503911,\"2020-05-08T22:00:00.000Z\":2.8275220851,\"2020-05-08T23:00:00.000Z\":2.7854105273,\"2020-05-09T00:00:00.000Z\":2.8234034853,\"2020-05-09T01:00:00.000Z\":2.7770116762,\"2020-05-09T02:00:00.000Z\":2.8169012822,\"2020-05-09T03:00:00.000Z\":2.7867158786,\"2020-05-09T04:00:00.000Z\":2.7771182754,\"2020-05-09T05:00:00.000Z\":2.8149487573,\"2020-05-09T06:00:00.000Z\":2.804412661,\"2020-05-09T07:00:00.000Z\":2.8110121218,\"2020-05-09T08:00:00.000Z\":2.7997556599,\"2020-05-09T09:00:00.000Z\":2.827594843,\"2020-05-09T10:00:00.000Z\":2.8026913184,\"2020-05-09T11:00:00.000Z\":2.7666065452,\"2020-05-09T12:00:00.000Z\":2.8146925781,\"2020-05-09T13:00:00.000Z\":2.8285910075,\"2020-05-09T14:00:00.000Z\":2.819171443,\"2020-05-09T15:00:00.000Z\":2.8276060552,\"2020-05-09T16:00:00.000Z\":2.786607283,\"2020-05-09T17:00:00.000Z\":2.8048391834,\"2020-05-09T18:00:00.000Z\":2.8159184436,\"2020-05-09T19:00:00.000Z\":2.7891395973,\"2020-05-09T20:00:00.000Z\":2.8116468863,\"2020-05-09T21:00:00.000Z\":2.7978174856,\"2020-05-09T22:00:00.000Z\":2.7989229558,\"2020-05-09T23:00:00.000Z\":2.7688699705,\"2020-05-10T00:00:00.000Z\":2.8017221595,\"2020-05-10T01:00:00.000Z\":2.772552825,\"2020-05-10T02:00:00.000Z\":2.7706036817,\"2020-05-10T03:00:00.000Z\":2.8012202962,\"2020-05-10T04:00:00.000Z\":2.785791312,\"2020-05-10T05:00:00.000Z\":2.7742417236,\"2020-05-10T06:00:00.000Z\":2.7712404497,\"2020-05-10T07:00:00.000Z\":2.8023151587,\"2020-05-10T08:00:00.000Z\":2.8038778267,\"2020-05-10T09:00:00.000Z\":2.7654629581,\"2020-05-10T10:00:00.000Z\":2.7723918403,\"2020-05-10T11:00:00.000Z\":2.7758481247,\"2020-05-10T12:00:00.000Z\":2.767177124,\"2020-05-10T13:00:00.000Z\":2.7656505946,\"2020-05-10T14:00:00.000Z\":2.7967909952,\"2020-05-10T15:00:00.000Z\":2.7623871484,\"2020-05-10T16:00:00.000Z\":2.7634893745,\"2020-05-10T17:00:00.000Z\":2.8194647161,\"2020-05-10T18:00:00.000Z\":2.770016505,\"2020-05-10T19:00:00.000Z\":2.791569751,\"2020-05-10T20:00:00.000Z\":2.7731723248,\"2020-05-10T21:00:00.000Z\":2.7867953525,\"2020-05-10T22:00:00.000Z\":2.779407642,\"2020-05-10T23:00:00.000Z\":2.8176463762,\"2020-05-11T00:00:00.000Z\":2.7962230453,\"2020-05-11T01:00:00.000Z\":2.7806077636,\"2020-05-11T02:00:00.000Z\":2.8055549689,\"2020-05-11T03:00:00.000Z\":2.7778179322,\"2020-05-11T04:00:00.000Z\":2.7663530922,\"2020-05-11T05:00:00.000Z\":2.8133794994,\"2020-05-11T06:00:00.000Z\":2.8175014886,\"2020-05-11T07:00:00.000Z\":2.8094160034,\"2020-05-11T08:00:00.000Z\":2.7852624609,\"2020-05-11T09:00:00.000Z\":2.7784953118,\"2020-05-11T10:00:00.000Z\":2.7841129905,\"2020-05-11T11:00:00.000Z\":2.7954359299,\"2020-05-11T12:00:00.000Z\":2.7670627932,\"2020-05-11T13:00:00.000Z\":2.7513481564,\"2020-05-11T14:00:00.000Z\":2.7789241783,\"2020-05-11T15:00:00.000Z\":2.7950077875,\"2020-05-11T16:00:00.000Z\":2.7340843339,\"2020-05-11T17:00:00.000Z\":2.7706471042,\"2020-05-11T18:00:00.000Z\":2.7340350929,\"2020-05-11T19:00:00.000Z\":2.7857325803,\"2020-05-11T20:00:00.000Z\":2.7754412275,\"2020-05-11T21:00:00.000Z\":2.7255128288,\"2020-05-11T22:00:00.000Z\":2.7736621437,\"2020-05-11T23:00:00.000Z\":2.7741544669,\"2020-05-12T00:00:00.000Z\":2.7567000156,\"2020-05-12T01:00:00.000Z\":2.7286863092,\"2020-05-12T02:00:00.000Z\":2.7251265494,\"2020-05-12T03:00:00.000Z\":2.7373543428,\"2020-05-12T04:00:00.000Z\":2.7232293938,\"2020-05-12T05:00:00.000Z\":2.7407298649,\"2020-05-12T06:00:00.000Z\":2.7512581857,\"2020-05-12T07:00:00.000Z\":2.720196368,\"2020-05-12T08:00:00.000Z\":2.7268853219,\"2020-05-12T09:00:00.000Z\":2.7248220638,\"2020-05-12T10:00:00.000Z\":2.7589560897,\"2020-05-12T11:00:00.000Z\":2.7355221787,\"2020-05-12T12:00:00.000Z\":2.7154885845,\"2020-05-12T13:00:00.000Z\":2.6972396153,\"2020-05-12T14:00:00.000Z\":2.6945708743,\"2020-05-12T15:00:00.000Z\":2.728854137,\"2020-05-12T16:00:00.000Z\":2.741924416,\"2020-05-12T17:00:00.000Z\":2.681514517,\"2020-05-12T18:00:00.000Z\":2.7359950179,\"2020-05-12T19:00:00.000Z\":2.7258032095,\"2020-05-12T20:00:00.000Z\":2.7151585953,\"2020-05-12T21:00:00.000Z\":2.6768890865,\"2020-05-12T22:00:00.000Z\":2.7274083591,\"2020-05-12T23:00:00.000Z\":2.6761276008,\"2020-05-13T00:00:00.000Z\":2.7166516426,\"2020-05-13T01:00:00.000Z\":2.6845210743,\"2020-05-13T02:00:00.000Z\":2.7179678993,\"2020-05-13T03:00:00.000Z\":2.6928699958,\"2020-05-13T04:00:00.000Z\":2.7208969343,\"2020-05-13T05:00:00.000Z\":2.6712462796,\"2020-05-13T06:00:00.000Z\":2.7076362206,\"2020-05-13T07:00:00.000Z\":2.7303837224,\"2020-05-13T08:00:00.000Z\":2.7057166449,\"2020-05-13T09:00:00.000Z\":2.6738723965,\"2020-05-13T10:00:00.000Z\":2.6983200178,\"2020-05-13T11:00:00.000Z\":2.7183696993,\"2020-05-13T12:00:00.000Z\":2.6584979712,\"2020-05-13T13:00:00.000Z\":2.7019644564,\"2020-05-13T14:00:00.000Z\":2.6980747823,\"2020-05-13T15:00:00.000Z\":2.6837261034,\"2020-05-13T16:00:00.000Z\":2.6480272182,\"2020-05-13T17:00:00.000Z\":2.6373243943,\"2020-05-13T18:00:00.000Z\":2.6789372856,\"2020-05-13T19:00:00.000Z\":2.6539083585,\"2020-05-13T20:00:00.000Z\":2.6905034117,\"2020-05-13T21:00:00.000Z\":2.6637545007,\"2020-05-13T22:00:00.000Z\":2.6615138317,\"2020-05-13T23:00:00.000Z\":2.6877730651,\"2020-05-14T00:00:00.000Z\":2.6778959828,\"2020-05-14T01:00:00.000Z\":2.6791458864,\"2020-05-14T02:00:00.000Z\":2.6282751287,\"2020-05-14T03:00:00.000Z\":2.691481752,\"2020-05-14T04:00:00.000Z\":2.6438410933,\"2020-05-14T05:00:00.000Z\":2.6446438349,\"2020-05-14T06:00:00.000Z\":2.6664778986,\"2020-05-14T07:00:00.000Z\":2.6749865152,\"2020-05-14T08:00:00.000Z\":2.6197573996,\"2020-05-14T09:00:00.000Z\":2.63033336,\"2020-05-14T10:00:00.000Z\":2.6196842281,\"2020-05-14T11:00:00.000Z\":2.665106046,\"2020-05-14T12:00:00.000Z\":2.653752376,\"2020-05-14T13:00:00.000Z\":2.6624281378,\"2020-05-14T14:00:00.000Z\":2.6601045184,\"2020-05-14T15:00:00.000Z\":2.6642180189,\"2020-05-14T16:00:00.000Z\":2.6121169417,\"2020-05-14T17:00:00.000Z\":2.617543464,\"2020-05-14T18:00:00.000Z\":2.6513501098,\"2020-05-14T19:00:00.000Z\":2.6522931433,\"2020-05-14T20:00:00.000Z\":2.6010705104,\"2020-05-14T21:00:00.000Z\":2.6449498766,\"2020-05-14T22:00:00.000Z\":2.5983408246,\"2020-05-14T23:00:00.000Z\":2.5985499313,\"2020-05-15T00:00:00.000Z\":2.6413951229,\"2020-05-15T01:00:00.000Z\":2.6424818539,\"2020-05-15T02:00:00.000Z\":2.5927885137,\"2020-05-15T03:00:00.000Z\":2.6240514022,\"2020-05-15T04:00:00.000Z\":2.5925715035,\"2020-05-15T05:00:00.000Z\":2.6138055716,\"2020-05-15T06:00:00.000Z\":2.5910883652,\"2020-05-15T07:00:00.000Z\":2.5769435193,\"2020-05-15T08:00:00.000Z\":2.6266156697,\"2020-05-15T09:00:00.000Z\":2.6374539388,\"2020-05-15T10:00:00.000Z\":2.5787424447,\"2020-05-15T11:00:00.000Z\":2.5678192952,\"2020-05-15T12:00:00.000Z\":2.6153927681,\"2020-05-15T13:00:00.000Z\":2.5853832131,\"2020-05-15T14:00:00.000Z\":2.6132661902,\"2020-05-15T15:00:00.000Z\":2.5931169794,\"2020-05-15T16:00:00.000Z\":2.5833136246,\"2020-05-15T17:00:00.000Z\":2.591572653,\"2020-05-15T18:00:00.000Z\":2.5957702589,\"2020-05-15T19:00:00.000Z\":2.5913523358,\"2020-05-15T20:00:00.000Z\":2.601923737,\"2020-05-15T21:00:00.000Z\":2.5841345704,\"2020-05-15T22:00:00.000Z\":2.5392555788,\"2020-05-15T23:00:00.000Z\":2.5391458001,\"2020-05-16T00:00:00.000Z\":2.5678552605,\"2020-05-16T01:00:00.000Z\":2.5837382437,\"2020-05-16T02:00:00.000Z\":2.575568777,\"2020-05-16T03:00:00.000Z\":2.5546579073,\"2020-05-16T04:00:00.000Z\":2.5788964958,\"2020-05-16T05:00:00.000Z\":2.5711382881,\"2020-05-16T06:00:00.000Z\":2.5954454415,\"2020-05-16T07:00:00.000Z\":2.5547805625,\"2020-05-16T08:00:00.000Z\":2.5734597485,\"2020-05-16T09:00:00.000Z\":2.5353495222,\"2020-05-16T10:00:00.000Z\":2.5712632657,\"2020-05-16T11:00:00.000Z\":2.5893826923,\"2020-05-16T12:00:00.000Z\":2.5872103903,\"2020-05-16T13:00:00.000Z\":2.5923852379,\"2020-05-16T14:00:00.000Z\":2.5792818832,\"2020-05-16T15:00:00.000Z\":2.5990198819,\"2020-05-16T16:00:00.000Z\":2.5778749408,\"2020-05-16T17:00:00.000Z\":2.543925516,\"2020-05-16T18:00:00.000Z\":2.5972598182,\"2020-05-16T19:00:00.000Z\":2.5423908565,\"2020-05-16T20:00:00.000Z\":2.5578227224,\"2020-05-16T21:00:00.000Z\":2.5858883985,\"2020-05-16T22:00:00.000Z\":2.5805623562,\"2020-05-16T23:00:00.000Z\":2.5448297192,\"2020-05-17T00:00:00.000Z\":2.5491601489,\"2020-05-17T01:00:00.000Z\":2.5731124094,\"2020-05-17T02:00:00.000Z\":2.5736406969,\"2020-05-17T03:00:00.000Z\":2.5626850061,\"2020-05-17T04:00:00.000Z\":2.5436138376,\"2020-05-17T05:00:00.000Z\":2.5855244367,\"2020-05-17T06:00:00.000Z\":2.5701957181,\"2020-05-17T07:00:00.000Z\":2.5898424455,\"2020-05-17T08:00:00.000Z\":2.5407796698,\"2020-05-17T09:00:00.000Z\":2.6043293124,\"2020-05-17T10:00:00.000Z\":2.5897971392,\"2020-05-17T11:00:00.000Z\":2.591151675,\"2020-05-17T12:00:00.000Z\":2.5381999262,\"2020-05-17T13:00:00.000Z\":2.5496228887,\"2020-05-17T14:00:00.000Z\":2.5541065096,\"2020-05-17T15:00:00.000Z\":2.5871030528,\"2020-05-17T16:00:00.000Z\":2.6038788497,\"2020-05-17T17:00:00.000Z\":2.5506534759,\"2020-05-17T18:00:00.000Z\":2.5866884411,\"2020-05-17T19:00:00.000Z\":2.5455842598,\"2020-05-17T20:00:00.000Z\":2.5487742565,\"2020-05-17T21:00:00.000Z\":2.5406442875,\"2020-05-17T22:00:00.000Z\":2.5737797011,\"2020-05-17T23:00:00.000Z\":2.5390274429,\"2020-05-18T00:00:00.000Z\":2.561363499,\"2020-05-18T01:00:00.000Z\":2.5911964892,\"2020-05-18T02:00:00.000Z\":2.5796647228,\"2020-05-18T03:00:00.000Z\":2.5697442187,\"2020-05-18T04:00:00.000Z\":2.5946197386,\"2020-05-18T05:00:00.000Z\":2.6040066764,\"2020-05-18T06:00:00.000Z\":2.5510987719,\"2020-05-18T07:00:00.000Z\":2.5467777836,\"2020-05-18T08:00:00.000Z\":2.5285608801,\"2020-05-18T09:00:00.000Z\":2.5624147864,\"2020-05-18T10:00:00.000Z\":2.5722812283,\"2020-05-18T11:00:00.000Z\":2.5278309885,\"2020-05-18T12:00:00.000Z\":2.5354241218,\"2020-05-18T13:00:00.000Z\":2.5589556058,\"2020-05-18T14:00:00.000Z\":2.5464946567,\"2020-05-18T15:00:00.000Z\":2.5107928288,\"2020-05-18T16:00:00.000Z\":2.5077725848,\"2020-05-18T17:00:00.000Z\":2.5586393555,\"2020-05-18T18:00:00.000Z\":2.5007512067,\"2020-05-18T19:00:00.000Z\":2.5039389529,\"2020-05-18T20:00:00.000Z\":2.4914330926,\"2020-05-18T21:00:00.000Z\":2.5565952434,\"2020-05-18T22:00:00.000Z\":2.5287467728,\"2020-05-18T23:00:00.000Z\":2.522552616,\"2020-05-19T00:00:00.000Z\":2.549253813,\"2020-05-19T01:00:00.000Z\":2.556982035,\"2020-05-19T02:00:00.000Z\":2.5008039191,\"2020-05-19T03:00:00.000Z\":2.4974688627,\"2020-05-19T04:00:00.000Z\":2.5190140812,\"2020-05-19T05:00:00.000Z\":2.4941905269,\"2020-05-19T06:00:00.000Z\":2.5027892972,\"2020-05-19T07:00:00.000Z\":2.4878828835,\"2020-05-19T08:00:00.000Z\":2.5477026977,\"2020-05-19T09:00:00.000Z\":2.5224390682,\"2020-05-19T10:00:00.000Z\":2.535521406,\"2020-05-19T11:00:00.000Z\":2.5355743475,\"2020-05-19T12:00:00.000Z\":2.4792855611,\"2020-05-19T13:00:00.000Z\":2.5215776496,\"2020-05-19T14:00:00.000Z\":2.5044866209,\"2020-05-19T15:00:00.000Z\":2.4703409983,\"2020-05-19T16:00:00.000Z\":2.4601050583,\"2020-05-19T17:00:00.000Z\":2.4696577071,\"2020-05-19T18:00:00.000Z\":2.4938061169,\"2020-05-19T19:00:00.000Z\":2.5085306803,\"2020-05-19T20:00:00.000Z\":2.4842918727,\"2020-05-19T21:00:00.000Z\":2.4808950741,\"2020-05-19T22:00:00.000Z\":2.4660397747,\"2020-05-19T23:00:00.000Z\":2.4943824127,\"2020-05-20T00:00:00.000Z\":2.4817219064,\"2020-05-20T01:00:00.000Z\":2.5147926716,\"2020-05-20T02:00:00.000Z\":2.470617541,\"2020-05-20T03:00:00.000Z\":2.4616569742,\"2020-05-20T04:00:00.000Z\":2.4553394116,\"2020-05-20T05:00:00.000Z\":2.4874017253,\"2020-05-20T06:00:00.000Z\":2.4713692517,\"2020-05-20T07:00:00.000Z\":2.442824733,\"2020-05-20T08:00:00.000Z\":2.4667143821,\"2020-05-20T09:00:00.000Z\":2.4675433882,\"2020-05-20T10:00:00.000Z\":2.4729672287,\"2020-05-20T11:00:00.000Z\":2.4588428232,\"2020-05-20T12:00:00.000Z\":2.447491051,\"2020-05-20T13:00:00.000Z\":2.4471712469,\"2020-05-20T14:00:00.000Z\":2.4346698167,\"2020-05-20T15:00:00.000Z\":2.4578873391,\"2020-05-20T16:00:00.000Z\":2.4737688817,\"2020-05-20T17:00:00.000Z\":2.44960546,\"2020-05-20T18:00:00.000Z\":2.4650394974,\"2020-05-20T19:00:00.000Z\":2.4429578423,\"2020-05-20T20:00:00.000Z\":2.4125596516,\"2020-05-20T21:00:00.000Z\":2.4147819577,\"2020-05-20T22:00:00.000Z\":2.4481842665,\"2020-05-20T23:00:00.000Z\":2.4224650937,\"2020-05-21T00:00:00.000Z\":2.4026664814,\"2020-05-21T01:00:00.000Z\":2.466764339,\"2020-05-21T02:00:00.000Z\":2.4513187372,\"2020-05-21T03:00:00.000Z\":2.458536271,\"2020-05-21T04:00:00.000Z\":2.4245890798,\"2020-05-21T05:00:00.000Z\":2.4688075588,\"2020-05-21T06:00:00.000Z\":2.4405861286,\"2020-05-21T07:00:00.000Z\":2.3964599329,\"2020-05-21T08:00:00.000Z\":2.435074941,\"2020-05-21T09:00:00.000Z\":2.4060865447,\"2020-05-21T10:00:00.000Z\":2.4452533621,\"2020-05-21T11:00:00.000Z\":2.3889190886,\"2020-05-21T12:00:00.000Z\":2.3827470555,\"2020-05-21T13:00:00.000Z\":2.3999072124,\"2020-05-21T14:00:00.000Z\":2.3811214257,\"2020-05-21T15:00:00.000Z\":2.3957512349,\"2020-05-21T16:00:00.000Z\":2.367176444,\"2020-05-21T17:00:00.000Z\":2.3667989162,\"2020-05-21T18:00:00.000Z\":2.4097563074,\"2020-05-21T19:00:00.000Z\":2.364553978,\"2020-05-21T20:00:00.000Z\":2.3876010939,\"2020-05-21T21:00:00.000Z\":2.3854184921,\"2020-05-21T22:00:00.000Z\":2.3732121899,\"2020-05-21T23:00:00.000Z\":2.3901082352,\"2020-05-22T00:00:00.000Z\":2.3737547667,\"2020-05-22T01:00:00.000Z\":2.3845882331,\"2020-05-22T02:00:00.000Z\":2.3605831468,\"2020-05-22T03:00:00.000Z\":2.3828253831,\"2020-05-22T04:00:00.000Z\":2.3717004247,\"2020-05-22T05:00:00.000Z\":2.3632612577,\"2020-05-22T06:00:00.000Z\":2.3792611882,\"2020-05-22T07:00:00.000Z\":2.3633100994,\"2020-05-22T08:00:00.000Z\":2.3894403828,\"2020-05-22T09:00:00.000Z\":2.3584370477,\"2020-05-22T10:00:00.000Z\":2.3933310636,\"2020-05-22T11:00:00.000Z\":2.3871154084,\"2020-05-22T12:00:00.000Z\":2.380782142,\"2020-05-22T13:00:00.000Z\":2.3701802855,\"2020-05-22T14:00:00.000Z\":2.3835220151,\"2020-05-22T15:00:00.000Z\":2.3760978453,\"2020-05-22T16:00:00.000Z\":2.3373011628,\"2020-05-22T17:00:00.000Z\":2.3382425414,\"2020-05-22T18:00:00.000Z\":2.3650870754,\"2020-05-22T19:00:00.000Z\":2.3587905078,\"2020-05-22T20:00:00.000Z\":2.3215876808,\"2020-05-22T21:00:00.000Z\":2.3288642393,\"2020-05-22T22:00:00.000Z\":2.3696680585,\"2020-05-22T23:00:00.000Z\":2.3575409325,\"2020-05-23T00:00:00.000Z\":2.317467971,\"2020-05-23T01:00:00.000Z\":2.3163217478,\"2020-05-23T02:00:00.000Z\":2.3497703926,\"2020-05-23T03:00:00.000Z\":2.3673813145,\"2020-05-23T04:00:00.000Z\":2.348324602,\"2020-05-23T05:00:00.000Z\":2.3183434648,\"2020-05-23T06:00:00.000Z\":2.3177696674,\"2020-05-23T07:00:00.000Z\":2.3515651594,\"2020-05-23T08:00:00.000Z\":2.3128771772,\"2020-05-23T09:00:00.000Z\":2.3163857401,\"2020-05-23T10:00:00.000Z\":2.356220498,\"2020-05-23T11:00:00.000Z\":2.3230863058,\"2020-05-23T12:00:00.000Z\":2.3222366944,\"2020-05-23T13:00:00.000Z\":2.3503805409,\"2020-05-23T14:00:00.000Z\":2.3635722983,\"2020-05-23T15:00:00.000Z\":2.3646286918,\"2020-05-23T16:00:00.000Z\":2.3578381079,\"2020-05-23T17:00:00.000Z\":2.3176569752,\"2020-05-23T18:00:00.000Z\":2.3414491826,\"2020-05-23T19:00:00.000Z\":2.331806027,\"2020-05-23T20:00:00.000Z\":2.3117808223,\"2020-05-23T21:00:00.000Z\":2.3753074369,\"2020-05-23T22:00:00.000Z\":2.3113172098,\"2020-05-23T23:00:00.000Z\":2.3265853179,\"2020-05-24T00:00:00.000Z\":2.3732642937,\"2020-05-24T01:00:00.000Z\":2.3680356495,\"2020-05-24T02:00:00.000Z\":2.374909295,\"2020-05-24T03:00:00.000Z\":2.3493766638,\"2020-05-24T04:00:00.000Z\":2.3359450082,\"2020-05-24T05:00:00.000Z\":2.37211517,\"2020-05-24T06:00:00.000Z\":2.3623120316,\"2020-05-24T07:00:00.000Z\":2.3301069077,\"2020-05-24T08:00:00.000Z\":2.3729559093,\"2020-05-24T09:00:00.000Z\":2.3609485986,\"2020-05-24T10:00:00.000Z\":2.3424942096,\"2020-05-24T11:00:00.000Z\":2.3197571838,\"2020-05-24T12:00:00.000Z\":2.3710370622,\"2020-05-24T13:00:00.000Z\":2.3179119157,\"2020-05-24T14:00:00.000Z\":2.3416944935,\"2020-05-24T15:00:00.000Z\":2.3370203896,\"2020-05-24T16:00:00.000Z\":2.3538106751,\"2020-05-24T17:00:00.000Z\":2.3291531084,\"2020-05-24T18:00:00.000Z\":2.3345230688,\"2020-05-24T19:00:00.000Z\":2.3722221681,\"2020-05-24T20:00:00.000Z\":2.3386888412,\"2020-05-24T21:00:00.000Z\":2.3352960009,\"2020-05-24T22:00:00.000Z\":2.362323786,\"2020-05-24T23:00:00.000Z\":2.3393720985,\"2020-05-25T00:00:00.000Z\":2.3250893285,\"2020-05-25T01:00:00.000Z\":2.3335853665,\"2020-05-25T02:00:00.000Z\":2.3342798565,\"2020-05-25T03:00:00.000Z\":2.355586723,\"2020-05-25T04:00:00.000Z\":2.3375514173,\"2020-05-25T05:00:00.000Z\":2.3414990313,\"2020-05-25T06:00:00.000Z\":2.3436017427,\"2020-05-25T07:00:00.000Z\":2.3293509691,\"2020-05-25T08:00:00.000Z\":2.3704824342,\"2020-05-25T09:00:00.000Z\":2.327739129,\"2020-05-25T10:00:00.000Z\":2.3141902095,\"2020-05-25T11:00:00.000Z\":2.3037736953,\"2020-05-25T12:00:00.000Z\":2.3481850616,\"2020-05-25T13:00:00.000Z\":2.3378050724,\"2020-05-25T14:00:00.000Z\":2.3519978131,\"2020-05-25T15:00:00.000Z\":2.3111453787,\"2020-05-25T16:00:00.000Z\":2.3117858997,\"2020-05-25T17:00:00.000Z\":2.3437823839,\"2020-05-25T18:00:00.000Z\":2.2985355935,\"2020-05-25T19:00:00.000Z\":2.2889319628,\"2020-05-25T20:00:00.000Z\":2.3141072335,\"2020-05-25T21:00:00.000Z\":2.2663323608,\"2020-05-25T22:00:00.000Z\":2.2663467487,\"2020-05-25T23:00:00.000Z\":2.3139569202,\"2020-05-26T00:00:00.000Z\":2.3129660677,\"2020-05-26T01:00:00.000Z\":2.2993218542,\"2020-05-26T02:00:00.000Z\":2.2902738561,\"2020-05-26T03:00:00.000Z\":2.3081958222,\"2020-05-26T04:00:00.000Z\":2.2772477378,\"2020-05-26T05:00:00.000Z\":2.2833754102,\"2020-05-26T06:00:00.000Z\":2.298624666,\"2020-05-26T07:00:00.000Z\":2.3208954595,\"2020-05-26T08:00:00.000Z\":2.3117240553,\"2020-05-26T09:00:00.000Z\":2.2581707124,\"2020-05-26T10:00:00.000Z\":2.3074877882,\"2020-05-26T11:00:00.000Z\":2.2788177398,\"2020-05-26T12:00:00.000Z\":2.28910202,\"2020-05-26T13:00:00.000Z\":2.2542432777,\"2020-05-26T14:00:00.000Z\":2.2889851565,\"2020-05-26T15:00:00.000Z\":2.2558450265,\"2020-05-26T16:00:00.000Z\":2.2350560292,\"2020-05-26T17:00:00.000Z\":2.2520909581,\"2020-05-26T18:00:00.000Z\":2.2404024881,\"2020-05-26T19:00:00.000Z\":2.2450243247,\"2020-05-26T20:00:00.000Z\":2.2414637677,\"2020-05-26T21:00:00.000Z\":2.2549509291,\"2020-05-26T22:00:00.000Z\":2.2677979399,\"2020-05-26T23:00:00.000Z\":2.2591624133,\"2020-05-27T00:00:00.000Z\":2.2643949437,\"2020-05-27T01:00:00.000Z\":2.2324029864,\"2020-05-27T02:00:00.000Z\":2.2204872979,\"2020-05-27T03:00:00.000Z\":2.2671816003,\"2020-05-27T04:00:00.000Z\":2.2306875543,\"2020-05-27T05:00:00.000Z\":2.2269123244,\"2020-05-27T06:00:00.000Z\":2.2200746478,\"2020-05-27T07:00:00.000Z\":2.2452332587,\"2020-05-27T08:00:00.000Z\":2.2781186957,\"2020-05-27T09:00:00.000Z\":2.2682838438,\"2020-05-27T10:00:00.000Z\":2.2457983355,\"2020-05-27T11:00:00.000Z\":2.2482833103,\"2020-05-27T12:00:00.000Z\":2.2440763375,\"2020-05-27T13:00:00.000Z\":2.2496754332,\"2020-05-27T14:00:00.000Z\":2.2377133006,\"2020-05-27T15:00:00.000Z\":2.2295662521,\"2020-05-27T16:00:00.000Z\":2.2425895424,\"2020-05-27T17:00:00.000Z\":2.1867354651,\"2020-05-27T18:00:00.000Z\":2.2163906738,\"2020-05-27T19:00:00.000Z\":2.2085768065,\"2020-05-27T20:00:00.000Z\":2.2285712981,\"2020-05-27T21:00:00.000Z\":2.1805731795,\"2020-05-27T22:00:00.000Z\":2.22810313,\"2020-05-27T23:00:00.000Z\":2.2138538519,\"2020-05-28T00:00:00.000Z\":2.2441786299,\"2020-05-28T01:00:00.000Z\":2.1803427779,\"2020-05-28T02:00:00.000Z\":2.1992977156,\"2020-05-28T03:00:00.000Z\":2.2416509924,\"2020-05-28T04:00:00.000Z\":2.2079578008,\"2020-05-28T05:00:00.000Z\":2.2354591923,\"2020-05-28T06:00:00.000Z\":2.2412756431,\"2020-05-28T07:00:00.000Z\":2.1753252775,\"2020-05-28T08:00:00.000Z\":2.2150658764,\"2020-05-28T09:00:00.000Z\":2.1862375701,\"2020-05-28T10:00:00.000Z\":2.2181060672,\"2020-05-28T11:00:00.000Z\":2.2245614275,\"2020-05-28T12:00:00.000Z\":2.2105838228,\"2020-05-28T13:00:00.000Z\":2.1950357091,\"2020-05-28T14:00:00.000Z\":2.2175681951,\"2020-05-28T15:00:00.000Z\":2.2071353605,\"2020-05-28T16:00:00.000Z\":2.1753563139,\"2020-05-28T17:00:00.000Z\":2.1543748944,\"2020-05-28T18:00:00.000Z\":2.1911450449,\"2020-05-28T19:00:00.000Z\":2.1370935896,\"2020-05-28T20:00:00.000Z\":2.1732676508,\"2020-05-28T21:00:00.000Z\":2.1649085713,\"2020-05-28T22:00:00.000Z\":2.1334434498,\"2020-05-28T23:00:00.000Z\":2.1373257318,\"2020-05-29T00:00:00.000Z\":2.1415503769,\"2020-05-29T01:00:00.000Z\":2.1741583417,\"2020-05-29T02:00:00.000Z\":2.1300865559,\"2020-05-29T03:00:00.000Z\":2.187064251,\"2020-05-29T04:00:00.000Z\":2.1513825069,\"2020-05-29T05:00:00.000Z\":2.148031209,\"2020-05-29T06:00:00.000Z\":2.1331376479,\"2020-05-29T07:00:00.000Z\":2.1866245451,\"2020-05-29T08:00:00.000Z\":2.1624172082,\"2020-05-29T09:00:00.000Z\":2.1499761981,\"2020-05-29T10:00:00.000Z\":2.1777404933,\"2020-05-29T11:00:00.000Z\":2.1764986815,\"2020-05-29T12:00:00.000Z\":2.1468509665,\"2020-05-29T13:00:00.000Z\":2.1455738939,\"2020-05-29T14:00:00.000Z\":2.1549592857,\"2020-05-29T15:00:00.000Z\":2.1269280095,\"2020-05-29T16:00:00.000Z\":2.1164827024,\"2020-05-29T17:00:00.000Z\":2.1100834923,\"2020-05-29T18:00:00.000Z\":2.1519334744,\"2020-05-29T19:00:00.000Z\":2.1371329129,\"2020-05-29T20:00:00.000Z\":2.1307888009,\"2020-05-29T21:00:00.000Z\":2.0880198804,\"2020-05-29T22:00:00.000Z\":2.127288623,\"2020-05-29T23:00:00.000Z\":2.1287463572,\"2020-05-30T00:00:00.000Z\":2.1008850918,\"2020-05-30T01:00:00.000Z\":2.1057585274,\"2020-05-30T02:00:00.000Z\":2.094936324,\"2020-05-30T03:00:00.000Z\":2.1372542762,\"2020-05-30T04:00:00.000Z\":2.1179414143,\"2020-05-30T05:00:00.000Z\":2.1476393765,\"2020-05-30T06:00:00.000Z\":2.1205701259,\"2020-05-30T07:00:00.000Z\":2.1262053678,\"2020-05-30T08:00:00.000Z\":2.1034287209,\"2020-05-30T09:00:00.000Z\":2.1354021483,\"2020-05-30T10:00:00.000Z\":2.1334894546,\"2020-05-30T11:00:00.000Z\":2.1229640927,\"2020-05-30T12:00:00.000Z\":2.1171839151,\"2020-05-30T13:00:00.000Z\":2.1067720936,\"2020-05-30T14:00:00.000Z\":2.0950818038,\"2020-05-30T15:00:00.000Z\":2.1165297234,\"2020-05-30T16:00:00.000Z\":2.0956712067,\"2020-05-30T17:00:00.000Z\":2.1244171597,\"2020-05-30T18:00:00.000Z\":2.1326702003,\"2020-05-30T19:00:00.000Z\":2.1150019978,\"2020-05-30T20:00:00.000Z\":2.1278116649,\"2020-05-30T21:00:00.000Z\":2.0869849234,\"2020-05-30T22:00:00.000Z\":2.125263829,\"2020-05-30T23:00:00.000Z\":2.1139123953,\"2020-05-31T00:00:00.000Z\":2.1152377215,\"2020-05-31T01:00:00.000Z\":2.1327071907,\"2020-05-31T02:00:00.000Z\":2.1167130658,\"2020-05-31T03:00:00.000Z\":2.1544416014,\"2020-05-31T04:00:00.000Z\":2.0879369852,\"2020-05-31T05:00:00.000Z\":2.1003692503,\"2020-05-31T06:00:00.000Z\":2.1174453335,\"2020-05-31T07:00:00.000Z\":2.1327697996,\"2020-05-31T08:00:00.000Z\":2.1119295366,\"2020-05-31T09:00:00.000Z\":2.1069297046,\"2020-05-31T10:00:00.000Z\":2.1386254617,\"2020-05-31T11:00:00.000Z\":2.1337873369,\"2020-05-31T12:00:00.000Z\":2.1320484796,\"2020-05-31T13:00:00.000Z\":2.1413517653,\"2020-05-31T14:00:00.000Z\":2.1145457701,\"2020-05-31T15:00:00.000Z\":2.1302952654,\"2020-05-31T16:00:00.000Z\":2.1023544041,\"2020-05-31T17:00:00.000Z\":2.0877782935,\"2020-05-31T18:00:00.000Z\":2.0851633362,\"2020-05-31T19:00:00.000Z\":2.1097252537,\"2020-05-31T20:00:00.000Z\":2.0969373432,\"2020-05-31T21:00:00.000Z\":2.1420687879,\"2020-05-31T22:00:00.000Z\":2.1491158273,\"2020-05-31T23:00:00.000Z\":2.124131625,\"2020-06-01T00:00:00.000Z\":2.1425570685,\"2020-06-01T01:00:00.000Z\":2.1430335317,\"2020-06-01T02:00:00.000Z\":2.0961178869,\"2020-06-01T03:00:00.000Z\":2.091500574,\"2020-06-01T04:00:00.000Z\":2.1289326241,\"2020-06-01T05:00:00.000Z\":2.1001815773,\"2020-06-01T06:00:00.000Z\":2.0956116776,\"2020-06-01T07:00:00.000Z\":2.1276899602,\"2020-06-01T08:00:00.000Z\":2.0883829359,\"2020-06-01T09:00:00.000Z\":2.1191745956,\"2020-06-01T10:00:00.000Z\":2.1359184385,\"2020-06-01T11:00:00.000Z\":2.1150058764,\"2020-06-01T12:00:00.000Z\":2.1059588226,\"2020-06-01T13:00:00.000Z\":2.1100688769,\"2020-06-01T14:00:00.000Z\":2.092024714,\"2020-06-01T15:00:00.000Z\":2.0816991334,\"2020-06-01T16:00:00.000Z\":2.0674233713,\"2020-06-01T17:00:00.000Z\":2.0731764502,\"2020-06-01T18:00:00.000Z\":2.0602776299,\"2020-06-01T19:00:00.000Z\":2.0453738282,\"2020-06-01T20:00:00.000Z\":2.0585446903,\"2020-06-01T21:00:00.000Z\":2.0987198157,\"2020-06-01T22:00:00.000Z\":2.0422762919,\"2020-06-01T23:00:00.000Z\":2.1045616634,\"2020-06-02T00:00:00.000Z\":2.1073579135,\"2020-06-02T01:00:00.000Z\":2.0780935507,\"2020-06-02T02:00:00.000Z\":2.0729714237,\"2020-06-02T03:00:00.000Z\":2.0573977155,\"2020-06-02T04:00:00.000Z\":2.0608699953,\"2020-06-02T05:00:00.000Z\":2.0714640979,\"2020-06-02T06:00:00.000Z\":2.094514572,\"2020-06-02T07:00:00.000Z\":2.1033975554,\"2020-06-02T08:00:00.000Z\":2.0476842497,\"2020-06-02T09:00:00.000Z\":2.0913142616,\"2020-06-02T10:00:00.000Z\":2.0336843467,\"2020-06-02T11:00:00.000Z\":2.0383831388,\"2020-06-02T12:00:00.000Z\":2.0418092971,\"2020-06-02T13:00:00.000Z\":2.0649145453,\"2020-06-02T14:00:00.000Z\":2.0512161839,\"2020-06-02T15:00:00.000Z\":2.0686642896,\"2020-06-02T16:00:00.000Z\":2.0598713812,\"2020-06-02T17:00:00.000Z\":2.0219322476,\"2020-06-02T18:00:00.000Z\":2.0351501934,\"2020-06-02T19:00:00.000Z\":2.0266163426,\"2020-06-02T20:00:00.000Z\":2.0644049299,\"2020-06-02T21:00:00.000Z\":2.016462477,\"2020-06-02T22:00:00.000Z\":2.050952448,\"2020-06-02T23:00:00.000Z\":2.0540254954,\"2020-06-03T00:00:00.000Z\":2.0210876923,\"2020-06-03T01:00:00.000Z\":2.0509779924,\"2020-06-03T02:00:00.000Z\":1.9978356372,\"2020-06-03T03:00:00.000Z\":2.0218252491,\"2020-06-03T04:00:00.000Z\":2.0153880438,\"2020-06-03T05:00:00.000Z\":2.0631142101,\"2020-06-03T06:00:00.000Z\":2.0265129691,\"2020-06-03T07:00:00.000Z\":2.0129508505,\"2020-06-03T08:00:00.000Z\":2.0249723556,\"2020-06-03T09:00:00.000Z\":2.0305358457,\"2020-06-03T10:00:00.000Z\":2.0089213589,\"2020-06-03T11:00:00.000Z\":2.0247600939,\"2020-06-03T12:00:00.000Z\":1.9836005561,\"2020-06-03T13:00:00.000Z\":2.0217152172,\"2020-06-03T14:00:00.000Z\":1.9796010588,\"2020-06-03T15:00:00.000Z\":1.9818004199,\"2020-06-03T16:00:00.000Z\":2.0308196048,\"2020-06-03T17:00:00.000Z\":1.9945792697,\"2020-06-03T18:00:00.000Z\":1.963538552,\"2020-06-03T19:00:00.000Z\":1.974156957,\"2020-06-03T20:00:00.000Z\":1.9956456414,\"2020-06-03T21:00:00.000Z\":1.9907259797,\"2020-06-03T22:00:00.000Z\":1.9962944007,\"2020-06-03T23:00:00.000Z\":1.9605906684,\"2020-06-04T00:00:00.000Z\":2.0150474252,\"2020-06-04T01:00:00.000Z\":1.9720500907,\"2020-06-04T02:00:00.000Z\":2.0157201445,\"2020-06-04T03:00:00.000Z\":1.9646814322,\"2020-06-04T04:00:00.000Z\":1.9730844286,\"2020-06-04T05:00:00.000Z\":2.0107599578,\"2020-06-04T06:00:00.000Z\":2.0072156705,\"2020-06-04T07:00:00.000Z\":2.0048548668,\"2020-06-04T08:00:00.000Z\":1.9958200518,\"2020-06-04T09:00:00.000Z\":1.9679680676,\"2020-06-04T10:00:00.000Z\":1.9793470877,\"2020-06-04T11:00:00.000Z\":1.9592617077,\"2020-06-04T12:00:00.000Z\":1.9887023322,\"2020-06-04T13:00:00.000Z\":1.9344542709,\"2020-06-04T14:00:00.000Z\":1.9880870209,\"2020-06-04T15:00:00.000Z\":1.9461746893,\"2020-06-04T16:00:00.000Z\":1.9825521986,\"2020-06-04T17:00:00.000Z\":1.979853137,\"2020-06-04T18:00:00.000Z\":1.9343908128,\"2020-06-04T19:00:00.000Z\":1.9542340726,\"2020-06-04T20:00:00.000Z\":1.9194681724,\"2020-06-04T21:00:00.000Z\":1.9475225896,\"2020-06-04T22:00:00.000Z\":1.9186403536,\"2020-06-04T23:00:00.000Z\":1.9089691019,\"2020-06-05T00:00:00.000Z\":1.9347044622,\"2020-06-05T01:00:00.000Z\":1.9686426954,\"2020-06-05T02:00:00.000Z\":1.9347011013,\"2020-06-05T03:00:00.000Z\":1.9123184662,\"2020-06-05T04:00:00.000Z\":1.9501929906,\"2020-06-05T05:00:00.000Z\":1.9495252168,\"2020-06-05T06:00:00.000Z\":1.936373197,\"2020-06-05T07:00:00.000Z\":1.9554062787,\"2020-06-05T08:00:00.000Z\":1.9487862742,\"2020-06-05T09:00:00.000Z\":1.897130141,\"2020-06-05T10:00:00.000Z\":1.9151998984,\"2020-06-05T11:00:00.000Z\":1.9167378534,\"2020-06-05T12:00:00.000Z\":1.9230983108,\"2020-06-05T13:00:00.000Z\":1.9058410026,\"2020-06-05T14:00:00.000Z\":1.922041465,\"2020-06-05T15:00:00.000Z\":1.9168180426,\"2020-06-05T16:00:00.000Z\":1.9089082012,\"2020-06-05T17:00:00.000Z\":1.8950817099,\"2020-06-05T18:00:00.000Z\":1.8881599743,\"2020-06-05T19:00:00.000Z\":1.86709386,\"2020-06-05T20:00:00.000Z\":1.8847201573,\"2020-06-05T21:00:00.000Z\":1.9280194342,\"2020-06-05T22:00:00.000Z\":1.8687165683,\"2020-06-05T23:00:00.000Z\":1.9175760407,\"2020-06-06T00:00:00.000Z\":1.9144149245,\"2020-06-06T01:00:00.000Z\":1.9048689942,\"2020-06-06T02:00:00.000Z\":1.90828592,\"2020-06-06T03:00:00.000Z\":1.9297969376,\"2020-06-06T04:00:00.000Z\":1.9149704211,\"2020-06-06T05:00:00.000Z\":1.8929761375,\"2020-06-06T06:00:00.000Z\":1.8971279541,\"2020-06-06T07:00:00.000Z\":1.9263268993,\"2020-06-06T08:00:00.000Z\":1.8958174786,\"2020-06-06T09:00:00.000Z\":1.8761773916,\"2020-06-06T10:00:00.000Z\":1.8660876667,\"2020-06-06T11:00:00.000Z\":1.8916842966,\"2020-06-06T12:00:00.000Z\":1.9127603337,\"2020-06-06T13:00:00.000Z\":1.9011050005,\"2020-06-06T14:00:00.000Z\":1.8896462276,\"2020-06-06T15:00:00.000Z\":1.8711809414,\"2020-06-06T16:00:00.000Z\":1.8916412969,\"2020-06-06T17:00:00.000Z\":1.8800334125,\"2020-06-06T18:00:00.000Z\":1.8642478045,\"2020-06-06T19:00:00.000Z\":1.8957160305,\"2020-06-06T20:00:00.000Z\":1.9129895837,\"2020-06-06T21:00:00.000Z\":1.8864261351,\"2020-06-06T22:00:00.000Z\":1.874593256,\"2020-06-06T23:00:00.000Z\":1.8760368949,\"2020-06-07T00:00:00.000Z\":1.9109769621,\"2020-06-07T01:00:00.000Z\":1.8716809077,\"2020-06-07T02:00:00.000Z\":1.9041580864,\"2020-06-07T03:00:00.000Z\":1.8750807346,\"2020-06-07T04:00:00.000Z\":1.9202575144,\"2020-06-07T05:00:00.000Z\":1.8610116065,\"2020-06-07T06:00:00.000Z\":1.8945901134,\"2020-06-07T07:00:00.000Z\":1.8946142489,\"2020-06-07T08:00:00.000Z\":1.8614582248,\"2020-06-07T09:00:00.000Z\":1.863572688,\"2020-06-07T10:00:00.000Z\":1.9297434778,\"2020-06-07T11:00:00.000Z\":1.9187304684,\"2020-06-07T12:00:00.000Z\":1.9298306208,\"2020-06-07T13:00:00.000Z\":1.8608512867,\"2020-06-07T14:00:00.000Z\":1.9118411163,\"2020-06-07T15:00:00.000Z\":1.9066744163,\"2020-06-07T16:00:00.000Z\":1.9116551009,\"2020-06-07T17:00:00.000Z\":1.8828661629,\"2020-06-07T18:00:00.000Z\":1.8866379428,\"2020-06-07T19:00:00.000Z\":1.8788772036,\"2020-06-07T20:00:00.000Z\":1.9042945734,\"2020-06-07T21:00:00.000Z\":1.9056594968,\"2020-06-07T22:00:00.000Z\":1.8887214568,\"2020-06-07T23:00:00.000Z\":1.8835326276,\"2020-06-08T00:00:00.000Z\":1.9284506235,\"2020-06-08T01:00:00.000Z\":1.9143168494,\"2020-06-08T02:00:00.000Z\":1.9007075218,\"2020-06-08T03:00:00.000Z\":1.8777673036,\"2020-06-08T04:00:00.000Z\":1.8952513778,\"2020-06-08T05:00:00.000Z\":1.9264865217,\"2020-06-08T06:00:00.000Z\":1.8817259003,\"2020-06-08T07:00:00.000Z\":1.921584556,\"2020-06-08T08:00:00.000Z\":1.9018817759,\"2020-06-08T09:00:00.000Z\":1.859008478,\"2020-06-08T10:00:00.000Z\":1.8824316125,\"2020-06-08T11:00:00.000Z\":1.8904210058,\"2020-06-08T12:00:00.000Z\":1.8955465242,\"2020-06-08T13:00:00.000Z\":1.87751679,\"2020-06-08T14:00:00.000Z\":1.8580814686,\"2020-06-08T15:00:00.000Z\":1.8642935056,\"2020-06-08T16:00:00.000Z\":1.8605427948,\"2020-06-08T17:00:00.000Z\":1.8785871911,\"2020-06-08T18:00:00.000Z\":1.8686244945,\"2020-06-08T19:00:00.000Z\":1.8326614693,\"2020-06-08T20:00:00.000Z\":1.8783741861,\"2020-06-08T21:00:00.000Z\":1.8839774383,\"2020-06-08T22:00:00.000Z\":1.8581453184,\"2020-06-08T23:00:00.000Z\":1.8737832229,\"2020-06-09T00:00:00.000Z\":1.825608836,\"2020-06-09T01:00:00.000Z\":1.8419542375,\"2020-06-09T02:00:00.000Z\":1.8341249644,\"2020-06-09T03:00:00.000Z\":1.8737361118,\"2020-06-09T04:00:00.000Z\":1.8373356528,\"2020-06-09T05:00:00.000Z\":1.8610829866,\"2020-06-09T06:00:00.000Z\":1.8647217478,\"2020-06-09T07:00:00.000Z\":1.8542354706,\"2020-06-09T08:00:00.000Z\":1.8584044488,\"2020-06-09T09:00:00.000Z\":1.8574092583,\"2020-06-09T10:00:00.000Z\":1.8314458281,\"2020-06-09T11:00:00.000Z\":1.8291249077,\"2020-06-09T12:00:00.000Z\":1.794912816,\"2020-06-09T13:00:00.000Z\":1.806780492,\"2020-06-09T14:00:00.000Z\":1.8515750872,\"2020-06-09T15:00:00.000Z\":1.7881377768,\"2020-06-09T16:00:00.000Z\":1.782908594,\"2020-06-09T17:00:00.000Z\":1.7871490101,\"2020-06-09T18:00:00.000Z\":1.7824570591,\"2020-06-09T19:00:00.000Z\":1.8381627319,\"2020-06-09T20:00:00.000Z\":1.7788963713,\"2020-06-09T21:00:00.000Z\":1.8135459458,\"2020-06-09T22:00:00.000Z\":1.7706291347,\"2020-06-09T23:00:00.000Z\":1.7832814738,\"2020-06-10T00:00:00.000Z\":1.7915501526,\"2020-06-10T01:00:00.000Z\":1.797562649,\"2020-06-10T02:00:00.000Z\":1.810740465,\"2020-06-10T03:00:00.000Z\":1.8039826415,\"2020-06-10T04:00:00.000Z\":1.8061031814,\"2020-06-10T05:00:00.000Z\":1.7798470634,\"2020-06-10T06:00:00.000Z\":1.824419133,\"2020-06-10T07:00:00.000Z\":1.7714949585,\"2020-06-10T08:00:00.000Z\":1.8110842269,\"2020-06-10T09:00:00.000Z\":1.7653148984,\"2020-06-10T10:00:00.000Z\":1.7642104437,\"2020-06-10T11:00:00.000Z\":1.7882945391,\"2020-06-10T12:00:00.000Z\":1.7510199158,\"2020-06-10T13:00:00.000Z\":1.7602817891,\"2020-06-10T14:00:00.000Z\":1.7692896514,\"2020-06-10T15:00:00.000Z\":1.7816856687,\"2020-06-10T16:00:00.000Z\":1.7726023267,\"2020-06-10T17:00:00.000Z\":1.7529701599,\"2020-06-10T18:00:00.000Z\":1.7944730908,\"2020-06-10T19:00:00.000Z\":1.7959826561,\"2020-06-10T20:00:00.000Z\":1.7262595779,\"2020-06-10T21:00:00.000Z\":1.7599426932,\"2020-06-10T22:00:00.000Z\":1.7942664293,\"2020-06-10T23:00:00.000Z\":1.7568792181,\"2020-06-11T00:00:00.000Z\":1.7503584801,\"2020-06-11T01:00:00.000Z\":1.772818345,\"2020-06-11T02:00:00.000Z\":1.7599267103,\"2020-06-11T03:00:00.000Z\":1.7543246604,\"2020-06-11T04:00:00.000Z\":1.7716360143,\"2020-06-11T05:00:00.000Z\":1.7497533172,\"2020-06-11T06:00:00.000Z\":1.7296714486,\"2020-06-11T07:00:00.000Z\":1.7868207192,\"2020-06-11T08:00:00.000Z\":1.7441884421,\"2020-06-11T09:00:00.000Z\":1.7268847381,\"2020-06-11T10:00:00.000Z\":1.7372780067,\"2020-06-11T11:00:00.000Z\":1.7531690232,\"2020-06-11T12:00:00.000Z\":1.7563962807,\"2020-06-11T13:00:00.000Z\":1.7337006137,\"2020-06-11T14:00:00.000Z\":1.7567559875,\"2020-06-11T15:00:00.000Z\":1.7314396428}"
          }
        },
        {
          "workflow_input_name": "limit",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "1.3"
          }
        },
        {
          "workflow_input_name": "num_days_forecast",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "30"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "0580751a-70ed-4f73-99c8-41541eb86af3",
    "revision_group_id": "ecbcb3f0-4873-4233-a1d0-9d0316036156",
    "name": "Moving Time Window Mean Example",
    "description": "Calculates shifted time window averages for a contant frequency",
    "category": "Examples",
    "version_tag": "1.0.0",
    "state": "DRAFT",
    "type": "WORKFLOW",
    "documentation": "# Moving Time Window Mean Example\n## Description\nThis workflow calculates the mean of observations in time windows of fixed size moving over the data with a fixed frequency and plots the aggregated timeseries together with the original timeseries.\n\n## Inputs\n* **timeseries** (Pandas Series): Series to perform the moving mean calculation on.\n* **window_size** (String): Time span of each window. Can be either a pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string.\n* **window_frequency** (String): Time span between window starts. Can be either a pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string. For directly consecutive, non-overlapping windows set **window_frequency** to the same value as **window_size**.\n* **frequency_offset** (String): Offset of the window starts compared to 1970-01-01 00:00:00. Can be either a pandas frequency string based on [date offset aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases) or a timedelta string. In most cases no offset is necessary, so this can be set to zero, i.e. \"0\". \n* **interval_type** (String): The string must be one of \"left_closed\", \"right_open\", \"right_closed\", \"left_open\", \"closed\", or \"open\". In case a datapoint is on the left or right border of a window this option determines if it belongs to that window or not, but potentially a neighbouring window.\n* **label_position** (String): The string must be either \"left\", \"center\", or \"right\". This option determines which timestamp is provided to represent the window for the corresponding mean in the output time series.\n* **plotting_mode** (String): The string must be either \"lines\" or \"dots_and_windows\"\n\n## Outputs\n* **plot** (Plotly JSON): The generated Plotly JSON. This is used by the hetida designer frontend for plotting the results.\n* **window_means** (Pandas Series): Series with the calculated means of each window.\n\n## Details\nThe datapoints of the **timeseries** are associated with time windows whose lengths are specified by **window_size**, and which are repeated with the frequency specified by **window_frequency** and the offset specified by **frequency_offset**.\nTo obtain for example windows with a **window_frequency** of \"5min\" that do not start at :00, :05, :10, :15 and so on, but instead at :04, :09, :14, :19 and so on, just set the **frequency_offset** to \"4min\" as in the example below.\n\nThe parameter **interval_type** is used to determine if a datapoint just on the edge of a window belongs to that window. The values \"left_closed\" and \"right_open\" mean that a point on the left edge of a window belongs to this window, whereas a point on its right edge does not belong to it. The values \"right_closed\" and \"left_open\" mean the same but vice versa, wheras \"closed\" means that both belong to the window, and \"open\" means that none of these points belong to the window.\n\nThe mean of all datapoints associated to the same time period is calculated. The value of **label_position** determines at which position of the window the label for the mean value of the window should be placed.\n\nThe time series does not need to have a regular frequency, and the window size can even be smaller than the smallest distance between successive observations, which then results in empty windows. For empty windows, the result value is NaN.\nIf NaN values are present in the original time series, they are eliminated before calculating the mean.\n\nTo reduce the execution time, if possible (**window_frequency** and **window_size** are identical, the **label_position** is \"left\" or \"right\") the pandas function resample is used instead of the pandas function rolling.\n\nIf the **plotting_mode** is set to 'lines' the window mean values as well as the datapoints are displayed as lines or if it is set to 'dots_and_windows' they are displayed by individual markers together with the windows for which the mean values have been calculated. In that case:\n* The **window_size** is indicated by plotting lines of the corresponding horizontal length at the position of each aggregation value.\n* The **interval_type** specifies which sides of the windows are closed, which is indicated by horizontal triangles at the edges of this line, pointing inward.\n* A dot indicates the position of the timestamp along the line corresponding to the aggregation value corresponding to **label_position**. Technically, the line is placed relative to the dot according to this information, which can be important when looking for reasons for unexpected results.\n* A dot indicates the position of the timestamp along the line corresponding to the aggregation value of **label_position**. Technically, the line is placed relative to the point according to this information, which can be important when looking for reasons for unexpected results.\n\nIf NaN values are present in the **window_means**, these will be dropped before plotting.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n    \"data_timeseries\": {\n        \"2022-12-06 23:17:14+00:00\": 14.360248,\n        \"2022-12-06 23:22:14+00:00\": 14.473486,\n        \"2022-12-06 23:27:14+00:00\": 14.744616,\n        \"2022-12-06 23:32:14+00:00\": 15.729985,\n        \"2022-12-06 23:37:14+00:00\": 14.945974,\n        \"2022-12-06 23:42:14+00:00\": 15.311936,\n        \"2022-12-06 23:47:14+00:00\": 13.721003,\n        \"2022-12-06 23:52:14+00:00\": 14.616136,\n        \"2022-12-06 23:57:14+00:00\": 13.544031,\n        \"2022-12-07 00:02:14+00:00\": 14.823713,\n        \"2022-12-07 00:07:14+00:00\": 15.258110,\n        \"2022-12-07 00:12:14+00:00\": 14.669657,\n        \"2022-12-07 00:17:14+00:00\": 13.963869,\n        \"2022-12-07 00:22:14+00:00\": 14.962489,\n        \"2022-12-07 00:27:14+00:00\": 13.811295,\n        \"2022-12-07 00:32:14+00:00\": 14.672031,\n        \"2022-12-07 00:37:14+00:00\": 15.038961,\n        \"2022-12-07 00:42:14+00:00\": 15.581626,\n        \"2022-12-07 00:47:14+00:00\": 15.183799,\n        \"2022-12-07 00:52:14+00:00\": 14.859828,\n        \"2022-12-07 00:57:14+00:00\": 14.865390,\n        \"2022-12-07 01:02:14+00:00\": 14.221285,\n        \"2022-12-07 01:07:14+00:00\": 14.225866,\n        \"2022-12-07 01:12:14+00:00\": 15.461512,\n        \"2022-12-07 01:17:14+00:00\": 12.252256,\n        \"2022-12-07 01:22:14+00:00\": 13.686977,\n        \"2022-12-07 01:27:14+00:00\": 13.787693,\n        \"2022-12-07 01:32:14+00:00\": 14.528163,\n        \"2022-12-07 01:37:14+00:00\": 14.218455,\n        \"2022-12-07 01:42:14+00:00\": 13.477046,\n        \"2022-12-07 01:47:14+00:00\": 13.925391,\n        \"2022-12-07 01:52:14+00:00\": 14.947494,\n        \"2022-12-07 01:57:14+00:00\": 14.591019,\n        \"2022-12-07 02:02:14+00:00\": 15.930415,\n        \"2022-12-07 02:07:14+00:00\": 15.072922,\n        \"2022-12-07 02:12:14+00:00\": 14.875850,\n        \"2022-12-07 02:17:14+00:00\": 15.044753,\n        \"2022-12-07 02:22:14+00:00\": 15.525060,\n        \"2022-12-07 02:27:14+00:00\": 13.597114,\n        \"2022-12-07 02:32:14+00:00\": 14.499883,\n        \"2022-12-07 02:37:14+00:00\": 14.095923,\n        \"2022-12-07 02:42:14+00:00\": 15.211422,\n        \"2022-12-07 02:47:14+00:00\": 14.847283,\n        \"2022-12-07 02:52:14+00:00\": 15.036699,\n        \"2022-12-07 02:57:14+00:00\": 14.336612,\n        \"2022-12-07 03:02:14+00:00\": 14.517888,\n        \"2022-12-07 03:07:14+00:00\": 13.787849,\n        \"2022-12-07 03:12:14+00:00\": 13.190419,\n        \"2022-12-07 03:17:14+00:00\": 15.435615,\n        \"2022-12-07 03:22:14+00:00\": 13.426738\n    },\n    \"window_size\": \"15min\",\n    \"window_frequency\": \"5min\",\n    \"frequency_offset\": \"4min\",\n    \"interval type\": \"left closed\",\n    \"label_positions\": \"left\"\n    \"plotting_mode\": \"dots_and_windows\"\n}\n```",
    "content": {
      "operators": [
        {
          "id": "8bac6582-0568-4391-ac88-4e60e26ca7c4",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "timeseries",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -235,
            "y": 272
          }
        },
        {
          "id": "77bdd760-f1b8-4630-82f1-451d30ca69da",
          "revision_group_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "name": "window_size",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "inputs": [
            {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -230,
            "y": 432
          }
        },
        {
          "id": "124c32b3-c184-411b-879a-418726cf68d1",
          "revision_group_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "name": "interval_type",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "inputs": [
            {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -225,
            "y": 572
          }
        },
        {
          "id": "06f34744-258d-4615-8516-0152ee01814b",
          "revision_group_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "name": "label_position",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "2b1b474f-ddf5-1f4d-fec4-17ef9122112b",
          "inputs": [
            {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -230,
            "y": 722
          }
        },
        {
          "id": "e2a9236d-e420-426b-9f1e-59af4fcde251",
          "revision_group_id": "0b98c587-601f-4a03-9f17-02f857d3a741",
          "name": "Moving Time Window Mean",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "e4682ac2-9a53-4fac-a4ea-e766666ee27e",
          "inputs": [
            {
              "id": "5bfe6402-81cc-49ef-beb2-456bbfbbd6cb",
              "name": "timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "1c0ddc42-cd17-4378-9f07-9930c1a1f7f2",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "8aa8f60e-0bd5-41d4-b511-372b3660c189",
              "name": "window_frequency",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "a29e7af3-4be2-4cbb-9f78-1b7520ed5142",
              "name": "frequency_offset",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "abb7a7e9-fda2-4e74-9e0c-14574410008a",
              "name": "interval_type",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "2e68e763-81db-4127-84cb-80e0c7e3f080",
              "name": "label_position",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "c81dedf8-99e5-431f-ab4e-b6db9eaf7772",
              "name": "window_means",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 635,
            "y": 200
          }
        },
        {
          "id": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
          "revision_group_id": "f8c5e505-bb87-4814-bf77-6ce1698851ff",
          "name": "Moving Window Aggregated Timeseries Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "eb46db4e-aab5-4f93-8330-9423f0a2a34a",
          "inputs": [
            {
              "id": "0f92fa34-ee3d-4e3c-927d-4f82a9bb7afd",
              "name": "original_timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "6c8f83ee-3c55-45be-b893-72c0301ee355",
              "name": "aggregated_timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "93d14beb-1ec6-4c16-9954-797cc91ec152",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "a306bb25-1271-4d8c-b3d5-9f4db23807d9",
              "name": "interval_type",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "629d3bfb-3e54-49d6-ba48-7959a5482139",
              "name": "label_position",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "6276625e-33a2-4e01-8b55-0c452e5c46ac",
              "name": "plotting_mode",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "5c3b2c95-872a-4d08-91ff-a847532af488",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1420,
            "y": 600
          }
        },
        {
          "id": "4fd3f87b-819f-4a0c-8694-ea71a6d4480b",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "window_means",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1420,
            "y": 202
          }
        }
      ],
      "links": [
        {
          "id": "0099bffd-f699-474e-8333-10b1056127ef",
          "start": {
            "operator": "06f34744-258d-4615-8516-0152ee01814b",
            "connector": {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "2e68e763-81db-4127-84cb-80e0c7e3f080",
              "name": "label_position",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "93982faa-40fc-41c1-9008-0f6fb6cbac18",
          "start": {
            "operator": "8bac6582-0568-4391-ac88-4e60e26ca7c4",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "5bfe6402-81cc-49ef-beb2-456bbfbbd6cb",
              "name": "timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 135,
              "y": 342
            },
            {
              "x": 375,
              "y": 272
            },
            {
              "x": 625,
              "y": 270
            }
          ]
        },
        {
          "id": "ff8e3157-d871-40d5-a290-cf0a6192a63c",
          "start": {
            "operator": "124c32b3-c184-411b-879a-418726cf68d1",
            "connector": {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "abb7a7e9-fda2-4e74-9e0c-14574410008a",
              "name": "interval_type",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "26433460-2dc6-486a-9df9-743c610c6a20",
          "start": {
            "operator": "77bdd760-f1b8-4630-82f1-451d30ca69da",
            "connector": {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "1c0ddc42-cd17-4378-9f07-9930c1a1f7f2",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": [
            {
              "x": 140,
              "y": 502
            },
            {
              "x": 370,
              "y": 302
            },
            {
              "x": 625,
              "y": 300
            }
          ]
        },
        {
          "id": "a64a979e-f6b5-44ce-8bd9-5376736b38fd",
          "start": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "c81dedf8-99e5-431f-ab4e-b6db9eaf7772",
              "name": "window_means",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
            "connector": {
              "id": "6c8f83ee-3c55-45be-b893-72c0301ee355",
              "name": "aggregated_timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "7c4be7e7-0d34-4c5a-8699-15496b22f06e",
          "start": {
            "operator": "77bdd760-f1b8-4630-82f1-451d30ca69da",
            "connector": {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
            "connector": {
              "id": "93d14beb-1ec6-4c16-9954-797cc91ec152",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "c40cd133-e464-404b-b66e-c94c5f8d33ce",
          "start": {
            "operator": "8bac6582-0568-4391-ac88-4e60e26ca7c4",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
            "connector": {
              "id": "0f92fa34-ee3d-4e3c-927d-4f82a9bb7afd",
              "name": "original_timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "94190951-f237-4f53-93d5-6eb95ec6b753",
          "start": {
            "operator": "124c32b3-c184-411b-879a-418726cf68d1",
            "connector": {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
            "connector": {
              "id": "a306bb25-1271-4d8c-b3d5-9f4db23807d9",
              "name": "interval_type",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "82b2d3f9-e435-4fe6-b454-bf2139c92150",
          "start": {
            "operator": "06f34744-258d-4615-8516-0152ee01814b",
            "connector": {
              "id": "71ddbbe3-1f57-1e37-5381-7af6af871e49",
              "name": "output",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
            "connector": {
              "id": "629d3bfb-3e54-49d6-ba48-7959a5482139",
              "name": "label_position",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "1e0fc7bd-7c41-49a3-90c7-5f346650a1f4",
          "start": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "c81dedf8-99e5-431f-ab4e-b6db9eaf7772",
              "name": "window_means",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "4fd3f87b-819f-4a0c-8694-ea71a6d4480b",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "f8324c1e-15e5-42a7-bf3e-1f14478b5f7d",
          "start": {
            "connector": {
              "id": "c4be35c1-25a7-42bb-88ba-3953f5fb38ac",
              "name": "timeseries",
              "data_type": "SERIES",
              "position": {
                "x": -485,
                "y": 332
              }
            }
          },
          "end": {
            "operator": "8bac6582-0568-4391-ac88-4e60e26ca7c4",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "14ffe733-feee-49f4-8d41-5c552406ef88",
          "start": {
            "connector": {
              "id": "f212a92f-802b-4a4b-ba45-ac64fe8c0c0e",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": -480,
                "y": 492
              }
            }
          },
          "end": {
            "operator": "77bdd760-f1b8-4630-82f1-451d30ca69da",
            "connector": {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "b344e1f5-2dc8-4cab-8c8d-bb57daedda68",
          "start": {
            "connector": {
              "id": "c8843c5e-e871-4459-921a-d77dbf3d7bfd",
              "name": "interval_type",
              "data_type": "STRING",
              "position": {
                "x": -475,
                "y": 632
              }
            }
          },
          "end": {
            "operator": "124c32b3-c184-411b-879a-418726cf68d1",
            "connector": {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e948f2c3-1bb0-454c-bf20-7c219bea9133",
          "start": {
            "connector": {
              "id": "3c17faff-a996-495f-964b-32dbdfe3bcad",
              "name": "label_position",
              "data_type": "STRING",
              "position": {
                "x": -480,
                "y": 782
              }
            }
          },
          "end": {
            "operator": "06f34744-258d-4615-8516-0152ee01814b",
            "connector": {
              "id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
              "name": "input",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e7e36d24-4360-44e5-bce8-e07596f6b803",
          "start": {
            "connector": {
              "id": "0f685fe9-541a-477d-99f5-4afe50287b30",
              "name": "window_frequency",
              "data_type": "STRING",
              "position": {
                "x": 385,
                "y": 320
              }
            }
          },
          "end": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "8aa8f60e-0bd5-41d4-b511-372b3660c189",
              "name": "window_frequency",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "9a3e3fc1-a0ca-4454-b7f5-879de2be808b",
          "start": {
            "connector": {
              "id": "c71f2f87-8982-4f9e-bd5b-841dcbfcb755",
              "name": "frequency_offset",
              "data_type": "STRING",
              "position": {
                "x": 385,
                "y": 350
              }
            }
          },
          "end": {
            "operator": "e2a9236d-e420-426b-9f1e-59af4fcde251",
            "connector": {
              "id": "a29e7af3-4be2-4cbb-9f78-1b7520ed5142",
              "name": "frequency_offset",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "1e7b6ffb-799a-4f4e-b4c2-d96fbcd25c42",
          "start": {
            "connector": {
              "id": "5d8b2526-b1f2-4294-9293-1f72d737cae5",
              "name": "plotting_mode",
              "data_type": "STRING",
              "position": {
                "x": 1170,
                "y": 810
              }
            }
          },
          "end": {
            "operator": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
            "connector": {
              "id": "6276625e-33a2-4e01-8b55-0c452e5c46ac",
              "name": "plotting_mode",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "837100d1-91e3-48ee-b1da-a2891d441219",
          "start": {
            "operator": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
            "connector": {
              "id": "5c3b2c95-872a-4d08-91ff-a847532af488",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "6c856da8-a189-4766-9ca6-c4d4269678e3",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1870,
                "y": 660
              }
            }
          },
          "path": []
        },
        {
          "id": "a2148c1e-863c-491b-b607-7d0040850a05",
          "start": {
            "operator": "4fd3f87b-819f-4a0c-8694-ea71a6d4480b",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "9f13ad4b-2e8e-4e95-a9d5-2a1676375fbc",
              "name": "window_means",
              "data_type": "SERIES",
              "position": {
                "x": 1870,
                "y": 262
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "c4be35c1-25a7-42bb-88ba-3953f5fb38ac",
          "name": "timeseries",
          "data_type": "SERIES",
          "operator_id": "8bac6582-0568-4391-ac88-4e60e26ca7c4",
          "connector_id": "f103c395-92b6-444d-320a-93950ed6d857",
          "operator_name": "timeseries",
          "connector_name": "input",
          "position": {
            "x": -485,
            "y": 332
          }
        },
        {
          "id": "f212a92f-802b-4a4b-ba45-ac64fe8c0c0e",
          "name": "window_size",
          "data_type": "STRING",
          "operator_id": "77bdd760-f1b8-4630-82f1-451d30ca69da",
          "connector_id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
          "operator_name": "window_size",
          "connector_name": "input",
          "position": {
            "x": -480,
            "y": 492
          }
        },
        {
          "id": "c8843c5e-e871-4459-921a-d77dbf3d7bfd",
          "name": "interval_type",
          "data_type": "STRING",
          "operator_id": "124c32b3-c184-411b-879a-418726cf68d1",
          "connector_id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
          "operator_name": "interval_type",
          "connector_name": "input",
          "position": {
            "x": -475,
            "y": 632
          }
        },
        {
          "id": "3c17faff-a996-495f-964b-32dbdfe3bcad",
          "name": "label_position",
          "data_type": "STRING",
          "operator_id": "06f34744-258d-4615-8516-0152ee01814b",
          "connector_id": "a8c3e9bb-91cc-12f4-c717-55f95adda207",
          "operator_name": "label_position",
          "connector_name": "input",
          "position": {
            "x": -480,
            "y": 782
          }
        },
        {
          "id": "0f685fe9-541a-477d-99f5-4afe50287b30",
          "name": "window_frequency",
          "data_type": "STRING",
          "operator_id": "e2a9236d-e420-426b-9f1e-59af4fcde251",
          "connector_id": "8aa8f60e-0bd5-41d4-b511-372b3660c189",
          "operator_name": "Moving Time Window Mean",
          "connector_name": "window_frequency",
          "position": {
            "x": 385,
            "y": 320
          }
        },
        {
          "id": "c71f2f87-8982-4f9e-bd5b-841dcbfcb755",
          "name": "frequency_offset",
          "data_type": "STRING",
          "operator_id": "e2a9236d-e420-426b-9f1e-59af4fcde251",
          "connector_id": "a29e7af3-4be2-4cbb-9f78-1b7520ed5142",
          "operator_name": "Moving Time Window Mean",
          "connector_name": "frequency_offset",
          "position": {
            "x": 385,
            "y": 350
          }
        },
        {
          "id": "5d8b2526-b1f2-4294-9293-1f72d737cae5",
          "name": "plotting_mode",
          "data_type": "STRING",
          "operator_id": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
          "connector_id": "6276625e-33a2-4e01-8b55-0c452e5c46ac",
          "operator_name": "Moving Window Aggregated Timeseries Plot",
          "connector_name": "plotting_mode",
          "position": {
            "x": 1170,
            "y": 810
          }
        }
      ],
      "outputs": [
        {
          "id": "6c856da8-a189-4766-9ca6-c4d4269678e3",
          "name": "plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "b94d9834-bcac-4f02-bdfa-e3d21cc877a5",
          "connector_id": "5c3b2c95-872a-4d08-91ff-a847532af488",
          "operator_name": "Moving Window Aggregated Timeseries Plot",
          "connector_name": "plot",
          "position": {
            "x": 1870,
            "y": 660
          }
        },
        {
          "id": "9f13ad4b-2e8e-4e95-a9d5-2a1676375fbc",
          "name": "window_means",
          "data_type": "SERIES",
          "operator_id": "4fd3f87b-819f-4a0c-8694-ea71a6d4480b",
          "connector_id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
          "operator_name": "window_means",
          "connector_name": "output",
          "position": {
            "x": 1870,
            "y": 262
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "c4be35c1-25a7-42bb-88ba-3953f5fb38ac",
          "name": "timeseries",
          "data_type": "SERIES"
        },
        {
          "id": "f212a92f-802b-4a4b-ba45-ac64fe8c0c0e",
          "name": "window_size",
          "data_type": "STRING"
        },
        {
          "id": "c8843c5e-e871-4459-921a-d77dbf3d7bfd",
          "name": "interval_type",
          "data_type": "STRING"
        },
        {
          "id": "3c17faff-a996-495f-964b-32dbdfe3bcad",
          "name": "label_position",
          "data_type": "STRING"
        },
        {
          "id": "0f685fe9-541a-477d-99f5-4afe50287b30",
          "name": "window_frequency",
          "data_type": "STRING"
        },
        {
          "id": "c71f2f87-8982-4f9e-bd5b-841dcbfcb755",
          "name": "frequency_offset",
          "data_type": "STRING"
        },
        {
          "id": "5d8b2526-b1f2-4294-9293-1f72d737cae5",
          "name": "plotting_mode",
          "data_type": "STRING"
        }
      ],
      "outputs": [
        {
          "id": "6c856da8-a189-4766-9ca6-c4d4269678e3",
          "name": "plot",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "9f13ad4b-2e8e-4e95-a9d5-2a1676375fbc",
          "name": "window_means",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "timeseries",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2022-12-06 23:17:14+00:00\": 14.360248,\n    \"2022-12-06 23:22:14+00:00\": 14.473486,\n    \"2022-12-06 23:27:14+00:00\": 14.744616,\n    \"2022-12-06 23:32:14+00:00\": 15.729985,\n    \"2022-12-06 23:37:14+00:00\": 14.945974,\n    \"2022-12-06 23:42:14+00:00\": 15.311936,\n    \"2022-12-06 23:47:14+00:00\": 13.721003,\n    \"2022-12-06 23:52:14+00:00\": 14.616136,\n    \"2022-12-06 23:57:14+00:00\": 13.544031,\n    \"2022-12-07 00:02:14+00:00\": 14.823713,\n    \"2022-12-07 00:07:14+00:00\": 15.258110,\n    \"2022-12-07 00:12:14+00:00\": 14.669657,\n    \"2022-12-07 00:17:14+00:00\": 13.963869,\n    \"2022-12-07 00:22:14+00:00\": 14.962489,\n    \"2022-12-07 00:27:14+00:00\": 13.811295,\n    \"2022-12-07 00:32:14+00:00\": 14.672031,\n    \"2022-12-07 00:37:14+00:00\": 15.038961,\n    \"2022-12-07 00:42:14+00:00\": 15.581626,\n    \"2022-12-07 00:47:14+00:00\": 15.183799,\n    \"2022-12-07 00:52:14+00:00\": 14.859828,\n    \"2022-12-07 00:57:14+00:00\": 14.865390,\n    \"2022-12-07 01:02:14+00:00\": 14.221285,\n    \"2022-12-07 01:07:14+00:00\": 14.225866,\n    \"2022-12-07 01:12:14+00:00\": 15.461512,\n    \"2022-12-07 01:17:14+00:00\": 12.252256,\n    \"2022-12-07 01:22:14+00:00\": 13.686977,\n    \"2022-12-07 01:27:14+00:00\": 13.787693,\n    \"2022-12-07 01:32:14+00:00\": 14.528163,\n    \"2022-12-07 01:37:14+00:00\": 14.218455,\n    \"2022-12-07 01:42:14+00:00\": 13.477046,\n    \"2022-12-07 01:47:14+00:00\": 13.925391,\n    \"2022-12-07 01:52:14+00:00\": 14.947494,\n    \"2022-12-07 01:57:14+00:00\": 14.591019,\n    \"2022-12-07 02:02:14+00:00\": 15.930415,\n    \"2022-12-07 02:07:14+00:00\": 15.072922,\n    \"2022-12-07 02:12:14+00:00\": 14.875850,\n    \"2022-12-07 02:17:14+00:00\": 15.044753,\n    \"2022-12-07 02:22:14+00:00\": 15.525060,\n    \"2022-12-07 02:27:14+00:00\": 13.597114,\n    \"2022-12-07 02:32:14+00:00\": 14.499883,\n    \"2022-12-07 02:37:14+00:00\": 14.095923,\n    \"2022-12-07 02:42:14+00:00\": 15.211422,\n    \"2022-12-07 02:47:14+00:00\": 14.847283,\n    \"2022-12-07 02:52:14+00:00\": 15.036699,\n    \"2022-12-07 02:57:14+00:00\": 14.336612,\n    \"2022-12-07 03:02:14+00:00\": 14.517888,\n    \"2022-12-07 03:07:14+00:00\": 13.787849,\n    \"2022-12-07 03:12:14+00:00\": 13.190419,\n    \"2022-12-07 03:17:14+00:00\": 15.435615,\n    \"2022-12-07 03:22:14+00:00\": 13.426738\n}"
          }
        },
        {
          "workflow_input_name": "window_size",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "15min"
          }
        },
        {
          "workflow_input_name": "interval_type",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "left_closed"
          }
        },
        {
          "workflow_input_name": "label_position",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "center"
          }
        },
        {
          "workflow_input_name": "window_frequency",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "5min"
          }
        },
        {
          "workflow_input_name": "frequency_offset",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "0"
          }
        },
        {
          "workflow_input_name": "plotting_mode",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "dots_and_windows"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "7ccb7acb-4779-4931-b436-2d4d5172607b",
    "revision_group_id": "891c953a-120c-4e1c-abe4-2dda8c862101",
    "name": "Visualization Demo",
    "description": "A demo workflow showing visualization components",
    "category": "Examples",
    "version_tag": "1.0.0",
    "state": "DRAFT",
    "type": "WORKFLOW",
    "documentation": "## Vizualization Demo Example Workflow\n\nThis example workflow demonstrates some visualization capabilities.",
    "content": {
      "operators": [
        {
          "id": "7cfaff69-b68b-4d72-b553-104d826b0b13",
          "revision_group_id": "56c937d5-37df-c70f-2113-808ef4a6d9ba",
          "name": "Timeseries Interval Boxplots",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "56c937d5-37df-c70f-2113-808ef4a6d9ba",
          "inputs": [
            {
              "id": "4128780c-c4e1-1540-8864-06e810fb223d",
              "name": "interval",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "884ef67a-37ae-d67c-6d51-6d3b59556bec",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "1658275f-5ff6-1e12-c44c-3dac33a6a56d",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 1120
          }
        },
        {
          "id": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
          "revision_group_id": "dc909fa2-93fa-3205-e31d-b05f944cbd29",
          "name": "Simple Scatter Map Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "dc909fa2-93fa-3205-e31d-b05f944cbd29",
          "inputs": [
            {
              "id": "b7519a7a-83ae-d0a4-e79c-60b3c0f00c2e",
              "name": "cat_color_col",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "0d0227d4-60cd-98de-d7bd-8de9462ff452",
              "name": "color_map",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "159f2c5a-40fc-65a2-d84c-2e7d2ae16e0a",
              "name": "data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "7c1a20a3-f8ae-be72-f6c3-73e874904c74",
              "name": "map_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 399,
            "y": 1260
          }
        },
        {
          "id": "2602969e-04f3-446c-973f-f84c2b358204",
          "revision_group_id": "a408a19b-70fd-5a16-958c-193d678c2c2b",
          "name": "2D Scatter Plot colored by Index",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "a408a19b-70fd-5a16-958c-193d678c2c2b",
          "inputs": [
            {
              "id": "2e61e06b-a7dc-6ea6-efb7-dc7bf68890b8",
              "name": "x",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "050d0420-21c8-8560-7f97-40f2f93cb9d3",
              "name": "y",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "66990a60-30fa-7a61-65f6-0c6a27636b83",
              "name": "scatter_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 1430
          }
        },
        {
          "id": "b8f38976-0d14-417f-a707-8e9c55040565",
          "revision_group_id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
          "name": "Single Timeseries Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
          "inputs": [
            {
              "id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 110
          }
        },
        {
          "id": "e2e8b968-c82d-455e-8ae7-1f0584853a43",
          "revision_group_id": "16d6e587-25ea-d0df-f514-da9fef66ad80",
          "name": "Timeseries DataFrame Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "16d6e587-25ea-d0df-f514-da9fef66ad80",
          "inputs": [
            {
              "id": "ff22a376-752f-9a5f-899e-601d6e341c72",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "c0d410fa-e324-7d06-186a-8096b4aa4468",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 220
          }
        },
        {
          "id": "ebfd511b-7165-48a4-b50a-24f7944aa671",
          "revision_group_id": "9f55f116-f22a-c94b-42b4-1f7c184da3bf",
          "name": "Vertical Bar Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "9f55f116-f22a-c94b-42b4-1f7c184da3bf",
          "inputs": [
            {
              "id": "2e11c6e7-2a2f-eca5-0507-954ecb6f3329",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "9ab59d8b-9927-3664-dc40-ab9924e91e88",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 330
          }
        },
        {
          "id": "9abcae45-e58d-45a8-9239-95a180715225",
          "revision_group_id": "3b2fe728-5f36-64be-3963-df83918ff8a9",
          "name": "Pie Chart Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "3b2fe728-5f36-64be-3963-df83918ff8a9",
          "inputs": [
            {
              "id": "bc8b441a-9d32-f9ab-eb7e-5a19688039d2",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "03280c10-5cf8-0e47-9e23-3b06b7388168",
              "name": "group_column",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "f586c1eb-6943-45cc-b828-fc1c30515b9a",
              "name": "value_column",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "2ba3fb5f-4be0-f48a-3124-894113466b62",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 440
          }
        },
        {
          "id": "4f6db4f7-0db0-4138-ad8b-fd5c23ec89be",
          "revision_group_id": "8debf23e-54e3-5fa1-bb57-6d41058c66b7",
          "name": "Correlation Matrix Heatmap Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "8debf23e-54e3-5fa1-bb57-6d41058c66b7",
          "inputs": [
            {
              "id": "38fdfd24-a76e-6296-606e-73495727eaa0",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "dd24f709-50f3-f9d5-94f6-ac9b0d403275",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 610
          }
        },
        {
          "id": "cccbeeed-c40a-4adf-bb15-42a2fc680e19",
          "revision_group_id": "a432923f-4718-44ae-3c9c-9832e68724bb",
          "name": "Compare Two Timeseries Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "a432923f-4718-44ae-3c9c-9832e68724bb",
          "inputs": [
            {
              "id": "d416b294-0dc1-06b8-01ad-afd4d9794ae4",
              "name": "series_1",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "8478c25c-9370-e6d9-7a1f-4d611782570c",
              "name": "series_2",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "0951b836-933c-044d-030b-6c2ee3b5d00a",
              "name": "comparison_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 720
          }
        },
        {
          "id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "revision_group_id": "daed7280-7013-3be1-41c0-65e4628e0e1d",
          "name": "Compare Timeshifted Timeseries",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "daed7280-7013-3be1-41c0-65e4628e0e1d",
          "inputs": [
            {
              "id": "8fc11cb1-16ad-5053-a187-cb4fb5af31ce",
              "name": "freq",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "00041bd7-41a1-4c4e-e129-b491ec028e8a",
              "name": "freq_factor",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "c8a2d3fd-6b49-c1b0-4d46-fbe5c4d156d4",
              "name": "max_shifts_future",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "9733a691-3271-74d1-fdb0-7b613e599420",
              "name": "max_shifts_past",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "105c728f-7e02-f7ce-60e5-aba4e0625094",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "9433aef9-4751-5114-345e-79dfcc427268",
              "name": "series_shiftable",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "c3d55f42-2827-2899-9bb0-c1537171a8cc",
              "name": "comparison_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 400,
            "y": 860
          }
        }
      ],
      "links": [
        {
          "id": "5cbc48ab-e2a8-40d4-9fd5-26ab3e2d0576",
          "start": {
            "connector": {
              "id": "197a9dad-be64-4125-8ab2-7b71a1ab4327",
              "name": "comp_timeshift_freq_factor",
              "data_type": "INT",
              "position": {
                "x": 150,
                "y": 950
              }
            }
          },
          "end": {
            "operator": "024a61e0-036b-40f7-98f0-88b96b6db022",
            "connector": {
              "id": "00041bd7-41a1-4c4e-e129-b491ec028e8a",
              "name": "freq_factor",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "bb68de62-e20a-4268-9bed-cadef8e3518b",
          "start": {
            "connector": {
              "id": "03034bb6-c22f-407b-9301-f147b8440ead",
              "name": "time_boxes_interval",
              "data_type": "STRING",
              "position": {
                "x": 150,
                "y": 1180
              }
            }
          },
          "end": {
            "operator": "7cfaff69-b68b-4d72-b553-104d826b0b13",
            "connector": {
              "id": "4128780c-c4e1-1540-8864-06e810fb223d",
              "name": "interval",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "98f1716c-c89f-4905-a762-441506199118",
          "start": {
            "connector": {
              "id": "bbe008bb-6cd8-4f6d-93eb-929be2ffafe7",
              "name": "time_boxes_ts",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 1210
              }
            }
          },
          "end": {
            "operator": "7cfaff69-b68b-4d72-b553-104d826b0b13",
            "connector": {
              "id": "884ef67a-37ae-d67c-6d51-6d3b59556bec",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "944af055-aa9a-4d1e-9885-ed057d10d179",
          "start": {
            "connector": {
              "id": "b7cdf904-a0a7-4df2-ae63-c15ee482cc80",
              "name": "map_cat_color_col",
              "data_type": "STRING",
              "position": {
                "x": 149,
                "y": 1320
              }
            }
          },
          "end": {
            "operator": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
            "connector": {
              "id": "b7519a7a-83ae-d0a4-e79c-60b3c0f00c2e",
              "name": "cat_color_col",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "05036208-488b-4878-b03d-4b46b889f773",
          "start": {
            "connector": {
              "id": "1824155b-0b6b-44f1-9951-0dc5d559fc1f",
              "name": "map_color_map",
              "data_type": "ANY",
              "position": {
                "x": 149,
                "y": 1350
              }
            }
          },
          "end": {
            "operator": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
            "connector": {
              "id": "0d0227d4-60cd-98de-d7bd-8de9462ff452",
              "name": "color_map",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "caa68ed6-83d2-4bef-9077-cb63a638e97d",
          "start": {
            "connector": {
              "id": "d2c944c6-56b0-4934-80e9-d4976efadaa6",
              "name": "map_data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 149,
                "y": 1380
              }
            }
          },
          "end": {
            "operator": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
            "connector": {
              "id": "159f2c5a-40fc-65a2-d84c-2e7d2ae16e0a",
              "name": "data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "f26e6576-e983-488b-b8ff-33c020f5d11d",
          "start": {
            "connector": {
              "id": "a1830fc5-af3c-45f6-8a91-07c0269e450e",
              "name": "single_ts",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 170
              }
            }
          },
          "end": {
            "operator": "b8f38976-0d14-417f-a707-8e9c55040565",
            "connector": {
              "id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "b97be824-766f-4e03-a228-4d904dcc3e03",
          "start": {
            "connector": {
              "id": "4abb1f86-a920-479b-82b0-f1a7f4d05638",
              "name": "ts_dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 150,
                "y": 280
              }
            }
          },
          "end": {
            "operator": "e2e8b968-c82d-455e-8ae7-1f0584853a43",
            "connector": {
              "id": "ff22a376-752f-9a5f-899e-601d6e341c72",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "2dbd347e-39ca-45ea-80dd-d6c7bdab8acc",
          "start": {
            "connector": {
              "id": "caa12be4-9d8c-4b96-af49-733cb9ccadb7",
              "name": "bar_series",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 390
              }
            }
          },
          "end": {
            "operator": "ebfd511b-7165-48a4-b50a-24f7944aa671",
            "connector": {
              "id": "2e11c6e7-2a2f-eca5-0507-954ecb6f3329",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "23055f3c-8347-40e7-a735-89952c8b89f3",
          "start": {
            "connector": {
              "id": "d5a29fa6-c570-468c-8195-e2301e91c589",
              "name": "pie_data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 150,
                "y": 500
              }
            }
          },
          "end": {
            "operator": "9abcae45-e58d-45a8-9239-95a180715225",
            "connector": {
              "id": "bc8b441a-9d32-f9ab-eb7e-5a19688039d2",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "9d0e3558-1e3c-4e14-8fda-a921e38d460a",
          "start": {
            "connector": {
              "id": "75604e53-8379-4bc1-b1af-600727e94e2f",
              "name": "pie_group_col",
              "data_type": "STRING",
              "position": {
                "x": 150,
                "y": 530
              }
            }
          },
          "end": {
            "operator": "9abcae45-e58d-45a8-9239-95a180715225",
            "connector": {
              "id": "03280c10-5cf8-0e47-9e23-3b06b7388168",
              "name": "group_column",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "c0b2cdb9-61d8-403f-af53-525abdb9b66b",
          "start": {
            "connector": {
              "id": "3b768612-2631-4967-a13c-632a3c6c9aa7",
              "name": "pie_val_col",
              "data_type": "STRING",
              "position": {
                "x": 150,
                "y": 560
              }
            }
          },
          "end": {
            "operator": "9abcae45-e58d-45a8-9239-95a180715225",
            "connector": {
              "id": "f586c1eb-6943-45cc-b828-fc1c30515b9a",
              "name": "value_column",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e16a08d0-f94c-4b50-b5c6-4a438ab62db2",
          "start": {
            "connector": {
              "id": "a4cddb2f-7f61-478b-88d0-107fa779c424",
              "name": "comp_s1",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 780
              }
            }
          },
          "end": {
            "operator": "cccbeeed-c40a-4adf-bb15-42a2fc680e19",
            "connector": {
              "id": "d416b294-0dc1-06b8-01ad-afd4d9794ae4",
              "name": "series_1",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "a9809938-3dd3-434b-9c62-e5ddad518032",
          "start": {
            "connector": {
              "id": "2c6ba5fb-38ce-425d-a2f7-19f8b2e8c8b8",
              "name": "comp_s2",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 810
              }
            }
          },
          "end": {
            "operator": "cccbeeed-c40a-4adf-bb15-42a2fc680e19",
            "connector": {
              "id": "8478c25c-9370-e6d9-7a1f-4d611782570c",
              "name": "series_2",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "12f69e33-91a6-48a9-99de-f1a6ebbc903d",
          "start": {
            "connector": {
              "id": "2790221e-f11f-4273-b0f9-caa9eaa61575",
              "name": "comp_shifted_max_future",
              "data_type": "INT",
              "position": {
                "x": 150,
                "y": 980
              }
            }
          },
          "end": {
            "operator": "024a61e0-036b-40f7-98f0-88b96b6db022",
            "connector": {
              "id": "c8a2d3fd-6b49-c1b0-4d46-fbe5c4d156d4",
              "name": "max_shifts_future",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "05a9d5f6-b708-4b13-a5ae-f11a3227727f",
          "start": {
            "connector": {
              "id": "08c17f33-6dee-4f3e-8093-38b42652f89f",
              "name": "corr_data",
              "data_type": "DATAFRAME",
              "position": {
                "x": 150,
                "y": 670
              }
            }
          },
          "end": {
            "operator": "4f6db4f7-0db0-4138-ad8b-fd5c23ec89be",
            "connector": {
              "id": "38fdfd24-a76e-6296-606e-73495727eaa0",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "cfd5895c-369c-40ba-bb11-6ef966936b46",
          "start": {
            "connector": {
              "id": "c767d78b-a19f-4572-84a2-2aefcd8a8abb",
              "name": "comp_shifted_max_past",
              "data_type": "INT",
              "position": {
                "x": 150,
                "y": 1010
              }
            }
          },
          "end": {
            "operator": "024a61e0-036b-40f7-98f0-88b96b6db022",
            "connector": {
              "id": "9733a691-3271-74d1-fdb0-7b613e599420",
              "name": "max_shifts_past",
              "data_type": "INT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e436e0bd-359c-45ff-813f-e48395530567",
          "start": {
            "connector": {
              "id": "ae573303-2f93-4d00-9b67-9614ee454b9c",
              "name": "comp_shifted_series",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 1040
              }
            }
          },
          "end": {
            "operator": "024a61e0-036b-40f7-98f0-88b96b6db022",
            "connector": {
              "id": "105c728f-7e02-f7ce-60e5-aba4e0625094",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "1fc23bab-993d-497b-9a80-d7d8e60b67ac",
          "start": {
            "connector": {
              "id": "94029ffe-7225-4d91-8c82-8ec9bd2f90fa",
              "name": "comp_shifted_shiftable_series",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 1070
              }
            }
          },
          "end": {
            "operator": "024a61e0-036b-40f7-98f0-88b96b6db022",
            "connector": {
              "id": "9433aef9-4751-5114-345e-79dfcc427268",
              "name": "series_shiftable",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "85e55278-64d1-4d52-b65c-e540cc50aaf6",
          "start": {
            "connector": {
              "id": "1e25ad3c-0206-4609-ac82-43e744fb9f34",
              "name": "comp_shifed_freq",
              "data_type": "STRING",
              "position": {
                "x": 150,
                "y": 920
              }
            }
          },
          "end": {
            "operator": "024a61e0-036b-40f7-98f0-88b96b6db022",
            "connector": {
              "id": "8fc11cb1-16ad-5053-a187-cb4fb5af31ce",
              "name": "freq",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "b3447e73-a757-49eb-b524-1d6f006961a4",
          "start": {
            "operator": "b8f38976-0d14-417f-a707-8e9c55040565",
            "connector": {
              "id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "edbf0dc7-5673-4faa-8cda-26b6dc633c23",
              "name": "a_single_ts",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 170
              }
            }
          },
          "path": []
        },
        {
          "id": "db6d09fb-875c-4106-89d8-a31fd57d9176",
          "start": {
            "operator": "e2e8b968-c82d-455e-8ae7-1f0584853a43",
            "connector": {
              "id": "c0d410fa-e324-7d06-186a-8096b4aa4468",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "525a5fe0-f1c4-4ad6-a7fb-bea695637260",
              "name": "b_ts_frame",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 280
              }
            }
          },
          "path": []
        },
        {
          "id": "9fdc88de-67f0-4dcb-a1bf-9cfb793b5921",
          "start": {
            "operator": "ebfd511b-7165-48a4-b50a-24f7944aa671",
            "connector": {
              "id": "9ab59d8b-9927-3664-dc40-ab9924e91e88",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "17432dbe-9015-410c-98b3-3a98c9688241",
              "name": "c_bar_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 390
              }
            }
          },
          "path": []
        },
        {
          "id": "ea03e7e7-2b43-43dd-8a42-20c93e0b58f8",
          "start": {
            "operator": "9abcae45-e58d-45a8-9239-95a180715225",
            "connector": {
              "id": "2ba3fb5f-4be0-f48a-3124-894113466b62",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "5530e5d9-440d-47b8-98a8-994badd859b5",
              "name": "d_pie_chart",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 500
              }
            }
          },
          "path": []
        },
        {
          "id": "845176d8-766e-4278-8121-1eb4222d8f5d",
          "start": {
            "operator": "4f6db4f7-0db0-4138-ad8b-fd5c23ec89be",
            "connector": {
              "id": "dd24f709-50f3-f9d5-94f6-ac9b0d403275",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "63057577-7123-46df-a5ab-d53f48ca40e0",
              "name": "f_corr_heatmap",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 670
              }
            }
          },
          "path": []
        },
        {
          "id": "16085950-378a-46d4-b739-d2494e0a135b",
          "start": {
            "operator": "cccbeeed-c40a-4adf-bb15-42a2fc680e19",
            "connector": {
              "id": "0951b836-933c-044d-030b-6c2ee3b5d00a",
              "name": "comparison_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "86e04d63-2bc8-4360-9630-32c91ae6d2f1",
              "name": "e_comp_2_ts",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 780
              }
            }
          },
          "path": []
        },
        {
          "id": "f7859e13-3893-41a0-b9be-5131e71a468e",
          "start": {
            "operator": "024a61e0-036b-40f7-98f0-88b96b6db022",
            "connector": {
              "id": "c3d55f42-2827-2899-9bb0-c1537171a8cc",
              "name": "comparison_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "40b46035-52d7-4200-9e3c-c24ef0b4bdce",
              "name": "g_comp_2_shifted",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 920
              }
            }
          },
          "path": []
        },
        {
          "id": "40060077-ebf1-4fad-b7bc-de3a910f99db",
          "start": {
            "operator": "7cfaff69-b68b-4d72-b553-104d826b0b13",
            "connector": {
              "id": "1658275f-5ff6-1e12-c44c-3dac33a6a56d",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "9c36a4be-a223-47cb-ae98-093e6e08aed8",
              "name": "h_ts_box_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 1180
              }
            }
          },
          "path": []
        },
        {
          "id": "0d659a04-dc0b-45be-bedb-67e940b8b2a1",
          "start": {
            "operator": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
            "connector": {
              "id": "7c1a20a3-f8ae-be72-f6c3-73e874904c74",
              "name": "map_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "687e9b02-dd1d-401b-9713-76462cb5af5a",
              "name": "i_map_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 849,
                "y": 1320
              }
            }
          },
          "path": []
        },
        {
          "id": "492abe59-f625-4a26-9085-4570122b60fb",
          "start": {
            "connector": {
              "id": "a4b3e41e-dec1-43a2-965d-602d00108525",
              "name": "scatter_x",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 1490
              }
            }
          },
          "end": {
            "operator": "2602969e-04f3-446c-973f-f84c2b358204",
            "connector": {
              "id": "2e61e06b-a7dc-6ea6-efb7-dc7bf68890b8",
              "name": "x",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "0d7a181a-4dd6-4a37-8d47-efa319cdf897",
          "start": {
            "connector": {
              "id": "2ab2a705-06d9-4a8f-b28e-51c77770ae67",
              "name": "scatter_y",
              "data_type": "SERIES",
              "position": {
                "x": 150,
                "y": 1520
              }
            }
          },
          "end": {
            "operator": "2602969e-04f3-446c-973f-f84c2b358204",
            "connector": {
              "id": "050d0420-21c8-8560-7f97-40f2f93cb9d3",
              "name": "y",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "36f79b0a-fdfe-4f78-ad24-65fc11004714",
          "start": {
            "operator": "2602969e-04f3-446c-973f-f84c2b358204",
            "connector": {
              "id": "66990a60-30fa-7a61-65f6-0c6a27636b83",
              "name": "scatter_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "7be67df5-1e30-4070-8130-7d57c23685bd",
              "name": "j_scatter_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 850,
                "y": 1490
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "03034bb6-c22f-407b-9301-f147b8440ead",
          "name": "time_boxes_interval",
          "data_type": "STRING",
          "operator_id": "7cfaff69-b68b-4d72-b553-104d826b0b13",
          "connector_id": "4128780c-c4e1-1540-8864-06e810fb223d",
          "operator_name": "Timeseries Interval Boxplots",
          "connector_name": "interval",
          "position": {
            "x": 150,
            "y": 1180
          }
        },
        {
          "id": "bbe008bb-6cd8-4f6d-93eb-929be2ffafe7",
          "name": "time_boxes_ts",
          "data_type": "SERIES",
          "operator_id": "7cfaff69-b68b-4d72-b553-104d826b0b13",
          "connector_id": "884ef67a-37ae-d67c-6d51-6d3b59556bec",
          "operator_name": "Timeseries Interval Boxplots",
          "connector_name": "series",
          "position": {
            "x": 150,
            "y": 1210
          }
        },
        {
          "id": "b7cdf904-a0a7-4df2-ae63-c15ee482cc80",
          "name": "map_cat_color_col",
          "data_type": "STRING",
          "operator_id": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
          "connector_id": "b7519a7a-83ae-d0a4-e79c-60b3c0f00c2e",
          "operator_name": "Simple Scatter Map Plot",
          "connector_name": "cat_color_col",
          "position": {
            "x": 149,
            "y": 1320
          }
        },
        {
          "id": "1824155b-0b6b-44f1-9951-0dc5d559fc1f",
          "name": "map_color_map",
          "data_type": "ANY",
          "operator_id": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
          "connector_id": "0d0227d4-60cd-98de-d7bd-8de9462ff452",
          "operator_name": "Simple Scatter Map Plot",
          "connector_name": "color_map",
          "position": {
            "x": 149,
            "y": 1350
          }
        },
        {
          "id": "d2c944c6-56b0-4934-80e9-d4976efadaa6",
          "name": "map_data",
          "data_type": "DATAFRAME",
          "operator_id": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
          "connector_id": "159f2c5a-40fc-65a2-d84c-2e7d2ae16e0a",
          "operator_name": "Simple Scatter Map Plot",
          "connector_name": "data",
          "position": {
            "x": 149,
            "y": 1380
          }
        },
        {
          "id": "a4b3e41e-dec1-43a2-965d-602d00108525",
          "name": "scatter_x",
          "data_type": "SERIES",
          "operator_id": "2602969e-04f3-446c-973f-f84c2b358204",
          "connector_id": "2e61e06b-a7dc-6ea6-efb7-dc7bf68890b8",
          "operator_name": "2D Scatter Plot colored by Index",
          "connector_name": "x",
          "position": {
            "x": 150,
            "y": 1490
          }
        },
        {
          "id": "2ab2a705-06d9-4a8f-b28e-51c77770ae67",
          "name": "scatter_y",
          "data_type": "SERIES",
          "operator_id": "2602969e-04f3-446c-973f-f84c2b358204",
          "connector_id": "050d0420-21c8-8560-7f97-40f2f93cb9d3",
          "operator_name": "2D Scatter Plot colored by Index",
          "connector_name": "y",
          "position": {
            "x": 150,
            "y": 1520
          }
        },
        {
          "id": "a1830fc5-af3c-45f6-8a91-07c0269e450e",
          "name": "single_ts",
          "data_type": "SERIES",
          "operator_id": "b8f38976-0d14-417f-a707-8e9c55040565",
          "connector_id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
          "operator_name": "Single Timeseries Plot",
          "connector_name": "series",
          "position": {
            "x": 150,
            "y": 170
          }
        },
        {
          "id": "4abb1f86-a920-479b-82b0-f1a7f4d05638",
          "name": "ts_dataframe",
          "data_type": "DATAFRAME",
          "operator_id": "e2e8b968-c82d-455e-8ae7-1f0584853a43",
          "connector_id": "ff22a376-752f-9a5f-899e-601d6e341c72",
          "operator_name": "Timeseries DataFrame Plot",
          "connector_name": "dataframe",
          "position": {
            "x": 150,
            "y": 280
          }
        },
        {
          "id": "caa12be4-9d8c-4b96-af49-733cb9ccadb7",
          "name": "bar_series",
          "data_type": "SERIES",
          "operator_id": "ebfd511b-7165-48a4-b50a-24f7944aa671",
          "connector_id": "2e11c6e7-2a2f-eca5-0507-954ecb6f3329",
          "operator_name": "Vertical Bar Plot",
          "connector_name": "series",
          "position": {
            "x": 150,
            "y": 390
          }
        },
        {
          "id": "d5a29fa6-c570-468c-8195-e2301e91c589",
          "name": "pie_data",
          "data_type": "DATAFRAME",
          "operator_id": "9abcae45-e58d-45a8-9239-95a180715225",
          "connector_id": "bc8b441a-9d32-f9ab-eb7e-5a19688039d2",
          "operator_name": "Pie Chart Plot",
          "connector_name": "dataframe",
          "position": {
            "x": 150,
            "y": 500
          }
        },
        {
          "id": "75604e53-8379-4bc1-b1af-600727e94e2f",
          "name": "pie_group_col",
          "data_type": "STRING",
          "operator_id": "9abcae45-e58d-45a8-9239-95a180715225",
          "connector_id": "03280c10-5cf8-0e47-9e23-3b06b7388168",
          "operator_name": "Pie Chart Plot",
          "connector_name": "group_column",
          "position": {
            "x": 150,
            "y": 530
          }
        },
        {
          "id": "3b768612-2631-4967-a13c-632a3c6c9aa7",
          "name": "pie_val_col",
          "data_type": "STRING",
          "operator_id": "9abcae45-e58d-45a8-9239-95a180715225",
          "connector_id": "f586c1eb-6943-45cc-b828-fc1c30515b9a",
          "operator_name": "Pie Chart Plot",
          "connector_name": "value_column",
          "position": {
            "x": 150,
            "y": 560
          }
        },
        {
          "id": "08c17f33-6dee-4f3e-8093-38b42652f89f",
          "name": "corr_data",
          "data_type": "DATAFRAME",
          "operator_id": "4f6db4f7-0db0-4138-ad8b-fd5c23ec89be",
          "connector_id": "38fdfd24-a76e-6296-606e-73495727eaa0",
          "operator_name": "Correlation Matrix Heatmap Plot",
          "connector_name": "dataframe",
          "position": {
            "x": 150,
            "y": 670
          }
        },
        {
          "id": "a4cddb2f-7f61-478b-88d0-107fa779c424",
          "name": "comp_s1",
          "data_type": "SERIES",
          "operator_id": "cccbeeed-c40a-4adf-bb15-42a2fc680e19",
          "connector_id": "d416b294-0dc1-06b8-01ad-afd4d9794ae4",
          "operator_name": "Compare Two Timeseries Plot",
          "connector_name": "series_1",
          "position": {
            "x": 150,
            "y": 780
          }
        },
        {
          "id": "2c6ba5fb-38ce-425d-a2f7-19f8b2e8c8b8",
          "name": "comp_s2",
          "data_type": "SERIES",
          "operator_id": "cccbeeed-c40a-4adf-bb15-42a2fc680e19",
          "connector_id": "8478c25c-9370-e6d9-7a1f-4d611782570c",
          "operator_name": "Compare Two Timeseries Plot",
          "connector_name": "series_2",
          "position": {
            "x": 150,
            "y": 810
          }
        },
        {
          "id": "1e25ad3c-0206-4609-ac82-43e744fb9f34",
          "name": "comp_shifed_freq",
          "data_type": "STRING",
          "operator_id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "connector_id": "8fc11cb1-16ad-5053-a187-cb4fb5af31ce",
          "operator_name": "Compare Timeshifted Timeseries",
          "connector_name": "freq",
          "position": {
            "x": 150,
            "y": 920
          }
        },
        {
          "id": "197a9dad-be64-4125-8ab2-7b71a1ab4327",
          "name": "comp_timeshift_freq_factor",
          "data_type": "INT",
          "operator_id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "connector_id": "00041bd7-41a1-4c4e-e129-b491ec028e8a",
          "operator_name": "Compare Timeshifted Timeseries",
          "connector_name": "freq_factor",
          "position": {
            "x": 150,
            "y": 950
          }
        },
        {
          "id": "2790221e-f11f-4273-b0f9-caa9eaa61575",
          "name": "comp_shifted_max_future",
          "data_type": "INT",
          "operator_id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "connector_id": "c8a2d3fd-6b49-c1b0-4d46-fbe5c4d156d4",
          "operator_name": "Compare Timeshifted Timeseries",
          "connector_name": "max_shifts_future",
          "position": {
            "x": 150,
            "y": 980
          }
        },
        {
          "id": "c767d78b-a19f-4572-84a2-2aefcd8a8abb",
          "name": "comp_shifted_max_past",
          "data_type": "INT",
          "operator_id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "connector_id": "9733a691-3271-74d1-fdb0-7b613e599420",
          "operator_name": "Compare Timeshifted Timeseries",
          "connector_name": "max_shifts_past",
          "position": {
            "x": 150,
            "y": 1010
          }
        },
        {
          "id": "ae573303-2f93-4d00-9b67-9614ee454b9c",
          "name": "comp_shifted_series",
          "data_type": "SERIES",
          "operator_id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "connector_id": "105c728f-7e02-f7ce-60e5-aba4e0625094",
          "operator_name": "Compare Timeshifted Timeseries",
          "connector_name": "series",
          "position": {
            "x": 150,
            "y": 1040
          }
        },
        {
          "id": "94029ffe-7225-4d91-8c82-8ec9bd2f90fa",
          "name": "comp_shifted_shiftable_series",
          "data_type": "SERIES",
          "operator_id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "connector_id": "9433aef9-4751-5114-345e-79dfcc427268",
          "operator_name": "Compare Timeshifted Timeseries",
          "connector_name": "series_shiftable",
          "position": {
            "x": 150,
            "y": 1070
          }
        }
      ],
      "outputs": [
        {
          "id": "9c36a4be-a223-47cb-ae98-093e6e08aed8",
          "name": "h_ts_box_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "7cfaff69-b68b-4d72-b553-104d826b0b13",
          "connector_id": "1658275f-5ff6-1e12-c44c-3dac33a6a56d",
          "operator_name": "Timeseries Interval Boxplots",
          "connector_name": "plot",
          "position": {
            "x": 850,
            "y": 1180
          }
        },
        {
          "id": "687e9b02-dd1d-401b-9713-76462cb5af5a",
          "name": "i_map_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "fbaa5750-fd58-4e67-a3a7-6989121de3f9",
          "connector_id": "7c1a20a3-f8ae-be72-f6c3-73e874904c74",
          "operator_name": "Simple Scatter Map Plot",
          "connector_name": "map_plot",
          "position": {
            "x": 849,
            "y": 1320
          }
        },
        {
          "id": "7be67df5-1e30-4070-8130-7d57c23685bd",
          "name": "j_scatter_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "2602969e-04f3-446c-973f-f84c2b358204",
          "connector_id": "66990a60-30fa-7a61-65f6-0c6a27636b83",
          "operator_name": "2D Scatter Plot colored by Index",
          "connector_name": "scatter_plot",
          "position": {
            "x": 850,
            "y": 1490
          }
        },
        {
          "id": "edbf0dc7-5673-4faa-8cda-26b6dc633c23",
          "name": "a_single_ts",
          "data_type": "PLOTLYJSON",
          "operator_id": "b8f38976-0d14-417f-a707-8e9c55040565",
          "connector_id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
          "operator_name": "Single Timeseries Plot",
          "connector_name": "plot",
          "position": {
            "x": 850,
            "y": 170
          }
        },
        {
          "id": "525a5fe0-f1c4-4ad6-a7fb-bea695637260",
          "name": "b_ts_frame",
          "data_type": "PLOTLYJSON",
          "operator_id": "e2e8b968-c82d-455e-8ae7-1f0584853a43",
          "connector_id": "c0d410fa-e324-7d06-186a-8096b4aa4468",
          "operator_name": "Timeseries DataFrame Plot",
          "connector_name": "plot",
          "position": {
            "x": 850,
            "y": 280
          }
        },
        {
          "id": "17432dbe-9015-410c-98b3-3a98c9688241",
          "name": "c_bar_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "ebfd511b-7165-48a4-b50a-24f7944aa671",
          "connector_id": "9ab59d8b-9927-3664-dc40-ab9924e91e88",
          "operator_name": "Vertical Bar Plot",
          "connector_name": "plot",
          "position": {
            "x": 850,
            "y": 390
          }
        },
        {
          "id": "5530e5d9-440d-47b8-98a8-994badd859b5",
          "name": "d_pie_chart",
          "data_type": "PLOTLYJSON",
          "operator_id": "9abcae45-e58d-45a8-9239-95a180715225",
          "connector_id": "2ba3fb5f-4be0-f48a-3124-894113466b62",
          "operator_name": "Pie Chart Plot",
          "connector_name": "plot",
          "position": {
            "x": 850,
            "y": 500
          }
        },
        {
          "id": "63057577-7123-46df-a5ab-d53f48ca40e0",
          "name": "f_corr_heatmap",
          "data_type": "PLOTLYJSON",
          "operator_id": "4f6db4f7-0db0-4138-ad8b-fd5c23ec89be",
          "connector_id": "dd24f709-50f3-f9d5-94f6-ac9b0d403275",
          "operator_name": "Correlation Matrix Heatmap Plot",
          "connector_name": "plot",
          "position": {
            "x": 850,
            "y": 670
          }
        },
        {
          "id": "86e04d63-2bc8-4360-9630-32c91ae6d2f1",
          "name": "e_comp_2_ts",
          "data_type": "PLOTLYJSON",
          "operator_id": "cccbeeed-c40a-4adf-bb15-42a2fc680e19",
          "connector_id": "0951b836-933c-044d-030b-6c2ee3b5d00a",
          "operator_name": "Compare Two Timeseries Plot",
          "connector_name": "comparison_plot",
          "position": {
            "x": 850,
            "y": 780
          }
        },
        {
          "id": "40b46035-52d7-4200-9e3c-c24ef0b4bdce",
          "name": "g_comp_2_shifted",
          "data_type": "PLOTLYJSON",
          "operator_id": "024a61e0-036b-40f7-98f0-88b96b6db022",
          "connector_id": "c3d55f42-2827-2899-9bb0-c1537171a8cc",
          "operator_name": "Compare Timeshifted Timeseries",
          "connector_name": "comparison_plot",
          "position": {
            "x": 850,
            "y": 920
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "03034bb6-c22f-407b-9301-f147b8440ead",
          "name": "time_boxes_interval",
          "data_type": "STRING"
        },
        {
          "id": "bbe008bb-6cd8-4f6d-93eb-929be2ffafe7",
          "name": "time_boxes_ts",
          "data_type": "SERIES"
        },
        {
          "id": "b7cdf904-a0a7-4df2-ae63-c15ee482cc80",
          "name": "map_cat_color_col",
          "data_type": "STRING"
        },
        {
          "id": "1824155b-0b6b-44f1-9951-0dc5d559fc1f",
          "name": "map_color_map",
          "data_type": "ANY"
        },
        {
          "id": "d2c944c6-56b0-4934-80e9-d4976efadaa6",
          "name": "map_data",
          "data_type": "DATAFRAME"
        },
        {
          "id": "a4b3e41e-dec1-43a2-965d-602d00108525",
          "name": "scatter_x",
          "data_type": "SERIES"
        },
        {
          "id": "2ab2a705-06d9-4a8f-b28e-51c77770ae67",
          "name": "scatter_y",
          "data_type": "SERIES"
        },
        {
          "id": "a1830fc5-af3c-45f6-8a91-07c0269e450e",
          "name": "single_ts",
          "data_type": "SERIES"
        },
        {
          "id": "4abb1f86-a920-479b-82b0-f1a7f4d05638",
          "name": "ts_dataframe",
          "data_type": "DATAFRAME"
        },
        {
          "id": "caa12be4-9d8c-4b96-af49-733cb9ccadb7",
          "name": "bar_series",
          "data_type": "SERIES"
        },
        {
          "id": "d5a29fa6-c570-468c-8195-e2301e91c589",
          "name": "pie_data",
          "data_type": "DATAFRAME"
        },
        {
          "id": "75604e53-8379-4bc1-b1af-600727e94e2f",
          "name": "pie_group_col",
          "data_type": "STRING"
        },
        {
          "id": "3b768612-2631-4967-a13c-632a3c6c9aa7",
          "name": "pie_val_col",
          "data_type": "STRING"
        },
        {
          "id": "08c17f33-6dee-4f3e-8093-38b42652f89f",
          "name": "corr_data",
          "data_type": "DATAFRAME"
        },
        {
          "id": "a4cddb2f-7f61-478b-88d0-107fa779c424",
          "name": "comp_s1",
          "data_type": "SERIES"
        },
        {
          "id": "2c6ba5fb-38ce-425d-a2f7-19f8b2e8c8b8",
          "name": "comp_s2",
          "data_type": "SERIES"
        },
        {
          "id": "1e25ad3c-0206-4609-ac82-43e744fb9f34",
          "name": "comp_shifed_freq",
          "data_type": "STRING"
        },
        {
          "id": "197a9dad-be64-4125-8ab2-7b71a1ab4327",
          "name": "comp_timeshift_freq_factor",
          "data_type": "INT"
        },
        {
          "id": "2790221e-f11f-4273-b0f9-caa9eaa61575",
          "name": "comp_shifted_max_future",
          "data_type": "INT"
        },
        {
          "id": "c767d78b-a19f-4572-84a2-2aefcd8a8abb",
          "name": "comp_shifted_max_past",
          "data_type": "INT"
        },
        {
          "id": "ae573303-2f93-4d00-9b67-9614ee454b9c",
          "name": "comp_shifted_series",
          "data_type": "SERIES"
        },
        {
          "id": "94029ffe-7225-4d91-8c82-8ec9bd2f90fa",
          "name": "comp_shifted_shiftable_series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "9c36a4be-a223-47cb-ae98-093e6e08aed8",
          "name": "h_ts_box_plot",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "687e9b02-dd1d-401b-9713-76462cb5af5a",
          "name": "i_map_plot",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "7be67df5-1e30-4070-8130-7d57c23685bd",
          "name": "j_scatter_plot",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "edbf0dc7-5673-4faa-8cda-26b6dc633c23",
          "name": "a_single_ts",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "525a5fe0-f1c4-4ad6-a7fb-bea695637260",
          "name": "b_ts_frame",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "17432dbe-9015-410c-98b3-3a98c9688241",
          "name": "c_bar_plot",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "5530e5d9-440d-47b8-98a8-994badd859b5",
          "name": "d_pie_chart",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "63057577-7123-46df-a5ab-d53f48ca40e0",
          "name": "f_corr_heatmap",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "86e04d63-2bc8-4360-9630-32c91ae6d2f1",
          "name": "e_comp_2_ts",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "40b46035-52d7-4200-9e3c-c24ef0b4bdce",
          "name": "g_comp_2_shifted",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "bar_series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"NRW\": 2, \"BW\": 10, \"HE\": 9.8, \"BAY\": 0.2, \"TH\": 3.5, \"BER\": 4.7, \"NS\": 4.2,     \"BRE\": 1.0, \"HAM\": 11.2, \"MV\": 12.9 }"
          }
        },
        {
          "workflow_input_name": "comp_s1",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-11-29T01:00:00.000Z\": 10.533,     \"2019-11-29T02:00:00.000Z\": 10.559,     \"2019-11-29T03:00:00.000Z\": 9.7662,     \"2019-11-29T04:00:00.000Z\": 11.2332,     \"2019-11-29T05:00:00.000Z\": 11.0683,     \"2019-11-29T06:00:00.000Z\": 11.2072,     \"2019-11-29T07:00:00.000Z\": 11.1522,     \"2019-11-29T08:00:00.000Z\": 11.1522,     \"2019-11-29T09:00:00.000Z\": 11.1522,     \"2019-11-29T10:00:00.000Z\": 11.4473,     \"2019-11-29T11:00:00.000Z\": 11.3142,     \"2019-11-29T12:00:00.000Z\": 11.3403,     \"2019-11-29T13:00:00.000Z\": 11.375,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 12,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 12,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.8918,     \"2019-11-30T02:00:00.000Z\": 10.64,     \"2019-11-30T03:00:00.000Z\": 10.5648,     \"2019-11-30T04:00:00.000Z\": 10.912,     \"2019-11-30T05:00:00.000Z\": 12,     \"2019-11-30T06:00:00.000Z\": 10.912,     \"2019-11-30T07:00:00.000Z\": 12,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 12,     \"2019-11-30T13:00:00.000Z\": 12,     \"2019-11-30T14:00:00.000Z\": 12,     \"2019-11-30T15:00:00.000Z\": 12 }"
          }
        },
        {
          "workflow_input_name": "comp_s2",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-11-29T01:00:00.000Z\": 10.7533,     \"2019-11-29T02:00:00.000Z\": 10.759,     \"2019-11-29T03:00:00.000Z\": 9.9662,     \"2019-11-29T04:00:00.000Z\": 11.1332,     \"2019-11-29T05:00:00.000Z\": 11.0083,     \"2019-11-29T06:00:00.000Z\": 11.1072,     \"2019-11-29T07:00:00.000Z\": 11.1222,     \"2019-11-29T08:00:00.000Z\": 11.1322,     \"2019-11-29T09:00:00.000Z\": 11.1422,     \"2019-11-29T10:00:00.000Z\": 11.7473,     \"2019-11-29T11:00:00.000Z\": 11.4142,     \"2019-11-29T12:00:00.000Z\": 11.4403,     \"2019-11-29T13:00:00.000Z\": 11.475,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 13,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 13,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.7918,     \"2019-11-30T02:00:00.000Z\": 10.34,     \"2019-11-30T03:00:00.000Z\": 10.2648,     \"2019-11-30T04:00:00.000Z\": 10.112,     \"2019-11-30T05:00:00.000Z\": 11,     \"2019-11-30T06:00:00.000Z\": 10.312,     \"2019-11-30T07:00:00.000Z\": 11,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 11,     \"2019-11-30T13:00:00.000Z\": 11,     \"2019-11-30T14:00:00.000Z\": 11,     \"2019-11-30T15:00:00.000Z\": 11.5 }"
          }
        },
        {
          "workflow_input_name": "comp_shifed_freq",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "d"
          }
        },
        {
          "workflow_input_name": "comp_shifted_max_future",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "10"
          }
        },
        {
          "workflow_input_name": "comp_shifted_max_past",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "10"
          }
        },
        {
          "workflow_input_name": "comp_shifted_series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-10-01T15:00:00.000Z\": 8.6464,     \"2019-10-01T16:00:00.000Z\": 8.6377,     \"2019-10-01T17:00:00.000Z\": 8.6348,     \"2019-10-01T18:00:00.000Z\": 8.6291,     \"2019-10-01T19:00:00.000Z\": 8.6291,     \"2019-10-01T20:00:00.000Z\": 8.6291,     \"2019-10-01T21:00:00.000Z\": 8.6233,     \"2019-10-01T22:00:00.000Z\": 8.6233,     \"2019-10-01T23:00:00.000Z\": 8.6175,     \"2019-10-02T01:00:00.000Z\": 8.6175,     \"2019-10-02T02:00:00.000Z\": 8.6175,     \"2019-10-02T03:00:00.000Z\": 8.6175,     \"2019-10-02T04:00:00.000Z\": 8.6117,     \"2019-10-02T05:00:00.000Z\": 8.6117,     \"2019-10-02T06:00:00.000Z\": 8.6001,     \"2019-10-02T07:00:00.000Z\": 8.5943,     \"2019-10-02T08:00:00.000Z\": 8.5856,     \"2019-10-02T09:00:00.000Z\": 8.577,     \"2019-10-02T10:00:00.000Z\": 8.6175,     \"2019-10-02T11:00:00.000Z\": 8.5741,     \"2019-10-02T12:00:00.000Z\": 8.5654,     \"2019-10-02T13:00:00.000Z\": 8.5625,     \"2019-10-02T14:00:00.000Z\": 8.5509,     \"2019-10-02T15:00:00.000Z\": 8.5422,     \"2019-10-02T16:00:00.000Z\": 8.5596,     \"2019-10-02T17:00:00.000Z\": 8.5856,     \"2019-10-02T18:00:00.000Z\": 8.5885,     \"2019-10-02T19:00:00.000Z\": 8.5914,     \"2019-10-02T20:00:00.000Z\": 8.5885,     \"2019-10-02T21:00:00.000Z\": 8.5856,     \"2019-10-02T22:00:00.000Z\": 8.5856,     \"2019-10-02T23:00:00.000Z\": 8.577,     \"2019-10-03T01:00:00.000Z\": 8.5712,     \"2019-10-03T02:00:00.000Z\": 8.5683,     \"2019-10-03T03:00:00.000Z\": 8.5596,     \"2019-10-03T04:00:00.000Z\": 8.5509,     \"2019-10-03T05:00:00.000Z\": 8.5538,     \"2019-10-03T06:00:00.000Z\": 8.548,     \"2019-10-03T07:00:00.000Z\": 8.5422,     \"2019-10-03T08:00:00.000Z\": 8.5365,     \"2019-10-03T09:00:00.000Z\": 8.5307,     \"2019-10-03T10:00:00.000Z\": 8.5278,     \"2019-10-03T11:00:00.000Z\": 8.5307,     \"2019-10-03T12:00:00.000Z\": 8.5365,     \"2019-10-03T13:00:00.000Z\": 8.5307,     \"2019-10-03T14:00:00.000Z\": 8.5307,     \"2019-10-03T15:00:00.000Z\": 8.5307,     \"2019-10-03T16:00:00.000Z\": 8.5278,     \"2019-10-03T17:00:00.000Z\": 8.5249,     \"2019-10-03T18:00:00.000Z\": 8.5249,     \"2019-10-03T19:00:00.000Z\": 8.5191,     \"2019-10-03T20:00:00.000Z\": 8.5191,     \"2019-10-03T21:00:00.000Z\": 8.5191,     \"2019-10-03T22:00:00.000Z\": 8.5191,     \"2019-10-03T23:00:00.000Z\": 8.5104,     \"2019-10-04T01:00:00.000Z\": 8.5104,     \"2019-10-04T02:00:00.000Z\": 8.5104,     \"2019-10-04T03:00:00.000Z\": 8.5046,     \"2019-10-04T04:00:00.000Z\": 8.4988,     \"2019-10-04T05:00:00.000Z\": 8.4988,     \"2019-10-04T06:00:00.000Z\": 8.4931,     \"2019-10-04T07:00:00.000Z\": 8.4844,     \"2019-10-04T08:00:00.000Z\": 8.4902,     \"2019-10-04T09:00:00.000Z\": 8.4468,     \"2019-10-04T10:00:00.000Z\": 8.4728,     \"2019-10-04T11:00:00.000Z\": 8.4815,     \"2019-10-04T12:00:00.000Z\": 8.4612,     \"2019-10-04T13:00:00.000Z\": 8.5075,     \"2019-10-04T14:00:00.000Z\": 8.4815,     \"2019-10-04T15:00:00.000Z\": 8.4902,     \"2019-10-04T16:00:00.000Z\": 8.548,     \"2019-10-04T17:00:00.000Z\": 8.5422,     \"2019-10-04T18:00:00.000Z\": 8.5509,     \"2019-10-04T19:00:00.000Z\": 8.5509,     \"2019-10-04T20:00:00.000Z\": 8.5509,     \"2019-10-04T21:00:00.000Z\": 8.5567,     \"2019-10-04T22:00:00.000Z\": 8.5307,     \"2019-10-04T23:00:00.000Z\": 8.5596,     \"2019-10-05T01:00:00.000Z\": 8.5712,     \"2019-10-05T02:00:00.000Z\": 8.5741,     \"2019-10-05T03:00:00.000Z\": 8.5712,     \"2019-10-05T04:00:00.000Z\": 8.5596,     \"2019-10-05T05:00:00.000Z\": 8.5654,     \"2019-10-05T06:00:00.000Z\": 8.5654,     \"2019-10-05T07:00:00.000Z\": 8.5654,     \"2019-10-05T08:00:00.000Z\": 8.5625,     \"2019-10-05T09:00:00.000Z\": 8.5625,     \"2019-10-05T10:00:00.000Z\": 8.548,     \"2019-10-05T11:00:00.000Z\": 8.5596,     \"2019-10-05T12:00:00.000Z\": 8.5596,     \"2019-10-05T13:00:00.000Z\": 8.5394,     \"2019-10-05T14:00:00.000Z\": 8.548,     \"2019-10-05T15:00:00.000Z\": 8.5538,     \"2019-10-05T16:00:00.000Z\": 8.5596,     \"2019-10-05T17:00:00.000Z\": 8.5596,     \"2019-10-05T18:00:00.000Z\": 8.5538,     \"2019-10-05T19:00:00.000Z\": 8.5596,     \"2019-10-05T20:00:00.000Z\": 8.5451,     \"2019-10-05T21:00:00.000Z\": 8.5394,     \"2019-10-05T22:00:00.000Z\": 8.5336,     \"2019-10-05T23:00:00.000Z\": 8.522,     \"2019-10-06T01:00:00.000Z\": 8.522,     \"2019-10-06T02:00:00.000Z\": 8.5104,     \"2019-10-06T03:00:00.000Z\": 8.5046,     \"2019-10-06T04:00:00.000Z\": 8.4988,     \"2019-10-06T05:00:00.000Z\": 8.5017,     \"2019-10-06T06:00:00.000Z\": 8.4844,     \"2019-10-06T07:00:00.000Z\": 8.4699,     \"2019-10-06T08:00:00.000Z\": 8.4641,     \"2019-10-06T09:00:00.000Z\": 8.4583,     \"2019-10-06T10:00:00.000Z\": 8.4525,     \"2019-10-06T11:00:00.000Z\": 8.4381,     \"2019-10-06T12:00:00.000Z\": 8.4294,     \"2019-10-06T13:00:00.000Z\": 8.4265,     \"2019-10-06T14:00:00.000Z\": 8.4178,     \"2019-10-06T15:00:00.000Z\": 8.4149,     \"2019-10-06T16:00:00.000Z\": 8.412,     \"2019-10-06T17:00:00.000Z\": 8.412,     \"2019-10-06T18:00:00.000Z\": 8.4091,     \"2019-10-06T19:00:00.000Z\": 8.4063,     \"2019-10-06T20:00:00.000Z\": 8.412,     \"2019-10-06T21:00:00.000Z\": 8.3889,     \"2019-10-06T22:00:00.000Z\": 8.4063,     \"2019-10-06T23:00:00.000Z\": 8.4063,     \"2019-10-07T01:00:00.000Z\": 8.4005,     \"2019-10-07T02:00:00.000Z\": 8.3976,     \"2019-10-07T03:00:00.000Z\": 8.3918,     \"2019-10-07T04:00:00.000Z\": 8.3889,     \"2019-10-07T05:00:00.000Z\": 8.386,     \"2019-10-07T06:00:00.000Z\": 8.3802,     \"2019-10-07T07:00:00.000Z\": 8.3628,     \"2019-10-07T08:00:00.000Z\": 8.3715,     \"2019-10-07T09:00:00.000Z\": 8.3657,     \"2019-10-07T10:00:00.000Z\": 8.36,     \"2019-10-07T11:00:00.000Z\": 8.3542,     \"2019-10-07T12:00:00.000Z\": 8.3455,     \"2019-10-07T13:00:00.000Z\": 8.36,     \"2019-10-07T14:00:00.000Z\": 8.3513,     \"2019-10-07T15:00:00.000Z\": 8.36,     \"2019-10-07T16:00:00.000Z\": 8.3571,     \"2019-10-07T17:00:00.000Z\": 8.36,     \"2019-10-07T18:00:00.000Z\": 8.3628,     \"2019-10-07T19:00:00.000Z\": 8.36,     \"2019-10-07T20:00:00.000Z\": 8.3657,     \"2019-10-07T21:00:00.000Z\": 8.3571,     \"2019-10-07T22:00:00.000Z\": 8.3657,     \"2019-10-07T23:00:00.000Z\": 8.3744,     \"2019-10-08T01:00:00.000Z\": 8.3773,     \"2019-10-08T02:00:00.000Z\": 8.3744,     \"2019-10-08T03:00:00.000Z\": 8.3744,     \"2019-10-08T04:00:00.000Z\": 8.3744,     \"2019-10-08T05:00:00.000Z\": 8.3773,     \"2019-10-08T06:00:00.000Z\": 8.3773,     \"2019-10-08T07:00:00.000Z\": 8.3802,     \"2019-10-08T08:00:00.000Z\": 8.3773,     \"2019-10-08T09:00:00.000Z\": 8.36,     \"2019-10-08T10:00:00.000Z\": 8.3628,     \"2019-10-08T11:00:00.000Z\": 8.4034,     \"2019-10-08T12:00:00.000Z\": 8.3744,     \"2019-10-08T13:00:00.000Z\": 8.4005,     \"2019-10-08T14:00:00.000Z\": 8.4294,     \"2019-10-08T15:00:00.000Z\": 8.3802,     \"2019-10-08T16:00:00.000Z\": 8.4294,     \"2019-10-08T17:00:00.000Z\": 8.4699,     \"2019-10-08T18:00:00.000Z\": 8.4902,     \"2019-10-08T19:00:00.000Z\": 8.4931,     \"2019-10-08T20:00:00.000Z\": 8.4902,     \"2019-10-08T21:00:00.000Z\": 8.4902,     \"2019-10-08T22:00:00.000Z\": 8.4873,     \"2019-10-08T23:00:00.000Z\": 8.4902,     \"2019-10-09T01:00:00.000Z\": 8.4873,     \"2019-10-09T02:00:00.000Z\": 8.4902,     \"2019-10-09T03:00:00.000Z\": 8.4902,     \"2019-10-09T04:00:00.000Z\": 8.4902,     \"2019-10-09T05:00:00.000Z\": 8.4902,     \"2019-10-09T06:00:00.000Z\": 8.4902,     \"2019-10-09T07:00:00.000Z\": 8.4902,     \"2019-10-09T08:00:00.000Z\": 8.4873,     \"2019-10-09T09:00:00.000Z\": 8.4873,     \"2019-10-09T10:00:00.000Z\": 8.522,     \"2019-10-09T11:00:00.000Z\": 8.5422,     \"2019-10-09T12:00:00.000Z\": 8.5509,     \"2019-10-09T13:00:00.000Z\": 8.5885,     \"2019-10-09T14:00:00.000Z\": 8.6088,     \"2019-10-09T15:00:00.000Z\": 8.6233,     \"2019-10-09T16:00:00.000Z\": 8.6319,     \"2019-10-09T17:00:00.000Z\": 8.6291,     \"2019-10-09T18:00:00.000Z\": 8.6464,     \"2019-10-09T19:00:00.000Z\": 8.6522,     \"2019-10-09T20:00:00.000Z\": 8.6522,     \"2019-10-09T21:00:00.000Z\": 8.6551,     \"2019-10-09T22:00:00.000Z\": 8.658,     \"2019-10-09T23:00:00.000Z\": 8.6638,     \"2019-10-10T01:00:00.000Z\": 8.6522,     \"2019-10-10T02:00:00.000Z\": 8.6725,     \"2019-10-10T03:00:00.000Z\": 8.6753,     \"2019-10-10T04:00:00.000Z\": 8.6609,     \"2019-10-10T05:00:00.000Z\": 8.6146,     \"2019-10-10T06:00:00.000Z\": 8.6522,     \"2019-10-10T07:00:00.000Z\": 8.6696,     \"2019-10-10T08:00:00.000Z\": 8.6725,     \"2019-10-10T09:00:00.000Z\": 8.6725,     \"2019-10-10T10:00:00.000Z\": 8.6811,     \"2019-10-10T11:00:00.000Z\": 8.684,     \"2019-10-10T12:00:00.000Z\": 8.684,     \"2019-10-10T13:00:00.000Z\": 8.6782,     \"2019-10-10T14:00:00.000Z\": 8.6609,     \"2019-10-10T15:00:00.000Z\": 8.6609,     \"2019-10-10T16:00:00.000Z\": 8.6059,     \"2019-10-10T17:00:00.000Z\": 8.6117,     \"2019-10-10T18:00:00.000Z\": 8.6175,     \"2019-10-10T19:00:00.000Z\": 8.6638,     \"2019-10-10T20:00:00.000Z\": 8.6667,     \"2019-10-10T21:00:00.000Z\": 8.6725,     \"2019-10-10T22:00:00.000Z\": 8.6753,     \"2019-10-10T23:00:00.000Z\": 8.6811,     \"2019-10-11T01:00:00.000Z\": 8.6782,     \"2019-10-11T02:00:00.000Z\": 8.684,     \"2019-10-11T03:00:00.000Z\": 8.6811,     \"2019-10-11T04:00:00.000Z\": 8.6782,     \"2019-10-11T05:00:00.000Z\": 8.6725,     \"2019-10-11T06:00:00.000Z\": 8.6262,     \"2019-10-11T07:00:00.000Z\": 8.6667,     \"2019-10-11T08:00:00.000Z\": 8.6667,     \"2019-10-11T09:00:00.000Z\": 8.6725,     \"2019-10-11T10:00:00.000Z\": 8.6725,     \"2019-10-11T11:00:00.000Z\": 8.6725,     \"2019-10-11T12:00:00.000Z\": 8.6725,     \"2019-10-11T13:00:00.000Z\": 8.6233,     \"2019-10-11T14:00:00.000Z\": 8.6319,     \"2019-10-11T15:00:00.000Z\": 8.6725,     \"2019-10-11T16:00:00.000Z\": 8.6753,     \"2019-10-11T17:00:00.000Z\": 8.6753,     \"2019-10-11T18:00:00.000Z\": 8.6782,     \"2019-10-11T19:00:00.000Z\": 8.6811,     \"2019-10-11T20:00:00.000Z\": 8.6811,     \"2019-10-11T21:00:00.000Z\": 8.6811,     \"2019-10-11T22:00:00.000Z\": 8.6782,     \"2019-10-11T23:00:00.000Z\": 8.6348,     \"2019-10-12T01:00:00.000Z\": 8.6811,     \"2019-10-12T02:00:00.000Z\": 8.684,     \"2019-10-12T03:00:00.000Z\": 8.6696,     \"2019-10-12T04:00:00.000Z\": 8.6811,     \"2019-10-12T05:00:00.000Z\": 8.6869,     \"2019-10-12T06:00:00.000Z\": 8.684,     \"2019-10-12T07:00:00.000Z\": 8.684,     \"2019-10-12T08:00:00.000Z\": 8.6782,     \"2019-10-12T09:00:00.000Z\": 8.6782,     \"2019-10-12T10:00:00.000Z\": 8.6753,     \"2019-10-12T11:00:00.000Z\": 8.6377,     \"2019-10-12T12:00:00.000Z\": 8.6406,     \"2019-10-12T13:00:00.000Z\": 8.6782,     \"2019-10-12T14:00:00.000Z\": 8.6782,     \"2019-10-12T15:00:00.000Z\": 8.6811,     \"2019-10-12T16:00:00.000Z\": 8.6811,     \"2019-10-12T17:00:00.000Z\": 8.6811,     \"2019-10-12T18:00:00.000Z\": 8.6782,     \"2019-10-12T19:00:00.000Z\": 8.6811,     \"2019-10-12T20:00:00.000Z\": 8.6811,     \"2019-10-12T21:00:00.000Z\": 8.6811,     \"2019-10-12T22:00:00.000Z\": 8.684,     \"2019-10-12T23:00:00.000Z\": 8.6782,     \"2019-10-13T01:00:00.000Z\": 8.6782,     \"2019-10-13T02:00:00.000Z\": 8.6725,     \"2019-10-13T03:00:00.000Z\": 8.6782,     \"2019-10-13T04:00:00.000Z\": 8.6869,     \"2019-10-13T05:00:00.000Z\": 8.6869,     \"2019-10-13T06:00:00.000Z\": 8.6898,     \"2019-10-13T07:00:00.000Z\": 8.6898,     \"2019-10-13T08:00:00.000Z\": 8.6898,     \"2019-10-13T09:00:00.000Z\": 8.6927,     \"2019-10-13T10:00:00.000Z\": 8.6927,     \"2019-10-13T11:00:00.000Z\": 8.6956,     \"2019-10-13T12:00:00.000Z\": 8.7014,     \"2019-10-13T13:00:00.000Z\": 8.7043,     \"2019-10-13T14:00:00.000Z\": 8.7072,     \"2019-10-13T15:00:00.000Z\": 8.7101,     \"2019-10-13T16:00:00.000Z\": 8.7188,     \"2019-10-13T17:00:00.000Z\": 8.7332,     \"2019-10-13T18:00:00.000Z\": 8.739,     \"2019-10-13T19:00:00.000Z\": 8.7535,     \"2019-10-13T20:00:00.000Z\": 8.7622,     \"2019-10-13T21:00:00.000Z\": 8.7708,     \"2019-10-13T22:00:00.000Z\": 8.7766,     \"2019-10-13T23:00:00.000Z\": 8.7824,     \"2019-10-14T01:00:00.000Z\": 8.7882,     \"2019-10-14T02:00:00.000Z\": 8.794,     \"2019-10-14T03:00:00.000Z\": 8.7882,     \"2019-10-14T04:00:00.000Z\": 8.7882,     \"2019-10-14T05:00:00.000Z\": 8.794,     \"2019-10-14T06:00:00.000Z\": 8.794,     \"2019-10-14T07:00:00.000Z\": 8.794,     \"2019-10-14T08:00:00.000Z\": 8.7969,     \"2019-10-14T09:00:00.000Z\": 8.7998,     \"2019-10-14T10:00:00.000Z\": 8.7998,     \"2019-10-14T11:00:00.000Z\": 8.7998,     \"2019-10-14T12:00:00.000Z\": 8.7969,     \"2019-10-14T13:00:00.000Z\": 8.7998,     \"2019-10-14T14:00:00.000Z\": 8.794,     \"2019-10-14T15:00:00.000Z\": 8.8084,     \"2019-10-14T16:00:00.000Z\": 8.8113,     \"2019-10-14T17:00:00.000Z\": 8.8056,     \"2019-10-14T18:00:00.000Z\": 8.8056,     \"2019-10-14T19:00:00.000Z\": 8.8056,     \"2019-10-14T20:00:00.000Z\": 8.8027,     \"2019-10-14T21:00:00.000Z\": 8.8056,     \"2019-10-14T22:00:00.000Z\": 8.8027,     \"2019-10-14T23:00:00.000Z\": 8.8142,     \"2019-10-15T01:00:00.000Z\": 8.8142,     \"2019-10-15T02:00:00.000Z\": 8.82,     \"2019-10-15T03:00:00.000Z\": 8.8229,     \"2019-10-15T04:00:00.000Z\": 8.8229,     \"2019-10-15T05:00:00.000Z\": 8.8345,     \"2019-10-15T06:00:00.000Z\": 8.8316,     \"2019-10-15T07:00:00.000Z\": 8.8229,     \"2019-10-15T08:00:00.000Z\": 8.8171,     \"2019-10-15T09:00:00.000Z\": 8.8229,     \"2019-10-15T10:00:00.000Z\": 8.82,     \"2019-10-15T11:00:00.000Z\": 8.8142,     \"2019-10-15T12:00:00.000Z\": 8.8142,     \"2019-10-15T13:00:00.000Z\": 8.8171,     \"2019-10-15T14:00:00.000Z\": 8.8258,     \"2019-10-15T15:00:00.000Z\": 8.82,     \"2019-10-15T16:00:00.000Z\": 8.8287,     \"2019-10-15T17:00:00.000Z\": 8.8229,     \"2019-10-15T18:00:00.000Z\": 8.8142,     \"2019-10-15T19:00:00.000Z\": 8.8113,     \"2019-10-15T20:00:00.000Z\": 8.8084,     \"2019-10-15T21:00:00.000Z\": 8.8142,     \"2019-10-15T22:00:00.000Z\": 8.8084,     \"2019-10-15T23:00:00.000Z\": 8.7824,     \"2019-10-16T01:00:00.000Z\": 8.7708,     \"2019-10-16T02:00:00.000Z\": 8.794,     \"2019-10-16T03:00:00.000Z\": 8.8027,     \"2019-10-16T04:00:00.000Z\": 8.7708,     \"2019-10-16T05:00:00.000Z\": 8.7969,     \"2019-10-16T06:00:00.000Z\": 8.8171,     \"2019-10-16T07:00:00.000Z\": 8.8113,     \"2019-10-16T08:00:00.000Z\": 8.8171,     \"2019-10-16T09:00:00.000Z\": 8.8084,     \"2019-10-16T10:00:00.000Z\": 8.7766,     \"2019-10-16T11:00:00.000Z\": 8.7679,     \"2019-10-16T12:00:00.000Z\": 8.713,     \"2019-10-16T13:00:00.000Z\": 8.6464,     \"2019-10-16T14:00:00.000Z\": 8.6725,     \"2019-10-16T15:00:00.000Z\": 8.6696,     \"2019-10-16T16:00:00.000Z\": 8.6319,     \"2019-10-16T17:00:00.000Z\": 8.6638,     \"2019-10-16T18:00:00.000Z\": 8.7072,     \"2019-10-16T19:00:00.000Z\": 8.7159,     \"2019-10-16T20:00:00.000Z\": 8.7216,     \"2019-10-16T21:00:00.000Z\": 8.7477,     \"2019-10-16T22:00:00.000Z\": 8.7506,     \"2019-10-16T23:00:00.000Z\": 8.765,     \"2019-10-17T01:00:00.000Z\": 8.7824,     \"2019-10-17T02:00:00.000Z\": 8.7708,     \"2019-10-17T03:00:00.000Z\": 8.7679,     \"2019-10-17T04:00:00.000Z\": 8.794,     \"2019-10-17T05:00:00.000Z\": 8.7998,     \"2019-10-17T06:00:00.000Z\": 8.7911,     \"2019-10-17T07:00:00.000Z\": 8.7882,     \"2019-10-17T08:00:00.000Z\": 8.765,     \"2019-10-17T09:00:00.000Z\": 8.7448,     \"2019-10-17T10:00:00.000Z\": 8.6898,     \"2019-10-17T11:00:00.000Z\": 8.6782,     \"2019-10-17T12:00:00.000Z\": 8.5567,     \"2019-10-17T13:00:00.000Z\": 8.5741,     \"2019-10-17T14:00:00.000Z\": 8.603,     \"2019-10-17T15:00:00.000Z\": 8.5943,     \"2019-10-17T16:00:00.000Z\": 8.6117,     \"2019-10-17T17:00:00.000Z\": 8.6088,     \"2019-10-17T18:00:00.000Z\": 8.6088,     \"2019-10-17T19:00:00.000Z\": 8.6059,     \"2019-10-17T20:00:00.000Z\": 8.5972,     \"2019-10-17T21:00:00.000Z\": 8.6088,     \"2019-10-17T22:00:00.000Z\": 8.6175,     \"2019-10-17T23:00:00.000Z\": 8.6146,     \"2019-10-18T01:00:00.000Z\": 8.6059,     \"2019-10-18T02:00:00.000Z\": 8.6204,     \"2019-10-18T03:00:00.000Z\": 8.6233,     \"2019-10-18T04:00:00.000Z\": 8.6262,     \"2019-10-18T05:00:00.000Z\": 8.6262,     \"2019-10-18T06:00:00.000Z\": 8.6233,     \"2019-10-18T07:00:00.000Z\": 8.603,     \"2019-10-18T08:00:00.000Z\": 8.6262,     \"2019-10-18T09:00:00.000Z\": 8.6233,     \"2019-10-18T10:00:00.000Z\": 8.603,     \"2019-10-18T11:00:00.000Z\": 8.6464,     \"2019-10-18T12:00:00.000Z\": 8.6667,     \"2019-10-18T13:00:00.000Z\": 8.6956,     \"2019-10-18T14:00:00.000Z\": 8.7159,     \"2019-10-18T15:00:00.000Z\": 8.7188,     \"2019-10-18T16:00:00.000Z\": 8.7188,     \"2019-10-18T17:00:00.000Z\": 8.7303,     \"2019-10-18T18:00:00.000Z\": 8.7361,     \"2019-10-18T19:00:00.000Z\": 8.7361,     \"2019-10-18T20:00:00.000Z\": 8.7332,     \"2019-10-18T21:00:00.000Z\": 8.7245,     \"2019-10-18T22:00:00.000Z\": 8.7188,     \"2019-10-18T23:00:00.000Z\": 8.7159,     \"2019-10-19T01:00:00.000Z\": 8.7072,     \"2019-10-19T02:00:00.000Z\": 8.6985,     \"2019-10-19T03:00:00.000Z\": 8.6782,     \"2019-10-19T04:00:00.000Z\": 8.6898,     \"2019-10-19T05:00:00.000Z\": 8.6811,     \"2019-10-19T06:00:00.000Z\": 8.6725,     \"2019-10-19T07:00:00.000Z\": 8.6696,     \"2019-10-19T08:00:00.000Z\": 8.6667,     \"2019-10-19T09:00:00.000Z\": 8.6551,     \"2019-10-19T10:00:00.000Z\": 8.6464,     \"2019-10-19T11:00:00.000Z\": 8.6406,     \"2019-10-19T12:00:00.000Z\": 8.6406,     \"2019-10-19T13:00:00.000Z\": 8.6377,     \"2019-10-19T14:00:00.000Z\": 8.6348,     \"2019-10-19T15:00:00.000Z\": 8.6348,     \"2019-10-19T16:00:00.000Z\": 8.6059,     \"2019-10-19T17:00:00.000Z\": 8.6175,     \"2019-10-19T18:00:00.000Z\": 8.6319,     \"2019-10-19T19:00:00.000Z\": 8.6262,     \"2019-10-19T20:00:00.000Z\": 8.6204,     \"2019-10-19T21:00:00.000Z\": 8.6204,     \"2019-10-19T22:00:00.000Z\": 8.6204,     \"2019-10-19T23:00:00.000Z\": 8.6204,     \"2019-10-20T01:00:00.000Z\": 8.6146,     \"2019-10-20T02:00:00.000Z\": 8.6088,     \"2019-10-20T03:00:00.000Z\": 8.6088,     \"2019-10-20T04:00:00.000Z\": 8.6059,     \"2019-10-20T05:00:00.000Z\": 8.6001,     \"2019-10-20T06:00:00.000Z\": 8.5972,     \"2019-10-20T07:00:00.000Z\": 8.5828,     \"2019-10-20T08:00:00.000Z\": 8.5856,     \"2019-10-20T09:00:00.000Z\": 8.5799,     \"2019-10-20T10:00:00.000Z\": 8.5856,     \"2019-10-20T11:00:00.000Z\": 8.5856,     \"2019-10-20T12:00:00.000Z\": 8.5828,     \"2019-10-20T13:00:00.000Z\": 8.5799,     \"2019-10-20T14:00:00.000Z\": 8.577,     \"2019-10-20T15:00:00.000Z\": 8.5712,     \"2019-10-20T16:00:00.000Z\": 8.5422,     \"2019-10-20T17:00:00.000Z\": 8.5625,     \"2019-10-20T18:00:00.000Z\": 8.5654,     \"2019-10-20T19:00:00.000Z\": 8.5625,     \"2019-10-20T20:00:00.000Z\": 8.5567,     \"2019-10-20T21:00:00.000Z\": 8.5538,     \"2019-10-20T22:00:00.000Z\": 8.5509,     \"2019-10-20T23:00:00.000Z\": 8.5451,     \"2019-10-21T01:00:00.000Z\": 8.5422,     \"2019-10-21T02:00:00.000Z\": 8.5422,     \"2019-10-21T03:00:00.000Z\": 8.5394,     \"2019-10-21T04:00:00.000Z\": 8.5336,     \"2019-10-21T05:00:00.000Z\": 8.5365,     \"2019-10-21T06:00:00.000Z\": 8.5365,     \"2019-10-21T07:00:00.000Z\": 8.5365,     \"2019-10-21T08:00:00.000Z\": 8.5365,     \"2019-10-21T09:00:00.000Z\": 8.5307,     \"2019-10-21T10:00:00.000Z\": 8.4699,     \"2019-10-21T11:00:00.000Z\": 8.4873,     \"2019-10-21T12:00:00.000Z\": 8.4988,     \"2019-10-21T13:00:00.000Z\": 8.5017,     \"2019-10-21T14:00:00.000Z\": 8.5017,     \"2019-10-21T15:00:00.000Z\": 8.5046,     \"2019-10-21T16:00:00.000Z\": 8.5075,     \"2019-10-21T17:00:00.000Z\": 8.5075,     \"2019-10-21T18:00:00.000Z\": 8.4902,     \"2019-10-21T19:00:00.000Z\": 8.4902,     \"2019-10-21T20:00:00.000Z\": 8.4959,     \"2019-10-21T21:00:00.000Z\": 8.4959,     \"2019-10-21T22:00:00.000Z\": 8.4931,     \"2019-10-21T23:00:00.000Z\": 8.4959,     \"2019-10-22T01:00:00.000Z\": 8.4873,     \"2019-10-22T02:00:00.000Z\": 8.4873,     \"2019-10-22T03:00:00.000Z\": 8.4873,     \"2019-10-22T04:00:00.000Z\": 8.4873,     \"2019-10-22T05:00:00.000Z\": 8.4873,     \"2019-10-22T06:00:00.000Z\": 8.4786,     \"2019-10-22T07:00:00.000Z\": 8.4786,     \"2019-10-22T08:00:00.000Z\": 8.467,     \"2019-10-22T09:00:00.000Z\": 8.522,     \"2019-10-22T10:00:00.000Z\": 8.5683,     \"2019-10-22T11:00:00.000Z\": 8.577,     \"2019-10-22T12:00:00.000Z\": 8.5828,     \"2019-10-22T13:00:00.000Z\": 8.5885,     \"2019-10-22T14:00:00.000Z\": 8.5799,     \"2019-10-22T15:00:00.000Z\": 8.5741,     \"2019-10-22T16:00:00.000Z\": 8.5712,     \"2019-10-22T17:00:00.000Z\": 8.5741,     \"2019-10-22T18:00:00.000Z\": 8.5683,     \"2019-10-22T19:00:00.000Z\": 8.5712,     \"2019-10-22T20:00:00.000Z\": 8.5683,     \"2019-10-22T21:00:00.000Z\": 8.5683,     \"2019-10-22T22:00:00.000Z\": 8.5654,     \"2019-10-22T23:00:00.000Z\": 8.5654,     \"2019-10-23T01:00:00.000Z\": 8.5625,     \"2019-10-23T02:00:00.000Z\": 8.5596,     \"2019-10-23T03:00:00.000Z\": 8.5596,     \"2019-10-23T04:00:00.000Z\": 8.5596,     \"2019-10-23T05:00:00.000Z\": 8.5596,     \"2019-10-23T06:00:00.000Z\": 8.548,     \"2019-10-23T07:00:00.000Z\": 8.548,     \"2019-10-23T08:00:00.000Z\": 8.5394,     \"2019-10-23T09:00:00.000Z\": 8.5394,     \"2019-10-23T10:00:00.000Z\": 8.5394,     \"2019-10-23T11:00:00.000Z\": 8.5336,     \"2019-10-23T12:00:00.000Z\": 8.5625,     \"2019-10-23T13:00:00.000Z\": 8.5683,     \"2019-10-23T14:00:00.000Z\": 8.5712,     \"2019-10-23T15:00:00.000Z\": 8.4728,     \"2019-10-23T16:00:00.000Z\": 8.4844,     \"2019-10-23T17:00:00.000Z\": 8.4815,     \"2019-10-23T18:00:00.000Z\": 8.5017,     \"2019-10-23T19:00:00.000Z\": 8.5104,     \"2019-10-23T20:00:00.000Z\": 8.5162,     \"2019-10-23T21:00:00.000Z\": 8.522,     \"2019-10-23T22:00:00.000Z\": 8.5162,     \"2019-10-23T23:00:00.000Z\": 8.5278,     \"2019-10-24T01:00:00.000Z\": 8.5162,     \"2019-10-24T02:00:00.000Z\": 8.5307,     \"2019-10-24T03:00:00.000Z\": 8.5394,     \"2019-10-24T04:00:00.000Z\": 8.5394,     \"2019-10-24T05:00:00.000Z\": 8.548,     \"2019-10-24T06:00:00.000Z\": 8.5075,     \"2019-10-24T07:00:00.000Z\": 8.5538,     \"2019-10-24T08:00:00.000Z\": 8.5741,     \"2019-10-24T09:00:00.000Z\": 8.5828,     \"2019-10-24T10:00:00.000Z\": 8.5914,     \"2019-10-24T11:00:00.000Z\": 8.5856,     \"2019-10-24T12:00:00.000Z\": 8.5914,     \"2019-10-24T13:00:00.000Z\": 8.5972,     \"2019-10-24T14:00:00.000Z\": 8.5972,     \"2019-10-24T15:00:00.000Z\": 8.6001,     \"2019-10-24T16:00:00.000Z\": 8.6088,     \"2019-10-24T17:00:00.000Z\": 8.6117,     \"2019-10-24T18:00:00.000Z\": 8.6175,     \"2019-10-24T19:00:00.000Z\": 8.6175,     \"2019-10-24T20:00:00.000Z\": 8.603,     \"2019-10-24T21:00:00.000Z\": 8.6059,     \"2019-10-24T22:00:00.000Z\": 8.603,     \"2019-10-24T23:00:00.000Z\": 8.6088,     \"2019-10-25T01:00:00.000Z\": 8.6117,     \"2019-10-25T02:00:00.000Z\": 8.6175,     \"2019-10-25T03:00:00.000Z\": 8.6146,     \"2019-10-25T04:00:00.000Z\": 8.6146,     \"2019-10-25T05:00:00.000Z\": 8.603,     \"2019-10-25T06:00:00.000Z\": 8.5683,     \"2019-10-25T07:00:00.000Z\": 8.5683,     \"2019-10-25T08:00:00.000Z\": 8.5625,     \"2019-10-25T09:00:00.000Z\": 8.5654,     \"2019-10-25T10:00:00.000Z\": 8.5741,     \"2019-10-25T11:00:00.000Z\": 8.5712,     \"2019-10-25T12:00:00.000Z\": 8.5654,     \"2019-10-25T13:00:00.000Z\": 8.5625,     \"2019-10-25T14:00:00.000Z\": 8.5596,     \"2019-10-25T15:00:00.000Z\": 8.5712,     \"2019-10-25T16:00:00.000Z\": 8.5654,     \"2019-10-25T17:00:00.000Z\": 8.5828,     \"2019-10-25T18:00:00.000Z\": 8.6001,     \"2019-10-25T19:00:00.000Z\": 8.5914,     \"2019-10-25T20:00:00.000Z\": 8.5914,     \"2019-10-25T21:00:00.000Z\": 8.5856,     \"2019-10-25T22:00:00.000Z\": 8.5914,     \"2019-10-25T23:00:00.000Z\": 8.5828,     \"2019-10-26T01:00:00.000Z\": 8.5914,     \"2019-10-26T02:00:00.000Z\": 8.5741,     \"2019-10-26T03:00:00.000Z\": 8.5943,     \"2019-10-26T04:00:00.000Z\": 8.5828,     \"2019-10-26T05:00:00.000Z\": 8.5885,     \"2019-10-26T06:00:00.000Z\": 8.5914,     \"2019-10-26T07:00:00.000Z\": 8.5943,     \"2019-10-26T08:00:00.000Z\": 8.5943,     \"2019-10-26T09:00:00.000Z\": 8.5943,     \"2019-10-26T10:00:00.000Z\": 8.5943,     \"2019-10-26T11:00:00.000Z\": 8.577,     \"2019-10-26T12:00:00.000Z\": 8.5972,     \"2019-10-26T13:00:00.000Z\": 8.6001,     \"2019-10-26T14:00:00.000Z\": 8.6146,     \"2019-10-26T15:00:00.000Z\": 8.6117,     \"2019-10-26T16:00:00.000Z\": 8.6001,     \"2019-10-26T17:00:00.000Z\": 8.5596,     \"2019-10-26T18:00:00.000Z\": 8.5509,     \"2019-10-26T19:00:00.000Z\": 8.5422,     \"2019-10-26T20:00:00.000Z\": 8.5336,     \"2019-10-26T21:00:00.000Z\": 8.5278,     \"2019-10-26T22:00:00.000Z\": 8.5278,     \"2019-10-26T23:00:00.000Z\": 8.5683,     \"2019-10-27T01:00:00.000Z\": 8.5712,     \"2019-10-27T02:00:00.000Z\": 8.5741,     \"2019-10-27T03:00:00.000Z\": 8.5741,     \"2019-10-27T04:00:00.000Z\": 8.5828,     \"2019-10-27T05:00:00.000Z\": 8.548,     \"2019-10-27T06:00:00.000Z\": 8.5741,     \"2019-10-27T07:00:00.000Z\": 8.5712,     \"2019-10-27T08:00:00.000Z\": 8.5509,     \"2019-10-27T09:00:00.000Z\": 8.5741,     \"2019-10-27T10:00:00.000Z\": 8.5741,     \"2019-10-27T11:00:00.000Z\": 8.5712,     \"2019-10-27T12:00:00.000Z\": 8.5712,     \"2019-10-27T13:00:00.000Z\": 8.5914,     \"2019-10-27T14:00:00.000Z\": 8.577,     \"2019-10-27T15:00:00.000Z\": 8.5741,     \"2019-10-27T16:00:00.000Z\": 8.5799,     \"2019-10-27T17:00:00.000Z\": 8.5828,     \"2019-10-27T18:00:00.000Z\": 8.5828,     \"2019-10-27T19:00:00.000Z\": 8.577,     \"2019-10-27T20:00:00.000Z\": 8.5625,     \"2019-10-27T21:00:00.000Z\": 8.5394,     \"2019-10-27T22:00:00.000Z\": 8.5509,     \"2019-10-27T23:00:00.000Z\": 8.5451,     \"2019-10-28T01:00:00.000Z\": 8.5394,     \"2019-10-28T02:00:00.000Z\": 8.5365,     \"2019-10-28T03:00:00.000Z\": 8.5191,     \"2019-10-28T04:00:00.000Z\": 8.5191,     \"2019-10-28T05:00:00.000Z\": 8.5046,     \"2019-10-28T06:00:00.000Z\": 8.4959,     \"2019-10-28T07:00:00.000Z\": 8.4873,     \"2019-10-28T08:00:00.000Z\": 8.4873,     \"2019-10-28T09:00:00.000Z\": 8.467,     \"2019-10-28T10:00:00.000Z\": 8.4525,     \"2019-10-28T11:00:00.000Z\": 8.4468,     \"2019-10-28T12:00:00.000Z\": 8.4381,     \"2019-10-28T13:00:00.000Z\": 8.4005,     \"2019-10-28T14:00:00.000Z\": 8.3773,     \"2019-10-28T15:00:00.000Z\": 8.3686,     \"2019-10-28T16:00:00.000Z\": 8.3657,     \"2019-10-28T17:00:00.000Z\": 8.3571,     \"2019-10-28T18:00:00.000Z\": 8.3831,     \"2019-10-28T19:00:00.000Z\": 8.3744,     \"2019-10-28T20:00:00.000Z\": 8.3686,     \"2019-10-28T21:00:00.000Z\": 8.36,     \"2019-10-28T22:00:00.000Z\": 8.3571,     \"2019-10-28T23:00:00.000Z\": 8.3513,     \"2019-10-29T01:00:00.000Z\": 8.3455,     \"2019-10-29T02:00:00.000Z\": 8.3368,     \"2019-10-29T03:00:00.000Z\": 8.3455,     \"2019-10-29T04:00:00.000Z\": 8.3455,     \"2019-10-29T05:00:00.000Z\": 8.3571,     \"2019-10-29T06:00:00.000Z\": 8.3513,     \"2019-10-29T07:00:00.000Z\": 8.3455,     \"2019-10-29T08:00:00.000Z\": 8.3397,     \"2019-10-29T09:00:00.000Z\": 8.3368,     \"2019-10-29T10:00:00.000Z\": 8.6522,     \"2019-10-29T11:00:00.000Z\": 8.6377,     \"2019-10-29T12:00:00.000Z\": 8.6638,     \"2019-10-29T13:00:00.000Z\": 8.6204,     \"2019-10-29T14:00:00.000Z\": 8.5943,     \"2019-10-29T15:00:00.000Z\": 8.6435,     \"2019-10-29T16:00:00.000Z\": 8.6522,     \"2019-10-29T17:00:00.000Z\": 8.6667,     \"2019-10-29T18:00:00.000Z\": 8.6638,     \"2019-10-29T19:00:00.000Z\": 8.6493,     \"2019-10-29T20:00:00.000Z\": 8.6493,     \"2019-10-29T21:00:00.000Z\": 8.6146,     \"2019-10-29T22:00:00.000Z\": 8.5885,     \"2019-10-29T23:00:00.000Z\": 8.6319,     \"2019-10-30T01:00:00.000Z\": 8.6233,     \"2019-10-30T02:00:00.000Z\": 8.6262,     \"2019-10-30T03:00:00.000Z\": 8.6493,     \"2019-10-30T04:00:00.000Z\": 8.6175,     \"2019-10-30T05:00:00.000Z\": 8.5856,     \"2019-10-30T06:00:00.000Z\": 8.6291,     \"2019-10-30T07:00:00.000Z\": 8.6348,     \"2019-10-30T08:00:00.000Z\": 8.5914,     \"2019-10-30T09:00:00.000Z\": 8.577,     \"2019-10-30T10:00:00.000Z\": 8.603,     \"2019-10-30T11:00:00.000Z\": 8.658,     \"2019-10-30T12:00:00.000Z\": 8.6204,     \"2019-10-30T13:00:00.000Z\": 8.6001,     \"2019-10-30T14:00:00.000Z\": 8.6233,     \"2019-10-30T15:00:00.000Z\": 8.658,     \"2019-10-30T16:00:00.000Z\": 8.6464,     \"2019-10-30T17:00:00.000Z\": 8.6319,     \"2019-10-30T18:00:00.000Z\": 8.6204,     \"2019-10-30T19:00:00.000Z\": 8.5972,     \"2019-10-30T20:00:00.000Z\": 8.5914,     \"2019-10-30T21:00:00.000Z\": 8.5712,     \"2019-10-30T22:00:00.000Z\": 8.5307,     \"2019-10-30T23:00:00.000Z\": 8.5596,     \"2019-10-31T01:00:00.000Z\": 8.577,     \"2019-10-31T02:00:00.000Z\": 8.5885,     \"2019-10-31T03:00:00.000Z\": 8.5799,     \"2019-10-31T04:00:00.000Z\": 8.5336,     \"2019-10-31T05:00:00.000Z\": 8.5683,     \"2019-10-31T06:00:00.000Z\": 8.5625,     \"2019-10-31T07:00:00.000Z\": 8.5712,     \"2019-10-31T08:00:00.000Z\": 8.5567,     \"2019-10-31T09:00:00.000Z\": 8.5046,     \"2019-10-31T10:00:00.000Z\": 8.5422,     \"2019-10-31T11:00:00.000Z\": 8.5394,     \"2019-10-31T12:00:00.000Z\": 8.5162,     \"2019-10-31T13:00:00.000Z\": 8.4641,     \"2019-10-31T14:00:00.000Z\": 8.4815,     \"2019-10-31T15:00:00.000Z\": 8.5162,     \"2019-10-31T16:00:00.000Z\": 8.5104,     \"2019-10-31T17:00:00.000Z\": 8.4902,     \"2019-10-31T18:00:00.000Z\": 8.4873,     \"2019-10-31T19:00:00.000Z\": 8.4873,     \"2019-10-31T20:00:00.000Z\": 8.4554,     \"2019-10-31T21:00:00.000Z\": 8.4612,     \"2019-10-31T22:00:00.000Z\": 8.4497,     \"2019-10-31T23:00:00.000Z\": 8.4699,     \"2019-11-01T01:00:00.000Z\": 8.4525,     \"2019-11-01T02:00:00.000Z\": 8.4931,     \"2019-11-01T03:00:00.000Z\": 8.4699,     \"2019-11-01T04:00:00.000Z\": 8.4381,     \"2019-11-01T05:00:00.000Z\": 8.4583,     \"2019-11-01T06:00:00.000Z\": 8.4294,     \"2019-11-01T07:00:00.000Z\": 8.4757,     \"2019-11-01T08:00:00.000Z\": 8.4757,     \"2019-11-01T09:00:00.000Z\": 8.4381,     \"2019-11-01T10:00:00.000Z\": 8.4583,     \"2019-11-01T11:00:00.000Z\": 8.4728,     \"2019-11-01T12:00:00.000Z\": 8.4786,     \"2019-11-01T13:00:00.000Z\": 8.4554,     \"2019-11-01T14:00:00.000Z\": 8.4294,     \"2019-11-01T15:00:00.000Z\": 8.4728,     \"2019-11-01T16:00:00.000Z\": 8.4902,     \"2019-11-01T17:00:00.000Z\": 8.4786,     \"2019-11-01T18:00:00.000Z\": 8.4757,     \"2019-11-01T19:00:00.000Z\": 8.4786,     \"2019-11-01T20:00:00.000Z\": 8.4757,     \"2019-11-01T21:00:00.000Z\": 8.4525,     \"2019-11-01T22:00:00.000Z\": 8.4554,     \"2019-11-01T23:00:00.000Z\": 8.4902,     \"2019-11-02T01:00:00.000Z\": 8.4815,     \"2019-11-02T02:00:00.000Z\": 8.4786,     \"2019-11-02T03:00:00.000Z\": 8.4873,     \"2019-11-02T04:00:00.000Z\": 8.4699,     \"2019-11-02T05:00:00.000Z\": 8.4352,     \"2019-11-02T06:00:00.000Z\": 8.4525,     \"2019-11-02T07:00:00.000Z\": 8.4699,     \"2019-11-02T08:00:00.000Z\": 8.467,     \"2019-11-02T09:00:00.000Z\": 8.4757,     \"2019-11-02T10:00:00.000Z\": 8.4757,     \"2019-11-02T11:00:00.000Z\": 8.4844,     \"2019-11-02T12:00:00.000Z\": 8.4786,     \"2019-11-02T13:00:00.000Z\": 8.4554,     \"2019-11-02T14:00:00.000Z\": 8.4988,     \"2019-11-02T15:00:00.000Z\": 8.4902,     \"2019-11-02T16:00:00.000Z\": 8.4959,     \"2019-11-02T17:00:00.000Z\": 8.4959,     \"2019-11-02T18:00:00.000Z\": 8.4959,     \"2019-11-02T19:00:00.000Z\": 8.4873,     \"2019-11-02T20:00:00.000Z\": 8.4757,     \"2019-11-02T21:00:00.000Z\": 8.4959,     \"2019-11-02T22:00:00.000Z\": 8.4757,     \"2019-11-02T23:00:00.000Z\": 8.4931,     \"2019-11-03T01:00:00.000Z\": 8.4844,     \"2019-11-03T02:00:00.000Z\": 8.5075,     \"2019-11-03T03:00:00.000Z\": 8.5104,     \"2019-11-03T04:00:00.000Z\": 8.5133,     \"2019-11-03T05:00:00.000Z\": 8.4988,     \"2019-11-03T06:00:00.000Z\": 8.4641,     \"2019-11-03T07:00:00.000Z\": 8.4959,     \"2019-11-03T08:00:00.000Z\": 8.5162,     \"2019-11-03T09:00:00.000Z\": 8.548,     \"2019-11-03T10:00:00.000Z\": 8.5336,     \"2019-11-03T11:00:00.000Z\": 8.5654,     \"2019-11-03T12:00:00.000Z\": 8.5509,     \"2019-11-03T13:00:00.000Z\": 8.5654,     \"2019-11-03T14:00:00.000Z\": 8.5567,     \"2019-11-03T15:00:00.000Z\": 8.5596,     \"2019-11-03T16:00:00.000Z\": 8.577,     \"2019-11-03T17:00:00.000Z\": 8.5741,     \"2019-11-03T18:00:00.000Z\": 8.577,     \"2019-11-03T19:00:00.000Z\": 8.5828,     \"2019-11-03T20:00:00.000Z\": 8.5712,     \"2019-11-03T21:00:00.000Z\": 8.5654,     \"2019-11-03T22:00:00.000Z\": 8.5856,     \"2019-11-03T23:00:00.000Z\": 8.5741,     \"2019-11-04T01:00:00.000Z\": 8.5943,     \"2019-11-04T02:00:00.000Z\": 8.6001,     \"2019-11-04T03:00:00.000Z\": 8.6175,     \"2019-11-04T04:00:00.000Z\": 8.6117,     \"2019-11-04T05:00:00.000Z\": 8.6117,     \"2019-11-04T06:00:00.000Z\": 8.6233,     \"2019-11-04T07:00:00.000Z\": 8.6319,     \"2019-11-04T08:00:00.000Z\": 8.6175,     \"2019-11-04T09:00:00.000Z\": 8.6001,     \"2019-11-04T10:00:00.000Z\": 8.6175,     \"2019-11-04T11:00:00.000Z\": 8.6406,     \"2019-11-04T12:00:00.000Z\": 8.6175,     \"2019-11-04T13:00:00.000Z\": 8.6088,     \"2019-11-04T14:00:00.000Z\": 8.6377,     \"2019-11-04T15:00:00.000Z\": 8.6319,     \"2019-11-04T16:00:00.000Z\": 8.6435,     \"2019-11-04T17:00:00.000Z\": 8.6435,     \"2019-11-04T18:00:00.000Z\": 8.6464,     \"2019-11-04T19:00:00.000Z\": 8.6319,     \"2019-11-04T20:00:00.000Z\": 8.6146,     \"2019-11-04T21:00:00.000Z\": 8.6464,     \"2019-11-04T22:00:00.000Z\": 8.6406,     \"2019-11-04T23:00:00.000Z\": 8.6175,     \"2019-11-05T01:00:00.000Z\": 8.6464,     \"2019-11-05T02:00:00.000Z\": 8.6551,     \"2019-11-05T03:00:00.000Z\": 8.6464,     \"2019-11-05T04:00:00.000Z\": 8.6464,     \"2019-11-05T05:00:00.000Z\": 8.6377,     \"2019-11-05T06:00:00.000Z\": 8.6667,     \"2019-11-05T07:00:00.000Z\": 8.6551,     \"2019-11-05T08:00:00.000Z\": 8.6551,     \"2019-11-05T09:00:00.000Z\": 8.6435,     \"2019-11-05T10:00:00.000Z\": 8.6493,     \"2019-11-05T11:00:00.000Z\": 8.6696,     \"2019-11-05T12:00:00.000Z\": 8.6464,     \"2019-11-05T13:00:00.000Z\": 8.6319,     \"2019-11-05T14:00:00.000Z\": 8.6551,     \"2019-11-05T15:00:00.000Z\": 8.6667,     \"2019-11-05T16:00:00.000Z\": 8.6725,     \"2019-11-05T17:00:00.000Z\": 8.6638,     \"2019-11-05T18:00:00.000Z\": 8.6725,     \"2019-11-05T19:00:00.000Z\": 8.6725,     \"2019-11-05T20:00:00.000Z\": 8.6696,     \"2019-11-05T21:00:00.000Z\": 8.6464,     \"2019-11-05T22:00:00.000Z\": 8.6638,     \"2019-11-05T23:00:00.000Z\": 8.6435,     \"2019-11-06T01:00:00.000Z\": 8.6609,     \"2019-11-06T02:00:00.000Z\": 8.6667,     \"2019-11-06T03:00:00.000Z\": 8.6725,     \"2019-11-06T04:00:00.000Z\": 8.6725,     \"2019-11-06T05:00:00.000Z\": 8.6638,     \"2019-11-06T06:00:00.000Z\": 8.6522,     \"2019-11-06T07:00:00.000Z\": 8.6725,     \"2019-11-06T08:00:00.000Z\": 8.6638,     \"2019-11-06T09:00:00.000Z\": 8.6377,     \"2019-11-06T10:00:00.000Z\": 8.6551,     \"2019-11-06T11:00:00.000Z\": 8.658,     \"2019-11-06T12:00:00.000Z\": 8.6406,     \"2019-11-06T13:00:00.000Z\": 8.658,     \"2019-11-06T14:00:00.000Z\": 8.6146,     \"2019-11-06T15:00:00.000Z\": 8.5885,     \"2019-11-06T16:00:00.000Z\": 8.6638,     \"2019-11-06T17:00:00.000Z\": 8.658,     \"2019-11-06T18:00:00.000Z\": 8.6638,     \"2019-11-06T19:00:00.000Z\": 8.6609,     \"2019-11-06T20:00:00.000Z\": 8.6638,     \"2019-11-06T21:00:00.000Z\": 8.6319,     \"2019-11-06T22:00:00.000Z\": 8.6348,     \"2019-11-06T23:00:00.000Z\": 8.6464,     \"2019-11-07T01:00:00.000Z\": 8.6435,     \"2019-11-07T02:00:00.000Z\": 8.6551,     \"2019-11-07T03:00:00.000Z\": 8.6377,     \"2019-11-07T04:00:00.000Z\": 8.6522,     \"2019-11-07T05:00:00.000Z\": 8.6175,     \"2019-11-07T06:00:00.000Z\": 8.6319,     \"2019-11-07T07:00:00.000Z\": 8.6377,     \"2019-11-07T08:00:00.000Z\": 8.6001,     \"2019-11-07T09:00:00.000Z\": 8.5828,     \"2019-11-07T10:00:00.000Z\": 8.5712,     \"2019-11-07T11:00:00.000Z\": 7.2141,     \"2019-11-07T12:00:00.000Z\": 7.3125,     \"2019-11-07T13:00:00.000Z\": 7.2865,     \"2019-11-07T14:00:00.000Z\": 7.3125,     \"2019-11-07T15:00:00.000Z\": 7.2807,     \"2019-11-07T16:00:00.000Z\": 7.3241,     \"2019-11-07T17:00:00.000Z\": 7.3154,     \"2019-11-07T18:00:00.000Z\": 7.2922,     \"2019-11-07T19:00:00.000Z\": 7.2865,     \"2019-11-07T20:00:00.000Z\": 7.3038,     \"2019-11-07T21:00:00.000Z\": 7.2575,     \"2019-11-07T22:00:00.000Z\": 7.2951,     \"2019-11-07T23:00:00.000Z\": 7.2199,     \"2019-11-08T01:00:00.000Z\": 7.2054,     \"2019-11-08T02:00:00.000Z\": 7.2199,     \"2019-11-08T03:00:00.000Z\": 7.1128,     \"2019-11-08T04:00:00.000Z\": 7.1823,     \"2019-11-08T05:00:00.000Z\": 7.1071,     \"2019-11-08T06:00:00.000Z\": 7.2112,     \"2019-11-08T07:00:00.000Z\": 7.2083,     \"2019-11-08T08:00:00.000Z\": 7.2662,     \"2019-11-08T09:00:00.000Z\": 7.1765,     \"2019-11-08T10:00:00.000Z\": 7.2083,     \"2019-11-08T11:00:00.000Z\": 7.1563,     \"2019-11-08T12:00:00.000Z\": 7.2228,     \"2019-11-08T13:00:00.000Z\": 7.2025,     \"2019-11-08T14:00:00.000Z\": 7.1852,     \"2019-11-08T15:00:00.000Z\": 7.1823,     \"2019-11-08T16:00:00.000Z\": 7.1997,     \"2019-11-08T17:00:00.000Z\": 7.191,     \"2019-11-08T18:00:00.000Z\": 7.1997,     \"2019-11-08T19:00:00.000Z\": 7.1765,     \"2019-11-08T20:00:00.000Z\": 7.1823,     \"2019-11-08T21:00:00.000Z\": 7.1389,     \"2019-11-08T22:00:00.000Z\": 7.1534,     \"2019-11-08T23:00:00.000Z\": 7.1244,     \"2019-11-09T01:00:00.000Z\": 7.136,     \"2019-11-09T02:00:00.000Z\": 7.162,     \"2019-11-09T03:00:00.000Z\": 7.162,     \"2019-11-09T04:00:00.000Z\": 7.1649,     \"2019-11-09T05:00:00.000Z\": 7.1071,     \"2019-11-09T06:00:00.000Z\": 7.1302,     \"2019-11-09T07:00:00.000Z\": 7.0608,     \"2019-11-09T08:00:00.000Z\": 7.1244,     \"2019-11-09T09:00:00.000Z\": 7.0463,     \"2019-11-09T10:00:00.000Z\": 7.1273,     \"2019-11-09T11:00:00.000Z\": 7.1013,     \"2019-11-09T12:00:00.000Z\": 7.1534,     \"2019-11-09T13:00:00.000Z\": 7.1563,     \"2019-11-09T14:00:00.000Z\": 7.1389,     \"2019-11-09T15:00:00.000Z\": 7.0984,     \"2019-11-09T16:00:00.000Z\": 7.1244,     \"2019-11-09T17:00:00.000Z\": 7.0984,     \"2019-11-09T18:00:00.000Z\": 7.1273,     \"2019-11-09T19:00:00.000Z\": 7.081,     \"2019-11-09T20:00:00.000Z\": 7.081,     \"2019-11-09T21:00:00.000Z\": 7.0087,     \"2019-11-09T22:00:00.000Z\": 7.0405,     \"2019-11-09T23:00:00.000Z\": 6.9797,     \"2019-11-10T01:00:00.000Z\": 6.9711,     \"2019-11-10T02:00:00.000Z\": 7,     \"2019-11-10T03:00:00.000Z\": 7.0608,     \"2019-11-10T04:00:00.000Z\": 7.0376,     \"2019-11-10T05:00:00.000Z\": 6.9508,     \"2019-11-10T06:00:00.000Z\": 7.026,     \"2019-11-10T07:00:00.000Z\": 6.9074,     \"2019-11-10T08:00:00.000Z\": 7.0376,     \"2019-11-10T09:00:00.000Z\": 6.9797,     \"2019-11-10T10:00:00.000Z\": 6.8322,     \"2019-11-10T11:00:00.000Z\": 7,     \"2019-11-10T12:00:00.000Z\": 7.0174,     \"2019-11-10T13:00:00.000Z\": 7.0174,     \"2019-11-10T14:00:00.000Z\": 6.9682,     \"2019-11-10T15:00:00.000Z\": 6.9826,     \"2019-11-10T16:00:00.000Z\": 6.9769,     \"2019-11-10T17:00:00.000Z\": 7.0087,     \"2019-11-10T18:00:00.000Z\": 6.9826,     \"2019-11-10T19:00:00.000Z\": 7.0116,     \"2019-11-10T20:00:00.000Z\": 6.9769,     \"2019-11-10T21:00:00.000Z\": 6.9595,     \"2019-11-10T22:00:00.000Z\": 6.9277,     \"2019-11-10T23:00:00.000Z\": 6.9334,     \"2019-11-11T01:00:00.000Z\": 6.919,     \"2019-11-11T02:00:00.000Z\": 6.9219,     \"2019-11-11T03:00:00.000Z\": 6.9363,     \"2019-11-11T04:00:00.000Z\": 6.945,     \"2019-11-11T05:00:00.000Z\": 6.8061,     \"2019-11-11T06:00:00.000Z\": 6.9074,     \"2019-11-11T07:00:00.000Z\": 6.9595,     \"2019-11-11T08:00:00.000Z\": 6.9797,     \"2019-11-11T09:00:00.000Z\": 6.9537,     \"2019-11-11T10:00:00.000Z\": 6.9248,     \"2019-11-11T11:00:00.000Z\": 6.9421,     \"2019-11-11T12:00:00.000Z\": 6.9074,     \"2019-11-11T13:00:00.000Z\": 6.7338,     \"2019-11-11T14:00:00.000Z\": 6.8872,     \"2019-11-11T15:00:00.000Z\": 6.8987,     \"2019-11-11T16:00:00.000Z\": 6.945,     \"2019-11-11T17:00:00.000Z\": 6.9711,     \"2019-11-11T18:00:00.000Z\": 6.945,     \"2019-11-11T19:00:00.000Z\": 6.9421,     \"2019-11-11T20:00:00.000Z\": 6.9161,     \"2019-11-11T21:00:00.000Z\": 6.9363,     \"2019-11-11T22:00:00.000Z\": 6.8727,     \"2019-11-11T23:00:00.000Z\": 6.9479,     \"2019-11-12T01:00:00.000Z\": 7.0087,     \"2019-11-12T02:00:00.000Z\": 6.9508,     \"2019-11-12T03:00:00.000Z\": 7,     \"2019-11-12T04:00:00.000Z\": 6.9682,     \"2019-11-12T05:00:00.000Z\": 6.9363,     \"2019-11-12T06:00:00.000Z\": 6.9074,     \"2019-11-12T07:00:00.000Z\": 6.9566,     \"2019-11-12T08:00:00.000Z\": 6.9537,     \"2019-11-12T09:00:00.000Z\": 6.8785,     \"2019-11-12T10:00:00.000Z\": 6.9306,     \"2019-11-12T11:00:00.000Z\": 6.9566,     \"2019-11-12T12:00:00.000Z\": 6.9508,     \"2019-11-12T13:00:00.000Z\": 6.945,     \"2019-11-12T14:00:00.000Z\": 6.9508,     \"2019-11-12T15:00:00.000Z\": 6.9537,     \"2019-11-12T16:00:00.000Z\": 6.9942,     \"2019-11-12T17:00:00.000Z\": 6.974,     \"2019-11-12T18:00:00.000Z\": 6.9537,     \"2019-11-12T19:00:00.000Z\": 6.9566,     \"2019-11-12T20:00:00.000Z\": 6.9769,     \"2019-11-12T21:00:00.000Z\": 6.9334,     \"2019-11-12T22:00:00.000Z\": 6.9392,     \"2019-11-12T23:00:00.000Z\": 6.9248,     \"2019-11-13T01:00:00.000Z\": 6.9277,     \"2019-11-13T02:00:00.000Z\": 6.9884,     \"2019-11-13T03:00:00.000Z\": 7.0174,     \"2019-11-13T04:00:00.000Z\": 6.9219,     \"2019-11-13T05:00:00.000Z\": 6.8872,     \"2019-11-13T06:00:00.000Z\": 6.9537,     \"2019-11-13T07:00:00.000Z\": 6.9363,     \"2019-11-13T08:00:00.000Z\": 6.9479,     \"2019-11-13T09:00:00.000Z\": 6.8524,     \"2019-11-13T10:00:00.000Z\": 6.8872,     \"2019-11-13T11:00:00.000Z\": 6.8785,     \"2019-11-13T12:00:00.000Z\": 6.9334,     \"2019-11-13T13:00:00.000Z\": 6.8466,     \"2019-11-13T14:00:00.000Z\": 6.838,     \"2019-11-13T15:00:00.000Z\": 6.9161,     \"2019-11-13T16:00:00.000Z\": 6.9363,     \"2019-11-13T17:00:00.000Z\": 6.9566,     \"2019-11-13T18:00:00.000Z\": 6.9421,     \"2019-11-13T19:00:00.000Z\": 6.8958,     \"2019-11-13T20:00:00.000Z\": 6.8785,     \"2019-11-13T21:00:00.000Z\": 6.8785,     \"2019-11-13T22:00:00.000Z\": 6.8958,     \"2019-11-13T23:00:00.000Z\": 6.89,     \"2019-11-14T01:00:00.000Z\": 6.9074,     \"2019-11-14T02:00:00.000Z\": 6.9508,     \"2019-11-14T03:00:00.000Z\": 6.9508,     \"2019-11-14T04:00:00.000Z\": 6.9132,     \"2019-11-14T05:00:00.000Z\": 6.8524,     \"2019-11-14T06:00:00.000Z\": 6.9074,     \"2019-11-14T07:00:00.000Z\": 6.9334,     \"2019-11-14T08:00:00.000Z\": 6.8582,     \"2019-11-14T09:00:00.000Z\": 6.8438,     \"2019-11-14T10:00:00.000Z\": 6.8785,     \"2019-11-14T11:00:00.000Z\": 6.8264,     \"2019-11-14T12:00:00.000Z\": 6.7975,     \"2019-11-14T13:00:00.000Z\": 6.7541,     \"2019-11-14T14:00:00.000Z\": 6.7598,     \"2019-11-14T15:00:00.000Z\": 6.7975,     \"2019-11-14T16:00:00.000Z\": 6.8409,     \"2019-11-14T17:00:00.000Z\": 6.8727,     \"2019-11-14T18:00:00.000Z\": 6.8466,     \"2019-11-14T19:00:00.000Z\": 6.838,     \"2019-11-14T20:00:00.000Z\": 6.8351,     \"2019-11-14T21:00:00.000Z\": 6.7975,     \"2019-11-14T22:00:00.000Z\": 6.7396,     \"2019-11-14T23:00:00.000Z\": 6.7541,     \"2019-11-15T01:00:00.000Z\": 6.8235,     \"2019-11-15T02:00:00.000Z\": 6.8524,     \"2019-11-15T03:00:00.000Z\": 6.8872,     \"2019-11-15T04:00:00.000Z\": 6.8351,     \"2019-11-15T05:00:00.000Z\": 6.7975,     \"2019-11-15T06:00:00.000Z\": 6.7917,     \"2019-11-15T07:00:00.000Z\": 6.8322,     \"2019-11-15T08:00:00.000Z\": 6.8553,     \"2019-11-15T09:00:00.000Z\": 6.8148,     \"2019-11-15T10:00:00.000Z\": 6.7078,     \"2019-11-15T11:00:00.000Z\": 6.7975,     \"2019-11-15T12:00:00.000Z\": 6.8235,     \"2019-11-15T13:00:00.000Z\": 6.7193,     \"2019-11-15T14:00:00.000Z\": 6.7946,     \"2019-11-15T15:00:00.000Z\": 6.8032,     \"2019-11-15T16:00:00.000Z\": 6.8524,     \"2019-11-15T17:00:00.000Z\": 6.8264,     \"2019-11-15T18:00:00.000Z\": 6.7975,     \"2019-11-15T19:00:00.000Z\": 6.7859,     \"2019-11-15T20:00:00.000Z\": 6.7598,     \"2019-11-15T21:00:00.000Z\": 6.6817,     \"2019-11-15T22:00:00.000Z\": 6.7714,     \"2019-11-15T23:00:00.000Z\": 6.7164,     \"2019-11-16T01:00:00.000Z\": 6.7425,     \"2019-11-16T02:00:00.000Z\": 6.8409,     \"2019-11-16T03:00:00.000Z\": 6.8438,     \"2019-11-16T04:00:00.000Z\": 6.8061,     \"2019-11-16T05:00:00.000Z\": 6.7164,     \"2019-11-16T06:00:00.000Z\": 6.7743,     \"2019-11-16T07:00:00.000Z\": 6.702,     \"2019-11-16T08:00:00.000Z\": 6.7888,     \"2019-11-16T09:00:00.000Z\": 6.7251,     \"2019-11-16T10:00:00.000Z\": 6.7946,     \"2019-11-16T11:00:00.000Z\": 6.8409,     \"2019-11-16T12:00:00.000Z\": 6.8351,     \"2019-11-16T13:00:00.000Z\": 6.809,     \"2019-11-16T14:00:00.000Z\": 6.8032,     \"2019-11-16T15:00:00.000Z\": 6.8148,     \"2019-11-16T16:00:00.000Z\": 6.8148,     \"2019-11-16T17:00:00.000Z\": 6.8206,     \"2019-11-16T18:00:00.000Z\": 6.809,     \"2019-11-16T19:00:00.000Z\": 6.7685,     \"2019-11-16T20:00:00.000Z\": 6.6846,     \"2019-11-16T21:00:00.000Z\": 6.7454,     \"2019-11-16T22:00:00.000Z\": 6.6846,     \"2019-11-16T23:00:00.000Z\": 6.7483,     \"2019-11-17T01:00:00.000Z\": 6.783,     \"2019-11-17T02:00:00.000Z\": 6.7975,     \"2019-11-17T03:00:00.000Z\": 6.8264,     \"2019-11-17T04:00:00.000Z\": 6.7975,     \"2019-11-17T05:00:00.000Z\": 6.7222,     \"2019-11-17T06:00:00.000Z\": 6.7598,     \"2019-11-17T07:00:00.000Z\": 6.7049,     \"2019-11-17T08:00:00.000Z\": 6.7975,     \"2019-11-17T09:00:00.000Z\": 6.7772,     \"2019-11-17T10:00:00.000Z\": 6.6412,     \"2019-11-17T11:00:00.000Z\": 6.7801,     \"2019-11-17T12:00:00.000Z\": 6.7685,     \"2019-11-17T13:00:00.000Z\": 6.7049,     \"2019-11-17T14:00:00.000Z\": 6.6644,     \"2019-11-17T15:00:00.000Z\": 6.7396,     \"2019-11-17T16:00:00.000Z\": 6.7772,     \"2019-11-17T17:00:00.000Z\": 6.7888,     \"2019-11-17T18:00:00.000Z\": 6.7772,     \"2019-11-17T19:00:00.000Z\": 6.7598,     \"2019-11-17T20:00:00.000Z\": 6.7251,     \"2019-11-17T21:00:00.000Z\": 6.6933,     \"2019-11-17T22:00:00.000Z\": 6.7598,     \"2019-11-17T23:00:00.000Z\": 6.702,     \"2019-11-18T01:00:00.000Z\": 6.7338,     \"2019-11-18T02:00:00.000Z\": 6.7685,     \"2019-11-18T03:00:00.000Z\": 6.7367,     \"2019-11-18T04:00:00.000Z\": 6.8148,     \"2019-11-18T05:00:00.000Z\": 6.7801,     \"2019-11-18T06:00:00.000Z\": 6.7367,     \"2019-11-18T07:00:00.000Z\": 6.7627,     \"2019-11-18T08:00:00.000Z\": 6.7772,     \"2019-11-18T09:00:00.000Z\": 6.7425,     \"2019-11-18T10:00:00.000Z\": 6.7367,     \"2019-11-18T11:00:00.000Z\": 6.7425,     \"2019-11-18T12:00:00.000Z\": 6.7975,     \"2019-11-18T13:00:00.000Z\": 6.8032,     \"2019-11-18T14:00:00.000Z\": 6.7801,     \"2019-11-18T15:00:00.000Z\": 6.7222,     \"2019-11-18T16:00:00.000Z\": 6.7627,     \"2019-11-18T17:00:00.000Z\": 6.809,     \"2019-11-18T18:00:00.000Z\": 6.7714,     \"2019-11-18T19:00:00.000Z\": 6.7714,     \"2019-11-18T20:00:00.000Z\": 6.7483,     \"2019-11-18T21:00:00.000Z\": 6.6875,     \"2019-11-18T22:00:00.000Z\": 6.7627,     \"2019-11-18T23:00:00.000Z\": 6.7164,     \"2019-11-19T01:00:00.000Z\": 6.7888,     \"2019-11-19T02:00:00.000Z\": 6.8495,     \"2019-11-19T03:00:00.000Z\": 6.8264,     \"2019-11-19T04:00:00.000Z\": 6.7598,     \"2019-11-19T05:00:00.000Z\": 6.7338,     \"2019-11-19T06:00:00.000Z\": 6.7946,     \"2019-11-19T07:00:00.000Z\": 6.8206,     \"2019-11-19T08:00:00.000Z\": 6.7946,     \"2019-11-19T09:00:00.000Z\": 6.7598,     \"2019-11-19T10:00:00.000Z\": 6.7743,     \"2019-11-19T11:00:00.000Z\": 6.7888,     \"2019-11-19T12:00:00.000Z\": 6.8061,     \"2019-11-19T13:00:00.000Z\": 6.7367,     \"2019-11-19T14:00:00.000Z\": 6.8264,     \"2019-11-19T15:00:00.000Z\": 6.8235,     \"2019-11-19T16:00:00.000Z\": 6.7946,     \"2019-11-19T17:00:00.000Z\": 6.8061,     \"2019-11-19T18:00:00.000Z\": 6.838,     \"2019-11-19T19:00:00.000Z\": 6.8553,     \"2019-11-19T20:00:00.000Z\": 6.8003,     \"2019-11-19T21:00:00.000Z\": 6.7251,     \"2019-11-19T22:00:00.000Z\": 6.7598,     \"2019-11-19T23:00:00.000Z\": 6.7627,     \"2019-11-20T01:00:00.000Z\": 6.8177,     \"2019-11-20T02:00:00.000Z\": 6.8148,     \"2019-11-20T03:00:00.000Z\": 6.7975,     \"2019-11-20T04:00:00.000Z\": 6.7888,     \"2019-11-20T05:00:00.000Z\": 6.7309,     \"2019-11-20T06:00:00.000Z\": 6.7483,     \"2019-11-20T07:00:00.000Z\": 6.8148,     \"2019-11-20T08:00:00.000Z\": 6.7396,     \"2019-11-20T09:00:00.000Z\": 6.6701,     \"2019-11-20T10:00:00.000Z\": 5.6516,     \"2019-11-20T11:00:00.000Z\": 5.6516,     \"2019-11-20T12:00:00.000Z\": 5.5475,     \"2019-11-20T13:00:00.000Z\": 5.7095,     \"2019-11-20T14:00:00.000Z\": 5.7095,     \"2019-11-20T15:00:00.000Z\": 5.7066,     \"2019-11-20T16:00:00.000Z\": 6.0509,     \"2019-11-20T17:00:00.000Z\": 5.967,     \"2019-11-20T18:00:00.000Z\": 6.4039,     \"2019-11-20T19:00:00.000Z\": 6.919,     \"2019-11-20T20:00:00.000Z\": 7.1071,     \"2019-11-20T21:00:00.000Z\": 6.5486,     \"2019-11-20T22:00:00.000Z\": 6.4676,     \"2019-11-20T23:00:00.000Z\": 6.8409,     \"2019-11-21T01:00:00.000Z\": 6.8206,     \"2019-11-21T02:00:00.000Z\": 6.8785,     \"2019-11-21T03:00:00.000Z\": 6.864,     \"2019-11-21T04:00:00.000Z\": 7.3935,     \"2019-11-21T05:00:00.000Z\": 7.1997,     \"2019-11-21T06:00:00.000Z\": 7.3877,     \"2019-11-21T07:00:00.000Z\": 7.3009,     \"2019-11-21T08:00:00.000Z\": 6.9682,     \"2019-11-21T09:00:00.000Z\": 7.2054,     \"2019-11-21T10:00:00.000Z\": 7.1765,     \"2019-11-21T11:00:00.000Z\": 7.2286,     \"2019-11-21T12:00:00.000Z\": 7.6163,     \"2019-11-21T13:00:00.000Z\": 7.4398,     \"2019-11-21T14:00:00.000Z\": 6.7743,     \"2019-11-21T15:00:00.000Z\": 7.434,     \"2019-11-21T16:00:00.000Z\": 7.3993,     \"2019-11-21T17:00:00.000Z\": 7.3646,     \"2019-11-21T18:00:00.000Z\": 7.2228,     \"2019-11-21T19:00:00.000Z\": 6.9913,     \"2019-11-21T20:00:00.000Z\": 7.0492,     \"2019-11-21T21:00:00.000Z\": 7.0984,     \"2019-11-21T22:00:00.000Z\": 7.1707,     \"2019-11-21T23:00:00.000Z\": 7.1505,     \"2019-11-22T01:00:00.000Z\": 7.5671,     \"2019-11-22T02:00:00.000Z\": 7.272,     \"2019-11-22T03:00:00.000Z\": 7.1794,     \"2019-11-22T04:00:00.000Z\": 7.3588,     \"2019-11-22T05:00:00.000Z\": 7.1852,     \"2019-11-22T06:00:00.000Z\": 7.1215,     \"2019-11-22T07:00:00.000Z\": 7.8131,     \"2019-11-22T08:00:00.000Z\": 7.6019,     \"2019-11-22T09:00:00.000Z\": 7.7639,     \"2019-11-22T10:00:00.000Z\": 7.6192,     \"2019-11-22T11:00:00.000Z\": 7.5932,     \"2019-11-22T12:00:00.000Z\": 7.6655,     \"2019-11-22T13:00:00.000Z\": 7.6453,     \"2019-11-22T14:00:00.000Z\": 7.9057,     \"2019-11-22T15:00:00.000Z\": 7.4977,     \"2019-11-22T16:00:00.000Z\": 7.4398,     \"2019-11-22T17:00:00.000Z\": 7.6076,     \"2019-11-22T18:00:00.000Z\": 7.434,     \"2019-11-22T19:00:00.000Z\": 7.4919,     \"2019-11-22T20:00:00.000Z\": 8.0677,     \"2019-11-22T21:00:00.000Z\": 7.7407,     \"2019-11-22T22:00:00.000Z\": 7.5816,     \"2019-11-22T23:00:00.000Z\": 8.1863,     \"2019-11-23T01:00:00.000Z\": 7.5295,     \"2019-11-23T02:00:00.000Z\": 8.0098,     \"2019-11-23T03:00:00.000Z\": 7.5295,     \"2019-11-23T04:00:00.000Z\": 7.6453,     \"2019-11-23T05:00:00.000Z\": 7.515,     \"2019-11-23T06:00:00.000Z\": 7.5093,     \"2019-11-23T07:00:00.000Z\": 7.4659,     \"2019-11-23T08:00:00.000Z\": 7.5729,     \"2019-11-23T09:00:00.000Z\": 7.5266,     \"2019-11-23T10:00:00.000Z\": 7.7378,     \"2019-11-23T11:00:00.000Z\": 7.842,     \"2019-11-23T12:00:00.000Z\": 7.8507,     \"2019-11-23T13:00:00.000Z\": 7.9635,     \"2019-11-23T14:00:00.000Z\": 7.9462,     \"2019-11-23T15:00:00.000Z\": 7.952,     \"2019-11-23T16:00:00.000Z\": 7.8449,     \"2019-11-23T17:00:00.000Z\": 7.9404,     \"2019-11-23T18:00:00.000Z\": 7.9983,     \"2019-11-23T19:00:00.000Z\": 7.9491,     \"2019-11-23T20:00:00.000Z\": 8.0069,     \"2019-11-23T21:00:00.000Z\": 8.0735,     \"2019-11-23T22:00:00.000Z\": 8.0417,     \"2019-11-23T23:00:00.000Z\": 7.816,     \"2019-11-24T01:00:00.000Z\": 7.8623,     \"2019-11-24T02:00:00.000Z\": 7.8449,     \"2019-11-24T03:00:00.000Z\": 7.8275,     \"2019-11-24T04:00:00.000Z\": 7.787,     \"2019-11-24T05:00:00.000Z\": 7.8362,     \"2019-11-24T06:00:00.000Z\": 7.7668,     \"2019-11-24T07:00:00.000Z\": 7.5932,     \"2019-11-24T08:00:00.000Z\": 7.6568,     \"2019-11-24T09:00:00.000Z\": 7.4659,     \"2019-11-24T10:00:00.000Z\": 7.5035,     \"2019-11-24T11:00:00.000Z\": 7.5816,     \"2019-11-24T12:00:00.000Z\": 7.6076,     \"2019-11-24T13:00:00.000Z\": 7.599,     \"2019-11-24T14:00:00.000Z\": 7.6568,     \"2019-11-24T15:00:00.000Z\": 7.625,     \"2019-11-24T16:00:00.000Z\": 7.6308,     \"2019-11-24T17:00:00.000Z\": 7.7147,     \"2019-11-24T18:00:00.000Z\": 7.5006,     \"2019-11-24T19:00:00.000Z\": 7.4716,     \"2019-11-24T20:00:00.000Z\": 7.4919,     \"2019-11-24T21:00:00.000Z\": 7.3646,     \"2019-11-24T22:00:00.000Z\": 7.3964,     \"2019-11-24T23:00:00.000Z\": 7.4919,     \"2019-11-25T01:00:00.000Z\": 7.787,     \"2019-11-25T02:00:00.000Z\": 7.4427,     \"2019-11-25T03:00:00.000Z\": 7.8189,     \"2019-11-25T04:00:00.000Z\": 7.4774,     \"2019-11-25T05:00:00.000Z\": 7.9578,     \"2019-11-25T06:00:00.000Z\": 7.8738,     \"2019-11-25T07:00:00.000Z\": 8.3802,     \"2019-11-25T08:00:00.000Z\": 8.1719,     \"2019-11-25T09:00:00.000Z\": 7.5064,     \"2019-11-25T10:00:00.000Z\": 8.1632,     \"2019-11-25T11:00:00.000Z\": 8.088,     \"2019-11-25T12:00:00.000Z\": 7.9578,     \"2019-11-25T13:00:00.000Z\": 7.6424,     \"2019-11-25T14:00:00.000Z\": 7.7841,     \"2019-11-25T15:00:00.000Z\": 7.6308,     \"2019-11-25T16:00:00.000Z\": 7.5932,     \"2019-11-25T17:00:00.000Z\": 7.5064,     \"2019-11-25T18:00:00.000Z\": 8.1343,     \"2019-11-25T19:00:00.000Z\": 8.305,     \"2019-11-25T20:00:00.000Z\": 8.0503,     \"2019-11-25T21:00:00.000Z\": 8.0012,     \"2019-11-25T22:00:00.000Z\": 8.0012,     \"2019-11-25T23:00:00.000Z\": 8.0069,     \"2019-11-26T01:00:00.000Z\": 7.8941,     \"2019-11-26T02:00:00.000Z\": 7.8825,     \"2019-11-26T03:00:00.000Z\": 7.6944,     \"2019-11-26T04:00:00.000Z\": 8.0301,     \"2019-11-26T05:00:00.000Z\": 8.088,     \"2019-11-26T06:00:00.000Z\": 8.0648,     \"2019-11-26T07:00:00.000Z\": 7.9867,     \"2019-11-26T08:00:00.000Z\": 7.8507,     \"2019-11-26T09:00:00.000Z\": 7.8565,     \"2019-11-26T10:00:00.000Z\": 7.9722,     \"2019-11-26T11:00:00.000Z\": 8.0446,     \"2019-11-26T12:00:00.000Z\": 8.1748,     \"2019-11-26T13:00:00.000Z\": 7.8362,     \"2019-11-26T14:00:00.000Z\": 8.0648,     \"2019-11-26T15:00:00.000Z\": 8.0793,     \"2019-11-26T16:00:00.000Z\": 8.088,     \"2019-11-26T17:00:00.000Z\": 8.0793,     \"2019-11-26T18:00:00.000Z\": 8.0532,     \"2019-11-26T19:00:00.000Z\": 8.0677,     \"2019-11-26T20:00:00.000Z\": 8.0475,     \"2019-11-26T21:00:00.000Z\": 8.0156,     \"2019-11-26T22:00:00.000Z\": 7.9635,     \"2019-11-26T23:00:00.000Z\": 7.8854,     \"2019-11-27T01:00:00.000Z\": 7.7813,     \"2019-11-27T02:00:00.000Z\": 8.0243,     \"2019-11-27T03:00:00.000Z\": 8.195,     \"2019-11-27T04:00:00.000Z\": 8.1632,     \"2019-11-27T05:00:00.000Z\": 8.0272,     \"2019-11-27T06:00:00.000Z\": 7.9983,     \"2019-11-27T07:00:00.000Z\": 8.1574,     \"2019-11-27T08:00:00.000Z\": 8.2095,     \"2019-11-27T09:00:00.000Z\": 8.3079,     \"2019-11-27T10:00:00.000Z\": 8.331,     \"2019-11-27T11:00:00.000Z\": 8.3166,     \"2019-11-27T12:00:00.000Z\": 8.3426,     \"2019-11-27T13:00:00.000Z\": 8.3802,     \"2019-11-27T14:00:00.000Z\": 8.386,     \"2019-11-27T15:00:00.000Z\": 8.2703,     \"2019-11-27T16:00:00.000Z\": 8.3021,     \"2019-11-27T17:00:00.000Z\": 8.2442,     \"2019-11-27T18:00:00.000Z\": 8.1892,     \"2019-11-27T19:00:00.000Z\": 8.2269,     \"2019-11-27T20:00:00.000Z\": 8.3079,     \"2019-11-27T21:00:00.000Z\": 8.386,     \"2019-11-27T22:00:00.000Z\": 8.6146,     \"2019-11-27T23:00:00.000Z\": 8.5538,     \"2019-11-28T01:00:00.000Z\": 8.713,     \"2019-11-28T02:00:00.000Z\": 8.7072,     \"2019-11-28T03:00:00.000Z\": 8.739,     \"2019-11-28T04:00:00.000Z\": 8.765,     \"2019-11-28T05:00:00.000Z\": 8.794,     \"2019-11-28T06:00:00.000Z\": 8.7998,     \"2019-11-28T07:00:00.000Z\": 8.7824,     \"2019-11-28T08:00:00.000Z\": 8.8171,     \"2019-11-28T09:00:00.000Z\": 8.8519,     \"2019-11-28T10:00:00.000Z\": 9.5926,     \"2019-11-28T11:00:00.000Z\": 10.1858,     \"2019-11-28T12:00:00.000Z\": 9.9716,     \"2019-11-28T13:00:00.000Z\": 9.4334,     \"2019-11-28T14:00:00.000Z\": 9.3814,     \"2019-11-28T15:00:00.000Z\": 10.3478,     \"2019-11-28T16:00:00.000Z\": 9.6013,     \"2019-11-28T17:00:00.000Z\": 10.912,     \"2019-11-28T18:00:00.000Z\": 10.64,     \"2019-11-28T19:00:00.000Z\": 10.9873,     \"2019-11-28T20:00:00.000Z\": 11.1522,     \"2019-11-28T21:00:00.000Z\": 11.1233,     \"2019-11-28T22:00:00.000Z\": 11.1493,     \"2019-11-28T23:00:00.000Z\": 10.9149,     \"2019-11-29T01:00:00.000Z\": 10.533,     \"2019-11-29T02:00:00.000Z\": 10.559,     \"2019-11-29T03:00:00.000Z\": 9.7662,     \"2019-11-29T04:00:00.000Z\": 11.2332,     \"2019-11-29T05:00:00.000Z\": 11.0683,     \"2019-11-29T06:00:00.000Z\": 11.2072,     \"2019-11-29T07:00:00.000Z\": 11.1522,     \"2019-11-29T08:00:00.000Z\": 11.1522,     \"2019-11-29T09:00:00.000Z\": 11.1522,     \"2019-11-29T10:00:00.000Z\": 11.4473,     \"2019-11-29T11:00:00.000Z\": 11.3142,     \"2019-11-29T12:00:00.000Z\": 11.3403,     \"2019-11-29T13:00:00.000Z\": 11.375,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 12,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 12,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.8918,     \"2019-11-30T02:00:00.000Z\": 10.64,     \"2019-11-30T03:00:00.000Z\": 10.5648,     \"2019-11-30T04:00:00.000Z\": 10.912,     \"2019-11-30T05:00:00.000Z\": 12,     \"2019-11-30T06:00:00.000Z\": 10.912,     \"2019-11-30T07:00:00.000Z\": 12,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 12,     \"2019-11-30T13:00:00.000Z\": 12,     \"2019-11-30T14:00:00.000Z\": 12,     \"2019-11-30T15:00:00.000Z\": 12 }"
          }
        },
        {
          "workflow_input_name": "comp_shifted_shiftable_series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-10-01T15:00:00.000Z\": 8.6464,     \"2019-10-01T16:00:00.000Z\": 8.6377,     \"2019-10-01T17:00:00.000Z\": 8.6348,     \"2019-10-01T18:00:00.000Z\": 8.6291,     \"2019-10-01T19:00:00.000Z\": 8.6291,     \"2019-10-01T20:00:00.000Z\": 8.6291,     \"2019-10-01T21:00:00.000Z\": 8.6233,     \"2019-10-01T22:00:00.000Z\": 8.6233,     \"2019-10-01T23:00:00.000Z\": 8.6175,     \"2019-10-02T01:00:00.000Z\": 8.6175,     \"2019-10-02T02:00:00.000Z\": 8.6175,     \"2019-10-02T03:00:00.000Z\": 8.6175,     \"2019-10-02T04:00:00.000Z\": 8.6117,     \"2019-10-02T05:00:00.000Z\": 8.6117,     \"2019-10-02T06:00:00.000Z\": 8.6001,     \"2019-10-02T07:00:00.000Z\": 8.5943,     \"2019-10-02T08:00:00.000Z\": 8.5856,     \"2019-10-02T09:00:00.000Z\": 8.577,     \"2019-10-02T10:00:00.000Z\": 8.6175,     \"2019-10-02T11:00:00.000Z\": 8.5741,     \"2019-10-02T12:00:00.000Z\": 8.5654,     \"2019-10-02T13:00:00.000Z\": 8.5625,     \"2019-10-02T14:00:00.000Z\": 8.5509,     \"2019-10-02T15:00:00.000Z\": 8.5422,     \"2019-10-02T16:00:00.000Z\": 8.5596,     \"2019-10-02T17:00:00.000Z\": 8.5856,     \"2019-10-02T18:00:00.000Z\": 8.5885,     \"2019-10-02T19:00:00.000Z\": 8.5914,     \"2019-10-02T20:00:00.000Z\": 8.5885,     \"2019-10-02T21:00:00.000Z\": 8.5856,     \"2019-10-02T22:00:00.000Z\": 8.5856,     \"2019-10-02T23:00:00.000Z\": 8.577,     \"2019-10-03T01:00:00.000Z\": 8.5712,     \"2019-10-03T02:00:00.000Z\": 8.5683,     \"2019-10-03T03:00:00.000Z\": 8.5596,     \"2019-10-03T04:00:00.000Z\": 8.5509,     \"2019-10-03T05:00:00.000Z\": 8.5538,     \"2019-10-03T06:00:00.000Z\": 8.548,     \"2019-10-03T07:00:00.000Z\": 8.5422,     \"2019-10-03T08:00:00.000Z\": 8.5365,     \"2019-10-03T09:00:00.000Z\": 8.5307,     \"2019-10-03T10:00:00.000Z\": 8.5278,     \"2019-10-03T11:00:00.000Z\": 8.5307,     \"2019-10-03T12:00:00.000Z\": 8.5365,     \"2019-10-03T13:00:00.000Z\": 8.5307,     \"2019-10-03T14:00:00.000Z\": 8.5307,     \"2019-10-03T15:00:00.000Z\": 8.5307,     \"2019-10-03T16:00:00.000Z\": 8.5278,     \"2019-10-03T17:00:00.000Z\": 8.5249,     \"2019-10-03T18:00:00.000Z\": 8.5249,     \"2019-10-03T19:00:00.000Z\": 8.5191,     \"2019-10-03T20:00:00.000Z\": 8.5191,     \"2019-10-03T21:00:00.000Z\": 8.5191,     \"2019-10-03T22:00:00.000Z\": 8.5191,     \"2019-10-03T23:00:00.000Z\": 8.5104,     \"2019-10-04T01:00:00.000Z\": 8.5104,     \"2019-10-04T02:00:00.000Z\": 8.5104,     \"2019-10-04T03:00:00.000Z\": 8.5046,     \"2019-10-04T04:00:00.000Z\": 8.4988,     \"2019-10-04T05:00:00.000Z\": 8.4988,     \"2019-10-04T06:00:00.000Z\": 8.4931,     \"2019-10-04T07:00:00.000Z\": 8.4844,     \"2019-10-04T08:00:00.000Z\": 8.4902,     \"2019-10-04T09:00:00.000Z\": 8.4468,     \"2019-10-04T10:00:00.000Z\": 8.4728,     \"2019-10-04T11:00:00.000Z\": 8.4815,     \"2019-10-04T12:00:00.000Z\": 8.4612,     \"2019-10-04T13:00:00.000Z\": 8.5075,     \"2019-10-04T14:00:00.000Z\": 8.4815,     \"2019-10-04T15:00:00.000Z\": 8.4902,     \"2019-10-04T16:00:00.000Z\": 8.548,     \"2019-10-04T17:00:00.000Z\": 8.5422,     \"2019-10-04T18:00:00.000Z\": 8.5509,     \"2019-10-04T19:00:00.000Z\": 8.5509,     \"2019-10-04T20:00:00.000Z\": 8.5509,     \"2019-10-04T21:00:00.000Z\": 8.5567,     \"2019-10-04T22:00:00.000Z\": 8.5307,     \"2019-10-04T23:00:00.000Z\": 8.5596,     \"2019-10-05T01:00:00.000Z\": 8.5712,     \"2019-10-05T02:00:00.000Z\": 8.5741,     \"2019-10-05T03:00:00.000Z\": 8.5712,     \"2019-10-05T04:00:00.000Z\": 8.5596,     \"2019-10-05T05:00:00.000Z\": 8.5654,     \"2019-10-05T06:00:00.000Z\": 8.5654,     \"2019-10-05T07:00:00.000Z\": 8.5654,     \"2019-10-05T08:00:00.000Z\": 8.5625,     \"2019-10-05T09:00:00.000Z\": 8.5625,     \"2019-10-05T10:00:00.000Z\": 8.548,     \"2019-10-05T11:00:00.000Z\": 8.5596,     \"2019-10-05T12:00:00.000Z\": 8.5596,     \"2019-10-05T13:00:00.000Z\": 8.5394,     \"2019-10-05T14:00:00.000Z\": 8.548,     \"2019-10-05T15:00:00.000Z\": 8.5538,     \"2019-10-05T16:00:00.000Z\": 8.5596,     \"2019-10-05T17:00:00.000Z\": 8.5596,     \"2019-10-05T18:00:00.000Z\": 8.5538,     \"2019-10-05T19:00:00.000Z\": 8.5596,     \"2019-10-05T20:00:00.000Z\": 8.5451,     \"2019-10-05T21:00:00.000Z\": 8.5394,     \"2019-10-05T22:00:00.000Z\": 8.5336,     \"2019-10-05T23:00:00.000Z\": 8.522,     \"2019-10-06T01:00:00.000Z\": 8.522,     \"2019-10-06T02:00:00.000Z\": 8.5104,     \"2019-10-06T03:00:00.000Z\": 8.5046,     \"2019-10-06T04:00:00.000Z\": 8.4988,     \"2019-10-06T05:00:00.000Z\": 8.5017,     \"2019-10-06T06:00:00.000Z\": 8.4844,     \"2019-10-06T07:00:00.000Z\": 8.4699,     \"2019-10-06T08:00:00.000Z\": 8.4641,     \"2019-10-06T09:00:00.000Z\": 8.4583,     \"2019-10-06T10:00:00.000Z\": 8.4525,     \"2019-10-06T11:00:00.000Z\": 8.4381,     \"2019-10-06T12:00:00.000Z\": 8.4294,     \"2019-10-06T13:00:00.000Z\": 8.4265,     \"2019-10-06T14:00:00.000Z\": 8.4178,     \"2019-10-06T15:00:00.000Z\": 8.4149,     \"2019-10-06T16:00:00.000Z\": 8.412,     \"2019-10-06T17:00:00.000Z\": 8.412,     \"2019-10-06T18:00:00.000Z\": 8.4091,     \"2019-10-06T19:00:00.000Z\": 8.4063,     \"2019-10-06T20:00:00.000Z\": 8.412,     \"2019-10-06T21:00:00.000Z\": 8.3889,     \"2019-10-06T22:00:00.000Z\": 8.4063,     \"2019-10-06T23:00:00.000Z\": 8.4063,     \"2019-10-07T01:00:00.000Z\": 8.4005,     \"2019-10-07T02:00:00.000Z\": 8.3976,     \"2019-10-07T03:00:00.000Z\": 8.3918,     \"2019-10-07T04:00:00.000Z\": 8.3889,     \"2019-10-07T05:00:00.000Z\": 8.386,     \"2019-10-07T06:00:00.000Z\": 8.3802,     \"2019-10-07T07:00:00.000Z\": 8.3628,     \"2019-10-07T08:00:00.000Z\": 8.3715,     \"2019-10-07T09:00:00.000Z\": 8.3657,     \"2019-10-07T10:00:00.000Z\": 8.36,     \"2019-10-07T11:00:00.000Z\": 8.3542,     \"2019-10-07T12:00:00.000Z\": 8.3455,     \"2019-10-07T13:00:00.000Z\": 8.36,     \"2019-10-07T14:00:00.000Z\": 8.3513,     \"2019-10-07T15:00:00.000Z\": 8.36,     \"2019-10-07T16:00:00.000Z\": 8.3571,     \"2019-10-07T17:00:00.000Z\": 8.36,     \"2019-10-07T18:00:00.000Z\": 8.3628,     \"2019-10-07T19:00:00.000Z\": 8.36,     \"2019-10-07T20:00:00.000Z\": 8.3657,     \"2019-10-07T21:00:00.000Z\": 8.3571,     \"2019-10-07T22:00:00.000Z\": 8.3657,     \"2019-10-07T23:00:00.000Z\": 8.3744,     \"2019-10-08T01:00:00.000Z\": 8.3773,     \"2019-10-08T02:00:00.000Z\": 8.3744,     \"2019-10-08T03:00:00.000Z\": 8.3744,     \"2019-10-08T04:00:00.000Z\": 8.3744,     \"2019-10-08T05:00:00.000Z\": 8.3773,     \"2019-10-08T06:00:00.000Z\": 8.3773,     \"2019-10-08T07:00:00.000Z\": 8.3802,     \"2019-10-08T08:00:00.000Z\": 8.3773,     \"2019-10-08T09:00:00.000Z\": 8.36,     \"2019-10-08T10:00:00.000Z\": 8.3628,     \"2019-10-08T11:00:00.000Z\": 8.4034,     \"2019-10-08T12:00:00.000Z\": 8.3744,     \"2019-10-08T13:00:00.000Z\": 8.4005,     \"2019-10-08T14:00:00.000Z\": 8.4294,     \"2019-10-08T15:00:00.000Z\": 8.3802,     \"2019-10-08T16:00:00.000Z\": 8.4294,     \"2019-10-08T17:00:00.000Z\": 8.4699,     \"2019-10-08T18:00:00.000Z\": 8.4902,     \"2019-10-08T19:00:00.000Z\": 8.4931,     \"2019-10-08T20:00:00.000Z\": 8.4902,     \"2019-10-08T21:00:00.000Z\": 8.4902,     \"2019-10-08T22:00:00.000Z\": 8.4873,     \"2019-10-08T23:00:00.000Z\": 8.4902,     \"2019-10-09T01:00:00.000Z\": 8.4873,     \"2019-10-09T02:00:00.000Z\": 8.4902,     \"2019-10-09T03:00:00.000Z\": 8.4902,     \"2019-10-09T04:00:00.000Z\": 8.4902,     \"2019-10-09T05:00:00.000Z\": 8.4902,     \"2019-10-09T06:00:00.000Z\": 8.4902,     \"2019-10-09T07:00:00.000Z\": 8.4902,     \"2019-10-09T08:00:00.000Z\": 8.4873,     \"2019-10-09T09:00:00.000Z\": 8.4873,     \"2019-10-09T10:00:00.000Z\": 8.522,     \"2019-10-09T11:00:00.000Z\": 8.5422,     \"2019-10-09T12:00:00.000Z\": 8.5509,     \"2019-10-09T13:00:00.000Z\": 8.5885,     \"2019-10-09T14:00:00.000Z\": 8.6088,     \"2019-10-09T15:00:00.000Z\": 8.6233,     \"2019-10-09T16:00:00.000Z\": 8.6319,     \"2019-10-09T17:00:00.000Z\": 8.6291,     \"2019-10-09T18:00:00.000Z\": 8.6464,     \"2019-10-09T19:00:00.000Z\": 8.6522,     \"2019-10-09T20:00:00.000Z\": 8.6522,     \"2019-10-09T21:00:00.000Z\": 8.6551,     \"2019-10-09T22:00:00.000Z\": 8.658,     \"2019-10-09T23:00:00.000Z\": 8.6638,     \"2019-10-10T01:00:00.000Z\": 8.6522,     \"2019-10-10T02:00:00.000Z\": 8.6725,     \"2019-10-10T03:00:00.000Z\": 8.6753,     \"2019-10-10T04:00:00.000Z\": 8.6609,     \"2019-10-10T05:00:00.000Z\": 8.6146,     \"2019-10-10T06:00:00.000Z\": 8.6522,     \"2019-10-10T07:00:00.000Z\": 8.6696,     \"2019-10-10T08:00:00.000Z\": 8.6725,     \"2019-10-10T09:00:00.000Z\": 8.6725,     \"2019-10-10T10:00:00.000Z\": 8.6811,     \"2019-10-10T11:00:00.000Z\": 8.684,     \"2019-10-10T12:00:00.000Z\": 8.684,     \"2019-10-10T13:00:00.000Z\": 8.6782,     \"2019-10-10T14:00:00.000Z\": 8.6609,     \"2019-10-10T15:00:00.000Z\": 8.6609,     \"2019-10-10T16:00:00.000Z\": 8.6059,     \"2019-10-10T17:00:00.000Z\": 8.6117,     \"2019-10-10T18:00:00.000Z\": 8.6175,     \"2019-10-10T19:00:00.000Z\": 8.6638,     \"2019-10-10T20:00:00.000Z\": 8.6667,     \"2019-10-10T21:00:00.000Z\": 8.6725,     \"2019-10-10T22:00:00.000Z\": 8.6753,     \"2019-10-10T23:00:00.000Z\": 8.6811,     \"2019-10-11T01:00:00.000Z\": 8.6782,     \"2019-10-11T02:00:00.000Z\": 8.684,     \"2019-10-11T03:00:00.000Z\": 8.6811,     \"2019-10-11T04:00:00.000Z\": 8.6782,     \"2019-10-11T05:00:00.000Z\": 8.6725,     \"2019-10-11T06:00:00.000Z\": 8.6262,     \"2019-10-11T07:00:00.000Z\": 8.6667,     \"2019-10-11T08:00:00.000Z\": 8.6667,     \"2019-10-11T09:00:00.000Z\": 8.6725,     \"2019-10-11T10:00:00.000Z\": 8.6725,     \"2019-10-11T11:00:00.000Z\": 8.6725,     \"2019-10-11T12:00:00.000Z\": 8.6725,     \"2019-10-11T13:00:00.000Z\": 8.6233,     \"2019-10-11T14:00:00.000Z\": 8.6319,     \"2019-10-11T15:00:00.000Z\": 8.6725,     \"2019-10-11T16:00:00.000Z\": 8.6753,     \"2019-10-11T17:00:00.000Z\": 8.6753,     \"2019-10-11T18:00:00.000Z\": 8.6782,     \"2019-10-11T19:00:00.000Z\": 8.6811,     \"2019-10-11T20:00:00.000Z\": 8.6811,     \"2019-10-11T21:00:00.000Z\": 8.6811,     \"2019-10-11T22:00:00.000Z\": 8.6782,     \"2019-10-11T23:00:00.000Z\": 8.6348,     \"2019-10-12T01:00:00.000Z\": 8.6811,     \"2019-10-12T02:00:00.000Z\": 8.684,     \"2019-10-12T03:00:00.000Z\": 8.6696,     \"2019-10-12T04:00:00.000Z\": 8.6811,     \"2019-10-12T05:00:00.000Z\": 8.6869,     \"2019-10-12T06:00:00.000Z\": 8.684,     \"2019-10-12T07:00:00.000Z\": 8.684,     \"2019-10-12T08:00:00.000Z\": 8.6782,     \"2019-10-12T09:00:00.000Z\": 8.6782,     \"2019-10-12T10:00:00.000Z\": 8.6753,     \"2019-10-12T11:00:00.000Z\": 8.6377,     \"2019-10-12T12:00:00.000Z\": 8.6406,     \"2019-10-12T13:00:00.000Z\": 8.6782,     \"2019-10-12T14:00:00.000Z\": 8.6782,     \"2019-10-12T15:00:00.000Z\": 8.6811,     \"2019-10-12T16:00:00.000Z\": 8.6811,     \"2019-10-12T17:00:00.000Z\": 8.6811,     \"2019-10-12T18:00:00.000Z\": 8.6782,     \"2019-10-12T19:00:00.000Z\": 8.6811,     \"2019-10-12T20:00:00.000Z\": 8.6811,     \"2019-10-12T21:00:00.000Z\": 8.6811,     \"2019-10-12T22:00:00.000Z\": 8.684,     \"2019-10-12T23:00:00.000Z\": 8.6782,     \"2019-10-13T01:00:00.000Z\": 8.6782,     \"2019-10-13T02:00:00.000Z\": 8.6725,     \"2019-10-13T03:00:00.000Z\": 8.6782,     \"2019-10-13T04:00:00.000Z\": 8.6869,     \"2019-10-13T05:00:00.000Z\": 8.6869,     \"2019-10-13T06:00:00.000Z\": 8.6898,     \"2019-10-13T07:00:00.000Z\": 8.6898,     \"2019-10-13T08:00:00.000Z\": 8.6898,     \"2019-10-13T09:00:00.000Z\": 8.6927,     \"2019-10-13T10:00:00.000Z\": 8.6927,     \"2019-10-13T11:00:00.000Z\": 8.6956,     \"2019-10-13T12:00:00.000Z\": 8.7014,     \"2019-10-13T13:00:00.000Z\": 8.7043,     \"2019-10-13T14:00:00.000Z\": 8.7072,     \"2019-10-13T15:00:00.000Z\": 8.7101,     \"2019-10-13T16:00:00.000Z\": 8.7188,     \"2019-10-13T17:00:00.000Z\": 8.7332,     \"2019-10-13T18:00:00.000Z\": 8.739,     \"2019-10-13T19:00:00.000Z\": 8.7535,     \"2019-10-13T20:00:00.000Z\": 8.7622,     \"2019-10-13T21:00:00.000Z\": 8.7708,     \"2019-10-13T22:00:00.000Z\": 8.7766,     \"2019-10-13T23:00:00.000Z\": 8.7824,     \"2019-10-14T01:00:00.000Z\": 8.7882,     \"2019-10-14T02:00:00.000Z\": 8.794,     \"2019-10-14T03:00:00.000Z\": 8.7882,     \"2019-10-14T04:00:00.000Z\": 8.7882,     \"2019-10-14T05:00:00.000Z\": 8.794,     \"2019-10-14T06:00:00.000Z\": 8.794,     \"2019-10-14T07:00:00.000Z\": 8.794,     \"2019-10-14T08:00:00.000Z\": 8.7969,     \"2019-10-14T09:00:00.000Z\": 8.7998,     \"2019-10-14T10:00:00.000Z\": 8.7998,     \"2019-10-14T11:00:00.000Z\": 8.7998,     \"2019-10-14T12:00:00.000Z\": 8.7969,     \"2019-10-14T13:00:00.000Z\": 8.7998,     \"2019-10-14T14:00:00.000Z\": 8.794,     \"2019-10-14T15:00:00.000Z\": 8.8084,     \"2019-10-14T16:00:00.000Z\": 8.8113,     \"2019-10-14T17:00:00.000Z\": 8.8056,     \"2019-10-14T18:00:00.000Z\": 8.8056,     \"2019-10-14T19:00:00.000Z\": 8.8056,     \"2019-10-14T20:00:00.000Z\": 8.8027,     \"2019-10-14T21:00:00.000Z\": 8.8056,     \"2019-10-14T22:00:00.000Z\": 8.8027,     \"2019-10-14T23:00:00.000Z\": 8.8142,     \"2019-10-15T01:00:00.000Z\": 8.8142,     \"2019-10-15T02:00:00.000Z\": 8.82,     \"2019-10-15T03:00:00.000Z\": 8.8229,     \"2019-10-15T04:00:00.000Z\": 8.8229,     \"2019-10-15T05:00:00.000Z\": 8.8345,     \"2019-10-15T06:00:00.000Z\": 8.8316,     \"2019-10-15T07:00:00.000Z\": 8.8229,     \"2019-10-15T08:00:00.000Z\": 8.8171,     \"2019-10-15T09:00:00.000Z\": 8.8229,     \"2019-10-15T10:00:00.000Z\": 8.82,     \"2019-10-15T11:00:00.000Z\": 8.8142,     \"2019-10-15T12:00:00.000Z\": 8.8142,     \"2019-10-15T13:00:00.000Z\": 8.8171,     \"2019-10-15T14:00:00.000Z\": 8.8258,     \"2019-10-15T15:00:00.000Z\": 8.82,     \"2019-10-15T16:00:00.000Z\": 8.8287,     \"2019-10-15T17:00:00.000Z\": 8.8229,     \"2019-10-15T18:00:00.000Z\": 8.8142,     \"2019-10-15T19:00:00.000Z\": 8.8113,     \"2019-10-15T20:00:00.000Z\": 8.8084,     \"2019-10-15T21:00:00.000Z\": 8.8142,     \"2019-10-15T22:00:00.000Z\": 8.8084,     \"2019-10-15T23:00:00.000Z\": 8.7824,     \"2019-10-16T01:00:00.000Z\": 8.7708,     \"2019-10-16T02:00:00.000Z\": 8.794,     \"2019-10-16T03:00:00.000Z\": 8.8027,     \"2019-10-16T04:00:00.000Z\": 8.7708,     \"2019-10-16T05:00:00.000Z\": 8.7969,     \"2019-10-16T06:00:00.000Z\": 8.8171,     \"2019-10-16T07:00:00.000Z\": 8.8113,     \"2019-10-16T08:00:00.000Z\": 8.8171,     \"2019-10-16T09:00:00.000Z\": 8.8084,     \"2019-10-16T10:00:00.000Z\": 8.7766,     \"2019-10-16T11:00:00.000Z\": 8.7679,     \"2019-10-16T12:00:00.000Z\": 8.713,     \"2019-10-16T13:00:00.000Z\": 8.6464,     \"2019-10-16T14:00:00.000Z\": 8.6725,     \"2019-10-16T15:00:00.000Z\": 8.6696,     \"2019-10-16T16:00:00.000Z\": 8.6319,     \"2019-10-16T17:00:00.000Z\": 8.6638,     \"2019-10-16T18:00:00.000Z\": 8.7072,     \"2019-10-16T19:00:00.000Z\": 8.7159,     \"2019-10-16T20:00:00.000Z\": 8.7216,     \"2019-10-16T21:00:00.000Z\": 8.7477,     \"2019-10-16T22:00:00.000Z\": 8.7506,     \"2019-10-16T23:00:00.000Z\": 8.765,     \"2019-10-17T01:00:00.000Z\": 8.7824,     \"2019-10-17T02:00:00.000Z\": 8.7708,     \"2019-10-17T03:00:00.000Z\": 8.7679,     \"2019-10-17T04:00:00.000Z\": 8.794,     \"2019-10-17T05:00:00.000Z\": 8.7998,     \"2019-10-17T06:00:00.000Z\": 8.7911,     \"2019-10-17T07:00:00.000Z\": 8.7882,     \"2019-10-17T08:00:00.000Z\": 8.765,     \"2019-10-17T09:00:00.000Z\": 8.7448,     \"2019-10-17T10:00:00.000Z\": 8.6898,     \"2019-10-17T11:00:00.000Z\": 8.6782,     \"2019-10-17T12:00:00.000Z\": 8.5567,     \"2019-10-17T13:00:00.000Z\": 8.5741,     \"2019-10-17T14:00:00.000Z\": 8.603,     \"2019-10-17T15:00:00.000Z\": 8.5943,     \"2019-10-17T16:00:00.000Z\": 8.6117,     \"2019-10-17T17:00:00.000Z\": 8.6088,     \"2019-10-17T18:00:00.000Z\": 8.6088,     \"2019-10-17T19:00:00.000Z\": 8.6059,     \"2019-10-17T20:00:00.000Z\": 8.5972,     \"2019-10-17T21:00:00.000Z\": 8.6088,     \"2019-10-17T22:00:00.000Z\": 8.6175,     \"2019-10-17T23:00:00.000Z\": 8.6146,     \"2019-10-18T01:00:00.000Z\": 8.6059,     \"2019-10-18T02:00:00.000Z\": 8.6204,     \"2019-10-18T03:00:00.000Z\": 8.6233,     \"2019-10-18T04:00:00.000Z\": 8.6262,     \"2019-10-18T05:00:00.000Z\": 8.6262,     \"2019-10-18T06:00:00.000Z\": 8.6233,     \"2019-10-18T07:00:00.000Z\": 8.603,     \"2019-10-18T08:00:00.000Z\": 8.6262,     \"2019-10-18T09:00:00.000Z\": 8.6233,     \"2019-10-18T10:00:00.000Z\": 8.603,     \"2019-10-18T11:00:00.000Z\": 8.6464,     \"2019-10-18T12:00:00.000Z\": 8.6667,     \"2019-10-18T13:00:00.000Z\": 8.6956,     \"2019-10-18T14:00:00.000Z\": 8.7159,     \"2019-10-18T15:00:00.000Z\": 8.7188,     \"2019-10-18T16:00:00.000Z\": 8.7188,     \"2019-10-18T17:00:00.000Z\": 8.7303,     \"2019-10-18T18:00:00.000Z\": 8.7361,     \"2019-10-18T19:00:00.000Z\": 8.7361,     \"2019-10-18T20:00:00.000Z\": 8.7332,     \"2019-10-18T21:00:00.000Z\": 8.7245,     \"2019-10-18T22:00:00.000Z\": 8.7188,     \"2019-10-18T23:00:00.000Z\": 8.7159,     \"2019-10-19T01:00:00.000Z\": 8.7072,     \"2019-10-19T02:00:00.000Z\": 8.6985,     \"2019-10-19T03:00:00.000Z\": 8.6782,     \"2019-10-19T04:00:00.000Z\": 8.6898,     \"2019-10-19T05:00:00.000Z\": 8.6811,     \"2019-10-19T06:00:00.000Z\": 8.6725,     \"2019-10-19T07:00:00.000Z\": 8.6696,     \"2019-10-19T08:00:00.000Z\": 8.6667,     \"2019-10-19T09:00:00.000Z\": 8.6551,     \"2019-10-19T10:00:00.000Z\": 8.6464,     \"2019-10-19T11:00:00.000Z\": 8.6406,     \"2019-10-19T12:00:00.000Z\": 8.6406,     \"2019-10-19T13:00:00.000Z\": 8.6377,     \"2019-10-19T14:00:00.000Z\": 8.6348,     \"2019-10-19T15:00:00.000Z\": 8.6348,     \"2019-10-19T16:00:00.000Z\": 8.6059,     \"2019-10-19T17:00:00.000Z\": 8.6175,     \"2019-10-19T18:00:00.000Z\": 8.6319,     \"2019-10-19T19:00:00.000Z\": 8.6262,     \"2019-10-19T20:00:00.000Z\": 8.6204,     \"2019-10-19T21:00:00.000Z\": 8.6204,     \"2019-10-19T22:00:00.000Z\": 8.6204,     \"2019-10-19T23:00:00.000Z\": 8.6204,     \"2019-10-20T01:00:00.000Z\": 8.6146,     \"2019-10-20T02:00:00.000Z\": 8.6088,     \"2019-10-20T03:00:00.000Z\": 8.6088,     \"2019-10-20T04:00:00.000Z\": 8.6059,     \"2019-10-20T05:00:00.000Z\": 8.6001,     \"2019-10-20T06:00:00.000Z\": 8.5972,     \"2019-10-20T07:00:00.000Z\": 8.5828,     \"2019-10-20T08:00:00.000Z\": 8.5856,     \"2019-10-20T09:00:00.000Z\": 8.5799,     \"2019-10-20T10:00:00.000Z\": 8.5856,     \"2019-10-20T11:00:00.000Z\": 8.5856,     \"2019-10-20T12:00:00.000Z\": 8.5828,     \"2019-10-20T13:00:00.000Z\": 8.5799,     \"2019-10-20T14:00:00.000Z\": 8.577,     \"2019-10-20T15:00:00.000Z\": 8.5712,     \"2019-10-20T16:00:00.000Z\": 8.5422,     \"2019-10-20T17:00:00.000Z\": 8.5625,     \"2019-10-20T18:00:00.000Z\": 8.5654,     \"2019-10-20T19:00:00.000Z\": 8.5625,     \"2019-10-20T20:00:00.000Z\": 8.5567,     \"2019-10-20T21:00:00.000Z\": 8.5538,     \"2019-10-20T22:00:00.000Z\": 8.5509,     \"2019-10-20T23:00:00.000Z\": 8.5451,     \"2019-10-21T01:00:00.000Z\": 8.5422,     \"2019-10-21T02:00:00.000Z\": 8.5422,     \"2019-10-21T03:00:00.000Z\": 8.5394,     \"2019-10-21T04:00:00.000Z\": 8.5336,     \"2019-10-21T05:00:00.000Z\": 8.5365,     \"2019-10-21T06:00:00.000Z\": 8.5365,     \"2019-10-21T07:00:00.000Z\": 8.5365,     \"2019-10-21T08:00:00.000Z\": 8.5365,     \"2019-10-21T09:00:00.000Z\": 8.5307,     \"2019-10-21T10:00:00.000Z\": 8.4699,     \"2019-10-21T11:00:00.000Z\": 8.4873,     \"2019-10-21T12:00:00.000Z\": 8.4988,     \"2019-10-21T13:00:00.000Z\": 8.5017,     \"2019-10-21T14:00:00.000Z\": 8.5017,     \"2019-10-21T15:00:00.000Z\": 8.5046,     \"2019-10-21T16:00:00.000Z\": 8.5075,     \"2019-10-21T17:00:00.000Z\": 8.5075,     \"2019-10-21T18:00:00.000Z\": 8.4902,     \"2019-10-21T19:00:00.000Z\": 8.4902,     \"2019-10-21T20:00:00.000Z\": 8.4959,     \"2019-10-21T21:00:00.000Z\": 8.4959,     \"2019-10-21T22:00:00.000Z\": 8.4931,     \"2019-10-21T23:00:00.000Z\": 8.4959,     \"2019-10-22T01:00:00.000Z\": 8.4873,     \"2019-10-22T02:00:00.000Z\": 8.4873,     \"2019-10-22T03:00:00.000Z\": 8.4873,     \"2019-10-22T04:00:00.000Z\": 8.4873,     \"2019-10-22T05:00:00.000Z\": 8.4873,     \"2019-10-22T06:00:00.000Z\": 8.4786,     \"2019-10-22T07:00:00.000Z\": 8.4786,     \"2019-10-22T08:00:00.000Z\": 8.467,     \"2019-10-22T09:00:00.000Z\": 8.522,     \"2019-10-22T10:00:00.000Z\": 8.5683,     \"2019-10-22T11:00:00.000Z\": 8.577,     \"2019-10-22T12:00:00.000Z\": 8.5828,     \"2019-10-22T13:00:00.000Z\": 8.5885,     \"2019-10-22T14:00:00.000Z\": 8.5799,     \"2019-10-22T15:00:00.000Z\": 8.5741,     \"2019-10-22T16:00:00.000Z\": 8.5712,     \"2019-10-22T17:00:00.000Z\": 8.5741,     \"2019-10-22T18:00:00.000Z\": 8.5683,     \"2019-10-22T19:00:00.000Z\": 8.5712,     \"2019-10-22T20:00:00.000Z\": 8.5683,     \"2019-10-22T21:00:00.000Z\": 8.5683,     \"2019-10-22T22:00:00.000Z\": 8.5654,     \"2019-10-22T23:00:00.000Z\": 8.5654,     \"2019-10-23T01:00:00.000Z\": 8.5625,     \"2019-10-23T02:00:00.000Z\": 8.5596,     \"2019-10-23T03:00:00.000Z\": 8.5596,     \"2019-10-23T04:00:00.000Z\": 8.5596,     \"2019-10-23T05:00:00.000Z\": 8.5596,     \"2019-10-23T06:00:00.000Z\": 8.548,     \"2019-10-23T07:00:00.000Z\": 8.548,     \"2019-10-23T08:00:00.000Z\": 8.5394,     \"2019-10-23T09:00:00.000Z\": 8.5394,     \"2019-10-23T10:00:00.000Z\": 8.5394,     \"2019-10-23T11:00:00.000Z\": 8.5336,     \"2019-10-23T12:00:00.000Z\": 8.5625,     \"2019-10-23T13:00:00.000Z\": 8.5683,     \"2019-10-23T14:00:00.000Z\": 8.5712,     \"2019-10-23T15:00:00.000Z\": 8.4728,     \"2019-10-23T16:00:00.000Z\": 8.4844,     \"2019-10-23T17:00:00.000Z\": 8.4815,     \"2019-10-23T18:00:00.000Z\": 8.5017,     \"2019-10-23T19:00:00.000Z\": 8.5104,     \"2019-10-23T20:00:00.000Z\": 8.5162,     \"2019-10-23T21:00:00.000Z\": 8.522,     \"2019-10-23T22:00:00.000Z\": 8.5162,     \"2019-10-23T23:00:00.000Z\": 8.5278,     \"2019-10-24T01:00:00.000Z\": 8.5162,     \"2019-10-24T02:00:00.000Z\": 8.5307,     \"2019-10-24T03:00:00.000Z\": 8.5394,     \"2019-10-24T04:00:00.000Z\": 8.5394,     \"2019-10-24T05:00:00.000Z\": 8.548,     \"2019-10-24T06:00:00.000Z\": 8.5075,     \"2019-10-24T07:00:00.000Z\": 8.5538,     \"2019-10-24T08:00:00.000Z\": 8.5741,     \"2019-10-24T09:00:00.000Z\": 8.5828,     \"2019-10-24T10:00:00.000Z\": 8.5914,     \"2019-10-24T11:00:00.000Z\": 8.5856,     \"2019-10-24T12:00:00.000Z\": 8.5914,     \"2019-10-24T13:00:00.000Z\": 8.5972,     \"2019-10-24T14:00:00.000Z\": 8.5972,     \"2019-10-24T15:00:00.000Z\": 8.6001,     \"2019-10-24T16:00:00.000Z\": 8.6088,     \"2019-10-24T17:00:00.000Z\": 8.6117,     \"2019-10-24T18:00:00.000Z\": 8.6175,     \"2019-10-24T19:00:00.000Z\": 8.6175,     \"2019-10-24T20:00:00.000Z\": 8.603,     \"2019-10-24T21:00:00.000Z\": 8.6059,     \"2019-10-24T22:00:00.000Z\": 8.603,     \"2019-10-24T23:00:00.000Z\": 8.6088,     \"2019-10-25T01:00:00.000Z\": 8.6117,     \"2019-10-25T02:00:00.000Z\": 8.6175,     \"2019-10-25T03:00:00.000Z\": 8.6146,     \"2019-10-25T04:00:00.000Z\": 8.6146,     \"2019-10-25T05:00:00.000Z\": 8.603,     \"2019-10-25T06:00:00.000Z\": 8.5683,     \"2019-10-25T07:00:00.000Z\": 8.5683,     \"2019-10-25T08:00:00.000Z\": 8.5625,     \"2019-10-25T09:00:00.000Z\": 8.5654,     \"2019-10-25T10:00:00.000Z\": 8.5741,     \"2019-10-25T11:00:00.000Z\": 8.5712,     \"2019-10-25T12:00:00.000Z\": 8.5654,     \"2019-10-25T13:00:00.000Z\": 8.5625,     \"2019-10-25T14:00:00.000Z\": 8.5596,     \"2019-10-25T15:00:00.000Z\": 8.5712,     \"2019-10-25T16:00:00.000Z\": 8.5654,     \"2019-10-25T17:00:00.000Z\": 8.5828,     \"2019-10-25T18:00:00.000Z\": 8.6001,     \"2019-10-25T19:00:00.000Z\": 8.5914,     \"2019-10-25T20:00:00.000Z\": 8.5914,     \"2019-10-25T21:00:00.000Z\": 8.5856,     \"2019-10-25T22:00:00.000Z\": 8.5914,     \"2019-10-25T23:00:00.000Z\": 8.5828,     \"2019-10-26T01:00:00.000Z\": 8.5914,     \"2019-10-26T02:00:00.000Z\": 8.5741,     \"2019-10-26T03:00:00.000Z\": 8.5943,     \"2019-10-26T04:00:00.000Z\": 8.5828,     \"2019-10-26T05:00:00.000Z\": 8.5885,     \"2019-10-26T06:00:00.000Z\": 8.5914,     \"2019-10-26T07:00:00.000Z\": 8.5943,     \"2019-10-26T08:00:00.000Z\": 8.5943,     \"2019-10-26T09:00:00.000Z\": 8.5943,     \"2019-10-26T10:00:00.000Z\": 8.5943,     \"2019-10-26T11:00:00.000Z\": 8.577,     \"2019-10-26T12:00:00.000Z\": 8.5972,     \"2019-10-26T13:00:00.000Z\": 8.6001,     \"2019-10-26T14:00:00.000Z\": 8.6146,     \"2019-10-26T15:00:00.000Z\": 8.6117,     \"2019-10-26T16:00:00.000Z\": 8.6001,     \"2019-10-26T17:00:00.000Z\": 8.5596,     \"2019-10-26T18:00:00.000Z\": 8.5509,     \"2019-10-26T19:00:00.000Z\": 8.5422,     \"2019-10-26T20:00:00.000Z\": 8.5336,     \"2019-10-26T21:00:00.000Z\": 8.5278,     \"2019-10-26T22:00:00.000Z\": 8.5278,     \"2019-10-26T23:00:00.000Z\": 8.5683,     \"2019-10-27T01:00:00.000Z\": 8.5712,     \"2019-10-27T02:00:00.000Z\": 8.5741,     \"2019-10-27T03:00:00.000Z\": 8.5741,     \"2019-10-27T04:00:00.000Z\": 8.5828,     \"2019-10-27T05:00:00.000Z\": 8.548,     \"2019-10-27T06:00:00.000Z\": 8.5741,     \"2019-10-27T07:00:00.000Z\": 8.5712,     \"2019-10-27T08:00:00.000Z\": 8.5509,     \"2019-10-27T09:00:00.000Z\": 8.5741,     \"2019-10-27T10:00:00.000Z\": 8.5741,     \"2019-10-27T11:00:00.000Z\": 8.5712,     \"2019-10-27T12:00:00.000Z\": 8.5712,     \"2019-10-27T13:00:00.000Z\": 8.5914,     \"2019-10-27T14:00:00.000Z\": 8.577,     \"2019-10-27T15:00:00.000Z\": 8.5741,     \"2019-10-27T16:00:00.000Z\": 8.5799,     \"2019-10-27T17:00:00.000Z\": 8.5828,     \"2019-10-27T18:00:00.000Z\": 8.5828,     \"2019-10-27T19:00:00.000Z\": 8.577,     \"2019-10-27T20:00:00.000Z\": 8.5625,     \"2019-10-27T21:00:00.000Z\": 8.5394,     \"2019-10-27T22:00:00.000Z\": 8.5509,     \"2019-10-27T23:00:00.000Z\": 8.5451,     \"2019-10-28T01:00:00.000Z\": 8.5394,     \"2019-10-28T02:00:00.000Z\": 8.5365,     \"2019-10-28T03:00:00.000Z\": 8.5191,     \"2019-10-28T04:00:00.000Z\": 8.5191,     \"2019-10-28T05:00:00.000Z\": 8.5046,     \"2019-10-28T06:00:00.000Z\": 8.4959,     \"2019-10-28T07:00:00.000Z\": 8.4873,     \"2019-10-28T08:00:00.000Z\": 8.4873,     \"2019-10-28T09:00:00.000Z\": 8.467,     \"2019-10-28T10:00:00.000Z\": 8.4525,     \"2019-10-28T11:00:00.000Z\": 8.4468,     \"2019-10-28T12:00:00.000Z\": 8.4381,     \"2019-10-28T13:00:00.000Z\": 8.4005,     \"2019-10-28T14:00:00.000Z\": 8.3773,     \"2019-10-28T15:00:00.000Z\": 8.3686,     \"2019-10-28T16:00:00.000Z\": 8.3657,     \"2019-10-28T17:00:00.000Z\": 8.3571,     \"2019-10-28T18:00:00.000Z\": 8.3831,     \"2019-10-28T19:00:00.000Z\": 8.3744,     \"2019-10-28T20:00:00.000Z\": 8.3686,     \"2019-10-28T21:00:00.000Z\": 8.36,     \"2019-10-28T22:00:00.000Z\": 8.3571,     \"2019-10-28T23:00:00.000Z\": 8.3513,     \"2019-10-29T01:00:00.000Z\": 8.3455,     \"2019-10-29T02:00:00.000Z\": 8.3368,     \"2019-10-29T03:00:00.000Z\": 8.3455,     \"2019-10-29T04:00:00.000Z\": 8.3455,     \"2019-10-29T05:00:00.000Z\": 8.3571,     \"2019-10-29T06:00:00.000Z\": 8.3513,     \"2019-10-29T07:00:00.000Z\": 8.3455,     \"2019-10-29T08:00:00.000Z\": 8.3397,     \"2019-10-29T09:00:00.000Z\": 8.3368,     \"2019-10-29T10:00:00.000Z\": 8.6522,     \"2019-10-29T11:00:00.000Z\": 8.6377,     \"2019-10-29T12:00:00.000Z\": 8.6638,     \"2019-10-29T13:00:00.000Z\": 8.6204,     \"2019-10-29T14:00:00.000Z\": 8.5943,     \"2019-10-29T15:00:00.000Z\": 8.6435,     \"2019-10-29T16:00:00.000Z\": 8.6522,     \"2019-10-29T17:00:00.000Z\": 8.6667,     \"2019-10-29T18:00:00.000Z\": 8.6638,     \"2019-10-29T19:00:00.000Z\": 8.6493,     \"2019-10-29T20:00:00.000Z\": 8.6493,     \"2019-10-29T21:00:00.000Z\": 8.6146,     \"2019-10-29T22:00:00.000Z\": 8.5885,     \"2019-10-29T23:00:00.000Z\": 8.6319,     \"2019-10-30T01:00:00.000Z\": 8.6233,     \"2019-10-30T02:00:00.000Z\": 8.6262,     \"2019-10-30T03:00:00.000Z\": 8.6493,     \"2019-10-30T04:00:00.000Z\": 8.6175,     \"2019-10-30T05:00:00.000Z\": 8.5856,     \"2019-10-30T06:00:00.000Z\": 8.6291,     \"2019-10-30T07:00:00.000Z\": 8.6348,     \"2019-10-30T08:00:00.000Z\": 8.5914,     \"2019-10-30T09:00:00.000Z\": 8.577,     \"2019-10-30T10:00:00.000Z\": 8.603,     \"2019-10-30T11:00:00.000Z\": 8.658,     \"2019-10-30T12:00:00.000Z\": 8.6204,     \"2019-10-30T13:00:00.000Z\": 8.6001,     \"2019-10-30T14:00:00.000Z\": 8.6233,     \"2019-10-30T15:00:00.000Z\": 8.658,     \"2019-10-30T16:00:00.000Z\": 8.6464,     \"2019-10-30T17:00:00.000Z\": 8.6319,     \"2019-10-30T18:00:00.000Z\": 8.6204,     \"2019-10-30T19:00:00.000Z\": 8.5972,     \"2019-10-30T20:00:00.000Z\": 8.5914,     \"2019-10-30T21:00:00.000Z\": 8.5712,     \"2019-10-30T22:00:00.000Z\": 8.5307,     \"2019-10-30T23:00:00.000Z\": 8.5596,     \"2019-10-31T01:00:00.000Z\": 8.577,     \"2019-10-31T02:00:00.000Z\": 8.5885,     \"2019-10-31T03:00:00.000Z\": 8.5799,     \"2019-10-31T04:00:00.000Z\": 8.5336,     \"2019-10-31T05:00:00.000Z\": 8.5683,     \"2019-10-31T06:00:00.000Z\": 8.5625,     \"2019-10-31T07:00:00.000Z\": 8.5712,     \"2019-10-31T08:00:00.000Z\": 8.5567,     \"2019-10-31T09:00:00.000Z\": 8.5046,     \"2019-10-31T10:00:00.000Z\": 8.5422,     \"2019-10-31T11:00:00.000Z\": 8.5394,     \"2019-10-31T12:00:00.000Z\": 8.5162,     \"2019-10-31T13:00:00.000Z\": 8.4641,     \"2019-10-31T14:00:00.000Z\": 8.4815,     \"2019-10-31T15:00:00.000Z\": 8.5162,     \"2019-10-31T16:00:00.000Z\": 8.5104,     \"2019-10-31T17:00:00.000Z\": 8.4902,     \"2019-10-31T18:00:00.000Z\": 8.4873,     \"2019-10-31T19:00:00.000Z\": 8.4873,     \"2019-10-31T20:00:00.000Z\": 8.4554,     \"2019-10-31T21:00:00.000Z\": 8.4612,     \"2019-10-31T22:00:00.000Z\": 8.4497,     \"2019-10-31T23:00:00.000Z\": 8.4699,     \"2019-11-01T01:00:00.000Z\": 8.4525,     \"2019-11-01T02:00:00.000Z\": 8.4931,     \"2019-11-01T03:00:00.000Z\": 8.4699,     \"2019-11-01T04:00:00.000Z\": 8.4381,     \"2019-11-01T05:00:00.000Z\": 8.4583,     \"2019-11-01T06:00:00.000Z\": 8.4294,     \"2019-11-01T07:00:00.000Z\": 8.4757,     \"2019-11-01T08:00:00.000Z\": 8.4757,     \"2019-11-01T09:00:00.000Z\": 8.4381,     \"2019-11-01T10:00:00.000Z\": 8.4583,     \"2019-11-01T11:00:00.000Z\": 8.4728,     \"2019-11-01T12:00:00.000Z\": 8.4786,     \"2019-11-01T13:00:00.000Z\": 8.4554,     \"2019-11-01T14:00:00.000Z\": 8.4294,     \"2019-11-01T15:00:00.000Z\": 8.4728,     \"2019-11-01T16:00:00.000Z\": 8.4902,     \"2019-11-01T17:00:00.000Z\": 8.4786,     \"2019-11-01T18:00:00.000Z\": 8.4757,     \"2019-11-01T19:00:00.000Z\": 8.4786,     \"2019-11-01T20:00:00.000Z\": 8.4757,     \"2019-11-01T21:00:00.000Z\": 8.4525,     \"2019-11-01T22:00:00.000Z\": 8.4554,     \"2019-11-01T23:00:00.000Z\": 8.4902,     \"2019-11-02T01:00:00.000Z\": 8.4815,     \"2019-11-02T02:00:00.000Z\": 8.4786,     \"2019-11-02T03:00:00.000Z\": 8.4873,     \"2019-11-02T04:00:00.000Z\": 8.4699,     \"2019-11-02T05:00:00.000Z\": 8.4352,     \"2019-11-02T06:00:00.000Z\": 8.4525,     \"2019-11-02T07:00:00.000Z\": 8.4699,     \"2019-11-02T08:00:00.000Z\": 8.467,     \"2019-11-02T09:00:00.000Z\": 8.4757,     \"2019-11-02T10:00:00.000Z\": 8.4757,     \"2019-11-02T11:00:00.000Z\": 8.4844,     \"2019-11-02T12:00:00.000Z\": 8.4786,     \"2019-11-02T13:00:00.000Z\": 8.4554,     \"2019-11-02T14:00:00.000Z\": 8.4988,     \"2019-11-02T15:00:00.000Z\": 8.4902,     \"2019-11-02T16:00:00.000Z\": 8.4959,     \"2019-11-02T17:00:00.000Z\": 8.4959,     \"2019-11-02T18:00:00.000Z\": 8.4959,     \"2019-11-02T19:00:00.000Z\": 8.4873,     \"2019-11-02T20:00:00.000Z\": 8.4757,     \"2019-11-02T21:00:00.000Z\": 8.4959,     \"2019-11-02T22:00:00.000Z\": 8.4757,     \"2019-11-02T23:00:00.000Z\": 8.4931,     \"2019-11-03T01:00:00.000Z\": 8.4844,     \"2019-11-03T02:00:00.000Z\": 8.5075,     \"2019-11-03T03:00:00.000Z\": 8.5104,     \"2019-11-03T04:00:00.000Z\": 8.5133,     \"2019-11-03T05:00:00.000Z\": 8.4988,     \"2019-11-03T06:00:00.000Z\": 8.4641,     \"2019-11-03T07:00:00.000Z\": 8.4959,     \"2019-11-03T08:00:00.000Z\": 8.5162,     \"2019-11-03T09:00:00.000Z\": 8.548,     \"2019-11-03T10:00:00.000Z\": 8.5336,     \"2019-11-03T11:00:00.000Z\": 8.5654,     \"2019-11-03T12:00:00.000Z\": 8.5509,     \"2019-11-03T13:00:00.000Z\": 8.5654,     \"2019-11-03T14:00:00.000Z\": 8.5567,     \"2019-11-03T15:00:00.000Z\": 8.5596,     \"2019-11-03T16:00:00.000Z\": 8.577,     \"2019-11-03T17:00:00.000Z\": 8.5741,     \"2019-11-03T18:00:00.000Z\": 8.577,     \"2019-11-03T19:00:00.000Z\": 8.5828,     \"2019-11-03T20:00:00.000Z\": 8.5712,     \"2019-11-03T21:00:00.000Z\": 8.5654,     \"2019-11-03T22:00:00.000Z\": 8.5856,     \"2019-11-03T23:00:00.000Z\": 8.5741,     \"2019-11-04T01:00:00.000Z\": 8.5943,     \"2019-11-04T02:00:00.000Z\": 8.6001,     \"2019-11-04T03:00:00.000Z\": 8.6175,     \"2019-11-04T04:00:00.000Z\": 8.6117,     \"2019-11-04T05:00:00.000Z\": 8.6117,     \"2019-11-04T06:00:00.000Z\": 8.6233,     \"2019-11-04T07:00:00.000Z\": 8.6319,     \"2019-11-04T08:00:00.000Z\": 8.6175,     \"2019-11-04T09:00:00.000Z\": 8.6001,     \"2019-11-04T10:00:00.000Z\": 8.6175,     \"2019-11-04T11:00:00.000Z\": 8.6406,     \"2019-11-04T12:00:00.000Z\": 8.6175,     \"2019-11-04T13:00:00.000Z\": 8.6088,     \"2019-11-04T14:00:00.000Z\": 8.6377,     \"2019-11-04T15:00:00.000Z\": 8.6319,     \"2019-11-04T16:00:00.000Z\": 8.6435,     \"2019-11-04T17:00:00.000Z\": 8.6435,     \"2019-11-04T18:00:00.000Z\": 8.6464,     \"2019-11-04T19:00:00.000Z\": 8.6319,     \"2019-11-04T20:00:00.000Z\": 8.6146,     \"2019-11-04T21:00:00.000Z\": 8.6464,     \"2019-11-04T22:00:00.000Z\": 8.6406,     \"2019-11-04T23:00:00.000Z\": 8.6175,     \"2019-11-05T01:00:00.000Z\": 8.6464,     \"2019-11-05T02:00:00.000Z\": 8.6551,     \"2019-11-05T03:00:00.000Z\": 8.6464,     \"2019-11-05T04:00:00.000Z\": 8.6464,     \"2019-11-05T05:00:00.000Z\": 8.6377,     \"2019-11-05T06:00:00.000Z\": 8.6667,     \"2019-11-05T07:00:00.000Z\": 8.6551,     \"2019-11-05T08:00:00.000Z\": 8.6551,     \"2019-11-05T09:00:00.000Z\": 8.6435,     \"2019-11-05T10:00:00.000Z\": 8.6493,     \"2019-11-05T11:00:00.000Z\": 8.6696,     \"2019-11-05T12:00:00.000Z\": 8.6464,     \"2019-11-05T13:00:00.000Z\": 8.6319,     \"2019-11-05T14:00:00.000Z\": 8.6551,     \"2019-11-05T15:00:00.000Z\": 8.6667,     \"2019-11-05T16:00:00.000Z\": 8.6725,     \"2019-11-05T17:00:00.000Z\": 8.6638,     \"2019-11-05T18:00:00.000Z\": 8.6725,     \"2019-11-05T19:00:00.000Z\": 8.6725,     \"2019-11-05T20:00:00.000Z\": 8.6696,     \"2019-11-05T21:00:00.000Z\": 8.6464,     \"2019-11-05T22:00:00.000Z\": 8.6638,     \"2019-11-05T23:00:00.000Z\": 8.6435,     \"2019-11-06T01:00:00.000Z\": 8.6609,     \"2019-11-06T02:00:00.000Z\": 8.6667,     \"2019-11-06T03:00:00.000Z\": 8.6725,     \"2019-11-06T04:00:00.000Z\": 8.6725,     \"2019-11-06T05:00:00.000Z\": 8.6638,     \"2019-11-06T06:00:00.000Z\": 8.6522,     \"2019-11-06T07:00:00.000Z\": 8.6725,     \"2019-11-06T08:00:00.000Z\": 8.6638,     \"2019-11-06T09:00:00.000Z\": 8.6377,     \"2019-11-06T10:00:00.000Z\": 8.6551,     \"2019-11-06T11:00:00.000Z\": 8.658,     \"2019-11-06T12:00:00.000Z\": 8.6406,     \"2019-11-06T13:00:00.000Z\": 8.658,     \"2019-11-06T14:00:00.000Z\": 8.6146,     \"2019-11-06T15:00:00.000Z\": 8.5885,     \"2019-11-06T16:00:00.000Z\": 8.6638,     \"2019-11-06T17:00:00.000Z\": 8.658,     \"2019-11-06T18:00:00.000Z\": 8.6638,     \"2019-11-06T19:00:00.000Z\": 8.6609,     \"2019-11-06T20:00:00.000Z\": 8.6638,     \"2019-11-06T21:00:00.000Z\": 8.6319,     \"2019-11-06T22:00:00.000Z\": 8.6348,     \"2019-11-06T23:00:00.000Z\": 8.6464,     \"2019-11-07T01:00:00.000Z\": 8.6435,     \"2019-11-07T02:00:00.000Z\": 8.6551,     \"2019-11-07T03:00:00.000Z\": 8.6377,     \"2019-11-07T04:00:00.000Z\": 8.6522,     \"2019-11-07T05:00:00.000Z\": 8.6175,     \"2019-11-07T06:00:00.000Z\": 8.6319,     \"2019-11-07T07:00:00.000Z\": 8.6377,     \"2019-11-07T08:00:00.000Z\": 8.6001,     \"2019-11-07T09:00:00.000Z\": 8.5828,     \"2019-11-07T10:00:00.000Z\": 8.5712,     \"2019-11-07T11:00:00.000Z\": 7.2141,     \"2019-11-07T12:00:00.000Z\": 7.3125,     \"2019-11-07T13:00:00.000Z\": 7.2865,     \"2019-11-07T14:00:00.000Z\": 7.3125,     \"2019-11-07T15:00:00.000Z\": 7.2807,     \"2019-11-07T16:00:00.000Z\": 7.3241,     \"2019-11-07T17:00:00.000Z\": 7.3154,     \"2019-11-07T18:00:00.000Z\": 7.2922,     \"2019-11-07T19:00:00.000Z\": 7.2865,     \"2019-11-07T20:00:00.000Z\": 7.3038,     \"2019-11-07T21:00:00.000Z\": 7.2575,     \"2019-11-07T22:00:00.000Z\": 7.2951,     \"2019-11-07T23:00:00.000Z\": 7.2199,     \"2019-11-08T01:00:00.000Z\": 7.2054,     \"2019-11-08T02:00:00.000Z\": 7.2199,     \"2019-11-08T03:00:00.000Z\": 7.1128,     \"2019-11-08T04:00:00.000Z\": 7.1823,     \"2019-11-08T05:00:00.000Z\": 7.1071,     \"2019-11-08T06:00:00.000Z\": 7.2112,     \"2019-11-08T07:00:00.000Z\": 7.2083,     \"2019-11-08T08:00:00.000Z\": 7.2662,     \"2019-11-08T09:00:00.000Z\": 7.1765,     \"2019-11-08T10:00:00.000Z\": 7.2083,     \"2019-11-08T11:00:00.000Z\": 7.1563,     \"2019-11-08T12:00:00.000Z\": 7.2228,     \"2019-11-08T13:00:00.000Z\": 7.2025,     \"2019-11-08T14:00:00.000Z\": 7.1852,     \"2019-11-08T15:00:00.000Z\": 7.1823,     \"2019-11-08T16:00:00.000Z\": 7.1997,     \"2019-11-08T17:00:00.000Z\": 7.191,     \"2019-11-08T18:00:00.000Z\": 7.1997,     \"2019-11-08T19:00:00.000Z\": 7.1765,     \"2019-11-08T20:00:00.000Z\": 7.1823,     \"2019-11-08T21:00:00.000Z\": 7.1389,     \"2019-11-08T22:00:00.000Z\": 7.1534,     \"2019-11-08T23:00:00.000Z\": 7.1244,     \"2019-11-09T01:00:00.000Z\": 7.136,     \"2019-11-09T02:00:00.000Z\": 7.162,     \"2019-11-09T03:00:00.000Z\": 7.162,     \"2019-11-09T04:00:00.000Z\": 7.1649,     \"2019-11-09T05:00:00.000Z\": 7.1071,     \"2019-11-09T06:00:00.000Z\": 7.1302,     \"2019-11-09T07:00:00.000Z\": 7.0608,     \"2019-11-09T08:00:00.000Z\": 7.1244,     \"2019-11-09T09:00:00.000Z\": 7.0463,     \"2019-11-09T10:00:00.000Z\": 7.1273,     \"2019-11-09T11:00:00.000Z\": 7.1013,     \"2019-11-09T12:00:00.000Z\": 7.1534,     \"2019-11-09T13:00:00.000Z\": 7.1563,     \"2019-11-09T14:00:00.000Z\": 7.1389,     \"2019-11-09T15:00:00.000Z\": 7.0984,     \"2019-11-09T16:00:00.000Z\": 7.1244,     \"2019-11-09T17:00:00.000Z\": 7.0984,     \"2019-11-09T18:00:00.000Z\": 7.1273,     \"2019-11-09T19:00:00.000Z\": 7.081,     \"2019-11-09T20:00:00.000Z\": 7.081,     \"2019-11-09T21:00:00.000Z\": 7.0087,     \"2019-11-09T22:00:00.000Z\": 7.0405,     \"2019-11-09T23:00:00.000Z\": 6.9797,     \"2019-11-10T01:00:00.000Z\": 6.9711,     \"2019-11-10T02:00:00.000Z\": 7,     \"2019-11-10T03:00:00.000Z\": 7.0608,     \"2019-11-10T04:00:00.000Z\": 7.0376,     \"2019-11-10T05:00:00.000Z\": 6.9508,     \"2019-11-10T06:00:00.000Z\": 7.026,     \"2019-11-10T07:00:00.000Z\": 6.9074,     \"2019-11-10T08:00:00.000Z\": 7.0376,     \"2019-11-10T09:00:00.000Z\": 6.9797,     \"2019-11-10T10:00:00.000Z\": 6.8322,     \"2019-11-10T11:00:00.000Z\": 7,     \"2019-11-10T12:00:00.000Z\": 7.0174,     \"2019-11-10T13:00:00.000Z\": 7.0174,     \"2019-11-10T14:00:00.000Z\": 6.9682,     \"2019-11-10T15:00:00.000Z\": 6.9826,     \"2019-11-10T16:00:00.000Z\": 6.9769,     \"2019-11-10T17:00:00.000Z\": 7.0087,     \"2019-11-10T18:00:00.000Z\": 6.9826,     \"2019-11-10T19:00:00.000Z\": 7.0116,     \"2019-11-10T20:00:00.000Z\": 6.9769,     \"2019-11-10T21:00:00.000Z\": 6.9595,     \"2019-11-10T22:00:00.000Z\": 6.9277,     \"2019-11-10T23:00:00.000Z\": 6.9334,     \"2019-11-11T01:00:00.000Z\": 6.919,     \"2019-11-11T02:00:00.000Z\": 6.9219,     \"2019-11-11T03:00:00.000Z\": 6.9363,     \"2019-11-11T04:00:00.000Z\": 6.945,     \"2019-11-11T05:00:00.000Z\": 6.8061,     \"2019-11-11T06:00:00.000Z\": 6.9074,     \"2019-11-11T07:00:00.000Z\": 6.9595,     \"2019-11-11T08:00:00.000Z\": 6.9797,     \"2019-11-11T09:00:00.000Z\": 6.9537,     \"2019-11-11T10:00:00.000Z\": 6.9248,     \"2019-11-11T11:00:00.000Z\": 6.9421,     \"2019-11-11T12:00:00.000Z\": 6.9074,     \"2019-11-11T13:00:00.000Z\": 6.7338,     \"2019-11-11T14:00:00.000Z\": 6.8872,     \"2019-11-11T15:00:00.000Z\": 6.8987,     \"2019-11-11T16:00:00.000Z\": 6.945,     \"2019-11-11T17:00:00.000Z\": 6.9711,     \"2019-11-11T18:00:00.000Z\": 6.945,     \"2019-11-11T19:00:00.000Z\": 6.9421,     \"2019-11-11T20:00:00.000Z\": 6.9161,     \"2019-11-11T21:00:00.000Z\": 6.9363,     \"2019-11-11T22:00:00.000Z\": 6.8727,     \"2019-11-11T23:00:00.000Z\": 6.9479,     \"2019-11-12T01:00:00.000Z\": 7.0087,     \"2019-11-12T02:00:00.000Z\": 6.9508,     \"2019-11-12T03:00:00.000Z\": 7,     \"2019-11-12T04:00:00.000Z\": 6.9682,     \"2019-11-12T05:00:00.000Z\": 6.9363,     \"2019-11-12T06:00:00.000Z\": 6.9074,     \"2019-11-12T07:00:00.000Z\": 6.9566,     \"2019-11-12T08:00:00.000Z\": 6.9537,     \"2019-11-12T09:00:00.000Z\": 6.8785,     \"2019-11-12T10:00:00.000Z\": 6.9306,     \"2019-11-12T11:00:00.000Z\": 6.9566,     \"2019-11-12T12:00:00.000Z\": 6.9508,     \"2019-11-12T13:00:00.000Z\": 6.945,     \"2019-11-12T14:00:00.000Z\": 6.9508,     \"2019-11-12T15:00:00.000Z\": 6.9537,     \"2019-11-12T16:00:00.000Z\": 6.9942,     \"2019-11-12T17:00:00.000Z\": 6.974,     \"2019-11-12T18:00:00.000Z\": 6.9537,     \"2019-11-12T19:00:00.000Z\": 6.9566,     \"2019-11-12T20:00:00.000Z\": 6.9769,     \"2019-11-12T21:00:00.000Z\": 6.9334,     \"2019-11-12T22:00:00.000Z\": 6.9392,     \"2019-11-12T23:00:00.000Z\": 6.9248,     \"2019-11-13T01:00:00.000Z\": 6.9277,     \"2019-11-13T02:00:00.000Z\": 6.9884,     \"2019-11-13T03:00:00.000Z\": 7.0174,     \"2019-11-13T04:00:00.000Z\": 6.9219,     \"2019-11-13T05:00:00.000Z\": 6.8872,     \"2019-11-13T06:00:00.000Z\": 6.9537,     \"2019-11-13T07:00:00.000Z\": 6.9363,     \"2019-11-13T08:00:00.000Z\": 6.9479,     \"2019-11-13T09:00:00.000Z\": 6.8524,     \"2019-11-13T10:00:00.000Z\": 6.8872,     \"2019-11-13T11:00:00.000Z\": 6.8785,     \"2019-11-13T12:00:00.000Z\": 6.9334,     \"2019-11-13T13:00:00.000Z\": 6.8466,     \"2019-11-13T14:00:00.000Z\": 6.838,     \"2019-11-13T15:00:00.000Z\": 6.9161,     \"2019-11-13T16:00:00.000Z\": 6.9363,     \"2019-11-13T17:00:00.000Z\": 6.9566,     \"2019-11-13T18:00:00.000Z\": 6.9421,     \"2019-11-13T19:00:00.000Z\": 6.8958,     \"2019-11-13T20:00:00.000Z\": 6.8785,     \"2019-11-13T21:00:00.000Z\": 6.8785,     \"2019-11-13T22:00:00.000Z\": 6.8958,     \"2019-11-13T23:00:00.000Z\": 6.89,     \"2019-11-14T01:00:00.000Z\": 6.9074,     \"2019-11-14T02:00:00.000Z\": 6.9508,     \"2019-11-14T03:00:00.000Z\": 6.9508,     \"2019-11-14T04:00:00.000Z\": 6.9132,     \"2019-11-14T05:00:00.000Z\": 6.8524,     \"2019-11-14T06:00:00.000Z\": 6.9074,     \"2019-11-14T07:00:00.000Z\": 6.9334,     \"2019-11-14T08:00:00.000Z\": 6.8582,     \"2019-11-14T09:00:00.000Z\": 6.8438,     \"2019-11-14T10:00:00.000Z\": 6.8785,     \"2019-11-14T11:00:00.000Z\": 6.8264,     \"2019-11-14T12:00:00.000Z\": 6.7975,     \"2019-11-14T13:00:00.000Z\": 6.7541,     \"2019-11-14T14:00:00.000Z\": 6.7598,     \"2019-11-14T15:00:00.000Z\": 6.7975,     \"2019-11-14T16:00:00.000Z\": 6.8409,     \"2019-11-14T17:00:00.000Z\": 6.8727,     \"2019-11-14T18:00:00.000Z\": 6.8466,     \"2019-11-14T19:00:00.000Z\": 6.838,     \"2019-11-14T20:00:00.000Z\": 6.8351,     \"2019-11-14T21:00:00.000Z\": 6.7975,     \"2019-11-14T22:00:00.000Z\": 6.7396,     \"2019-11-14T23:00:00.000Z\": 6.7541,     \"2019-11-15T01:00:00.000Z\": 6.8235,     \"2019-11-15T02:00:00.000Z\": 6.8524,     \"2019-11-15T03:00:00.000Z\": 6.8872,     \"2019-11-15T04:00:00.000Z\": 6.8351,     \"2019-11-15T05:00:00.000Z\": 6.7975,     \"2019-11-15T06:00:00.000Z\": 6.7917,     \"2019-11-15T07:00:00.000Z\": 6.8322,     \"2019-11-15T08:00:00.000Z\": 6.8553,     \"2019-11-15T09:00:00.000Z\": 6.8148,     \"2019-11-15T10:00:00.000Z\": 6.7078,     \"2019-11-15T11:00:00.000Z\": 6.7975,     \"2019-11-15T12:00:00.000Z\": 6.8235,     \"2019-11-15T13:00:00.000Z\": 6.7193,     \"2019-11-15T14:00:00.000Z\": 6.7946,     \"2019-11-15T15:00:00.000Z\": 6.8032,     \"2019-11-15T16:00:00.000Z\": 6.8524,     \"2019-11-15T17:00:00.000Z\": 6.8264,     \"2019-11-15T18:00:00.000Z\": 6.7975,     \"2019-11-15T19:00:00.000Z\": 6.7859,     \"2019-11-15T20:00:00.000Z\": 6.7598,     \"2019-11-15T21:00:00.000Z\": 6.6817,     \"2019-11-15T22:00:00.000Z\": 6.7714,     \"2019-11-15T23:00:00.000Z\": 6.7164,     \"2019-11-16T01:00:00.000Z\": 6.7425,     \"2019-11-16T02:00:00.000Z\": 6.8409,     \"2019-11-16T03:00:00.000Z\": 6.8438,     \"2019-11-16T04:00:00.000Z\": 6.8061,     \"2019-11-16T05:00:00.000Z\": 6.7164,     \"2019-11-16T06:00:00.000Z\": 6.7743,     \"2019-11-16T07:00:00.000Z\": 6.702,     \"2019-11-16T08:00:00.000Z\": 6.7888,     \"2019-11-16T09:00:00.000Z\": 6.7251,     \"2019-11-16T10:00:00.000Z\": 6.7946,     \"2019-11-16T11:00:00.000Z\": 6.8409,     \"2019-11-16T12:00:00.000Z\": 6.8351,     \"2019-11-16T13:00:00.000Z\": 6.809,     \"2019-11-16T14:00:00.000Z\": 6.8032,     \"2019-11-16T15:00:00.000Z\": 6.8148,     \"2019-11-16T16:00:00.000Z\": 6.8148,     \"2019-11-16T17:00:00.000Z\": 6.8206,     \"2019-11-16T18:00:00.000Z\": 6.809,     \"2019-11-16T19:00:00.000Z\": 6.7685,     \"2019-11-16T20:00:00.000Z\": 6.6846,     \"2019-11-16T21:00:00.000Z\": 6.7454,     \"2019-11-16T22:00:00.000Z\": 6.6846,     \"2019-11-16T23:00:00.000Z\": 6.7483,     \"2019-11-17T01:00:00.000Z\": 6.783,     \"2019-11-17T02:00:00.000Z\": 6.7975,     \"2019-11-17T03:00:00.000Z\": 6.8264,     \"2019-11-17T04:00:00.000Z\": 6.7975,     \"2019-11-17T05:00:00.000Z\": 6.7222,     \"2019-11-17T06:00:00.000Z\": 6.7598,     \"2019-11-17T07:00:00.000Z\": 6.7049,     \"2019-11-17T08:00:00.000Z\": 6.7975,     \"2019-11-17T09:00:00.000Z\": 6.7772,     \"2019-11-17T10:00:00.000Z\": 6.6412,     \"2019-11-17T11:00:00.000Z\": 6.7801,     \"2019-11-17T12:00:00.000Z\": 6.7685,     \"2019-11-17T13:00:00.000Z\": 6.7049,     \"2019-11-17T14:00:00.000Z\": 6.6644,     \"2019-11-17T15:00:00.000Z\": 6.7396,     \"2019-11-17T16:00:00.000Z\": 6.7772,     \"2019-11-17T17:00:00.000Z\": 6.7888,     \"2019-11-17T18:00:00.000Z\": 6.7772,     \"2019-11-17T19:00:00.000Z\": 6.7598,     \"2019-11-17T20:00:00.000Z\": 6.7251,     \"2019-11-17T21:00:00.000Z\": 6.6933,     \"2019-11-17T22:00:00.000Z\": 6.7598,     \"2019-11-17T23:00:00.000Z\": 6.702,     \"2019-11-18T01:00:00.000Z\": 6.7338,     \"2019-11-18T02:00:00.000Z\": 6.7685,     \"2019-11-18T03:00:00.000Z\": 6.7367,     \"2019-11-18T04:00:00.000Z\": 6.8148,     \"2019-11-18T05:00:00.000Z\": 6.7801,     \"2019-11-18T06:00:00.000Z\": 6.7367,     \"2019-11-18T07:00:00.000Z\": 6.7627,     \"2019-11-18T08:00:00.000Z\": 6.7772,     \"2019-11-18T09:00:00.000Z\": 6.7425,     \"2019-11-18T10:00:00.000Z\": 6.7367,     \"2019-11-18T11:00:00.000Z\": 6.7425,     \"2019-11-18T12:00:00.000Z\": 6.7975,     \"2019-11-18T13:00:00.000Z\": 6.8032,     \"2019-11-18T14:00:00.000Z\": 6.7801,     \"2019-11-18T15:00:00.000Z\": 6.7222,     \"2019-11-18T16:00:00.000Z\": 6.7627,     \"2019-11-18T17:00:00.000Z\": 6.809,     \"2019-11-18T18:00:00.000Z\": 6.7714,     \"2019-11-18T19:00:00.000Z\": 6.7714,     \"2019-11-18T20:00:00.000Z\": 6.7483,     \"2019-11-18T21:00:00.000Z\": 6.6875,     \"2019-11-18T22:00:00.000Z\": 6.7627,     \"2019-11-18T23:00:00.000Z\": 6.7164,     \"2019-11-19T01:00:00.000Z\": 6.7888,     \"2019-11-19T02:00:00.000Z\": 6.8495,     \"2019-11-19T03:00:00.000Z\": 6.8264,     \"2019-11-19T04:00:00.000Z\": 6.7598,     \"2019-11-19T05:00:00.000Z\": 6.7338,     \"2019-11-19T06:00:00.000Z\": 6.7946,     \"2019-11-19T07:00:00.000Z\": 6.8206,     \"2019-11-19T08:00:00.000Z\": 6.7946,     \"2019-11-19T09:00:00.000Z\": 6.7598,     \"2019-11-19T10:00:00.000Z\": 6.7743,     \"2019-11-19T11:00:00.000Z\": 6.7888,     \"2019-11-19T12:00:00.000Z\": 6.8061,     \"2019-11-19T13:00:00.000Z\": 6.7367,     \"2019-11-19T14:00:00.000Z\": 6.8264,     \"2019-11-19T15:00:00.000Z\": 6.8235,     \"2019-11-19T16:00:00.000Z\": 6.7946,     \"2019-11-19T17:00:00.000Z\": 6.8061,     \"2019-11-19T18:00:00.000Z\": 6.838,     \"2019-11-19T19:00:00.000Z\": 6.8553,     \"2019-11-19T20:00:00.000Z\": 6.8003,     \"2019-11-19T21:00:00.000Z\": 6.7251,     \"2019-11-19T22:00:00.000Z\": 6.7598,     \"2019-11-19T23:00:00.000Z\": 6.7627,     \"2019-11-20T01:00:00.000Z\": 6.8177,     \"2019-11-20T02:00:00.000Z\": 6.8148,     \"2019-11-20T03:00:00.000Z\": 6.7975,     \"2019-11-20T04:00:00.000Z\": 6.7888,     \"2019-11-20T05:00:00.000Z\": 6.7309,     \"2019-11-20T06:00:00.000Z\": 6.7483,     \"2019-11-20T07:00:00.000Z\": 6.8148,     \"2019-11-20T08:00:00.000Z\": 6.7396,     \"2019-11-20T09:00:00.000Z\": 6.6701,     \"2019-11-20T10:00:00.000Z\": 5.6516,     \"2019-11-20T11:00:00.000Z\": 5.6516,     \"2019-11-20T12:00:00.000Z\": 5.5475,     \"2019-11-20T13:00:00.000Z\": 5.7095,     \"2019-11-20T14:00:00.000Z\": 5.7095,     \"2019-11-20T15:00:00.000Z\": 5.7066,     \"2019-11-20T16:00:00.000Z\": 6.0509,     \"2019-11-20T17:00:00.000Z\": 5.967,     \"2019-11-20T18:00:00.000Z\": 6.4039,     \"2019-11-20T19:00:00.000Z\": 6.919,     \"2019-11-20T20:00:00.000Z\": 7.1071,     \"2019-11-20T21:00:00.000Z\": 6.5486,     \"2019-11-20T22:00:00.000Z\": 6.4676,     \"2019-11-20T23:00:00.000Z\": 6.8409,     \"2019-11-21T01:00:00.000Z\": 6.8206,     \"2019-11-21T02:00:00.000Z\": 6.8785,     \"2019-11-21T03:00:00.000Z\": 6.864,     \"2019-11-21T04:00:00.000Z\": 7.3935,     \"2019-11-21T05:00:00.000Z\": 7.1997,     \"2019-11-21T06:00:00.000Z\": 7.3877,     \"2019-11-21T07:00:00.000Z\": 7.3009,     \"2019-11-21T08:00:00.000Z\": 6.9682,     \"2019-11-21T09:00:00.000Z\": 7.2054,     \"2019-11-21T10:00:00.000Z\": 7.1765,     \"2019-11-21T11:00:00.000Z\": 7.2286,     \"2019-11-21T12:00:00.000Z\": 7.6163,     \"2019-11-21T13:00:00.000Z\": 7.4398,     \"2019-11-21T14:00:00.000Z\": 6.7743,     \"2019-11-21T15:00:00.000Z\": 7.434,     \"2019-11-21T16:00:00.000Z\": 7.3993,     \"2019-11-21T17:00:00.000Z\": 7.3646,     \"2019-11-21T18:00:00.000Z\": 7.2228,     \"2019-11-21T19:00:00.000Z\": 6.9913,     \"2019-11-21T20:00:00.000Z\": 7.0492,     \"2019-11-21T21:00:00.000Z\": 7.0984,     \"2019-11-21T22:00:00.000Z\": 7.1707,     \"2019-11-21T23:00:00.000Z\": 7.1505,     \"2019-11-22T01:00:00.000Z\": 7.5671,     \"2019-11-22T02:00:00.000Z\": 7.272,     \"2019-11-22T03:00:00.000Z\": 7.1794,     \"2019-11-22T04:00:00.000Z\": 7.3588,     \"2019-11-22T05:00:00.000Z\": 7.1852,     \"2019-11-22T06:00:00.000Z\": 7.1215,     \"2019-11-22T07:00:00.000Z\": 7.8131,     \"2019-11-22T08:00:00.000Z\": 7.6019,     \"2019-11-22T09:00:00.000Z\": 7.7639,     \"2019-11-22T10:00:00.000Z\": 7.6192,     \"2019-11-22T11:00:00.000Z\": 7.5932,     \"2019-11-22T12:00:00.000Z\": 7.6655,     \"2019-11-22T13:00:00.000Z\": 7.6453,     \"2019-11-22T14:00:00.000Z\": 7.9057,     \"2019-11-22T15:00:00.000Z\": 7.4977,     \"2019-11-22T16:00:00.000Z\": 7.4398,     \"2019-11-22T17:00:00.000Z\": 7.6076,     \"2019-11-22T18:00:00.000Z\": 7.434,     \"2019-11-22T19:00:00.000Z\": 7.4919,     \"2019-11-22T20:00:00.000Z\": 8.0677,     \"2019-11-22T21:00:00.000Z\": 7.7407,     \"2019-11-22T22:00:00.000Z\": 7.5816,     \"2019-11-22T23:00:00.000Z\": 8.1863,     \"2019-11-23T01:00:00.000Z\": 7.5295,     \"2019-11-23T02:00:00.000Z\": 8.0098,     \"2019-11-23T03:00:00.000Z\": 7.5295,     \"2019-11-23T04:00:00.000Z\": 7.6453,     \"2019-11-23T05:00:00.000Z\": 7.515,     \"2019-11-23T06:00:00.000Z\": 7.5093,     \"2019-11-23T07:00:00.000Z\": 7.4659,     \"2019-11-23T08:00:00.000Z\": 7.5729,     \"2019-11-23T09:00:00.000Z\": 7.5266,     \"2019-11-23T10:00:00.000Z\": 7.7378,     \"2019-11-23T11:00:00.000Z\": 7.842,     \"2019-11-23T12:00:00.000Z\": 7.8507,     \"2019-11-23T13:00:00.000Z\": 7.9635,     \"2019-11-23T14:00:00.000Z\": 7.9462,     \"2019-11-23T15:00:00.000Z\": 7.952,     \"2019-11-23T16:00:00.000Z\": 7.8449,     \"2019-11-23T17:00:00.000Z\": 7.9404,     \"2019-11-23T18:00:00.000Z\": 7.9983,     \"2019-11-23T19:00:00.000Z\": 7.9491,     \"2019-11-23T20:00:00.000Z\": 8.0069,     \"2019-11-23T21:00:00.000Z\": 8.0735,     \"2019-11-23T22:00:00.000Z\": 8.0417,     \"2019-11-23T23:00:00.000Z\": 7.816,     \"2019-11-24T01:00:00.000Z\": 7.8623,     \"2019-11-24T02:00:00.000Z\": 7.8449,     \"2019-11-24T03:00:00.000Z\": 7.8275,     \"2019-11-24T04:00:00.000Z\": 7.787,     \"2019-11-24T05:00:00.000Z\": 7.8362,     \"2019-11-24T06:00:00.000Z\": 7.7668,     \"2019-11-24T07:00:00.000Z\": 7.5932,     \"2019-11-24T08:00:00.000Z\": 7.6568,     \"2019-11-24T09:00:00.000Z\": 7.4659,     \"2019-11-24T10:00:00.000Z\": 7.5035,     \"2019-11-24T11:00:00.000Z\": 7.5816,     \"2019-11-24T12:00:00.000Z\": 7.6076,     \"2019-11-24T13:00:00.000Z\": 7.599,     \"2019-11-24T14:00:00.000Z\": 7.6568,     \"2019-11-24T15:00:00.000Z\": 7.625,     \"2019-11-24T16:00:00.000Z\": 7.6308,     \"2019-11-24T17:00:00.000Z\": 7.7147,     \"2019-11-24T18:00:00.000Z\": 7.5006,     \"2019-11-24T19:00:00.000Z\": 7.4716,     \"2019-11-24T20:00:00.000Z\": 7.4919,     \"2019-11-24T21:00:00.000Z\": 7.3646,     \"2019-11-24T22:00:00.000Z\": 7.3964,     \"2019-11-24T23:00:00.000Z\": 7.4919,     \"2019-11-25T01:00:00.000Z\": 7.787,     \"2019-11-25T02:00:00.000Z\": 7.4427,     \"2019-11-25T03:00:00.000Z\": 7.8189,     \"2019-11-25T04:00:00.000Z\": 7.4774,     \"2019-11-25T05:00:00.000Z\": 7.9578,     \"2019-11-25T06:00:00.000Z\": 7.8738,     \"2019-11-25T07:00:00.000Z\": 8.3802,     \"2019-11-25T08:00:00.000Z\": 8.1719,     \"2019-11-25T09:00:00.000Z\": 7.5064,     \"2019-11-25T10:00:00.000Z\": 8.1632,     \"2019-11-25T11:00:00.000Z\": 8.088,     \"2019-11-25T12:00:00.000Z\": 7.9578,     \"2019-11-25T13:00:00.000Z\": 7.6424,     \"2019-11-25T14:00:00.000Z\": 7.7841,     \"2019-11-25T15:00:00.000Z\": 7.6308,     \"2019-11-25T16:00:00.000Z\": 7.5932,     \"2019-11-25T17:00:00.000Z\": 7.5064,     \"2019-11-25T18:00:00.000Z\": 8.1343,     \"2019-11-25T19:00:00.000Z\": 8.305,     \"2019-11-25T20:00:00.000Z\": 8.0503,     \"2019-11-25T21:00:00.000Z\": 8.0012,     \"2019-11-25T22:00:00.000Z\": 8.0012,     \"2019-11-25T23:00:00.000Z\": 8.0069,     \"2019-11-26T01:00:00.000Z\": 7.8941,     \"2019-11-26T02:00:00.000Z\": 7.8825,     \"2019-11-26T03:00:00.000Z\": 7.6944,     \"2019-11-26T04:00:00.000Z\": 8.0301,     \"2019-11-26T05:00:00.000Z\": 8.088,     \"2019-11-26T06:00:00.000Z\": 8.0648,     \"2019-11-26T07:00:00.000Z\": 7.9867,     \"2019-11-26T08:00:00.000Z\": 7.8507,     \"2019-11-26T09:00:00.000Z\": 7.8565,     \"2019-11-26T10:00:00.000Z\": 7.9722,     \"2019-11-26T11:00:00.000Z\": 8.0446,     \"2019-11-26T12:00:00.000Z\": 8.1748,     \"2019-11-26T13:00:00.000Z\": 7.8362,     \"2019-11-26T14:00:00.000Z\": 8.0648,     \"2019-11-26T15:00:00.000Z\": 8.0793,     \"2019-11-26T16:00:00.000Z\": 8.088,     \"2019-11-26T17:00:00.000Z\": 8.0793,     \"2019-11-26T18:00:00.000Z\": 8.0532,     \"2019-11-26T19:00:00.000Z\": 8.0677,     \"2019-11-26T20:00:00.000Z\": 8.0475,     \"2019-11-26T21:00:00.000Z\": 8.0156,     \"2019-11-26T22:00:00.000Z\": 7.9635,     \"2019-11-26T23:00:00.000Z\": 7.8854,     \"2019-11-27T01:00:00.000Z\": 7.7813,     \"2019-11-27T02:00:00.000Z\": 8.0243,     \"2019-11-27T03:00:00.000Z\": 8.195,     \"2019-11-27T04:00:00.000Z\": 8.1632,     \"2019-11-27T05:00:00.000Z\": 8.0272,     \"2019-11-27T06:00:00.000Z\": 7.9983,     \"2019-11-27T07:00:00.000Z\": 8.1574,     \"2019-11-27T08:00:00.000Z\": 8.2095,     \"2019-11-27T09:00:00.000Z\": 8.3079,     \"2019-11-27T10:00:00.000Z\": 8.331,     \"2019-11-27T11:00:00.000Z\": 8.3166,     \"2019-11-27T12:00:00.000Z\": 8.3426,     \"2019-11-27T13:00:00.000Z\": 8.3802,     \"2019-11-27T14:00:00.000Z\": 8.386,     \"2019-11-27T15:00:00.000Z\": 8.2703,     \"2019-11-27T16:00:00.000Z\": 8.3021,     \"2019-11-27T17:00:00.000Z\": 8.2442,     \"2019-11-27T18:00:00.000Z\": 8.1892,     \"2019-11-27T19:00:00.000Z\": 8.2269,     \"2019-11-27T20:00:00.000Z\": 8.3079,     \"2019-11-27T21:00:00.000Z\": 8.386,     \"2019-11-27T22:00:00.000Z\": 8.6146,     \"2019-11-27T23:00:00.000Z\": 8.5538,     \"2019-11-28T01:00:00.000Z\": 8.713,     \"2019-11-28T02:00:00.000Z\": 8.7072,     \"2019-11-28T03:00:00.000Z\": 8.739,     \"2019-11-28T04:00:00.000Z\": 8.765,     \"2019-11-28T05:00:00.000Z\": 8.794,     \"2019-11-28T06:00:00.000Z\": 8.7998,     \"2019-11-28T07:00:00.000Z\": 8.7824,     \"2019-11-28T08:00:00.000Z\": 8.8171,     \"2019-11-28T09:00:00.000Z\": 8.8519,     \"2019-11-28T10:00:00.000Z\": 9.5926,     \"2019-11-28T11:00:00.000Z\": 10.1858,     \"2019-11-28T12:00:00.000Z\": 9.9716,     \"2019-11-28T13:00:00.000Z\": 9.4334,     \"2019-11-28T14:00:00.000Z\": 9.3814,     \"2019-11-28T15:00:00.000Z\": 10.3478,     \"2019-11-28T16:00:00.000Z\": 9.6013,     \"2019-11-28T17:00:00.000Z\": 10.912,     \"2019-11-28T18:00:00.000Z\": 10.64,     \"2019-11-28T19:00:00.000Z\": 10.9873,     \"2019-11-28T20:00:00.000Z\": 11.1522,     \"2019-11-28T21:00:00.000Z\": 11.1233,     \"2019-11-28T22:00:00.000Z\": 11.1493,     \"2019-11-28T23:00:00.000Z\": 10.9149,     \"2019-11-29T01:00:00.000Z\": 10.533,     \"2019-11-29T02:00:00.000Z\": 10.559,     \"2019-11-29T03:00:00.000Z\": 9.7662,     \"2019-11-29T04:00:00.000Z\": 11.2332,     \"2019-11-29T05:00:00.000Z\": 11.0683,     \"2019-11-29T06:00:00.000Z\": 11.2072,     \"2019-11-29T07:00:00.000Z\": 11.1522,     \"2019-11-29T08:00:00.000Z\": 11.1522,     \"2019-11-29T09:00:00.000Z\": 11.1522,     \"2019-11-29T10:00:00.000Z\": 11.4473,     \"2019-11-29T11:00:00.000Z\": 11.3142,     \"2019-11-29T12:00:00.000Z\": 11.3403,     \"2019-11-29T13:00:00.000Z\": 11.375,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 12,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 12,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.8918,     \"2019-11-30T02:00:00.000Z\": 10.64,     \"2019-11-30T03:00:00.000Z\": 10.5648,     \"2019-11-30T04:00:00.000Z\": 10.912,     \"2019-11-30T05:00:00.000Z\": 12,     \"2019-11-30T06:00:00.000Z\": 10.912,     \"2019-11-30T07:00:00.000Z\": 12,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 12,     \"2019-11-30T13:00:00.000Z\": 12,     \"2019-11-30T14:00:00.000Z\": 12,     \"2019-11-30T15:00:00.000Z\": 12 }"
          }
        },
        {
          "workflow_input_name": "comp_timeshift_freq_factor",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "7"
          }
        },
        {
          "workflow_input_name": "corr_data",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\"a\" : [1,2,3,4,5,6,7], \"b\" : [7,6,5,4,3,2,1], \"c\" : [3,2,3,4,3,3,9], \"d\":[1,2,4,4,1,1,1], \"e\":[1,3,4,4,0,1,1], \"f\":[2,2,4,4,2,1,1]}"
          }
        },
        {
          "workflow_input_name": "map_cat_color_col",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "Organisation"
          }
        },
        {
          "workflow_input_name": "map_color_map",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{         \"Folkwang\": \"#005099\",         \"von der Heydt\": \"#00925B\",         \"lehmbruck\": \"#0076BD\" }"
          }
        },
        {
          "workflow_input_name": "map_data",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{    \"lat\": [        51.442666,        51.256625,        51.430145    ],    \"lon\": [        7.005126,        7.146598,        6.765380    ],    \"name\": [        \"Folkwang Museum Essen\",        \"Von der Heydt Museum Wuppertal\",        \"Lehmbruck Museum Duisburg\"    ],    \"description\": [        \"\",        \"\",        \"\"    ],    \"Organisation\": [        \"Folkwang\",        \"von der Heydt\",        \"lehmbruck\"    ]}"
          }
        },
        {
          "workflow_input_name": "pie_data",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\"grp\": [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"b\"], \"val\": [2,3,2,4,4,4,4] }"
          }
        },
        {
          "workflow_input_name": "pie_group_col",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "grp"
          }
        },
        {
          "workflow_input_name": "pie_val_col",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "val"
          }
        },
        {
          "workflow_input_name": "single_ts",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-10-01T15:00:00.000Z\": 8.6464,     \"2019-10-01T16:00:00.000Z\": 8.6377,     \"2019-10-01T17:00:00.000Z\": 8.6348,     \"2019-10-01T18:00:00.000Z\": 8.6291,     \"2019-10-01T19:00:00.000Z\": 8.6291,     \"2019-10-01T20:00:00.000Z\": 8.6291,     \"2019-10-01T21:00:00.000Z\": 8.6233,     \"2019-10-01T22:00:00.000Z\": 8.6233,     \"2019-10-01T23:00:00.000Z\": 8.6175,     \"2019-10-02T01:00:00.000Z\": 8.6175,     \"2019-10-02T02:00:00.000Z\": 8.6175,     \"2019-10-02T03:00:00.000Z\": 8.6175,     \"2019-10-02T04:00:00.000Z\": 8.6117,     \"2019-10-02T05:00:00.000Z\": 8.6117,     \"2019-10-02T06:00:00.000Z\": 8.6001,     \"2019-10-02T07:00:00.000Z\": 8.5943,     \"2019-10-02T08:00:00.000Z\": 8.5856,     \"2019-10-02T09:00:00.000Z\": 8.577,     \"2019-10-02T10:00:00.000Z\": 8.6175,     \"2019-10-02T11:00:00.000Z\": 8.5741,     \"2019-10-02T12:00:00.000Z\": 8.5654,     \"2019-10-02T13:00:00.000Z\": 8.5625,     \"2019-10-02T14:00:00.000Z\": 8.5509,     \"2019-10-02T15:00:00.000Z\": 8.5422,     \"2019-10-02T16:00:00.000Z\": 8.5596,     \"2019-10-02T17:00:00.000Z\": 8.5856,     \"2019-10-02T18:00:00.000Z\": 8.5885,     \"2019-10-02T19:00:00.000Z\": 8.5914,     \"2019-10-02T20:00:00.000Z\": 8.5885,     \"2019-10-02T21:00:00.000Z\": 8.5856,     \"2019-10-02T22:00:00.000Z\": 8.5856,     \"2019-10-02T23:00:00.000Z\": 8.577,     \"2019-10-03T01:00:00.000Z\": 8.5712,     \"2019-10-03T02:00:00.000Z\": 8.5683,     \"2019-10-03T03:00:00.000Z\": 8.5596,     \"2019-10-03T04:00:00.000Z\": 8.5509,     \"2019-10-03T05:00:00.000Z\": 8.5538,     \"2019-10-03T06:00:00.000Z\": 8.548,     \"2019-10-03T07:00:00.000Z\": 8.5422,     \"2019-10-03T08:00:00.000Z\": 8.5365,     \"2019-10-03T09:00:00.000Z\": 8.5307,     \"2019-10-03T10:00:00.000Z\": 8.5278,     \"2019-10-03T11:00:00.000Z\": 8.5307,     \"2019-10-03T12:00:00.000Z\": 8.5365,     \"2019-10-03T13:00:00.000Z\": 8.5307,     \"2019-10-03T14:00:00.000Z\": 8.5307,     \"2019-10-03T15:00:00.000Z\": 8.5307,     \"2019-10-03T16:00:00.000Z\": 8.5278,     \"2019-10-03T17:00:00.000Z\": 8.5249,     \"2019-10-03T18:00:00.000Z\": 8.5249,     \"2019-10-03T19:00:00.000Z\": 8.5191,     \"2019-10-03T20:00:00.000Z\": 8.5191,     \"2019-10-03T21:00:00.000Z\": 8.5191,     \"2019-10-03T22:00:00.000Z\": 8.5191,     \"2019-10-03T23:00:00.000Z\": 8.5104,     \"2019-10-04T01:00:00.000Z\": 8.5104,     \"2019-10-04T02:00:00.000Z\": 8.5104,     \"2019-10-04T03:00:00.000Z\": 8.5046,     \"2019-10-04T04:00:00.000Z\": 8.4988,     \"2019-10-04T05:00:00.000Z\": 8.4988,     \"2019-10-04T06:00:00.000Z\": 8.4931,     \"2019-10-04T07:00:00.000Z\": 8.4844,     \"2019-10-04T08:00:00.000Z\": 8.4902,     \"2019-10-04T09:00:00.000Z\": 8.4468,     \"2019-10-04T10:00:00.000Z\": 8.4728,     \"2019-10-04T11:00:00.000Z\": 8.4815,     \"2019-10-04T12:00:00.000Z\": 8.4612,     \"2019-10-04T13:00:00.000Z\": 8.5075,     \"2019-10-04T14:00:00.000Z\": 8.4815,     \"2019-10-04T15:00:00.000Z\": 8.4902,     \"2019-10-04T16:00:00.000Z\": 8.548,     \"2019-10-04T17:00:00.000Z\": 8.5422,     \"2019-10-04T18:00:00.000Z\": 8.5509,     \"2019-10-04T19:00:00.000Z\": 8.5509,     \"2019-10-04T20:00:00.000Z\": 8.5509,     \"2019-10-04T21:00:00.000Z\": 8.5567,     \"2019-10-04T22:00:00.000Z\": 8.5307,     \"2019-10-04T23:00:00.000Z\": 8.5596,     \"2019-10-05T01:00:00.000Z\": 8.5712,     \"2019-10-05T02:00:00.000Z\": 8.5741,     \"2019-10-05T03:00:00.000Z\": 8.5712,     \"2019-10-05T04:00:00.000Z\": 8.5596,     \"2019-10-05T05:00:00.000Z\": 8.5654,     \"2019-10-05T06:00:00.000Z\": 8.5654,     \"2019-10-05T07:00:00.000Z\": 8.5654,     \"2019-10-05T08:00:00.000Z\": 8.5625,     \"2019-10-05T09:00:00.000Z\": 8.5625,     \"2019-10-05T10:00:00.000Z\": 8.548,     \"2019-10-05T11:00:00.000Z\": 8.5596,     \"2019-10-05T12:00:00.000Z\": 8.5596,     \"2019-10-05T13:00:00.000Z\": 8.5394,     \"2019-10-05T14:00:00.000Z\": 8.548,     \"2019-10-05T15:00:00.000Z\": 8.5538,     \"2019-10-05T16:00:00.000Z\": 8.5596,     \"2019-10-05T17:00:00.000Z\": 8.5596,     \"2019-10-05T18:00:00.000Z\": 8.5538,     \"2019-10-05T19:00:00.000Z\": 8.5596,     \"2019-10-05T20:00:00.000Z\": 8.5451,     \"2019-10-05T21:00:00.000Z\": 8.5394,     \"2019-10-05T22:00:00.000Z\": 8.5336,     \"2019-10-05T23:00:00.000Z\": 8.522,     \"2019-10-06T01:00:00.000Z\": 8.522,     \"2019-10-06T02:00:00.000Z\": 8.5104,     \"2019-10-06T03:00:00.000Z\": 8.5046,     \"2019-10-06T04:00:00.000Z\": 8.4988,     \"2019-10-06T05:00:00.000Z\": 8.5017,     \"2019-10-06T06:00:00.000Z\": 8.4844,     \"2019-10-06T07:00:00.000Z\": 8.4699,     \"2019-10-06T08:00:00.000Z\": 8.4641,     \"2019-10-06T09:00:00.000Z\": 8.4583,     \"2019-10-06T10:00:00.000Z\": 8.4525,     \"2019-10-06T11:00:00.000Z\": 8.4381,     \"2019-10-06T12:00:00.000Z\": 8.4294,     \"2019-10-06T13:00:00.000Z\": 8.4265,     \"2019-10-06T14:00:00.000Z\": 8.4178,     \"2019-10-06T15:00:00.000Z\": 8.4149,     \"2019-10-06T16:00:00.000Z\": 8.412,     \"2019-10-06T17:00:00.000Z\": 8.412,     \"2019-10-06T18:00:00.000Z\": 8.4091,     \"2019-10-06T19:00:00.000Z\": 8.4063,     \"2019-10-06T20:00:00.000Z\": 8.412,     \"2019-10-06T21:00:00.000Z\": 8.3889,     \"2019-10-06T22:00:00.000Z\": 8.4063,     \"2019-10-06T23:00:00.000Z\": 8.4063,     \"2019-10-07T01:00:00.000Z\": 8.4005,     \"2019-10-07T02:00:00.000Z\": 8.3976,     \"2019-10-07T03:00:00.000Z\": 8.3918,     \"2019-10-07T04:00:00.000Z\": 8.3889,     \"2019-10-07T05:00:00.000Z\": 8.386,     \"2019-10-07T06:00:00.000Z\": 8.3802,     \"2019-10-07T07:00:00.000Z\": 8.3628,     \"2019-10-07T08:00:00.000Z\": 8.3715,     \"2019-10-07T09:00:00.000Z\": 8.3657,     \"2019-10-07T10:00:00.000Z\": 8.36,     \"2019-10-07T11:00:00.000Z\": 8.3542,     \"2019-10-07T12:00:00.000Z\": 8.3455,     \"2019-10-07T13:00:00.000Z\": 8.36,     \"2019-10-07T14:00:00.000Z\": 8.3513,     \"2019-10-07T15:00:00.000Z\": 8.36,     \"2019-10-07T16:00:00.000Z\": 8.3571,     \"2019-10-07T17:00:00.000Z\": 8.36,     \"2019-10-07T18:00:00.000Z\": 8.3628,     \"2019-10-07T19:00:00.000Z\": 8.36,     \"2019-10-07T20:00:00.000Z\": 8.3657,     \"2019-10-07T21:00:00.000Z\": 8.3571,     \"2019-10-07T22:00:00.000Z\": 8.3657,     \"2019-10-07T23:00:00.000Z\": 8.3744,     \"2019-10-08T01:00:00.000Z\": 8.3773,     \"2019-10-08T02:00:00.000Z\": 8.3744,     \"2019-10-08T03:00:00.000Z\": 8.3744,     \"2019-10-08T04:00:00.000Z\": 8.3744,     \"2019-10-08T05:00:00.000Z\": 8.3773,     \"2019-10-08T06:00:00.000Z\": 8.3773,     \"2019-10-08T07:00:00.000Z\": 8.3802,     \"2019-10-08T08:00:00.000Z\": 8.3773,     \"2019-10-08T09:00:00.000Z\": 8.36,     \"2019-10-08T10:00:00.000Z\": 8.3628,     \"2019-10-08T11:00:00.000Z\": 8.4034,     \"2019-10-08T12:00:00.000Z\": 8.3744,     \"2019-10-08T13:00:00.000Z\": 8.4005,     \"2019-10-08T14:00:00.000Z\": 8.4294,     \"2019-10-08T15:00:00.000Z\": 8.3802,     \"2019-10-08T16:00:00.000Z\": 8.4294,     \"2019-10-08T17:00:00.000Z\": 8.4699,     \"2019-10-08T18:00:00.000Z\": 8.4902,     \"2019-10-08T19:00:00.000Z\": 8.4931,     \"2019-10-08T20:00:00.000Z\": 8.4902,     \"2019-10-08T21:00:00.000Z\": 8.4902,     \"2019-10-08T22:00:00.000Z\": 8.4873,     \"2019-10-08T23:00:00.000Z\": 8.4902,     \"2019-10-09T01:00:00.000Z\": 8.4873,     \"2019-10-09T02:00:00.000Z\": 8.4902,     \"2019-10-09T03:00:00.000Z\": 8.4902,     \"2019-10-09T04:00:00.000Z\": 8.4902,     \"2019-10-09T05:00:00.000Z\": 8.4902,     \"2019-10-09T06:00:00.000Z\": 8.4902,     \"2019-10-09T07:00:00.000Z\": 8.4902,     \"2019-10-09T08:00:00.000Z\": 8.4873,     \"2019-10-09T09:00:00.000Z\": 8.4873,     \"2019-10-09T10:00:00.000Z\": 8.522,     \"2019-10-09T11:00:00.000Z\": 8.5422,     \"2019-10-09T12:00:00.000Z\": 8.5509,     \"2019-10-09T13:00:00.000Z\": 8.5885,     \"2019-10-09T14:00:00.000Z\": 8.6088,     \"2019-10-09T15:00:00.000Z\": 8.6233,     \"2019-10-09T16:00:00.000Z\": 8.6319,     \"2019-10-09T17:00:00.000Z\": 8.6291,     \"2019-10-09T18:00:00.000Z\": 8.6464,     \"2019-10-09T19:00:00.000Z\": 8.6522,     \"2019-10-09T20:00:00.000Z\": 8.6522,     \"2019-10-09T21:00:00.000Z\": 8.6551,     \"2019-10-09T22:00:00.000Z\": 8.658,     \"2019-10-09T23:00:00.000Z\": 8.6638,     \"2019-10-10T01:00:00.000Z\": 8.6522,     \"2019-10-10T02:00:00.000Z\": 8.6725,     \"2019-10-10T03:00:00.000Z\": 8.6753,     \"2019-10-10T04:00:00.000Z\": 8.6609,     \"2019-10-10T05:00:00.000Z\": 8.6146,     \"2019-10-10T06:00:00.000Z\": 8.6522,     \"2019-10-10T07:00:00.000Z\": 8.6696,     \"2019-10-10T08:00:00.000Z\": 8.6725,     \"2019-10-10T09:00:00.000Z\": 8.6725,     \"2019-10-10T10:00:00.000Z\": 8.6811,     \"2019-10-10T11:00:00.000Z\": 8.684,     \"2019-10-10T12:00:00.000Z\": 8.684,     \"2019-10-10T13:00:00.000Z\": 8.6782,     \"2019-10-10T14:00:00.000Z\": 8.6609,     \"2019-10-10T15:00:00.000Z\": 8.6609,     \"2019-10-10T16:00:00.000Z\": 8.6059,     \"2019-10-10T17:00:00.000Z\": 8.6117,     \"2019-10-10T18:00:00.000Z\": 8.6175,     \"2019-10-10T19:00:00.000Z\": 8.6638,     \"2019-10-10T20:00:00.000Z\": 8.6667,     \"2019-10-10T21:00:00.000Z\": 8.6725,     \"2019-10-10T22:00:00.000Z\": 8.6753,     \"2019-10-10T23:00:00.000Z\": 8.6811,     \"2019-10-11T01:00:00.000Z\": 8.6782,     \"2019-10-11T02:00:00.000Z\": 8.684,     \"2019-10-11T03:00:00.000Z\": 8.6811,     \"2019-10-11T04:00:00.000Z\": 8.6782,     \"2019-10-11T05:00:00.000Z\": 8.6725,     \"2019-10-11T06:00:00.000Z\": 8.6262,     \"2019-10-11T07:00:00.000Z\": 8.6667,     \"2019-10-11T08:00:00.000Z\": 8.6667,     \"2019-10-11T09:00:00.000Z\": 8.6725,     \"2019-10-11T10:00:00.000Z\": 8.6725,     \"2019-10-11T11:00:00.000Z\": 8.6725,     \"2019-10-11T12:00:00.000Z\": 8.6725,     \"2019-10-11T13:00:00.000Z\": 8.6233,     \"2019-10-11T14:00:00.000Z\": 8.6319,     \"2019-10-11T15:00:00.000Z\": 8.6725,     \"2019-10-11T16:00:00.000Z\": 8.6753,     \"2019-10-11T17:00:00.000Z\": 8.6753,     \"2019-10-11T18:00:00.000Z\": 8.6782,     \"2019-10-11T19:00:00.000Z\": 8.6811,     \"2019-10-11T20:00:00.000Z\": 8.6811,     \"2019-10-11T21:00:00.000Z\": 8.6811,     \"2019-10-11T22:00:00.000Z\": 8.6782,     \"2019-10-11T23:00:00.000Z\": 8.6348,     \"2019-10-12T01:00:00.000Z\": 8.6811,     \"2019-10-12T02:00:00.000Z\": 8.684,     \"2019-10-12T03:00:00.000Z\": 8.6696,     \"2019-10-12T04:00:00.000Z\": 8.6811,     \"2019-10-12T05:00:00.000Z\": 8.6869,     \"2019-10-12T06:00:00.000Z\": 8.684,     \"2019-10-12T07:00:00.000Z\": 8.684,     \"2019-10-12T08:00:00.000Z\": 8.6782,     \"2019-10-12T09:00:00.000Z\": 8.6782,     \"2019-10-12T10:00:00.000Z\": 8.6753,     \"2019-10-12T11:00:00.000Z\": 8.6377,     \"2019-10-12T12:00:00.000Z\": 8.6406,     \"2019-10-12T13:00:00.000Z\": 8.6782,     \"2019-10-12T14:00:00.000Z\": 8.6782,     \"2019-10-12T15:00:00.000Z\": 8.6811,     \"2019-10-12T16:00:00.000Z\": 8.6811,     \"2019-10-12T17:00:00.000Z\": 8.6811,     \"2019-10-12T18:00:00.000Z\": 8.6782,     \"2019-10-12T19:00:00.000Z\": 8.6811,     \"2019-10-12T20:00:00.000Z\": 8.6811,     \"2019-10-12T21:00:00.000Z\": 8.6811,     \"2019-10-12T22:00:00.000Z\": 8.684,     \"2019-10-12T23:00:00.000Z\": 8.6782,     \"2019-10-13T01:00:00.000Z\": 8.6782,     \"2019-10-13T02:00:00.000Z\": 8.6725,     \"2019-10-13T03:00:00.000Z\": 8.6782,     \"2019-10-13T04:00:00.000Z\": 8.6869,     \"2019-10-13T05:00:00.000Z\": 8.6869,     \"2019-10-13T06:00:00.000Z\": 8.6898,     \"2019-10-13T07:00:00.000Z\": 8.6898,     \"2019-10-13T08:00:00.000Z\": 8.6898,     \"2019-10-13T09:00:00.000Z\": 8.6927,     \"2019-10-13T10:00:00.000Z\": 8.6927,     \"2019-10-13T11:00:00.000Z\": 8.6956,     \"2019-10-13T12:00:00.000Z\": 8.7014,     \"2019-10-13T13:00:00.000Z\": 8.7043,     \"2019-10-13T14:00:00.000Z\": 8.7072,     \"2019-10-13T15:00:00.000Z\": 8.7101,     \"2019-10-13T16:00:00.000Z\": 8.7188,     \"2019-10-13T17:00:00.000Z\": 8.7332,     \"2019-10-13T18:00:00.000Z\": 8.739,     \"2019-10-13T19:00:00.000Z\": 8.7535,     \"2019-10-13T20:00:00.000Z\": 8.7622,     \"2019-10-13T21:00:00.000Z\": 8.7708,     \"2019-10-13T22:00:00.000Z\": 8.7766,     \"2019-10-13T23:00:00.000Z\": 8.7824,     \"2019-10-14T01:00:00.000Z\": 8.7882,     \"2019-10-14T02:00:00.000Z\": 8.794,     \"2019-10-14T03:00:00.000Z\": 8.7882,     \"2019-10-14T04:00:00.000Z\": 8.7882,     \"2019-10-14T05:00:00.000Z\": 8.794,     \"2019-10-14T06:00:00.000Z\": 8.794,     \"2019-10-14T07:00:00.000Z\": 8.794,     \"2019-10-14T08:00:00.000Z\": 8.7969,     \"2019-10-14T09:00:00.000Z\": 8.7998,     \"2019-10-14T10:00:00.000Z\": 8.7998,     \"2019-10-14T11:00:00.000Z\": 8.7998,     \"2019-10-14T12:00:00.000Z\": 8.7969,     \"2019-10-14T13:00:00.000Z\": 8.7998,     \"2019-10-14T14:00:00.000Z\": 8.794,     \"2019-10-14T15:00:00.000Z\": 8.8084,     \"2019-10-14T16:00:00.000Z\": 8.8113,     \"2019-10-14T17:00:00.000Z\": 8.8056,     \"2019-10-14T18:00:00.000Z\": 8.8056,     \"2019-10-14T19:00:00.000Z\": 8.8056,     \"2019-10-14T20:00:00.000Z\": 8.8027,     \"2019-10-14T21:00:00.000Z\": 8.8056,     \"2019-10-14T22:00:00.000Z\": 8.8027,     \"2019-10-14T23:00:00.000Z\": 8.8142,     \"2019-10-15T01:00:00.000Z\": 8.8142,     \"2019-10-15T02:00:00.000Z\": 8.82,     \"2019-10-15T03:00:00.000Z\": 8.8229,     \"2019-10-15T04:00:00.000Z\": 8.8229,     \"2019-10-15T05:00:00.000Z\": 8.8345,     \"2019-10-15T06:00:00.000Z\": 8.8316,     \"2019-10-15T07:00:00.000Z\": 8.8229,     \"2019-10-15T08:00:00.000Z\": 8.8171,     \"2019-10-15T09:00:00.000Z\": 8.8229,     \"2019-10-15T10:00:00.000Z\": 8.82,     \"2019-10-15T11:00:00.000Z\": 8.8142,     \"2019-10-15T12:00:00.000Z\": 8.8142,     \"2019-10-15T13:00:00.000Z\": 8.8171,     \"2019-10-15T14:00:00.000Z\": 8.8258,     \"2019-10-15T15:00:00.000Z\": 8.82,     \"2019-10-15T16:00:00.000Z\": 8.8287,     \"2019-10-15T17:00:00.000Z\": 8.8229,     \"2019-10-15T18:00:00.000Z\": 8.8142,     \"2019-10-15T19:00:00.000Z\": 8.8113,     \"2019-10-15T20:00:00.000Z\": 8.8084,     \"2019-10-15T21:00:00.000Z\": 8.8142,     \"2019-10-15T22:00:00.000Z\": 8.8084,     \"2019-10-15T23:00:00.000Z\": 8.7824,     \"2019-10-16T01:00:00.000Z\": 8.7708,     \"2019-10-16T02:00:00.000Z\": 8.794,     \"2019-10-16T03:00:00.000Z\": 8.8027,     \"2019-10-16T04:00:00.000Z\": 8.7708,     \"2019-10-16T05:00:00.000Z\": 8.7969,     \"2019-10-16T06:00:00.000Z\": 8.8171,     \"2019-10-16T07:00:00.000Z\": 8.8113,     \"2019-10-16T08:00:00.000Z\": 8.8171,     \"2019-10-16T09:00:00.000Z\": 8.8084,     \"2019-10-16T10:00:00.000Z\": 8.7766,     \"2019-10-16T11:00:00.000Z\": 8.7679,     \"2019-10-16T12:00:00.000Z\": 8.713,     \"2019-10-16T13:00:00.000Z\": 8.6464,     \"2019-10-16T14:00:00.000Z\": 8.6725,     \"2019-10-16T15:00:00.000Z\": 8.6696,     \"2019-10-16T16:00:00.000Z\": 8.6319,     \"2019-10-16T17:00:00.000Z\": 8.6638,     \"2019-10-16T18:00:00.000Z\": 8.7072,     \"2019-10-16T19:00:00.000Z\": 8.7159,     \"2019-10-16T20:00:00.000Z\": 8.7216,     \"2019-10-16T21:00:00.000Z\": 8.7477,     \"2019-10-16T22:00:00.000Z\": 8.7506,     \"2019-10-16T23:00:00.000Z\": 8.765,     \"2019-10-17T01:00:00.000Z\": 8.7824,     \"2019-10-17T02:00:00.000Z\": 8.7708,     \"2019-10-17T03:00:00.000Z\": 8.7679,     \"2019-10-17T04:00:00.000Z\": 8.794,     \"2019-10-17T05:00:00.000Z\": 8.7998,     \"2019-10-17T06:00:00.000Z\": 8.7911,     \"2019-10-17T07:00:00.000Z\": 8.7882,     \"2019-10-17T08:00:00.000Z\": 8.765,     \"2019-10-17T09:00:00.000Z\": 8.7448,     \"2019-10-17T10:00:00.000Z\": 8.6898,     \"2019-10-17T11:00:00.000Z\": 8.6782,     \"2019-10-17T12:00:00.000Z\": 8.5567,     \"2019-10-17T13:00:00.000Z\": 8.5741,     \"2019-10-17T14:00:00.000Z\": 8.603,     \"2019-10-17T15:00:00.000Z\": 8.5943,     \"2019-10-17T16:00:00.000Z\": 8.6117,     \"2019-10-17T17:00:00.000Z\": 8.6088,     \"2019-10-17T18:00:00.000Z\": 8.6088,     \"2019-10-17T19:00:00.000Z\": 8.6059,     \"2019-10-17T20:00:00.000Z\": 8.5972,     \"2019-10-17T21:00:00.000Z\": 8.6088,     \"2019-10-17T22:00:00.000Z\": 8.6175,     \"2019-10-17T23:00:00.000Z\": 8.6146,     \"2019-10-18T01:00:00.000Z\": 8.6059,     \"2019-10-18T02:00:00.000Z\": 8.6204,     \"2019-10-18T03:00:00.000Z\": 8.6233,     \"2019-10-18T04:00:00.000Z\": 8.6262,     \"2019-10-18T05:00:00.000Z\": 8.6262,     \"2019-10-18T06:00:00.000Z\": 8.6233,     \"2019-10-18T07:00:00.000Z\": 8.603,     \"2019-10-18T08:00:00.000Z\": 8.6262,     \"2019-10-18T09:00:00.000Z\": 8.6233,     \"2019-10-18T10:00:00.000Z\": 8.603,     \"2019-10-18T11:00:00.000Z\": 8.6464,     \"2019-10-18T12:00:00.000Z\": 8.6667,     \"2019-10-18T13:00:00.000Z\": 8.6956,     \"2019-10-18T14:00:00.000Z\": 8.7159,     \"2019-10-18T15:00:00.000Z\": 8.7188,     \"2019-10-18T16:00:00.000Z\": 8.7188,     \"2019-10-18T17:00:00.000Z\": 8.7303,     \"2019-10-18T18:00:00.000Z\": 8.7361,     \"2019-10-18T19:00:00.000Z\": 8.7361,     \"2019-10-18T20:00:00.000Z\": 8.7332,     \"2019-10-18T21:00:00.000Z\": 8.7245,     \"2019-10-18T22:00:00.000Z\": 8.7188,     \"2019-10-18T23:00:00.000Z\": 8.7159,     \"2019-10-19T01:00:00.000Z\": 8.7072,     \"2019-10-19T02:00:00.000Z\": 8.6985,     \"2019-10-19T03:00:00.000Z\": 8.6782,     \"2019-10-19T04:00:00.000Z\": 8.6898,     \"2019-10-19T05:00:00.000Z\": 8.6811,     \"2019-10-19T06:00:00.000Z\": 8.6725,     \"2019-10-19T07:00:00.000Z\": 8.6696,     \"2019-10-19T08:00:00.000Z\": 8.6667,     \"2019-10-19T09:00:00.000Z\": 8.6551,     \"2019-10-19T10:00:00.000Z\": 8.6464,     \"2019-10-19T11:00:00.000Z\": 8.6406,     \"2019-10-19T12:00:00.000Z\": 8.6406,     \"2019-10-19T13:00:00.000Z\": 8.6377,     \"2019-10-19T14:00:00.000Z\": 8.6348,     \"2019-10-19T15:00:00.000Z\": 8.6348,     \"2019-10-19T16:00:00.000Z\": 8.6059,     \"2019-10-19T17:00:00.000Z\": 8.6175,     \"2019-10-19T18:00:00.000Z\": 8.6319,     \"2019-10-19T19:00:00.000Z\": 8.6262,     \"2019-10-19T20:00:00.000Z\": 8.6204,     \"2019-10-19T21:00:00.000Z\": 8.6204,     \"2019-10-19T22:00:00.000Z\": 8.6204,     \"2019-10-19T23:00:00.000Z\": 8.6204,     \"2019-10-20T01:00:00.000Z\": 8.6146,     \"2019-10-20T02:00:00.000Z\": 8.6088,     \"2019-10-20T03:00:00.000Z\": 8.6088,     \"2019-10-20T04:00:00.000Z\": 8.6059,     \"2019-10-20T05:00:00.000Z\": 8.6001,     \"2019-10-20T06:00:00.000Z\": 8.5972,     \"2019-10-20T07:00:00.000Z\": 8.5828,     \"2019-10-20T08:00:00.000Z\": 8.5856,     \"2019-10-20T09:00:00.000Z\": 8.5799,     \"2019-10-20T10:00:00.000Z\": 8.5856,     \"2019-10-20T11:00:00.000Z\": 8.5856,     \"2019-10-20T12:00:00.000Z\": 8.5828,     \"2019-10-20T13:00:00.000Z\": 8.5799,     \"2019-10-20T14:00:00.000Z\": 8.577,     \"2019-10-20T15:00:00.000Z\": 8.5712,     \"2019-10-20T16:00:00.000Z\": 8.5422,     \"2019-10-20T17:00:00.000Z\": 8.5625,     \"2019-10-20T18:00:00.000Z\": 8.5654,     \"2019-10-20T19:00:00.000Z\": 8.5625,     \"2019-10-20T20:00:00.000Z\": 8.5567,     \"2019-10-20T21:00:00.000Z\": 8.5538,     \"2019-10-20T22:00:00.000Z\": 8.5509,     \"2019-10-20T23:00:00.000Z\": 8.5451,     \"2019-10-21T01:00:00.000Z\": 8.5422,     \"2019-10-21T02:00:00.000Z\": 8.5422,     \"2019-10-21T03:00:00.000Z\": 8.5394,     \"2019-10-21T04:00:00.000Z\": 8.5336,     \"2019-10-21T05:00:00.000Z\": 8.5365,     \"2019-10-21T06:00:00.000Z\": 8.5365,     \"2019-10-21T07:00:00.000Z\": 8.5365,     \"2019-10-21T08:00:00.000Z\": 8.5365,     \"2019-10-21T09:00:00.000Z\": 8.5307,     \"2019-10-21T10:00:00.000Z\": 8.4699,     \"2019-10-21T11:00:00.000Z\": 8.4873,     \"2019-10-21T12:00:00.000Z\": 8.4988,     \"2019-10-21T13:00:00.000Z\": 8.5017,     \"2019-10-21T14:00:00.000Z\": 8.5017,     \"2019-10-21T15:00:00.000Z\": 8.5046,     \"2019-10-21T16:00:00.000Z\": 8.5075,     \"2019-10-21T17:00:00.000Z\": 8.5075,     \"2019-10-21T18:00:00.000Z\": 8.4902,     \"2019-10-21T19:00:00.000Z\": 8.4902,     \"2019-10-21T20:00:00.000Z\": 8.4959,     \"2019-10-21T21:00:00.000Z\": 8.4959,     \"2019-10-21T22:00:00.000Z\": 8.4931,     \"2019-10-21T23:00:00.000Z\": 8.4959,     \"2019-10-22T01:00:00.000Z\": 8.4873,     \"2019-10-22T02:00:00.000Z\": 8.4873,     \"2019-10-22T03:00:00.000Z\": 8.4873,     \"2019-10-22T04:00:00.000Z\": 8.4873,     \"2019-10-22T05:00:00.000Z\": 8.4873,     \"2019-10-22T06:00:00.000Z\": 8.4786,     \"2019-10-22T07:00:00.000Z\": 8.4786,     \"2019-10-22T08:00:00.000Z\": 8.467,     \"2019-10-22T09:00:00.000Z\": 8.522,     \"2019-10-22T10:00:00.000Z\": 8.5683,     \"2019-10-22T11:00:00.000Z\": 8.577,     \"2019-10-22T12:00:00.000Z\": 8.5828,     \"2019-10-22T13:00:00.000Z\": 8.5885,     \"2019-10-22T14:00:00.000Z\": 8.5799,     \"2019-10-22T15:00:00.000Z\": 8.5741,     \"2019-10-22T16:00:00.000Z\": 8.5712,     \"2019-10-22T17:00:00.000Z\": 8.5741,     \"2019-10-22T18:00:00.000Z\": 8.5683,     \"2019-10-22T19:00:00.000Z\": 8.5712,     \"2019-10-22T20:00:00.000Z\": 8.5683,     \"2019-10-22T21:00:00.000Z\": 8.5683,     \"2019-10-22T22:00:00.000Z\": 8.5654,     \"2019-10-22T23:00:00.000Z\": 8.5654,     \"2019-10-23T01:00:00.000Z\": 8.5625,     \"2019-10-23T02:00:00.000Z\": 8.5596,     \"2019-10-23T03:00:00.000Z\": 8.5596,     \"2019-10-23T04:00:00.000Z\": 8.5596,     \"2019-10-23T05:00:00.000Z\": 8.5596,     \"2019-10-23T06:00:00.000Z\": 8.548,     \"2019-10-23T07:00:00.000Z\": 8.548,     \"2019-10-23T08:00:00.000Z\": 8.5394,     \"2019-10-23T09:00:00.000Z\": 8.5394,     \"2019-10-23T10:00:00.000Z\": 8.5394,     \"2019-10-23T11:00:00.000Z\": 8.5336,     \"2019-10-23T12:00:00.000Z\": 8.5625,     \"2019-10-23T13:00:00.000Z\": 8.5683,     \"2019-10-23T14:00:00.000Z\": 8.5712,     \"2019-10-23T15:00:00.000Z\": 8.4728,     \"2019-10-23T16:00:00.000Z\": 8.4844,     \"2019-10-23T17:00:00.000Z\": 8.4815,     \"2019-10-23T18:00:00.000Z\": 8.5017,     \"2019-10-23T19:00:00.000Z\": 8.5104,     \"2019-10-23T20:00:00.000Z\": 8.5162,     \"2019-10-23T21:00:00.000Z\": 8.522,     \"2019-10-23T22:00:00.000Z\": 8.5162,     \"2019-10-23T23:00:00.000Z\": 8.5278,     \"2019-10-24T01:00:00.000Z\": 8.5162,     \"2019-10-24T02:00:00.000Z\": 8.5307,     \"2019-10-24T03:00:00.000Z\": 8.5394,     \"2019-10-24T04:00:00.000Z\": 8.5394,     \"2019-10-24T05:00:00.000Z\": 8.548,     \"2019-10-24T06:00:00.000Z\": 8.5075,     \"2019-10-24T07:00:00.000Z\": 8.5538,     \"2019-10-24T08:00:00.000Z\": 8.5741,     \"2019-10-24T09:00:00.000Z\": 8.5828,     \"2019-10-24T10:00:00.000Z\": 8.5914,     \"2019-10-24T11:00:00.000Z\": 8.5856,     \"2019-10-24T12:00:00.000Z\": 8.5914,     \"2019-10-24T13:00:00.000Z\": 8.5972,     \"2019-10-24T14:00:00.000Z\": 8.5972,     \"2019-10-24T15:00:00.000Z\": 8.6001,     \"2019-10-24T16:00:00.000Z\": 8.6088,     \"2019-10-24T17:00:00.000Z\": 8.6117,     \"2019-10-24T18:00:00.000Z\": 8.6175,     \"2019-10-24T19:00:00.000Z\": 8.6175,     \"2019-10-24T20:00:00.000Z\": 8.603,     \"2019-10-24T21:00:00.000Z\": 8.6059,     \"2019-10-24T22:00:00.000Z\": 8.603,     \"2019-10-24T23:00:00.000Z\": 8.6088,     \"2019-10-25T01:00:00.000Z\": 8.6117,     \"2019-10-25T02:00:00.000Z\": 8.6175,     \"2019-10-25T03:00:00.000Z\": 8.6146,     \"2019-10-25T04:00:00.000Z\": 8.6146,     \"2019-10-25T05:00:00.000Z\": 8.603,     \"2019-10-25T06:00:00.000Z\": 8.5683,     \"2019-10-25T07:00:00.000Z\": 8.5683,     \"2019-10-25T08:00:00.000Z\": 8.5625,     \"2019-10-25T09:00:00.000Z\": 8.5654,     \"2019-10-25T10:00:00.000Z\": 8.5741,     \"2019-10-25T11:00:00.000Z\": 8.5712,     \"2019-10-25T12:00:00.000Z\": 8.5654,     \"2019-10-25T13:00:00.000Z\": 8.5625,     \"2019-10-25T14:00:00.000Z\": 8.5596,     \"2019-10-25T15:00:00.000Z\": 8.5712,     \"2019-10-25T16:00:00.000Z\": 8.5654,     \"2019-10-25T17:00:00.000Z\": 8.5828,     \"2019-10-25T18:00:00.000Z\": 8.6001,     \"2019-10-25T19:00:00.000Z\": 8.5914,     \"2019-10-25T20:00:00.000Z\": 8.5914,     \"2019-10-25T21:00:00.000Z\": 8.5856,     \"2019-10-25T22:00:00.000Z\": 8.5914,     \"2019-10-25T23:00:00.000Z\": 8.5828,     \"2019-10-26T01:00:00.000Z\": 8.5914,     \"2019-10-26T02:00:00.000Z\": 8.5741,     \"2019-10-26T03:00:00.000Z\": 8.5943,     \"2019-10-26T04:00:00.000Z\": 8.5828,     \"2019-10-26T05:00:00.000Z\": 8.5885,     \"2019-10-26T06:00:00.000Z\": 8.5914,     \"2019-10-26T07:00:00.000Z\": 8.5943,     \"2019-10-26T08:00:00.000Z\": 8.5943,     \"2019-10-26T09:00:00.000Z\": 8.5943,     \"2019-10-26T10:00:00.000Z\": 8.5943,     \"2019-10-26T11:00:00.000Z\": 8.577,     \"2019-10-26T12:00:00.000Z\": 8.5972,     \"2019-10-26T13:00:00.000Z\": 8.6001,     \"2019-10-26T14:00:00.000Z\": 8.6146,     \"2019-10-26T15:00:00.000Z\": 8.6117,     \"2019-10-26T16:00:00.000Z\": 8.6001,     \"2019-10-26T17:00:00.000Z\": 8.5596,     \"2019-10-26T18:00:00.000Z\": 8.5509,     \"2019-10-26T19:00:00.000Z\": 8.5422,     \"2019-10-26T20:00:00.000Z\": 8.5336,     \"2019-10-26T21:00:00.000Z\": 8.5278,     \"2019-10-26T22:00:00.000Z\": 8.5278,     \"2019-10-26T23:00:00.000Z\": 8.5683,     \"2019-10-27T01:00:00.000Z\": 8.5712,     \"2019-10-27T02:00:00.000Z\": 8.5741,     \"2019-10-27T03:00:00.000Z\": 8.5741,     \"2019-10-27T04:00:00.000Z\": 8.5828,     \"2019-10-27T05:00:00.000Z\": 8.548,     \"2019-10-27T06:00:00.000Z\": 8.5741,     \"2019-10-27T07:00:00.000Z\": 8.5712,     \"2019-10-27T08:00:00.000Z\": 8.5509,     \"2019-10-27T09:00:00.000Z\": 8.5741,     \"2019-10-27T10:00:00.000Z\": 8.5741,     \"2019-10-27T11:00:00.000Z\": 8.5712,     \"2019-10-27T12:00:00.000Z\": 8.5712,     \"2019-10-27T13:00:00.000Z\": 8.5914,     \"2019-10-27T14:00:00.000Z\": 8.577,     \"2019-10-27T15:00:00.000Z\": 8.5741,     \"2019-10-27T16:00:00.000Z\": 8.5799,     \"2019-10-27T17:00:00.000Z\": 8.5828,     \"2019-10-27T18:00:00.000Z\": 8.5828,     \"2019-10-27T19:00:00.000Z\": 8.577,     \"2019-10-27T20:00:00.000Z\": 8.5625,     \"2019-10-27T21:00:00.000Z\": 8.5394,     \"2019-10-27T22:00:00.000Z\": 8.5509,     \"2019-10-27T23:00:00.000Z\": 8.5451,     \"2019-10-28T01:00:00.000Z\": 8.5394,     \"2019-10-28T02:00:00.000Z\": 8.5365,     \"2019-10-28T03:00:00.000Z\": 8.5191,     \"2019-10-28T04:00:00.000Z\": 8.5191,     \"2019-10-28T05:00:00.000Z\": 8.5046,     \"2019-10-28T06:00:00.000Z\": 8.4959,     \"2019-10-28T07:00:00.000Z\": 8.4873,     \"2019-10-28T08:00:00.000Z\": 8.4873,     \"2019-10-28T09:00:00.000Z\": 8.467,     \"2019-10-28T10:00:00.000Z\": 8.4525,     \"2019-10-28T11:00:00.000Z\": 8.4468,     \"2019-10-28T12:00:00.000Z\": 8.4381,     \"2019-10-28T13:00:00.000Z\": 8.4005,     \"2019-10-28T14:00:00.000Z\": 8.3773,     \"2019-10-28T15:00:00.000Z\": 8.3686,     \"2019-10-28T16:00:00.000Z\": 8.3657,     \"2019-10-28T17:00:00.000Z\": 8.3571,     \"2019-10-28T18:00:00.000Z\": 8.3831,     \"2019-10-28T19:00:00.000Z\": 8.3744,     \"2019-10-28T20:00:00.000Z\": 8.3686,     \"2019-10-28T21:00:00.000Z\": 8.36,     \"2019-10-28T22:00:00.000Z\": 8.3571,     \"2019-10-28T23:00:00.000Z\": 8.3513,     \"2019-10-29T01:00:00.000Z\": 8.3455,     \"2019-10-29T02:00:00.000Z\": 8.3368,     \"2019-10-29T03:00:00.000Z\": 8.3455,     \"2019-10-29T04:00:00.000Z\": 8.3455,     \"2019-10-29T05:00:00.000Z\": 8.3571,     \"2019-10-29T06:00:00.000Z\": 8.3513,     \"2019-10-29T07:00:00.000Z\": 8.3455,     \"2019-10-29T08:00:00.000Z\": 8.3397,     \"2019-10-29T09:00:00.000Z\": 8.3368,     \"2019-10-29T10:00:00.000Z\": 8.6522,     \"2019-10-29T11:00:00.000Z\": 8.6377,     \"2019-10-29T12:00:00.000Z\": 8.6638,     \"2019-10-29T13:00:00.000Z\": 8.6204,     \"2019-10-29T14:00:00.000Z\": 8.5943,     \"2019-10-29T15:00:00.000Z\": 8.6435,     \"2019-10-29T16:00:00.000Z\": 8.6522,     \"2019-10-29T17:00:00.000Z\": 8.6667,     \"2019-10-29T18:00:00.000Z\": 8.6638,     \"2019-10-29T19:00:00.000Z\": 8.6493,     \"2019-10-29T20:00:00.000Z\": 8.6493,     \"2019-10-29T21:00:00.000Z\": 8.6146,     \"2019-10-29T22:00:00.000Z\": 8.5885,     \"2019-10-29T23:00:00.000Z\": 8.6319,     \"2019-10-30T01:00:00.000Z\": 8.6233,     \"2019-10-30T02:00:00.000Z\": 8.6262,     \"2019-10-30T03:00:00.000Z\": 8.6493,     \"2019-10-30T04:00:00.000Z\": 8.6175,     \"2019-10-30T05:00:00.000Z\": 8.5856,     \"2019-10-30T06:00:00.000Z\": 8.6291,     \"2019-10-30T07:00:00.000Z\": 8.6348,     \"2019-10-30T08:00:00.000Z\": 8.5914,     \"2019-10-30T09:00:00.000Z\": 8.577,     \"2019-10-30T10:00:00.000Z\": 8.603,     \"2019-10-30T11:00:00.000Z\": 8.658,     \"2019-10-30T12:00:00.000Z\": 8.6204,     \"2019-10-30T13:00:00.000Z\": 8.6001,     \"2019-10-30T14:00:00.000Z\": 8.6233,     \"2019-10-30T15:00:00.000Z\": 8.658,     \"2019-10-30T16:00:00.000Z\": 8.6464,     \"2019-10-30T17:00:00.000Z\": 8.6319,     \"2019-10-30T18:00:00.000Z\": 8.6204,     \"2019-10-30T19:00:00.000Z\": 8.5972,     \"2019-10-30T20:00:00.000Z\": 8.5914,     \"2019-10-30T21:00:00.000Z\": 8.5712,     \"2019-10-30T22:00:00.000Z\": 8.5307,     \"2019-10-30T23:00:00.000Z\": 8.5596,     \"2019-10-31T01:00:00.000Z\": 8.577,     \"2019-10-31T02:00:00.000Z\": 8.5885,     \"2019-10-31T03:00:00.000Z\": 8.5799,     \"2019-10-31T04:00:00.000Z\": 8.5336,     \"2019-10-31T05:00:00.000Z\": 8.5683,     \"2019-10-31T06:00:00.000Z\": 8.5625,     \"2019-10-31T07:00:00.000Z\": 8.5712,     \"2019-10-31T08:00:00.000Z\": 8.5567,     \"2019-10-31T09:00:00.000Z\": 8.5046,     \"2019-10-31T10:00:00.000Z\": 8.5422,     \"2019-10-31T11:00:00.000Z\": 8.5394,     \"2019-10-31T12:00:00.000Z\": 8.5162,     \"2019-10-31T13:00:00.000Z\": 8.4641,     \"2019-10-31T14:00:00.000Z\": 8.4815,     \"2019-10-31T15:00:00.000Z\": 8.5162,     \"2019-10-31T16:00:00.000Z\": 8.5104,     \"2019-10-31T17:00:00.000Z\": 8.4902,     \"2019-10-31T18:00:00.000Z\": 8.4873,     \"2019-10-31T19:00:00.000Z\": 8.4873,     \"2019-10-31T20:00:00.000Z\": 8.4554,     \"2019-10-31T21:00:00.000Z\": 8.4612,     \"2019-10-31T22:00:00.000Z\": 8.4497,     \"2019-10-31T23:00:00.000Z\": 8.4699,     \"2019-11-01T01:00:00.000Z\": 8.4525,     \"2019-11-01T02:00:00.000Z\": 8.4931,     \"2019-11-01T03:00:00.000Z\": 8.4699,     \"2019-11-01T04:00:00.000Z\": 8.4381,     \"2019-11-01T05:00:00.000Z\": 8.4583,     \"2019-11-01T06:00:00.000Z\": 8.4294,     \"2019-11-01T07:00:00.000Z\": 8.4757,     \"2019-11-01T08:00:00.000Z\": 8.4757,     \"2019-11-01T09:00:00.000Z\": 8.4381,     \"2019-11-01T10:00:00.000Z\": 8.4583,     \"2019-11-01T11:00:00.000Z\": 8.4728,     \"2019-11-01T12:00:00.000Z\": 8.4786,     \"2019-11-01T13:00:00.000Z\": 8.4554,     \"2019-11-01T14:00:00.000Z\": 8.4294,     \"2019-11-01T15:00:00.000Z\": 8.4728,     \"2019-11-01T16:00:00.000Z\": 8.4902,     \"2019-11-01T17:00:00.000Z\": 8.4786,     \"2019-11-01T18:00:00.000Z\": 8.4757,     \"2019-11-01T19:00:00.000Z\": 8.4786,     \"2019-11-01T20:00:00.000Z\": 8.4757,     \"2019-11-01T21:00:00.000Z\": 8.4525,     \"2019-11-01T22:00:00.000Z\": 8.4554,     \"2019-11-01T23:00:00.000Z\": 8.4902,     \"2019-11-02T01:00:00.000Z\": 8.4815,     \"2019-11-02T02:00:00.000Z\": 8.4786,     \"2019-11-02T03:00:00.000Z\": 8.4873,     \"2019-11-02T04:00:00.000Z\": 8.4699,     \"2019-11-02T05:00:00.000Z\": 8.4352,     \"2019-11-02T06:00:00.000Z\": 8.4525,     \"2019-11-02T07:00:00.000Z\": 8.4699,     \"2019-11-02T08:00:00.000Z\": 8.467,     \"2019-11-02T09:00:00.000Z\": 8.4757,     \"2019-11-02T10:00:00.000Z\": 8.4757,     \"2019-11-02T11:00:00.000Z\": 8.4844,     \"2019-11-02T12:00:00.000Z\": 8.4786,     \"2019-11-02T13:00:00.000Z\": 8.4554,     \"2019-11-02T14:00:00.000Z\": 8.4988,     \"2019-11-02T15:00:00.000Z\": 8.4902,     \"2019-11-02T16:00:00.000Z\": 8.4959,     \"2019-11-02T17:00:00.000Z\": 8.4959,     \"2019-11-02T18:00:00.000Z\": 8.4959,     \"2019-11-02T19:00:00.000Z\": 8.4873,     \"2019-11-02T20:00:00.000Z\": 8.4757,     \"2019-11-02T21:00:00.000Z\": 8.4959,     \"2019-11-02T22:00:00.000Z\": 8.4757,     \"2019-11-02T23:00:00.000Z\": 8.4931,     \"2019-11-03T01:00:00.000Z\": 8.4844,     \"2019-11-03T02:00:00.000Z\": 8.5075,     \"2019-11-03T03:00:00.000Z\": 8.5104,     \"2019-11-03T04:00:00.000Z\": 8.5133,     \"2019-11-03T05:00:00.000Z\": 8.4988,     \"2019-11-03T06:00:00.000Z\": 8.4641,     \"2019-11-03T07:00:00.000Z\": 8.4959,     \"2019-11-03T08:00:00.000Z\": 8.5162,     \"2019-11-03T09:00:00.000Z\": 8.548,     \"2019-11-03T10:00:00.000Z\": 8.5336,     \"2019-11-03T11:00:00.000Z\": 8.5654,     \"2019-11-03T12:00:00.000Z\": 8.5509,     \"2019-11-03T13:00:00.000Z\": 8.5654,     \"2019-11-03T14:00:00.000Z\": 8.5567,     \"2019-11-03T15:00:00.000Z\": 8.5596,     \"2019-11-03T16:00:00.000Z\": 8.577,     \"2019-11-03T17:00:00.000Z\": 8.5741,     \"2019-11-03T18:00:00.000Z\": 8.577,     \"2019-11-03T19:00:00.000Z\": 8.5828,     \"2019-11-03T20:00:00.000Z\": 8.5712,     \"2019-11-03T21:00:00.000Z\": 8.5654,     \"2019-11-03T22:00:00.000Z\": 8.5856,     \"2019-11-03T23:00:00.000Z\": 8.5741,     \"2019-11-04T01:00:00.000Z\": 8.5943,     \"2019-11-04T02:00:00.000Z\": 8.6001,     \"2019-11-04T03:00:00.000Z\": 8.6175,     \"2019-11-04T04:00:00.000Z\": 8.6117,     \"2019-11-04T05:00:00.000Z\": 8.6117,     \"2019-11-04T06:00:00.000Z\": 8.6233,     \"2019-11-04T07:00:00.000Z\": 8.6319,     \"2019-11-04T08:00:00.000Z\": 8.6175,     \"2019-11-04T09:00:00.000Z\": 8.6001,     \"2019-11-04T10:00:00.000Z\": 8.6175,     \"2019-11-04T11:00:00.000Z\": 8.6406,     \"2019-11-04T12:00:00.000Z\": 8.6175,     \"2019-11-04T13:00:00.000Z\": 8.6088,     \"2019-11-04T14:00:00.000Z\": 8.6377,     \"2019-11-04T15:00:00.000Z\": 8.6319,     \"2019-11-04T16:00:00.000Z\": 8.6435,     \"2019-11-04T17:00:00.000Z\": 8.6435,     \"2019-11-04T18:00:00.000Z\": 8.6464,     \"2019-11-04T19:00:00.000Z\": 8.6319,     \"2019-11-04T20:00:00.000Z\": 8.6146,     \"2019-11-04T21:00:00.000Z\": 8.6464,     \"2019-11-04T22:00:00.000Z\": 8.6406,     \"2019-11-04T23:00:00.000Z\": 8.6175,     \"2019-11-05T01:00:00.000Z\": 8.6464,     \"2019-11-05T02:00:00.000Z\": 8.6551,     \"2019-11-05T03:00:00.000Z\": 8.6464,     \"2019-11-05T04:00:00.000Z\": 8.6464,     \"2019-11-05T05:00:00.000Z\": 8.6377,     \"2019-11-05T06:00:00.000Z\": 8.6667,     \"2019-11-05T07:00:00.000Z\": 8.6551,     \"2019-11-05T08:00:00.000Z\": 8.6551,     \"2019-11-05T09:00:00.000Z\": 8.6435,     \"2019-11-05T10:00:00.000Z\": 8.6493,     \"2019-11-05T11:00:00.000Z\": 8.6696,     \"2019-11-05T12:00:00.000Z\": 8.6464,     \"2019-11-05T13:00:00.000Z\": 8.6319,     \"2019-11-05T14:00:00.000Z\": 8.6551,     \"2019-11-05T15:00:00.000Z\": 8.6667,     \"2019-11-05T16:00:00.000Z\": 8.6725,     \"2019-11-05T17:00:00.000Z\": 8.6638,     \"2019-11-05T18:00:00.000Z\": 8.6725,     \"2019-11-05T19:00:00.000Z\": 8.6725,     \"2019-11-05T20:00:00.000Z\": 8.6696,     \"2019-11-05T21:00:00.000Z\": 8.6464,     \"2019-11-05T22:00:00.000Z\": 8.6638,     \"2019-11-05T23:00:00.000Z\": 8.6435,     \"2019-11-06T01:00:00.000Z\": 8.6609,     \"2019-11-06T02:00:00.000Z\": 8.6667,     \"2019-11-06T03:00:00.000Z\": 8.6725,     \"2019-11-06T04:00:00.000Z\": 8.6725,     \"2019-11-06T05:00:00.000Z\": 8.6638,     \"2019-11-06T06:00:00.000Z\": 8.6522,     \"2019-11-06T07:00:00.000Z\": 8.6725,     \"2019-11-06T08:00:00.000Z\": 8.6638,     \"2019-11-06T09:00:00.000Z\": 8.6377,     \"2019-11-06T10:00:00.000Z\": 8.6551,     \"2019-11-06T11:00:00.000Z\": 8.658,     \"2019-11-06T12:00:00.000Z\": 8.6406,     \"2019-11-06T13:00:00.000Z\": 8.658,     \"2019-11-06T14:00:00.000Z\": 8.6146,     \"2019-11-06T15:00:00.000Z\": 8.5885,     \"2019-11-06T16:00:00.000Z\": 8.6638,     \"2019-11-06T17:00:00.000Z\": 8.658,     \"2019-11-06T18:00:00.000Z\": 8.6638,     \"2019-11-06T19:00:00.000Z\": 8.6609,     \"2019-11-06T20:00:00.000Z\": 8.6638,     \"2019-11-06T21:00:00.000Z\": 8.6319,     \"2019-11-06T22:00:00.000Z\": 8.6348,     \"2019-11-06T23:00:00.000Z\": 8.6464,     \"2019-11-07T01:00:00.000Z\": 8.6435,     \"2019-11-07T02:00:00.000Z\": 8.6551,     \"2019-11-07T03:00:00.000Z\": 8.6377,     \"2019-11-07T04:00:00.000Z\": 8.6522,     \"2019-11-07T05:00:00.000Z\": 8.6175,     \"2019-11-07T06:00:00.000Z\": 8.6319,     \"2019-11-07T07:00:00.000Z\": 8.6377,     \"2019-11-07T08:00:00.000Z\": 8.6001,     \"2019-11-07T09:00:00.000Z\": 8.5828,     \"2019-11-07T10:00:00.000Z\": 8.5712,     \"2019-11-07T11:00:00.000Z\": 7.2141,     \"2019-11-07T12:00:00.000Z\": 7.3125,     \"2019-11-07T13:00:00.000Z\": 7.2865,     \"2019-11-07T14:00:00.000Z\": 7.3125,     \"2019-11-07T15:00:00.000Z\": 7.2807,     \"2019-11-07T16:00:00.000Z\": 7.3241,     \"2019-11-07T17:00:00.000Z\": 7.3154,     \"2019-11-07T18:00:00.000Z\": 7.2922,     \"2019-11-07T19:00:00.000Z\": 7.2865,     \"2019-11-07T20:00:00.000Z\": 7.3038,     \"2019-11-07T21:00:00.000Z\": 7.2575,     \"2019-11-07T22:00:00.000Z\": 7.2951,     \"2019-11-07T23:00:00.000Z\": 7.2199,     \"2019-11-08T01:00:00.000Z\": 7.2054,     \"2019-11-08T02:00:00.000Z\": 7.2199,     \"2019-11-08T03:00:00.000Z\": 7.1128,     \"2019-11-08T04:00:00.000Z\": 7.1823,     \"2019-11-08T05:00:00.000Z\": 7.1071,     \"2019-11-08T06:00:00.000Z\": 7.2112,     \"2019-11-08T07:00:00.000Z\": 7.2083,     \"2019-11-08T08:00:00.000Z\": 7.2662,     \"2019-11-08T09:00:00.000Z\": 7.1765,     \"2019-11-08T10:00:00.000Z\": 7.2083,     \"2019-11-08T11:00:00.000Z\": 7.1563,     \"2019-11-08T12:00:00.000Z\": 7.2228,     \"2019-11-08T13:00:00.000Z\": 7.2025,     \"2019-11-08T14:00:00.000Z\": 7.1852,     \"2019-11-08T15:00:00.000Z\": 7.1823,     \"2019-11-08T16:00:00.000Z\": 7.1997,     \"2019-11-08T17:00:00.000Z\": 7.191,     \"2019-11-08T18:00:00.000Z\": 7.1997,     \"2019-11-08T19:00:00.000Z\": 7.1765,     \"2019-11-08T20:00:00.000Z\": 7.1823,     \"2019-11-08T21:00:00.000Z\": 7.1389,     \"2019-11-08T22:00:00.000Z\": 7.1534,     \"2019-11-08T23:00:00.000Z\": 7.1244,     \"2019-11-09T01:00:00.000Z\": 7.136,     \"2019-11-09T02:00:00.000Z\": 7.162,     \"2019-11-09T03:00:00.000Z\": 7.162,     \"2019-11-09T04:00:00.000Z\": 7.1649,     \"2019-11-09T05:00:00.000Z\": 7.1071,     \"2019-11-09T06:00:00.000Z\": 7.1302,     \"2019-11-09T07:00:00.000Z\": 7.0608,     \"2019-11-09T08:00:00.000Z\": 7.1244,     \"2019-11-09T09:00:00.000Z\": 7.0463,     \"2019-11-09T10:00:00.000Z\": 7.1273,     \"2019-11-09T11:00:00.000Z\": 7.1013,     \"2019-11-09T12:00:00.000Z\": 7.1534,     \"2019-11-09T13:00:00.000Z\": 7.1563,     \"2019-11-09T14:00:00.000Z\": 7.1389,     \"2019-11-09T15:00:00.000Z\": 7.0984,     \"2019-11-09T16:00:00.000Z\": 7.1244,     \"2019-11-09T17:00:00.000Z\": 7.0984,     \"2019-11-09T18:00:00.000Z\": 7.1273,     \"2019-11-09T19:00:00.000Z\": 7.081,     \"2019-11-09T20:00:00.000Z\": 7.081,     \"2019-11-09T21:00:00.000Z\": 7.0087,     \"2019-11-09T22:00:00.000Z\": 7.0405,     \"2019-11-09T23:00:00.000Z\": 6.9797,     \"2019-11-10T01:00:00.000Z\": 6.9711,     \"2019-11-10T02:00:00.000Z\": 7,     \"2019-11-10T03:00:00.000Z\": 7.0608,     \"2019-11-10T04:00:00.000Z\": 7.0376,     \"2019-11-10T05:00:00.000Z\": 6.9508,     \"2019-11-10T06:00:00.000Z\": 7.026,     \"2019-11-10T07:00:00.000Z\": 6.9074,     \"2019-11-10T08:00:00.000Z\": 7.0376,     \"2019-11-10T09:00:00.000Z\": 6.9797,     \"2019-11-10T10:00:00.000Z\": 6.8322,     \"2019-11-10T11:00:00.000Z\": 7,     \"2019-11-10T12:00:00.000Z\": 7.0174,     \"2019-11-10T13:00:00.000Z\": 7.0174,     \"2019-11-10T14:00:00.000Z\": 6.9682,     \"2019-11-10T15:00:00.000Z\": 6.9826,     \"2019-11-10T16:00:00.000Z\": 6.9769,     \"2019-11-10T17:00:00.000Z\": 7.0087,     \"2019-11-10T18:00:00.000Z\": 6.9826,     \"2019-11-10T19:00:00.000Z\": 7.0116,     \"2019-11-10T20:00:00.000Z\": 6.9769,     \"2019-11-10T21:00:00.000Z\": 6.9595,     \"2019-11-10T22:00:00.000Z\": 6.9277,     \"2019-11-10T23:00:00.000Z\": 6.9334,     \"2019-11-11T01:00:00.000Z\": 6.919,     \"2019-11-11T02:00:00.000Z\": 6.9219,     \"2019-11-11T03:00:00.000Z\": 6.9363,     \"2019-11-11T04:00:00.000Z\": 6.945,     \"2019-11-11T05:00:00.000Z\": 6.8061,     \"2019-11-11T06:00:00.000Z\": 6.9074,     \"2019-11-11T07:00:00.000Z\": 6.9595,     \"2019-11-11T08:00:00.000Z\": 6.9797,     \"2019-11-11T09:00:00.000Z\": 6.9537,     \"2019-11-11T10:00:00.000Z\": 6.9248,     \"2019-11-11T11:00:00.000Z\": 6.9421,     \"2019-11-11T12:00:00.000Z\": 6.9074,     \"2019-11-11T13:00:00.000Z\": 6.7338,     \"2019-11-11T14:00:00.000Z\": 6.8872,     \"2019-11-11T15:00:00.000Z\": 6.8987,     \"2019-11-11T16:00:00.000Z\": 6.945,     \"2019-11-11T17:00:00.000Z\": 6.9711,     \"2019-11-11T18:00:00.000Z\": 6.945,     \"2019-11-11T19:00:00.000Z\": 6.9421,     \"2019-11-11T20:00:00.000Z\": 6.9161,     \"2019-11-11T21:00:00.000Z\": 6.9363,     \"2019-11-11T22:00:00.000Z\": 6.8727,     \"2019-11-11T23:00:00.000Z\": 6.9479,     \"2019-11-12T01:00:00.000Z\": 7.0087,     \"2019-11-12T02:00:00.000Z\": 6.9508,     \"2019-11-12T03:00:00.000Z\": 7,     \"2019-11-12T04:00:00.000Z\": 6.9682,     \"2019-11-12T05:00:00.000Z\": 6.9363,     \"2019-11-12T06:00:00.000Z\": 6.9074,     \"2019-11-12T07:00:00.000Z\": 6.9566,     \"2019-11-12T08:00:00.000Z\": 6.9537,     \"2019-11-12T09:00:00.000Z\": 6.8785,     \"2019-11-12T10:00:00.000Z\": 6.9306,     \"2019-11-12T11:00:00.000Z\": 6.9566,     \"2019-11-12T12:00:00.000Z\": 6.9508,     \"2019-11-12T13:00:00.000Z\": 6.945,     \"2019-11-12T14:00:00.000Z\": 6.9508,     \"2019-11-12T15:00:00.000Z\": 6.9537,     \"2019-11-12T16:00:00.000Z\": 6.9942,     \"2019-11-12T17:00:00.000Z\": 6.974,     \"2019-11-12T18:00:00.000Z\": 6.9537,     \"2019-11-12T19:00:00.000Z\": 6.9566,     \"2019-11-12T20:00:00.000Z\": 6.9769,     \"2019-11-12T21:00:00.000Z\": 6.9334,     \"2019-11-12T22:00:00.000Z\": 6.9392,     \"2019-11-12T23:00:00.000Z\": 6.9248,     \"2019-11-13T01:00:00.000Z\": 6.9277,     \"2019-11-13T02:00:00.000Z\": 6.9884,     \"2019-11-13T03:00:00.000Z\": 7.0174,     \"2019-11-13T04:00:00.000Z\": 6.9219,     \"2019-11-13T05:00:00.000Z\": 6.8872,     \"2019-11-13T06:00:00.000Z\": 6.9537,     \"2019-11-13T07:00:00.000Z\": 6.9363,     \"2019-11-13T08:00:00.000Z\": 6.9479,     \"2019-11-13T09:00:00.000Z\": 6.8524,     \"2019-11-13T10:00:00.000Z\": 6.8872,     \"2019-11-13T11:00:00.000Z\": 6.8785,     \"2019-11-13T12:00:00.000Z\": 6.9334,     \"2019-11-13T13:00:00.000Z\": 6.8466,     \"2019-11-13T14:00:00.000Z\": 6.838,     \"2019-11-13T15:00:00.000Z\": 6.9161,     \"2019-11-13T16:00:00.000Z\": 6.9363,     \"2019-11-13T17:00:00.000Z\": 6.9566,     \"2019-11-13T18:00:00.000Z\": 6.9421,     \"2019-11-13T19:00:00.000Z\": 6.8958,     \"2019-11-13T20:00:00.000Z\": 6.8785,     \"2019-11-13T21:00:00.000Z\": 6.8785,     \"2019-11-13T22:00:00.000Z\": 6.8958,     \"2019-11-13T23:00:00.000Z\": 6.89,     \"2019-11-14T01:00:00.000Z\": 6.9074,     \"2019-11-14T02:00:00.000Z\": 6.9508,     \"2019-11-14T03:00:00.000Z\": 6.9508,     \"2019-11-14T04:00:00.000Z\": 6.9132,     \"2019-11-14T05:00:00.000Z\": 6.8524,     \"2019-11-14T06:00:00.000Z\": 6.9074,     \"2019-11-14T07:00:00.000Z\": 6.9334,     \"2019-11-14T08:00:00.000Z\": 6.8582,     \"2019-11-14T09:00:00.000Z\": 6.8438,     \"2019-11-14T10:00:00.000Z\": 6.8785,     \"2019-11-14T11:00:00.000Z\": 6.8264,     \"2019-11-14T12:00:00.000Z\": 6.7975,     \"2019-11-14T13:00:00.000Z\": 6.7541,     \"2019-11-14T14:00:00.000Z\": 6.7598,     \"2019-11-14T15:00:00.000Z\": 6.7975,     \"2019-11-14T16:00:00.000Z\": 6.8409,     \"2019-11-14T17:00:00.000Z\": 6.8727,     \"2019-11-14T18:00:00.000Z\": 6.8466,     \"2019-11-14T19:00:00.000Z\": 6.838,     \"2019-11-14T20:00:00.000Z\": 6.8351,     \"2019-11-14T21:00:00.000Z\": 6.7975,     \"2019-11-14T22:00:00.000Z\": 6.7396,     \"2019-11-14T23:00:00.000Z\": 6.7541,     \"2019-11-15T01:00:00.000Z\": 6.8235,     \"2019-11-15T02:00:00.000Z\": 6.8524,     \"2019-11-15T03:00:00.000Z\": 6.8872,     \"2019-11-15T04:00:00.000Z\": 6.8351,     \"2019-11-15T05:00:00.000Z\": 6.7975,     \"2019-11-15T06:00:00.000Z\": 6.7917,     \"2019-11-15T07:00:00.000Z\": 6.8322,     \"2019-11-15T08:00:00.000Z\": 6.8553,     \"2019-11-15T09:00:00.000Z\": 6.8148,     \"2019-11-15T10:00:00.000Z\": 6.7078,     \"2019-11-15T11:00:00.000Z\": 6.7975,     \"2019-11-15T12:00:00.000Z\": 6.8235,     \"2019-11-15T13:00:00.000Z\": 6.7193,     \"2019-11-15T14:00:00.000Z\": 6.7946,     \"2019-11-15T15:00:00.000Z\": 6.8032,     \"2019-11-15T16:00:00.000Z\": 6.8524,     \"2019-11-15T17:00:00.000Z\": 6.8264,     \"2019-11-15T18:00:00.000Z\": 6.7975,     \"2019-11-15T19:00:00.000Z\": 6.7859,     \"2019-11-15T20:00:00.000Z\": 6.7598,     \"2019-11-15T21:00:00.000Z\": 6.6817,     \"2019-11-15T22:00:00.000Z\": 6.7714,     \"2019-11-15T23:00:00.000Z\": 6.7164,     \"2019-11-16T01:00:00.000Z\": 6.7425,     \"2019-11-16T02:00:00.000Z\": 6.8409,     \"2019-11-16T03:00:00.000Z\": 6.8438,     \"2019-11-16T04:00:00.000Z\": 6.8061,     \"2019-11-16T05:00:00.000Z\": 6.7164,     \"2019-11-16T06:00:00.000Z\": 6.7743,     \"2019-11-16T07:00:00.000Z\": 6.702,     \"2019-11-16T08:00:00.000Z\": 6.7888,     \"2019-11-16T09:00:00.000Z\": 6.7251,     \"2019-11-16T10:00:00.000Z\": 6.7946,     \"2019-11-16T11:00:00.000Z\": 6.8409,     \"2019-11-16T12:00:00.000Z\": 6.8351,     \"2019-11-16T13:00:00.000Z\": 6.809,     \"2019-11-16T14:00:00.000Z\": 6.8032,     \"2019-11-16T15:00:00.000Z\": 6.8148,     \"2019-11-16T16:00:00.000Z\": 6.8148,     \"2019-11-16T17:00:00.000Z\": 6.8206,     \"2019-11-16T18:00:00.000Z\": 6.809,     \"2019-11-16T19:00:00.000Z\": 6.7685,     \"2019-11-16T20:00:00.000Z\": 6.6846,     \"2019-11-16T21:00:00.000Z\": 6.7454,     \"2019-11-16T22:00:00.000Z\": 6.6846,     \"2019-11-16T23:00:00.000Z\": 6.7483,     \"2019-11-17T01:00:00.000Z\": 6.783,     \"2019-11-17T02:00:00.000Z\": 6.7975,     \"2019-11-17T03:00:00.000Z\": 6.8264,     \"2019-11-17T04:00:00.000Z\": 6.7975,     \"2019-11-17T05:00:00.000Z\": 6.7222,     \"2019-11-17T06:00:00.000Z\": 6.7598,     \"2019-11-17T07:00:00.000Z\": 6.7049,     \"2019-11-17T08:00:00.000Z\": 6.7975,     \"2019-11-17T09:00:00.000Z\": 6.7772,     \"2019-11-17T10:00:00.000Z\": 6.6412,     \"2019-11-17T11:00:00.000Z\": 6.7801,     \"2019-11-17T12:00:00.000Z\": 6.7685,     \"2019-11-17T13:00:00.000Z\": 6.7049,     \"2019-11-17T14:00:00.000Z\": 6.6644,     \"2019-11-17T15:00:00.000Z\": 6.7396,     \"2019-11-17T16:00:00.000Z\": 6.7772,     \"2019-11-17T17:00:00.000Z\": 6.7888,     \"2019-11-17T18:00:00.000Z\": 6.7772,     \"2019-11-17T19:00:00.000Z\": 6.7598,     \"2019-11-17T20:00:00.000Z\": 6.7251,     \"2019-11-17T21:00:00.000Z\": 6.6933,     \"2019-11-17T22:00:00.000Z\": 6.7598,     \"2019-11-17T23:00:00.000Z\": 6.702,     \"2019-11-18T01:00:00.000Z\": 6.7338,     \"2019-11-18T02:00:00.000Z\": 6.7685,     \"2019-11-18T03:00:00.000Z\": 6.7367,     \"2019-11-18T04:00:00.000Z\": 6.8148,     \"2019-11-18T05:00:00.000Z\": 6.7801,     \"2019-11-18T06:00:00.000Z\": 6.7367,     \"2019-11-18T07:00:00.000Z\": 6.7627,     \"2019-11-18T08:00:00.000Z\": 6.7772,     \"2019-11-18T09:00:00.000Z\": 6.7425,     \"2019-11-18T10:00:00.000Z\": 6.7367,     \"2019-11-18T11:00:00.000Z\": 6.7425,     \"2019-11-18T12:00:00.000Z\": 6.7975,     \"2019-11-18T13:00:00.000Z\": 6.8032,     \"2019-11-18T14:00:00.000Z\": 6.7801,     \"2019-11-18T15:00:00.000Z\": 6.7222,     \"2019-11-18T16:00:00.000Z\": 6.7627,     \"2019-11-18T17:00:00.000Z\": 6.809,     \"2019-11-18T18:00:00.000Z\": 6.7714,     \"2019-11-18T19:00:00.000Z\": 6.7714,     \"2019-11-18T20:00:00.000Z\": 6.7483,     \"2019-11-18T21:00:00.000Z\": 6.6875,     \"2019-11-18T22:00:00.000Z\": 6.7627,     \"2019-11-18T23:00:00.000Z\": 6.7164,     \"2019-11-19T01:00:00.000Z\": 6.7888,     \"2019-11-19T02:00:00.000Z\": 6.8495,     \"2019-11-19T03:00:00.000Z\": 6.8264,     \"2019-11-19T04:00:00.000Z\": 6.7598,     \"2019-11-19T05:00:00.000Z\": 6.7338,     \"2019-11-19T06:00:00.000Z\": 6.7946,     \"2019-11-19T07:00:00.000Z\": 6.8206,     \"2019-11-19T08:00:00.000Z\": 6.7946,     \"2019-11-19T09:00:00.000Z\": 6.7598,     \"2019-11-19T10:00:00.000Z\": 6.7743,     \"2019-11-19T11:00:00.000Z\": 6.7888,     \"2019-11-19T12:00:00.000Z\": 6.8061,     \"2019-11-19T13:00:00.000Z\": 6.7367,     \"2019-11-19T14:00:00.000Z\": 6.8264,     \"2019-11-19T15:00:00.000Z\": 6.8235,     \"2019-11-19T16:00:00.000Z\": 6.7946,     \"2019-11-19T17:00:00.000Z\": 6.8061,     \"2019-11-19T18:00:00.000Z\": 6.838,     \"2019-11-19T19:00:00.000Z\": 6.8553,     \"2019-11-19T20:00:00.000Z\": 6.8003,     \"2019-11-19T21:00:00.000Z\": 6.7251,     \"2019-11-19T22:00:00.000Z\": 6.7598,     \"2019-11-19T23:00:00.000Z\": 6.7627,     \"2019-11-20T01:00:00.000Z\": 6.8177,     \"2019-11-20T02:00:00.000Z\": 6.8148,     \"2019-11-20T03:00:00.000Z\": 6.7975,     \"2019-11-20T04:00:00.000Z\": 6.7888,     \"2019-11-20T05:00:00.000Z\": 6.7309,     \"2019-11-20T06:00:00.000Z\": 6.7483,     \"2019-11-20T07:00:00.000Z\": 6.8148,     \"2019-11-20T08:00:00.000Z\": 6.7396,     \"2019-11-20T09:00:00.000Z\": 6.6701,     \"2019-11-20T10:00:00.000Z\": 5.6516,     \"2019-11-20T11:00:00.000Z\": 5.6516,     \"2019-11-20T12:00:00.000Z\": 5.5475,     \"2019-11-20T13:00:00.000Z\": 5.7095,     \"2019-11-20T14:00:00.000Z\": 5.7095,     \"2019-11-20T15:00:00.000Z\": 5.7066,     \"2019-11-20T16:00:00.000Z\": 6.0509,     \"2019-11-20T17:00:00.000Z\": 5.967,     \"2019-11-20T18:00:00.000Z\": 6.4039,     \"2019-11-20T19:00:00.000Z\": 6.919,     \"2019-11-20T20:00:00.000Z\": 7.1071,     \"2019-11-20T21:00:00.000Z\": 6.5486,     \"2019-11-20T22:00:00.000Z\": 6.4676,     \"2019-11-20T23:00:00.000Z\": 6.8409,     \"2019-11-21T01:00:00.000Z\": 6.8206,     \"2019-11-21T02:00:00.000Z\": 6.8785,     \"2019-11-21T03:00:00.000Z\": 6.864,     \"2019-11-21T04:00:00.000Z\": 7.3935,     \"2019-11-21T05:00:00.000Z\": 7.1997,     \"2019-11-21T06:00:00.000Z\": 7.3877,     \"2019-11-21T07:00:00.000Z\": 7.3009,     \"2019-11-21T08:00:00.000Z\": 6.9682,     \"2019-11-21T09:00:00.000Z\": 7.2054,     \"2019-11-21T10:00:00.000Z\": 7.1765,     \"2019-11-21T11:00:00.000Z\": 7.2286,     \"2019-11-21T12:00:00.000Z\": 7.6163,     \"2019-11-21T13:00:00.000Z\": 7.4398,     \"2019-11-21T14:00:00.000Z\": 6.7743,     \"2019-11-21T15:00:00.000Z\": 7.434,     \"2019-11-21T16:00:00.000Z\": 7.3993,     \"2019-11-21T17:00:00.000Z\": 7.3646,     \"2019-11-21T18:00:00.000Z\": 7.2228,     \"2019-11-21T19:00:00.000Z\": 6.9913,     \"2019-11-21T20:00:00.000Z\": 7.0492,     \"2019-11-21T21:00:00.000Z\": 7.0984,     \"2019-11-21T22:00:00.000Z\": 7.1707,     \"2019-11-21T23:00:00.000Z\": 7.1505,     \"2019-11-22T01:00:00.000Z\": 7.5671,     \"2019-11-22T02:00:00.000Z\": 7.272,     \"2019-11-22T03:00:00.000Z\": 7.1794,     \"2019-11-22T04:00:00.000Z\": 7.3588,     \"2019-11-22T05:00:00.000Z\": 7.1852,     \"2019-11-22T06:00:00.000Z\": 7.1215,     \"2019-11-22T07:00:00.000Z\": 7.8131,     \"2019-11-22T08:00:00.000Z\": 7.6019,     \"2019-11-22T09:00:00.000Z\": 7.7639,     \"2019-11-22T10:00:00.000Z\": 7.6192,     \"2019-11-22T11:00:00.000Z\": 7.5932,     \"2019-11-22T12:00:00.000Z\": 7.6655,     \"2019-11-22T13:00:00.000Z\": 7.6453,     \"2019-11-22T14:00:00.000Z\": 7.9057,     \"2019-11-22T15:00:00.000Z\": 7.4977,     \"2019-11-22T16:00:00.000Z\": 7.4398,     \"2019-11-22T17:00:00.000Z\": 7.6076,     \"2019-11-22T18:00:00.000Z\": 7.434,     \"2019-11-22T19:00:00.000Z\": 7.4919,     \"2019-11-22T20:00:00.000Z\": 8.0677,     \"2019-11-22T21:00:00.000Z\": 7.7407,     \"2019-11-22T22:00:00.000Z\": 7.5816,     \"2019-11-22T23:00:00.000Z\": 8.1863,     \"2019-11-23T01:00:00.000Z\": 7.5295,     \"2019-11-23T02:00:00.000Z\": 8.0098,     \"2019-11-23T03:00:00.000Z\": 7.5295,     \"2019-11-23T04:00:00.000Z\": 7.6453,     \"2019-11-23T05:00:00.000Z\": 7.515,     \"2019-11-23T06:00:00.000Z\": 7.5093,     \"2019-11-23T07:00:00.000Z\": 7.4659,     \"2019-11-23T08:00:00.000Z\": 7.5729,     \"2019-11-23T09:00:00.000Z\": 7.5266,     \"2019-11-23T10:00:00.000Z\": 7.7378,     \"2019-11-23T11:00:00.000Z\": 7.842,     \"2019-11-23T12:00:00.000Z\": 7.8507,     \"2019-11-23T13:00:00.000Z\": 7.9635,     \"2019-11-23T14:00:00.000Z\": 7.9462,     \"2019-11-23T15:00:00.000Z\": 7.952,     \"2019-11-23T16:00:00.000Z\": 7.8449,     \"2019-11-23T17:00:00.000Z\": 7.9404,     \"2019-11-23T18:00:00.000Z\": 7.9983,     \"2019-11-23T19:00:00.000Z\": 7.9491,     \"2019-11-23T20:00:00.000Z\": 8.0069,     \"2019-11-23T21:00:00.000Z\": 8.0735,     \"2019-11-23T22:00:00.000Z\": 8.0417,     \"2019-11-23T23:00:00.000Z\": 7.816,     \"2019-11-24T01:00:00.000Z\": 7.8623,     \"2019-11-24T02:00:00.000Z\": 7.8449,     \"2019-11-24T03:00:00.000Z\": 7.8275,     \"2019-11-24T04:00:00.000Z\": 7.787,     \"2019-11-24T05:00:00.000Z\": 7.8362,     \"2019-11-24T06:00:00.000Z\": 7.7668,     \"2019-11-24T07:00:00.000Z\": 7.5932,     \"2019-11-24T08:00:00.000Z\": 7.6568,     \"2019-11-24T09:00:00.000Z\": 7.4659,     \"2019-11-24T10:00:00.000Z\": 7.5035,     \"2019-11-24T11:00:00.000Z\": 7.5816,     \"2019-11-24T12:00:00.000Z\": 7.6076,     \"2019-11-24T13:00:00.000Z\": 7.599,     \"2019-11-24T14:00:00.000Z\": 7.6568,     \"2019-11-24T15:00:00.000Z\": 7.625,     \"2019-11-24T16:00:00.000Z\": 7.6308,     \"2019-11-24T17:00:00.000Z\": 7.7147,     \"2019-11-24T18:00:00.000Z\": 7.5006,     \"2019-11-24T19:00:00.000Z\": 7.4716,     \"2019-11-24T20:00:00.000Z\": 7.4919,     \"2019-11-24T21:00:00.000Z\": 7.3646,     \"2019-11-24T22:00:00.000Z\": 7.3964,     \"2019-11-24T23:00:00.000Z\": 7.4919,     \"2019-11-25T01:00:00.000Z\": 7.787,     \"2019-11-25T02:00:00.000Z\": 7.4427,     \"2019-11-25T03:00:00.000Z\": 7.8189,     \"2019-11-25T04:00:00.000Z\": 7.4774,     \"2019-11-25T05:00:00.000Z\": 7.9578,     \"2019-11-25T06:00:00.000Z\": 7.8738,     \"2019-11-25T07:00:00.000Z\": 8.3802,     \"2019-11-25T08:00:00.000Z\": 8.1719,     \"2019-11-25T09:00:00.000Z\": 7.5064,     \"2019-11-25T10:00:00.000Z\": 8.1632,     \"2019-11-25T11:00:00.000Z\": 8.088,     \"2019-11-25T12:00:00.000Z\": 7.9578,     \"2019-11-25T13:00:00.000Z\": 7.6424,     \"2019-11-25T14:00:00.000Z\": 7.7841,     \"2019-11-25T15:00:00.000Z\": 7.6308,     \"2019-11-25T16:00:00.000Z\": 7.5932,     \"2019-11-25T17:00:00.000Z\": 7.5064,     \"2019-11-25T18:00:00.000Z\": 8.1343,     \"2019-11-25T19:00:00.000Z\": 8.305,     \"2019-11-25T20:00:00.000Z\": 8.0503,     \"2019-11-25T21:00:00.000Z\": 8.0012,     \"2019-11-25T22:00:00.000Z\": 8.0012,     \"2019-11-25T23:00:00.000Z\": 8.0069,     \"2019-11-26T01:00:00.000Z\": 7.8941,     \"2019-11-26T02:00:00.000Z\": 7.8825,     \"2019-11-26T03:00:00.000Z\": 7.6944,     \"2019-11-26T04:00:00.000Z\": 8.0301,     \"2019-11-26T05:00:00.000Z\": 8.088,     \"2019-11-26T06:00:00.000Z\": 8.0648,     \"2019-11-26T07:00:00.000Z\": 7.9867,     \"2019-11-26T08:00:00.000Z\": 7.8507,     \"2019-11-26T09:00:00.000Z\": 7.8565,     \"2019-11-26T10:00:00.000Z\": 7.9722,     \"2019-11-26T11:00:00.000Z\": 8.0446,     \"2019-11-26T12:00:00.000Z\": 8.1748,     \"2019-11-26T13:00:00.000Z\": 7.8362,     \"2019-11-26T14:00:00.000Z\": 8.0648,     \"2019-11-26T15:00:00.000Z\": 8.0793,     \"2019-11-26T16:00:00.000Z\": 8.088,     \"2019-11-26T17:00:00.000Z\": 8.0793,     \"2019-11-26T18:00:00.000Z\": 8.0532,     \"2019-11-26T19:00:00.000Z\": 8.0677,     \"2019-11-26T20:00:00.000Z\": 8.0475,     \"2019-11-26T21:00:00.000Z\": 8.0156,     \"2019-11-26T22:00:00.000Z\": 7.9635,     \"2019-11-26T23:00:00.000Z\": 7.8854,     \"2019-11-27T01:00:00.000Z\": 7.7813,     \"2019-11-27T02:00:00.000Z\": 8.0243,     \"2019-11-27T03:00:00.000Z\": 8.195,     \"2019-11-27T04:00:00.000Z\": 8.1632,     \"2019-11-27T05:00:00.000Z\": 8.0272,     \"2019-11-27T06:00:00.000Z\": 7.9983,     \"2019-11-27T07:00:00.000Z\": 8.1574,     \"2019-11-27T08:00:00.000Z\": 8.2095,     \"2019-11-27T09:00:00.000Z\": 8.3079,     \"2019-11-27T10:00:00.000Z\": 8.331,     \"2019-11-27T11:00:00.000Z\": 8.3166,     \"2019-11-27T12:00:00.000Z\": 8.3426,     \"2019-11-27T13:00:00.000Z\": 8.3802,     \"2019-11-27T14:00:00.000Z\": 8.386,     \"2019-11-27T15:00:00.000Z\": 8.2703,     \"2019-11-27T16:00:00.000Z\": 8.3021,     \"2019-11-27T17:00:00.000Z\": 8.2442,     \"2019-11-27T18:00:00.000Z\": 8.1892,     \"2019-11-27T19:00:00.000Z\": 8.2269,     \"2019-11-27T20:00:00.000Z\": 8.3079,     \"2019-11-27T21:00:00.000Z\": 8.386,     \"2019-11-27T22:00:00.000Z\": 8.6146,     \"2019-11-27T23:00:00.000Z\": 8.5538,     \"2019-11-28T01:00:00.000Z\": 8.713,     \"2019-11-28T02:00:00.000Z\": 8.7072,     \"2019-11-28T03:00:00.000Z\": 8.739,     \"2019-11-28T04:00:00.000Z\": 8.765,     \"2019-11-28T05:00:00.000Z\": 8.794,     \"2019-11-28T06:00:00.000Z\": 8.7998,     \"2019-11-28T07:00:00.000Z\": 8.7824,     \"2019-11-28T08:00:00.000Z\": 8.8171,     \"2019-11-28T09:00:00.000Z\": 8.8519,     \"2019-11-28T10:00:00.000Z\": 9.5926,     \"2019-11-28T11:00:00.000Z\": 10.1858,     \"2019-11-28T12:00:00.000Z\": 9.9716,     \"2019-11-28T13:00:00.000Z\": 9.4334,     \"2019-11-28T14:00:00.000Z\": 9.3814,     \"2019-11-28T15:00:00.000Z\": 10.3478,     \"2019-11-28T16:00:00.000Z\": 9.6013,     \"2019-11-28T17:00:00.000Z\": 10.912,     \"2019-11-28T18:00:00.000Z\": 10.64,     \"2019-11-28T19:00:00.000Z\": 10.9873,     \"2019-11-28T20:00:00.000Z\": 11.1522,     \"2019-11-28T21:00:00.000Z\": 11.1233,     \"2019-11-28T22:00:00.000Z\": 11.1493,     \"2019-11-28T23:00:00.000Z\": 10.9149,     \"2019-11-29T01:00:00.000Z\": 10.533,     \"2019-11-29T02:00:00.000Z\": 10.559,     \"2019-11-29T03:00:00.000Z\": 9.7662,     \"2019-11-29T04:00:00.000Z\": 11.2332,     \"2019-11-29T05:00:00.000Z\": 11.0683,     \"2019-11-29T06:00:00.000Z\": 11.2072,     \"2019-11-29T07:00:00.000Z\": 11.1522,     \"2019-11-29T08:00:00.000Z\": 11.1522,     \"2019-11-29T09:00:00.000Z\": 11.1522,     \"2019-11-29T10:00:00.000Z\": 11.4473,     \"2019-11-29T11:00:00.000Z\": 11.3142,     \"2019-11-29T12:00:00.000Z\": 11.3403,     \"2019-11-29T13:00:00.000Z\": 11.375,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 12,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 12,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.8918,     \"2019-11-30T02:00:00.000Z\": 10.64,     \"2019-11-30T03:00:00.000Z\": 10.5648,     \"2019-11-30T04:00:00.000Z\": 10.912,     \"2019-11-30T05:00:00.000Z\": 12,     \"2019-11-30T06:00:00.000Z\": 10.912,     \"2019-11-30T07:00:00.000Z\": 12,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 12,     \"2019-11-30T13:00:00.000Z\": 12,     \"2019-11-30T14:00:00.000Z\": 12,     \"2019-11-30T15:00:00.000Z\": 12 }"
          }
        },
        {
          "workflow_input_name": "time_boxes_interval",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "d"
          }
        },
        {
          "workflow_input_name": "time_boxes_ts",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-10-01T15:00:00.000Z\": 8.6464,     \"2019-10-01T16:00:00.000Z\": 8.6377,     \"2019-10-01T17:00:00.000Z\": 8.6348,     \"2019-10-01T18:00:00.000Z\": 8.6291,     \"2019-10-01T19:00:00.000Z\": 8.6291,     \"2019-10-01T20:00:00.000Z\": 8.6291,     \"2019-10-01T21:00:00.000Z\": 8.6233,     \"2019-10-01T22:00:00.000Z\": 8.6233,     \"2019-10-01T23:00:00.000Z\": 8.6175,     \"2019-10-02T01:00:00.000Z\": 8.6175,     \"2019-10-02T02:00:00.000Z\": 8.6175,     \"2019-10-02T03:00:00.000Z\": 8.6175,     \"2019-10-02T04:00:00.000Z\": 8.6117,     \"2019-10-02T05:00:00.000Z\": 8.6117,     \"2019-10-02T06:00:00.000Z\": 8.6001,     \"2019-10-02T07:00:00.000Z\": 8.5943,     \"2019-10-02T08:00:00.000Z\": 8.5856,     \"2019-10-02T09:00:00.000Z\": 8.577,     \"2019-10-02T10:00:00.000Z\": 8.6175,     \"2019-10-02T11:00:00.000Z\": 8.5741,     \"2019-10-02T12:00:00.000Z\": 8.5654,     \"2019-10-02T13:00:00.000Z\": 8.5625,     \"2019-10-02T14:00:00.000Z\": 8.5509,     \"2019-10-02T15:00:00.000Z\": 8.5422,     \"2019-10-02T16:00:00.000Z\": 8.5596,     \"2019-10-02T17:00:00.000Z\": 8.5856,     \"2019-10-02T18:00:00.000Z\": 8.5885,     \"2019-10-02T19:00:00.000Z\": 8.5914,     \"2019-10-02T20:00:00.000Z\": 8.5885,     \"2019-10-02T21:00:00.000Z\": 8.5856,     \"2019-10-02T22:00:00.000Z\": 8.5856,     \"2019-10-02T23:00:00.000Z\": 8.577,     \"2019-10-03T01:00:00.000Z\": 8.5712,     \"2019-10-03T02:00:00.000Z\": 8.5683,     \"2019-10-03T03:00:00.000Z\": 8.5596,     \"2019-10-03T04:00:00.000Z\": 8.5509,     \"2019-10-03T05:00:00.000Z\": 8.5538,     \"2019-10-03T06:00:00.000Z\": 8.548,     \"2019-10-03T07:00:00.000Z\": 8.5422,     \"2019-10-03T08:00:00.000Z\": 8.5365,     \"2019-10-03T09:00:00.000Z\": 8.5307,     \"2019-10-03T10:00:00.000Z\": 8.5278,     \"2019-10-03T11:00:00.000Z\": 8.5307,     \"2019-10-03T12:00:00.000Z\": 8.5365,     \"2019-10-03T13:00:00.000Z\": 8.5307,     \"2019-10-03T14:00:00.000Z\": 8.5307,     \"2019-10-03T15:00:00.000Z\": 8.5307,     \"2019-10-03T16:00:00.000Z\": 8.5278,     \"2019-10-03T17:00:00.000Z\": 8.5249,     \"2019-10-03T18:00:00.000Z\": 8.5249,     \"2019-10-03T19:00:00.000Z\": 8.5191,     \"2019-10-03T20:00:00.000Z\": 8.5191,     \"2019-10-03T21:00:00.000Z\": 8.5191,     \"2019-10-03T22:00:00.000Z\": 8.5191,     \"2019-10-03T23:00:00.000Z\": 8.5104,     \"2019-10-04T01:00:00.000Z\": 8.5104,     \"2019-10-04T02:00:00.000Z\": 8.5104,     \"2019-10-04T03:00:00.000Z\": 8.5046,     \"2019-10-04T04:00:00.000Z\": 8.4988,     \"2019-10-04T05:00:00.000Z\": 8.4988,     \"2019-10-04T06:00:00.000Z\": 8.4931,     \"2019-10-04T07:00:00.000Z\": 8.4844,     \"2019-10-04T08:00:00.000Z\": 8.4902,     \"2019-10-04T09:00:00.000Z\": 8.4468,     \"2019-10-04T10:00:00.000Z\": 8.4728,     \"2019-10-04T11:00:00.000Z\": 8.4815,     \"2019-10-04T12:00:00.000Z\": 8.4612,     \"2019-10-04T13:00:00.000Z\": 8.5075,     \"2019-10-04T14:00:00.000Z\": 8.4815,     \"2019-10-04T15:00:00.000Z\": 8.4902,     \"2019-10-04T16:00:00.000Z\": 8.548,     \"2019-10-04T17:00:00.000Z\": 8.5422,     \"2019-10-04T18:00:00.000Z\": 8.5509,     \"2019-10-04T19:00:00.000Z\": 8.5509,     \"2019-10-04T20:00:00.000Z\": 8.5509,     \"2019-10-04T21:00:00.000Z\": 8.5567,     \"2019-10-04T22:00:00.000Z\": 8.5307,     \"2019-10-04T23:00:00.000Z\": 8.5596,     \"2019-10-05T01:00:00.000Z\": 8.5712,     \"2019-10-05T02:00:00.000Z\": 8.5741,     \"2019-10-05T03:00:00.000Z\": 8.5712,     \"2019-10-05T04:00:00.000Z\": 8.5596,     \"2019-10-05T05:00:00.000Z\": 8.5654,     \"2019-10-05T06:00:00.000Z\": 8.5654,     \"2019-10-05T07:00:00.000Z\": 8.5654,     \"2019-10-05T08:00:00.000Z\": 8.5625,     \"2019-10-05T09:00:00.000Z\": 8.5625,     \"2019-10-05T10:00:00.000Z\": 8.548,     \"2019-10-05T11:00:00.000Z\": 8.5596,     \"2019-10-05T12:00:00.000Z\": 8.5596,     \"2019-10-05T13:00:00.000Z\": 8.5394,     \"2019-10-05T14:00:00.000Z\": 8.548,     \"2019-10-05T15:00:00.000Z\": 8.5538,     \"2019-10-05T16:00:00.000Z\": 8.5596,     \"2019-10-05T17:00:00.000Z\": 8.5596,     \"2019-10-05T18:00:00.000Z\": 8.5538,     \"2019-10-05T19:00:00.000Z\": 8.5596,     \"2019-10-05T20:00:00.000Z\": 8.5451,     \"2019-10-05T21:00:00.000Z\": 8.5394,     \"2019-10-05T22:00:00.000Z\": 8.5336,     \"2019-10-05T23:00:00.000Z\": 8.522,     \"2019-10-06T01:00:00.000Z\": 8.522,     \"2019-10-06T02:00:00.000Z\": 8.5104,     \"2019-10-06T03:00:00.000Z\": 8.5046,     \"2019-10-06T04:00:00.000Z\": 8.4988,     \"2019-10-06T05:00:00.000Z\": 8.5017,     \"2019-10-06T06:00:00.000Z\": 8.4844,     \"2019-10-06T07:00:00.000Z\": 8.4699,     \"2019-10-06T08:00:00.000Z\": 8.4641,     \"2019-10-06T09:00:00.000Z\": 8.4583,     \"2019-10-06T10:00:00.000Z\": 8.4525,     \"2019-10-06T11:00:00.000Z\": 8.4381,     \"2019-10-06T12:00:00.000Z\": 8.4294,     \"2019-10-06T13:00:00.000Z\": 8.4265,     \"2019-10-06T14:00:00.000Z\": 8.4178,     \"2019-10-06T15:00:00.000Z\": 8.4149,     \"2019-10-06T16:00:00.000Z\": 8.412,     \"2019-10-06T17:00:00.000Z\": 8.412,     \"2019-10-06T18:00:00.000Z\": 8.4091,     \"2019-10-06T19:00:00.000Z\": 8.4063,     \"2019-10-06T20:00:00.000Z\": 8.412,     \"2019-10-06T21:00:00.000Z\": 8.3889,     \"2019-10-06T22:00:00.000Z\": 8.4063,     \"2019-10-06T23:00:00.000Z\": 8.4063,     \"2019-10-07T01:00:00.000Z\": 8.4005,     \"2019-10-07T02:00:00.000Z\": 8.3976,     \"2019-10-07T03:00:00.000Z\": 8.3918,     \"2019-10-07T04:00:00.000Z\": 8.3889,     \"2019-10-07T05:00:00.000Z\": 8.386,     \"2019-10-07T06:00:00.000Z\": 8.3802,     \"2019-10-07T07:00:00.000Z\": 8.3628,     \"2019-10-07T08:00:00.000Z\": 8.3715,     \"2019-10-07T09:00:00.000Z\": 8.3657,     \"2019-10-07T10:00:00.000Z\": 8.36,     \"2019-10-07T11:00:00.000Z\": 8.3542,     \"2019-10-07T12:00:00.000Z\": 8.3455,     \"2019-10-07T13:00:00.000Z\": 8.36,     \"2019-10-07T14:00:00.000Z\": 8.3513,     \"2019-10-07T15:00:00.000Z\": 8.36,     \"2019-10-07T16:00:00.000Z\": 8.3571,     \"2019-10-07T17:00:00.000Z\": 8.36,     \"2019-10-07T18:00:00.000Z\": 8.3628,     \"2019-10-07T19:00:00.000Z\": 8.36,     \"2019-10-07T20:00:00.000Z\": 8.3657,     \"2019-10-07T21:00:00.000Z\": 8.3571,     \"2019-10-07T22:00:00.000Z\": 8.3657,     \"2019-10-07T23:00:00.000Z\": 8.3744,     \"2019-10-08T01:00:00.000Z\": 8.3773,     \"2019-10-08T02:00:00.000Z\": 8.3744,     \"2019-10-08T03:00:00.000Z\": 8.3744,     \"2019-10-08T04:00:00.000Z\": 8.3744,     \"2019-10-08T05:00:00.000Z\": 8.3773,     \"2019-10-08T06:00:00.000Z\": 8.3773,     \"2019-10-08T07:00:00.000Z\": 8.3802,     \"2019-10-08T08:00:00.000Z\": 8.3773,     \"2019-10-08T09:00:00.000Z\": 8.36,     \"2019-10-08T10:00:00.000Z\": 8.3628,     \"2019-10-08T11:00:00.000Z\": 8.4034,     \"2019-10-08T12:00:00.000Z\": 8.3744,     \"2019-10-08T13:00:00.000Z\": 8.4005,     \"2019-10-08T14:00:00.000Z\": 8.4294,     \"2019-10-08T15:00:00.000Z\": 8.3802,     \"2019-10-08T16:00:00.000Z\": 8.4294,     \"2019-10-08T17:00:00.000Z\": 8.4699,     \"2019-10-08T18:00:00.000Z\": 8.4902,     \"2019-10-08T19:00:00.000Z\": 8.4931,     \"2019-10-08T20:00:00.000Z\": 8.4902,     \"2019-10-08T21:00:00.000Z\": 8.4902,     \"2019-10-08T22:00:00.000Z\": 8.4873,     \"2019-10-08T23:00:00.000Z\": 8.4902,     \"2019-10-09T01:00:00.000Z\": 8.4873,     \"2019-10-09T02:00:00.000Z\": 8.4902,     \"2019-10-09T03:00:00.000Z\": 8.4902,     \"2019-10-09T04:00:00.000Z\": 8.4902,     \"2019-10-09T05:00:00.000Z\": 8.4902,     \"2019-10-09T06:00:00.000Z\": 8.4902,     \"2019-10-09T07:00:00.000Z\": 8.4902,     \"2019-10-09T08:00:00.000Z\": 8.4873,     \"2019-10-09T09:00:00.000Z\": 8.4873,     \"2019-10-09T10:00:00.000Z\": 8.522,     \"2019-10-09T11:00:00.000Z\": 8.5422,     \"2019-10-09T12:00:00.000Z\": 8.5509,     \"2019-10-09T13:00:00.000Z\": 8.5885,     \"2019-10-09T14:00:00.000Z\": 8.6088,     \"2019-10-09T15:00:00.000Z\": 8.6233,     \"2019-10-09T16:00:00.000Z\": 8.6319,     \"2019-10-09T17:00:00.000Z\": 8.6291,     \"2019-10-09T18:00:00.000Z\": 8.6464,     \"2019-10-09T19:00:00.000Z\": 8.6522,     \"2019-10-09T20:00:00.000Z\": 8.6522,     \"2019-10-09T21:00:00.000Z\": 8.6551,     \"2019-10-09T22:00:00.000Z\": 8.658,     \"2019-10-09T23:00:00.000Z\": 8.6638,     \"2019-10-10T01:00:00.000Z\": 8.6522,     \"2019-10-10T02:00:00.000Z\": 8.6725,     \"2019-10-10T03:00:00.000Z\": 8.6753,     \"2019-10-10T04:00:00.000Z\": 8.6609,     \"2019-10-10T05:00:00.000Z\": 8.6146,     \"2019-10-10T06:00:00.000Z\": 8.6522,     \"2019-10-10T07:00:00.000Z\": 8.6696,     \"2019-10-10T08:00:00.000Z\": 8.6725,     \"2019-10-10T09:00:00.000Z\": 8.6725,     \"2019-10-10T10:00:00.000Z\": 8.6811,     \"2019-10-10T11:00:00.000Z\": 8.684,     \"2019-10-10T12:00:00.000Z\": 8.684,     \"2019-10-10T13:00:00.000Z\": 8.6782,     \"2019-10-10T14:00:00.000Z\": 8.6609,     \"2019-10-10T15:00:00.000Z\": 8.6609,     \"2019-10-10T16:00:00.000Z\": 8.6059,     \"2019-10-10T17:00:00.000Z\": 8.6117,     \"2019-10-10T18:00:00.000Z\": 8.6175,     \"2019-10-10T19:00:00.000Z\": 8.6638,     \"2019-10-10T20:00:00.000Z\": 8.6667,     \"2019-10-10T21:00:00.000Z\": 8.6725,     \"2019-10-10T22:00:00.000Z\": 8.6753,     \"2019-10-10T23:00:00.000Z\": 8.6811,     \"2019-10-11T01:00:00.000Z\": 8.6782,     \"2019-10-11T02:00:00.000Z\": 8.684,     \"2019-10-11T03:00:00.000Z\": 8.6811,     \"2019-10-11T04:00:00.000Z\": 8.6782,     \"2019-10-11T05:00:00.000Z\": 8.6725,     \"2019-10-11T06:00:00.000Z\": 8.6262,     \"2019-10-11T07:00:00.000Z\": 8.6667,     \"2019-10-11T08:00:00.000Z\": 8.6667,     \"2019-10-11T09:00:00.000Z\": 8.6725,     \"2019-10-11T10:00:00.000Z\": 8.6725,     \"2019-10-11T11:00:00.000Z\": 8.6725,     \"2019-10-11T12:00:00.000Z\": 8.6725,     \"2019-10-11T13:00:00.000Z\": 8.6233,     \"2019-10-11T14:00:00.000Z\": 8.6319,     \"2019-10-11T15:00:00.000Z\": 8.6725,     \"2019-10-11T16:00:00.000Z\": 8.6753,     \"2019-10-11T17:00:00.000Z\": 8.6753,     \"2019-10-11T18:00:00.000Z\": 8.6782,     \"2019-10-11T19:00:00.000Z\": 8.6811,     \"2019-10-11T20:00:00.000Z\": 8.6811,     \"2019-10-11T21:00:00.000Z\": 8.6811,     \"2019-10-11T22:00:00.000Z\": 8.6782,     \"2019-10-11T23:00:00.000Z\": 8.6348,     \"2019-10-12T01:00:00.000Z\": 8.6811,     \"2019-10-12T02:00:00.000Z\": 8.684,     \"2019-10-12T03:00:00.000Z\": 8.6696,     \"2019-10-12T04:00:00.000Z\": 8.6811,     \"2019-10-12T05:00:00.000Z\": 8.6869,     \"2019-10-12T06:00:00.000Z\": 8.684,     \"2019-10-12T07:00:00.000Z\": 8.684,     \"2019-10-12T08:00:00.000Z\": 8.6782,     \"2019-10-12T09:00:00.000Z\": 8.6782,     \"2019-10-12T10:00:00.000Z\": 8.6753,     \"2019-10-12T11:00:00.000Z\": 8.6377,     \"2019-10-12T12:00:00.000Z\": 8.6406,     \"2019-10-12T13:00:00.000Z\": 8.6782,     \"2019-10-12T14:00:00.000Z\": 8.6782,     \"2019-10-12T15:00:00.000Z\": 8.6811,     \"2019-10-12T16:00:00.000Z\": 8.6811,     \"2019-10-12T17:00:00.000Z\": 8.6811,     \"2019-10-12T18:00:00.000Z\": 8.6782,     \"2019-10-12T19:00:00.000Z\": 8.6811,     \"2019-10-12T20:00:00.000Z\": 8.6811,     \"2019-10-12T21:00:00.000Z\": 8.6811,     \"2019-10-12T22:00:00.000Z\": 8.684,     \"2019-10-12T23:00:00.000Z\": 8.6782,     \"2019-10-13T01:00:00.000Z\": 8.6782,     \"2019-10-13T02:00:00.000Z\": 8.6725,     \"2019-10-13T03:00:00.000Z\": 8.6782,     \"2019-10-13T04:00:00.000Z\": 8.6869,     \"2019-10-13T05:00:00.000Z\": 8.6869,     \"2019-10-13T06:00:00.000Z\": 8.6898,     \"2019-10-13T07:00:00.000Z\": 8.6898,     \"2019-10-13T08:00:00.000Z\": 8.6898,     \"2019-10-13T09:00:00.000Z\": 8.6927,     \"2019-10-13T10:00:00.000Z\": 8.6927,     \"2019-10-13T11:00:00.000Z\": 8.6956,     \"2019-10-13T12:00:00.000Z\": 8.7014,     \"2019-10-13T13:00:00.000Z\": 8.7043,     \"2019-10-13T14:00:00.000Z\": 8.7072,     \"2019-10-13T15:00:00.000Z\": 8.7101,     \"2019-10-13T16:00:00.000Z\": 8.7188,     \"2019-10-13T17:00:00.000Z\": 8.7332,     \"2019-10-13T18:00:00.000Z\": 8.739,     \"2019-10-13T19:00:00.000Z\": 8.7535,     \"2019-10-13T20:00:00.000Z\": 8.7622,     \"2019-10-13T21:00:00.000Z\": 8.7708,     \"2019-10-13T22:00:00.000Z\": 8.7766,     \"2019-10-13T23:00:00.000Z\": 8.7824,     \"2019-10-14T01:00:00.000Z\": 8.7882,     \"2019-10-14T02:00:00.000Z\": 8.794,     \"2019-10-14T03:00:00.000Z\": 8.7882,     \"2019-10-14T04:00:00.000Z\": 8.7882,     \"2019-10-14T05:00:00.000Z\": 8.794,     \"2019-10-14T06:00:00.000Z\": 8.794,     \"2019-10-14T07:00:00.000Z\": 8.794,     \"2019-10-14T08:00:00.000Z\": 8.7969,     \"2019-10-14T09:00:00.000Z\": 8.7998,     \"2019-10-14T10:00:00.000Z\": 8.7998,     \"2019-10-14T11:00:00.000Z\": 8.7998,     \"2019-10-14T12:00:00.000Z\": 8.7969,     \"2019-10-14T13:00:00.000Z\": 8.7998,     \"2019-10-14T14:00:00.000Z\": 8.794,     \"2019-10-14T15:00:00.000Z\": 8.8084,     \"2019-10-14T16:00:00.000Z\": 8.8113,     \"2019-10-14T17:00:00.000Z\": 8.8056,     \"2019-10-14T18:00:00.000Z\": 8.8056,     \"2019-10-14T19:00:00.000Z\": 8.8056,     \"2019-10-14T20:00:00.000Z\": 8.8027,     \"2019-10-14T21:00:00.000Z\": 8.8056,     \"2019-10-14T22:00:00.000Z\": 8.8027,     \"2019-10-14T23:00:00.000Z\": 8.8142,     \"2019-10-15T01:00:00.000Z\": 8.8142,     \"2019-10-15T02:00:00.000Z\": 8.82,     \"2019-10-15T03:00:00.000Z\": 8.8229,     \"2019-10-15T04:00:00.000Z\": 8.8229,     \"2019-10-15T05:00:00.000Z\": 8.8345,     \"2019-10-15T06:00:00.000Z\": 8.8316,     \"2019-10-15T07:00:00.000Z\": 8.8229,     \"2019-10-15T08:00:00.000Z\": 8.8171,     \"2019-10-15T09:00:00.000Z\": 8.8229,     \"2019-10-15T10:00:00.000Z\": 8.82,     \"2019-10-15T11:00:00.000Z\": 8.8142,     \"2019-10-15T12:00:00.000Z\": 8.8142,     \"2019-10-15T13:00:00.000Z\": 8.8171,     \"2019-10-15T14:00:00.000Z\": 8.8258,     \"2019-10-15T15:00:00.000Z\": 8.82,     \"2019-10-15T16:00:00.000Z\": 8.8287,     \"2019-10-15T17:00:00.000Z\": 8.8229,     \"2019-10-15T18:00:00.000Z\": 8.8142,     \"2019-10-15T19:00:00.000Z\": 8.8113,     \"2019-10-15T20:00:00.000Z\": 8.8084,     \"2019-10-15T21:00:00.000Z\": 8.8142,     \"2019-10-15T22:00:00.000Z\": 8.8084,     \"2019-10-15T23:00:00.000Z\": 8.7824,     \"2019-10-16T01:00:00.000Z\": 8.7708,     \"2019-10-16T02:00:00.000Z\": 8.794,     \"2019-10-16T03:00:00.000Z\": 8.8027,     \"2019-10-16T04:00:00.000Z\": 8.7708,     \"2019-10-16T05:00:00.000Z\": 8.7969,     \"2019-10-16T06:00:00.000Z\": 8.8171,     \"2019-10-16T07:00:00.000Z\": 8.8113,     \"2019-10-16T08:00:00.000Z\": 8.8171,     \"2019-10-16T09:00:00.000Z\": 8.8084,     \"2019-10-16T10:00:00.000Z\": 8.7766,     \"2019-10-16T11:00:00.000Z\": 8.7679,     \"2019-10-16T12:00:00.000Z\": 8.713,     \"2019-10-16T13:00:00.000Z\": 8.6464,     \"2019-10-16T14:00:00.000Z\": 8.6725,     \"2019-10-16T15:00:00.000Z\": 8.6696,     \"2019-10-16T16:00:00.000Z\": 8.6319,     \"2019-10-16T17:00:00.000Z\": 8.6638,     \"2019-10-16T18:00:00.000Z\": 8.7072,     \"2019-10-16T19:00:00.000Z\": 8.7159,     \"2019-10-16T20:00:00.000Z\": 8.7216,     \"2019-10-16T21:00:00.000Z\": 8.7477,     \"2019-10-16T22:00:00.000Z\": 8.7506,     \"2019-10-16T23:00:00.000Z\": 8.765,     \"2019-10-17T01:00:00.000Z\": 8.7824,     \"2019-10-17T02:00:00.000Z\": 8.7708,     \"2019-10-17T03:00:00.000Z\": 8.7679,     \"2019-10-17T04:00:00.000Z\": 8.794,     \"2019-10-17T05:00:00.000Z\": 8.7998,     \"2019-10-17T06:00:00.000Z\": 8.7911,     \"2019-10-17T07:00:00.000Z\": 8.7882,     \"2019-10-17T08:00:00.000Z\": 8.765,     \"2019-10-17T09:00:00.000Z\": 8.7448,     \"2019-10-17T10:00:00.000Z\": 8.6898,     \"2019-10-17T11:00:00.000Z\": 8.6782,     \"2019-10-17T12:00:00.000Z\": 8.5567,     \"2019-10-17T13:00:00.000Z\": 8.5741,     \"2019-10-17T14:00:00.000Z\": 8.603,     \"2019-10-17T15:00:00.000Z\": 8.5943,     \"2019-10-17T16:00:00.000Z\": 8.6117,     \"2019-10-17T17:00:00.000Z\": 8.6088,     \"2019-10-17T18:00:00.000Z\": 8.6088,     \"2019-10-17T19:00:00.000Z\": 8.6059,     \"2019-10-17T20:00:00.000Z\": 8.5972,     \"2019-10-17T21:00:00.000Z\": 8.6088,     \"2019-10-17T22:00:00.000Z\": 8.6175,     \"2019-10-17T23:00:00.000Z\": 8.6146,     \"2019-10-18T01:00:00.000Z\": 8.6059,     \"2019-10-18T02:00:00.000Z\": 8.6204,     \"2019-10-18T03:00:00.000Z\": 8.6233,     \"2019-10-18T04:00:00.000Z\": 8.6262,     \"2019-10-18T05:00:00.000Z\": 8.6262,     \"2019-10-18T06:00:00.000Z\": 8.6233,     \"2019-10-18T07:00:00.000Z\": 8.603,     \"2019-10-18T08:00:00.000Z\": 8.6262,     \"2019-10-18T09:00:00.000Z\": 8.6233,     \"2019-10-18T10:00:00.000Z\": 8.603,     \"2019-10-18T11:00:00.000Z\": 8.6464,     \"2019-10-18T12:00:00.000Z\": 8.6667,     \"2019-10-18T13:00:00.000Z\": 8.6956,     \"2019-10-18T14:00:00.000Z\": 8.7159,     \"2019-10-18T15:00:00.000Z\": 8.7188,     \"2019-10-18T16:00:00.000Z\": 8.7188,     \"2019-10-18T17:00:00.000Z\": 8.7303,     \"2019-10-18T18:00:00.000Z\": 8.7361,     \"2019-10-18T19:00:00.000Z\": 8.7361,     \"2019-10-18T20:00:00.000Z\": 8.7332,     \"2019-10-18T21:00:00.000Z\": 8.7245,     \"2019-10-18T22:00:00.000Z\": 8.7188,     \"2019-10-18T23:00:00.000Z\": 8.7159,     \"2019-10-19T01:00:00.000Z\": 8.7072,     \"2019-10-19T02:00:00.000Z\": 8.6985,     \"2019-10-19T03:00:00.000Z\": 8.6782,     \"2019-10-19T04:00:00.000Z\": 8.6898,     \"2019-10-19T05:00:00.000Z\": 8.6811,     \"2019-10-19T06:00:00.000Z\": 8.6725,     \"2019-10-19T07:00:00.000Z\": 8.6696,     \"2019-10-19T08:00:00.000Z\": 8.6667,     \"2019-10-19T09:00:00.000Z\": 8.6551,     \"2019-10-19T10:00:00.000Z\": 8.6464,     \"2019-10-19T11:00:00.000Z\": 8.6406,     \"2019-10-19T12:00:00.000Z\": 8.6406,     \"2019-10-19T13:00:00.000Z\": 8.6377,     \"2019-10-19T14:00:00.000Z\": 8.6348,     \"2019-10-19T15:00:00.000Z\": 8.6348,     \"2019-10-19T16:00:00.000Z\": 8.6059,     \"2019-10-19T17:00:00.000Z\": 8.6175,     \"2019-10-19T18:00:00.000Z\": 8.6319,     \"2019-10-19T19:00:00.000Z\": 8.6262,     \"2019-10-19T20:00:00.000Z\": 8.6204,     \"2019-10-19T21:00:00.000Z\": 8.6204,     \"2019-10-19T22:00:00.000Z\": 8.6204,     \"2019-10-19T23:00:00.000Z\": 8.6204,     \"2019-10-20T01:00:00.000Z\": 8.6146,     \"2019-10-20T02:00:00.000Z\": 8.6088,     \"2019-10-20T03:00:00.000Z\": 8.6088,     \"2019-10-20T04:00:00.000Z\": 8.6059,     \"2019-10-20T05:00:00.000Z\": 8.6001,     \"2019-10-20T06:00:00.000Z\": 8.5972,     \"2019-10-20T07:00:00.000Z\": 8.5828,     \"2019-10-20T08:00:00.000Z\": 8.5856,     \"2019-10-20T09:00:00.000Z\": 8.5799,     \"2019-10-20T10:00:00.000Z\": 8.5856,     \"2019-10-20T11:00:00.000Z\": 8.5856,     \"2019-10-20T12:00:00.000Z\": 8.5828,     \"2019-10-20T13:00:00.000Z\": 8.5799,     \"2019-10-20T14:00:00.000Z\": 8.577,     \"2019-10-20T15:00:00.000Z\": 8.5712,     \"2019-10-20T16:00:00.000Z\": 8.5422,     \"2019-10-20T17:00:00.000Z\": 8.5625,     \"2019-10-20T18:00:00.000Z\": 8.5654,     \"2019-10-20T19:00:00.000Z\": 8.5625,     \"2019-10-20T20:00:00.000Z\": 8.5567,     \"2019-10-20T21:00:00.000Z\": 8.5538,     \"2019-10-20T22:00:00.000Z\": 8.5509,     \"2019-10-20T23:00:00.000Z\": 8.5451,     \"2019-10-21T01:00:00.000Z\": 8.5422,     \"2019-10-21T02:00:00.000Z\": 8.5422,     \"2019-10-21T03:00:00.000Z\": 8.5394,     \"2019-10-21T04:00:00.000Z\": 8.5336,     \"2019-10-21T05:00:00.000Z\": 8.5365,     \"2019-10-21T06:00:00.000Z\": 8.5365,     \"2019-10-21T07:00:00.000Z\": 8.5365,     \"2019-10-21T08:00:00.000Z\": 8.5365,     \"2019-10-21T09:00:00.000Z\": 8.5307,     \"2019-10-21T10:00:00.000Z\": 8.4699,     \"2019-10-21T11:00:00.000Z\": 8.4873,     \"2019-10-21T12:00:00.000Z\": 8.4988,     \"2019-10-21T13:00:00.000Z\": 8.5017,     \"2019-10-21T14:00:00.000Z\": 8.5017,     \"2019-10-21T15:00:00.000Z\": 8.5046,     \"2019-10-21T16:00:00.000Z\": 8.5075,     \"2019-10-21T17:00:00.000Z\": 8.5075,     \"2019-10-21T18:00:00.000Z\": 8.4902,     \"2019-10-21T19:00:00.000Z\": 8.4902,     \"2019-10-21T20:00:00.000Z\": 8.4959,     \"2019-10-21T21:00:00.000Z\": 8.4959,     \"2019-10-21T22:00:00.000Z\": 8.4931,     \"2019-10-21T23:00:00.000Z\": 8.4959,     \"2019-10-22T01:00:00.000Z\": 8.4873,     \"2019-10-22T02:00:00.000Z\": 8.4873,     \"2019-10-22T03:00:00.000Z\": 8.4873,     \"2019-10-22T04:00:00.000Z\": 8.4873,     \"2019-10-22T05:00:00.000Z\": 8.4873,     \"2019-10-22T06:00:00.000Z\": 8.4786,     \"2019-10-22T07:00:00.000Z\": 8.4786,     \"2019-10-22T08:00:00.000Z\": 8.467,     \"2019-10-22T09:00:00.000Z\": 8.522,     \"2019-10-22T10:00:00.000Z\": 8.5683,     \"2019-10-22T11:00:00.000Z\": 8.577,     \"2019-10-22T12:00:00.000Z\": 8.5828,     \"2019-10-22T13:00:00.000Z\": 8.5885,     \"2019-10-22T14:00:00.000Z\": 8.5799,     \"2019-10-22T15:00:00.000Z\": 8.5741,     \"2019-10-22T16:00:00.000Z\": 8.5712,     \"2019-10-22T17:00:00.000Z\": 8.5741,     \"2019-10-22T18:00:00.000Z\": 8.5683,     \"2019-10-22T19:00:00.000Z\": 8.5712,     \"2019-10-22T20:00:00.000Z\": 8.5683,     \"2019-10-22T21:00:00.000Z\": 8.5683,     \"2019-10-22T22:00:00.000Z\": 8.5654,     \"2019-10-22T23:00:00.000Z\": 8.5654,     \"2019-10-23T01:00:00.000Z\": 8.5625,     \"2019-10-23T02:00:00.000Z\": 8.5596,     \"2019-10-23T03:00:00.000Z\": 8.5596,     \"2019-10-23T04:00:00.000Z\": 8.5596,     \"2019-10-23T05:00:00.000Z\": 8.5596,     \"2019-10-23T06:00:00.000Z\": 8.548,     \"2019-10-23T07:00:00.000Z\": 8.548,     \"2019-10-23T08:00:00.000Z\": 8.5394,     \"2019-10-23T09:00:00.000Z\": 8.5394,     \"2019-10-23T10:00:00.000Z\": 8.5394,     \"2019-10-23T11:00:00.000Z\": 8.5336,     \"2019-10-23T12:00:00.000Z\": 8.5625,     \"2019-10-23T13:00:00.000Z\": 8.5683,     \"2019-10-23T14:00:00.000Z\": 8.5712,     \"2019-10-23T15:00:00.000Z\": 8.4728,     \"2019-10-23T16:00:00.000Z\": 8.4844,     \"2019-10-23T17:00:00.000Z\": 8.4815,     \"2019-10-23T18:00:00.000Z\": 8.5017,     \"2019-10-23T19:00:00.000Z\": 8.5104,     \"2019-10-23T20:00:00.000Z\": 8.5162,     \"2019-10-23T21:00:00.000Z\": 8.522,     \"2019-10-23T22:00:00.000Z\": 8.5162,     \"2019-10-23T23:00:00.000Z\": 8.5278,     \"2019-10-24T01:00:00.000Z\": 8.5162,     \"2019-10-24T02:00:00.000Z\": 8.5307,     \"2019-10-24T03:00:00.000Z\": 8.5394,     \"2019-10-24T04:00:00.000Z\": 8.5394,     \"2019-10-24T05:00:00.000Z\": 8.548,     \"2019-10-24T06:00:00.000Z\": 8.5075,     \"2019-10-24T07:00:00.000Z\": 8.5538,     \"2019-10-24T08:00:00.000Z\": 8.5741,     \"2019-10-24T09:00:00.000Z\": 8.5828,     \"2019-10-24T10:00:00.000Z\": 8.5914,     \"2019-10-24T11:00:00.000Z\": 8.5856,     \"2019-10-24T12:00:00.000Z\": 8.5914,     \"2019-10-24T13:00:00.000Z\": 8.5972,     \"2019-10-24T14:00:00.000Z\": 8.5972,     \"2019-10-24T15:00:00.000Z\": 8.6001,     \"2019-10-24T16:00:00.000Z\": 8.6088,     \"2019-10-24T17:00:00.000Z\": 8.6117,     \"2019-10-24T18:00:00.000Z\": 8.6175,     \"2019-10-24T19:00:00.000Z\": 8.6175,     \"2019-10-24T20:00:00.000Z\": 8.603,     \"2019-10-24T21:00:00.000Z\": 8.6059,     \"2019-10-24T22:00:00.000Z\": 8.603,     \"2019-10-24T23:00:00.000Z\": 8.6088,     \"2019-10-25T01:00:00.000Z\": 8.6117,     \"2019-10-25T02:00:00.000Z\": 8.6175,     \"2019-10-25T03:00:00.000Z\": 8.6146,     \"2019-10-25T04:00:00.000Z\": 8.6146,     \"2019-10-25T05:00:00.000Z\": 8.603,     \"2019-10-25T06:00:00.000Z\": 8.5683,     \"2019-10-25T07:00:00.000Z\": 8.5683,     \"2019-10-25T08:00:00.000Z\": 8.5625,     \"2019-10-25T09:00:00.000Z\": 8.5654,     \"2019-10-25T10:00:00.000Z\": 8.5741,     \"2019-10-25T11:00:00.000Z\": 8.5712,     \"2019-10-25T12:00:00.000Z\": 8.5654,     \"2019-10-25T13:00:00.000Z\": 8.5625,     \"2019-10-25T14:00:00.000Z\": 8.5596,     \"2019-10-25T15:00:00.000Z\": 8.5712,     \"2019-10-25T16:00:00.000Z\": 8.5654,     \"2019-10-25T17:00:00.000Z\": 8.5828,     \"2019-10-25T18:00:00.000Z\": 8.6001,     \"2019-10-25T19:00:00.000Z\": 8.5914,     \"2019-10-25T20:00:00.000Z\": 8.5914,     \"2019-10-25T21:00:00.000Z\": 8.5856,     \"2019-10-25T22:00:00.000Z\": 8.5914,     \"2019-10-25T23:00:00.000Z\": 8.5828,     \"2019-10-26T01:00:00.000Z\": 8.5914,     \"2019-10-26T02:00:00.000Z\": 8.5741,     \"2019-10-26T03:00:00.000Z\": 8.5943,     \"2019-10-26T04:00:00.000Z\": 8.5828,     \"2019-10-26T05:00:00.000Z\": 8.5885,     \"2019-10-26T06:00:00.000Z\": 8.5914,     \"2019-10-26T07:00:00.000Z\": 8.5943,     \"2019-10-26T08:00:00.000Z\": 8.5943,     \"2019-10-26T09:00:00.000Z\": 8.5943,     \"2019-10-26T10:00:00.000Z\": 8.5943,     \"2019-10-26T11:00:00.000Z\": 8.577,     \"2019-10-26T12:00:00.000Z\": 8.5972,     \"2019-10-26T13:00:00.000Z\": 8.6001,     \"2019-10-26T14:00:00.000Z\": 8.6146,     \"2019-10-26T15:00:00.000Z\": 8.6117,     \"2019-10-26T16:00:00.000Z\": 8.6001,     \"2019-10-26T17:00:00.000Z\": 8.5596,     \"2019-10-26T18:00:00.000Z\": 8.5509,     \"2019-10-26T19:00:00.000Z\": 8.5422,     \"2019-10-26T20:00:00.000Z\": 8.5336,     \"2019-10-26T21:00:00.000Z\": 8.5278,     \"2019-10-26T22:00:00.000Z\": 8.5278,     \"2019-10-26T23:00:00.000Z\": 8.5683,     \"2019-10-27T01:00:00.000Z\": 8.5712,     \"2019-10-27T02:00:00.000Z\": 8.5741,     \"2019-10-27T03:00:00.000Z\": 8.5741,     \"2019-10-27T04:00:00.000Z\": 8.5828,     \"2019-10-27T05:00:00.000Z\": 8.548,     \"2019-10-27T06:00:00.000Z\": 8.5741,     \"2019-10-27T07:00:00.000Z\": 8.5712,     \"2019-10-27T08:00:00.000Z\": 8.5509,     \"2019-10-27T09:00:00.000Z\": 8.5741,     \"2019-10-27T10:00:00.000Z\": 8.5741,     \"2019-10-27T11:00:00.000Z\": 8.5712,     \"2019-10-27T12:00:00.000Z\": 8.5712,     \"2019-10-27T13:00:00.000Z\": 8.5914,     \"2019-10-27T14:00:00.000Z\": 8.577,     \"2019-10-27T15:00:00.000Z\": 8.5741,     \"2019-10-27T16:00:00.000Z\": 8.5799,     \"2019-10-27T17:00:00.000Z\": 8.5828,     \"2019-10-27T18:00:00.000Z\": 8.5828,     \"2019-10-27T19:00:00.000Z\": 8.577,     \"2019-10-27T20:00:00.000Z\": 8.5625,     \"2019-10-27T21:00:00.000Z\": 8.5394,     \"2019-10-27T22:00:00.000Z\": 8.5509,     \"2019-10-27T23:00:00.000Z\": 8.5451,     \"2019-10-28T01:00:00.000Z\": 8.5394,     \"2019-10-28T02:00:00.000Z\": 8.5365,     \"2019-10-28T03:00:00.000Z\": 8.5191,     \"2019-10-28T04:00:00.000Z\": 8.5191,     \"2019-10-28T05:00:00.000Z\": 8.5046,     \"2019-10-28T06:00:00.000Z\": 8.4959,     \"2019-10-28T07:00:00.000Z\": 8.4873,     \"2019-10-28T08:00:00.000Z\": 8.4873,     \"2019-10-28T09:00:00.000Z\": 8.467,     \"2019-10-28T10:00:00.000Z\": 8.4525,     \"2019-10-28T11:00:00.000Z\": 8.4468,     \"2019-10-28T12:00:00.000Z\": 8.4381,     \"2019-10-28T13:00:00.000Z\": 8.4005,     \"2019-10-28T14:00:00.000Z\": 8.3773,     \"2019-10-28T15:00:00.000Z\": 8.3686,     \"2019-10-28T16:00:00.000Z\": 8.3657,     \"2019-10-28T17:00:00.000Z\": 8.3571,     \"2019-10-28T18:00:00.000Z\": 8.3831,     \"2019-10-28T19:00:00.000Z\": 8.3744,     \"2019-10-28T20:00:00.000Z\": 8.3686,     \"2019-10-28T21:00:00.000Z\": 8.36,     \"2019-10-28T22:00:00.000Z\": 8.3571,     \"2019-10-28T23:00:00.000Z\": 8.3513,     \"2019-10-29T01:00:00.000Z\": 8.3455,     \"2019-10-29T02:00:00.000Z\": 8.3368,     \"2019-10-29T03:00:00.000Z\": 8.3455,     \"2019-10-29T04:00:00.000Z\": 8.3455,     \"2019-10-29T05:00:00.000Z\": 8.3571,     \"2019-10-29T06:00:00.000Z\": 8.3513,     \"2019-10-29T07:00:00.000Z\": 8.3455,     \"2019-10-29T08:00:00.000Z\": 8.3397,     \"2019-10-29T09:00:00.000Z\": 8.3368,     \"2019-10-29T10:00:00.000Z\": 8.6522,     \"2019-10-29T11:00:00.000Z\": 8.6377,     \"2019-10-29T12:00:00.000Z\": 8.6638,     \"2019-10-29T13:00:00.000Z\": 8.6204,     \"2019-10-29T14:00:00.000Z\": 8.5943,     \"2019-10-29T15:00:00.000Z\": 8.6435,     \"2019-10-29T16:00:00.000Z\": 8.6522,     \"2019-10-29T17:00:00.000Z\": 8.6667,     \"2019-10-29T18:00:00.000Z\": 8.6638,     \"2019-10-29T19:00:00.000Z\": 8.6493,     \"2019-10-29T20:00:00.000Z\": 8.6493,     \"2019-10-29T21:00:00.000Z\": 8.6146,     \"2019-10-29T22:00:00.000Z\": 8.5885,     \"2019-10-29T23:00:00.000Z\": 8.6319,     \"2019-10-30T01:00:00.000Z\": 8.6233,     \"2019-10-30T02:00:00.000Z\": 8.6262,     \"2019-10-30T03:00:00.000Z\": 8.6493,     \"2019-10-30T04:00:00.000Z\": 8.6175,     \"2019-10-30T05:00:00.000Z\": 8.5856,     \"2019-10-30T06:00:00.000Z\": 8.6291,     \"2019-10-30T07:00:00.000Z\": 8.6348,     \"2019-10-30T08:00:00.000Z\": 8.5914,     \"2019-10-30T09:00:00.000Z\": 8.577,     \"2019-10-30T10:00:00.000Z\": 8.603,     \"2019-10-30T11:00:00.000Z\": 8.658,     \"2019-10-30T12:00:00.000Z\": 8.6204,     \"2019-10-30T13:00:00.000Z\": 8.6001,     \"2019-10-30T14:00:00.000Z\": 8.6233,     \"2019-10-30T15:00:00.000Z\": 8.658,     \"2019-10-30T16:00:00.000Z\": 8.6464,     \"2019-10-30T17:00:00.000Z\": 8.6319,     \"2019-10-30T18:00:00.000Z\": 8.6204,     \"2019-10-30T19:00:00.000Z\": 8.5972,     \"2019-10-30T20:00:00.000Z\": 8.5914,     \"2019-10-30T21:00:00.000Z\": 8.5712,     \"2019-10-30T22:00:00.000Z\": 8.5307,     \"2019-10-30T23:00:00.000Z\": 8.5596,     \"2019-10-31T01:00:00.000Z\": 8.577,     \"2019-10-31T02:00:00.000Z\": 8.5885,     \"2019-10-31T03:00:00.000Z\": 8.5799,     \"2019-10-31T04:00:00.000Z\": 8.5336,     \"2019-10-31T05:00:00.000Z\": 8.5683,     \"2019-10-31T06:00:00.000Z\": 8.5625,     \"2019-10-31T07:00:00.000Z\": 8.5712,     \"2019-10-31T08:00:00.000Z\": 8.5567,     \"2019-10-31T09:00:00.000Z\": 8.5046,     \"2019-10-31T10:00:00.000Z\": 8.5422,     \"2019-10-31T11:00:00.000Z\": 8.5394,     \"2019-10-31T12:00:00.000Z\": 8.5162,     \"2019-10-31T13:00:00.000Z\": 8.4641,     \"2019-10-31T14:00:00.000Z\": 8.4815,     \"2019-10-31T15:00:00.000Z\": 8.5162,     \"2019-10-31T16:00:00.000Z\": 8.5104,     \"2019-10-31T17:00:00.000Z\": 8.4902,     \"2019-10-31T18:00:00.000Z\": 8.4873,     \"2019-10-31T19:00:00.000Z\": 8.4873,     \"2019-10-31T20:00:00.000Z\": 8.4554,     \"2019-10-31T21:00:00.000Z\": 8.4612,     \"2019-10-31T22:00:00.000Z\": 8.4497,     \"2019-10-31T23:00:00.000Z\": 8.4699,     \"2019-11-01T01:00:00.000Z\": 8.4525,     \"2019-11-01T02:00:00.000Z\": 8.4931,     \"2019-11-01T03:00:00.000Z\": 8.4699,     \"2019-11-01T04:00:00.000Z\": 8.4381,     \"2019-11-01T05:00:00.000Z\": 8.4583,     \"2019-11-01T06:00:00.000Z\": 8.4294,     \"2019-11-01T07:00:00.000Z\": 8.4757,     \"2019-11-01T08:00:00.000Z\": 8.4757,     \"2019-11-01T09:00:00.000Z\": 8.4381,     \"2019-11-01T10:00:00.000Z\": 8.4583,     \"2019-11-01T11:00:00.000Z\": 8.4728,     \"2019-11-01T12:00:00.000Z\": 8.4786,     \"2019-11-01T13:00:00.000Z\": 8.4554,     \"2019-11-01T14:00:00.000Z\": 8.4294,     \"2019-11-01T15:00:00.000Z\": 8.4728,     \"2019-11-01T16:00:00.000Z\": 8.4902,     \"2019-11-01T17:00:00.000Z\": 8.4786,     \"2019-11-01T18:00:00.000Z\": 8.4757,     \"2019-11-01T19:00:00.000Z\": 8.4786,     \"2019-11-01T20:00:00.000Z\": 8.4757,     \"2019-11-01T21:00:00.000Z\": 8.4525,     \"2019-11-01T22:00:00.000Z\": 8.4554,     \"2019-11-01T23:00:00.000Z\": 8.4902,     \"2019-11-02T01:00:00.000Z\": 8.4815,     \"2019-11-02T02:00:00.000Z\": 8.4786,     \"2019-11-02T03:00:00.000Z\": 8.4873,     \"2019-11-02T04:00:00.000Z\": 8.4699,     \"2019-11-02T05:00:00.000Z\": 8.4352,     \"2019-11-02T06:00:00.000Z\": 8.4525,     \"2019-11-02T07:00:00.000Z\": 8.4699,     \"2019-11-02T08:00:00.000Z\": 8.467,     \"2019-11-02T09:00:00.000Z\": 8.4757,     \"2019-11-02T10:00:00.000Z\": 8.4757,     \"2019-11-02T11:00:00.000Z\": 8.4844,     \"2019-11-02T12:00:00.000Z\": 8.4786,     \"2019-11-02T13:00:00.000Z\": 8.4554,     \"2019-11-02T14:00:00.000Z\": 8.4988,     \"2019-11-02T15:00:00.000Z\": 8.4902,     \"2019-11-02T16:00:00.000Z\": 8.4959,     \"2019-11-02T17:00:00.000Z\": 8.4959,     \"2019-11-02T18:00:00.000Z\": 8.4959,     \"2019-11-02T19:00:00.000Z\": 8.4873,     \"2019-11-02T20:00:00.000Z\": 8.4757,     \"2019-11-02T21:00:00.000Z\": 8.4959,     \"2019-11-02T22:00:00.000Z\": 8.4757,     \"2019-11-02T23:00:00.000Z\": 8.4931,     \"2019-11-03T01:00:00.000Z\": 8.4844,     \"2019-11-03T02:00:00.000Z\": 8.5075,     \"2019-11-03T03:00:00.000Z\": 8.5104,     \"2019-11-03T04:00:00.000Z\": 8.5133,     \"2019-11-03T05:00:00.000Z\": 8.4988,     \"2019-11-03T06:00:00.000Z\": 8.4641,     \"2019-11-03T07:00:00.000Z\": 8.4959,     \"2019-11-03T08:00:00.000Z\": 8.5162,     \"2019-11-03T09:00:00.000Z\": 8.548,     \"2019-11-03T10:00:00.000Z\": 8.5336,     \"2019-11-03T11:00:00.000Z\": 8.5654,     \"2019-11-03T12:00:00.000Z\": 8.5509,     \"2019-11-03T13:00:00.000Z\": 8.5654,     \"2019-11-03T14:00:00.000Z\": 8.5567,     \"2019-11-03T15:00:00.000Z\": 8.5596,     \"2019-11-03T16:00:00.000Z\": 8.577,     \"2019-11-03T17:00:00.000Z\": 8.5741,     \"2019-11-03T18:00:00.000Z\": 8.577,     \"2019-11-03T19:00:00.000Z\": 8.5828,     \"2019-11-03T20:00:00.000Z\": 8.5712,     \"2019-11-03T21:00:00.000Z\": 8.5654,     \"2019-11-03T22:00:00.000Z\": 8.5856,     \"2019-11-03T23:00:00.000Z\": 8.5741,     \"2019-11-04T01:00:00.000Z\": 8.5943,     \"2019-11-04T02:00:00.000Z\": 8.6001,     \"2019-11-04T03:00:00.000Z\": 8.6175,     \"2019-11-04T04:00:00.000Z\": 8.6117,     \"2019-11-04T05:00:00.000Z\": 8.6117,     \"2019-11-04T06:00:00.000Z\": 8.6233,     \"2019-11-04T07:00:00.000Z\": 8.6319,     \"2019-11-04T08:00:00.000Z\": 8.6175,     \"2019-11-04T09:00:00.000Z\": 8.6001,     \"2019-11-04T10:00:00.000Z\": 8.6175,     \"2019-11-04T11:00:00.000Z\": 8.6406,     \"2019-11-04T12:00:00.000Z\": 8.6175,     \"2019-11-04T13:00:00.000Z\": 8.6088,     \"2019-11-04T14:00:00.000Z\": 8.6377,     \"2019-11-04T15:00:00.000Z\": 8.6319,     \"2019-11-04T16:00:00.000Z\": 8.6435,     \"2019-11-04T17:00:00.000Z\": 8.6435,     \"2019-11-04T18:00:00.000Z\": 8.6464,     \"2019-11-04T19:00:00.000Z\": 8.6319,     \"2019-11-04T20:00:00.000Z\": 8.6146,     \"2019-11-04T21:00:00.000Z\": 8.6464,     \"2019-11-04T22:00:00.000Z\": 8.6406,     \"2019-11-04T23:00:00.000Z\": 8.6175,     \"2019-11-05T01:00:00.000Z\": 8.6464,     \"2019-11-05T02:00:00.000Z\": 8.6551,     \"2019-11-05T03:00:00.000Z\": 8.6464,     \"2019-11-05T04:00:00.000Z\": 8.6464,     \"2019-11-05T05:00:00.000Z\": 8.6377,     \"2019-11-05T06:00:00.000Z\": 8.6667,     \"2019-11-05T07:00:00.000Z\": 8.6551,     \"2019-11-05T08:00:00.000Z\": 8.6551,     \"2019-11-05T09:00:00.000Z\": 8.6435,     \"2019-11-05T10:00:00.000Z\": 8.6493,     \"2019-11-05T11:00:00.000Z\": 8.6696,     \"2019-11-05T12:00:00.000Z\": 8.6464,     \"2019-11-05T13:00:00.000Z\": 8.6319,     \"2019-11-05T14:00:00.000Z\": 8.6551,     \"2019-11-05T15:00:00.000Z\": 8.6667,     \"2019-11-05T16:00:00.000Z\": 8.6725,     \"2019-11-05T17:00:00.000Z\": 8.6638,     \"2019-11-05T18:00:00.000Z\": 8.6725,     \"2019-11-05T19:00:00.000Z\": 8.6725,     \"2019-11-05T20:00:00.000Z\": 8.6696,     \"2019-11-05T21:00:00.000Z\": 8.6464,     \"2019-11-05T22:00:00.000Z\": 8.6638,     \"2019-11-05T23:00:00.000Z\": 8.6435,     \"2019-11-06T01:00:00.000Z\": 8.6609,     \"2019-11-06T02:00:00.000Z\": 8.6667,     \"2019-11-06T03:00:00.000Z\": 8.6725,     \"2019-11-06T04:00:00.000Z\": 8.6725,     \"2019-11-06T05:00:00.000Z\": 8.6638,     \"2019-11-06T06:00:00.000Z\": 8.6522,     \"2019-11-06T07:00:00.000Z\": 8.6725,     \"2019-11-06T08:00:00.000Z\": 8.6638,     \"2019-11-06T09:00:00.000Z\": 8.6377,     \"2019-11-06T10:00:00.000Z\": 8.6551,     \"2019-11-06T11:00:00.000Z\": 8.658,     \"2019-11-06T12:00:00.000Z\": 8.6406,     \"2019-11-06T13:00:00.000Z\": 8.658,     \"2019-11-06T14:00:00.000Z\": 8.6146,     \"2019-11-06T15:00:00.000Z\": 8.5885,     \"2019-11-06T16:00:00.000Z\": 8.6638,     \"2019-11-06T17:00:00.000Z\": 8.658,     \"2019-11-06T18:00:00.000Z\": 8.6638,     \"2019-11-06T19:00:00.000Z\": 8.6609,     \"2019-11-06T20:00:00.000Z\": 8.6638,     \"2019-11-06T21:00:00.000Z\": 8.6319,     \"2019-11-06T22:00:00.000Z\": 8.6348,     \"2019-11-06T23:00:00.000Z\": 8.6464,     \"2019-11-07T01:00:00.000Z\": 8.6435,     \"2019-11-07T02:00:00.000Z\": 8.6551,     \"2019-11-07T03:00:00.000Z\": 8.6377,     \"2019-11-07T04:00:00.000Z\": 8.6522,     \"2019-11-07T05:00:00.000Z\": 8.6175,     \"2019-11-07T06:00:00.000Z\": 8.6319,     \"2019-11-07T07:00:00.000Z\": 8.6377,     \"2019-11-07T08:00:00.000Z\": 8.6001,     \"2019-11-07T09:00:00.000Z\": 8.5828,     \"2019-11-07T10:00:00.000Z\": 8.5712,     \"2019-11-07T11:00:00.000Z\": 7.2141,     \"2019-11-07T12:00:00.000Z\": 7.3125,     \"2019-11-07T13:00:00.000Z\": 7.2865,     \"2019-11-07T14:00:00.000Z\": 7.3125,     \"2019-11-07T15:00:00.000Z\": 7.2807,     \"2019-11-07T16:00:00.000Z\": 7.3241,     \"2019-11-07T17:00:00.000Z\": 7.3154,     \"2019-11-07T18:00:00.000Z\": 7.2922,     \"2019-11-07T19:00:00.000Z\": 7.2865,     \"2019-11-07T20:00:00.000Z\": 7.3038,     \"2019-11-07T21:00:00.000Z\": 7.2575,     \"2019-11-07T22:00:00.000Z\": 7.2951,     \"2019-11-07T23:00:00.000Z\": 7.2199,     \"2019-11-08T01:00:00.000Z\": 7.2054,     \"2019-11-08T02:00:00.000Z\": 7.2199,     \"2019-11-08T03:00:00.000Z\": 7.1128,     \"2019-11-08T04:00:00.000Z\": 7.1823,     \"2019-11-08T05:00:00.000Z\": 7.1071,     \"2019-11-08T06:00:00.000Z\": 7.2112,     \"2019-11-08T07:00:00.000Z\": 7.2083,     \"2019-11-08T08:00:00.000Z\": 7.2662,     \"2019-11-08T09:00:00.000Z\": 7.1765,     \"2019-11-08T10:00:00.000Z\": 7.2083,     \"2019-11-08T11:00:00.000Z\": 7.1563,     \"2019-11-08T12:00:00.000Z\": 7.2228,     \"2019-11-08T13:00:00.000Z\": 7.2025,     \"2019-11-08T14:00:00.000Z\": 7.1852,     \"2019-11-08T15:00:00.000Z\": 7.1823,     \"2019-11-08T16:00:00.000Z\": 7.1997,     \"2019-11-08T17:00:00.000Z\": 7.191,     \"2019-11-08T18:00:00.000Z\": 7.1997,     \"2019-11-08T19:00:00.000Z\": 7.1765,     \"2019-11-08T20:00:00.000Z\": 7.1823,     \"2019-11-08T21:00:00.000Z\": 7.1389,     \"2019-11-08T22:00:00.000Z\": 7.1534,     \"2019-11-08T23:00:00.000Z\": 7.1244,     \"2019-11-09T01:00:00.000Z\": 7.136,     \"2019-11-09T02:00:00.000Z\": 7.162,     \"2019-11-09T03:00:00.000Z\": 7.162,     \"2019-11-09T04:00:00.000Z\": 7.1649,     \"2019-11-09T05:00:00.000Z\": 7.1071,     \"2019-11-09T06:00:00.000Z\": 7.1302,     \"2019-11-09T07:00:00.000Z\": 7.0608,     \"2019-11-09T08:00:00.000Z\": 7.1244,     \"2019-11-09T09:00:00.000Z\": 7.0463,     \"2019-11-09T10:00:00.000Z\": 7.1273,     \"2019-11-09T11:00:00.000Z\": 7.1013,     \"2019-11-09T12:00:00.000Z\": 7.1534,     \"2019-11-09T13:00:00.000Z\": 7.1563,     \"2019-11-09T14:00:00.000Z\": 7.1389,     \"2019-11-09T15:00:00.000Z\": 7.0984,     \"2019-11-09T16:00:00.000Z\": 7.1244,     \"2019-11-09T17:00:00.000Z\": 7.0984,     \"2019-11-09T18:00:00.000Z\": 7.1273,     \"2019-11-09T19:00:00.000Z\": 7.081,     \"2019-11-09T20:00:00.000Z\": 7.081,     \"2019-11-09T21:00:00.000Z\": 7.0087,     \"2019-11-09T22:00:00.000Z\": 7.0405,     \"2019-11-09T23:00:00.000Z\": 6.9797,     \"2019-11-10T01:00:00.000Z\": 6.9711,     \"2019-11-10T02:00:00.000Z\": 7,     \"2019-11-10T03:00:00.000Z\": 7.0608,     \"2019-11-10T04:00:00.000Z\": 7.0376,     \"2019-11-10T05:00:00.000Z\": 6.9508,     \"2019-11-10T06:00:00.000Z\": 7.026,     \"2019-11-10T07:00:00.000Z\": 6.9074,     \"2019-11-10T08:00:00.000Z\": 7.0376,     \"2019-11-10T09:00:00.000Z\": 6.9797,     \"2019-11-10T10:00:00.000Z\": 6.8322,     \"2019-11-10T11:00:00.000Z\": 7,     \"2019-11-10T12:00:00.000Z\": 7.0174,     \"2019-11-10T13:00:00.000Z\": 7.0174,     \"2019-11-10T14:00:00.000Z\": 6.9682,     \"2019-11-10T15:00:00.000Z\": 6.9826,     \"2019-11-10T16:00:00.000Z\": 6.9769,     \"2019-11-10T17:00:00.000Z\": 7.0087,     \"2019-11-10T18:00:00.000Z\": 6.9826,     \"2019-11-10T19:00:00.000Z\": 7.0116,     \"2019-11-10T20:00:00.000Z\": 6.9769,     \"2019-11-10T21:00:00.000Z\": 6.9595,     \"2019-11-10T22:00:00.000Z\": 6.9277,     \"2019-11-10T23:00:00.000Z\": 6.9334,     \"2019-11-11T01:00:00.000Z\": 6.919,     \"2019-11-11T02:00:00.000Z\": 6.9219,     \"2019-11-11T03:00:00.000Z\": 6.9363,     \"2019-11-11T04:00:00.000Z\": 6.945,     \"2019-11-11T05:00:00.000Z\": 6.8061,     \"2019-11-11T06:00:00.000Z\": 6.9074,     \"2019-11-11T07:00:00.000Z\": 6.9595,     \"2019-11-11T08:00:00.000Z\": 6.9797,     \"2019-11-11T09:00:00.000Z\": 6.9537,     \"2019-11-11T10:00:00.000Z\": 6.9248,     \"2019-11-11T11:00:00.000Z\": 6.9421,     \"2019-11-11T12:00:00.000Z\": 6.9074,     \"2019-11-11T13:00:00.000Z\": 6.7338,     \"2019-11-11T14:00:00.000Z\": 6.8872,     \"2019-11-11T15:00:00.000Z\": 6.8987,     \"2019-11-11T16:00:00.000Z\": 6.945,     \"2019-11-11T17:00:00.000Z\": 6.9711,     \"2019-11-11T18:00:00.000Z\": 6.945,     \"2019-11-11T19:00:00.000Z\": 6.9421,     \"2019-11-11T20:00:00.000Z\": 6.9161,     \"2019-11-11T21:00:00.000Z\": 6.9363,     \"2019-11-11T22:00:00.000Z\": 6.8727,     \"2019-11-11T23:00:00.000Z\": 6.9479,     \"2019-11-12T01:00:00.000Z\": 7.0087,     \"2019-11-12T02:00:00.000Z\": 6.9508,     \"2019-11-12T03:00:00.000Z\": 7,     \"2019-11-12T04:00:00.000Z\": 6.9682,     \"2019-11-12T05:00:00.000Z\": 6.9363,     \"2019-11-12T06:00:00.000Z\": 6.9074,     \"2019-11-12T07:00:00.000Z\": 6.9566,     \"2019-11-12T08:00:00.000Z\": 6.9537,     \"2019-11-12T09:00:00.000Z\": 6.8785,     \"2019-11-12T10:00:00.000Z\": 6.9306,     \"2019-11-12T11:00:00.000Z\": 6.9566,     \"2019-11-12T12:00:00.000Z\": 6.9508,     \"2019-11-12T13:00:00.000Z\": 6.945,     \"2019-11-12T14:00:00.000Z\": 6.9508,     \"2019-11-12T15:00:00.000Z\": 6.9537,     \"2019-11-12T16:00:00.000Z\": 6.9942,     \"2019-11-12T17:00:00.000Z\": 6.974,     \"2019-11-12T18:00:00.000Z\": 6.9537,     \"2019-11-12T19:00:00.000Z\": 6.9566,     \"2019-11-12T20:00:00.000Z\": 6.9769,     \"2019-11-12T21:00:00.000Z\": 6.9334,     \"2019-11-12T22:00:00.000Z\": 6.9392,     \"2019-11-12T23:00:00.000Z\": 6.9248,     \"2019-11-13T01:00:00.000Z\": 6.9277,     \"2019-11-13T02:00:00.000Z\": 6.9884,     \"2019-11-13T03:00:00.000Z\": 7.0174,     \"2019-11-13T04:00:00.000Z\": 6.9219,     \"2019-11-13T05:00:00.000Z\": 6.8872,     \"2019-11-13T06:00:00.000Z\": 6.9537,     \"2019-11-13T07:00:00.000Z\": 6.9363,     \"2019-11-13T08:00:00.000Z\": 6.9479,     \"2019-11-13T09:00:00.000Z\": 6.8524,     \"2019-11-13T10:00:00.000Z\": 6.8872,     \"2019-11-13T11:00:00.000Z\": 6.8785,     \"2019-11-13T12:00:00.000Z\": 6.9334,     \"2019-11-13T13:00:00.000Z\": 6.8466,     \"2019-11-13T14:00:00.000Z\": 6.838,     \"2019-11-13T15:00:00.000Z\": 6.9161,     \"2019-11-13T16:00:00.000Z\": 6.9363,     \"2019-11-13T17:00:00.000Z\": 6.9566,     \"2019-11-13T18:00:00.000Z\": 6.9421,     \"2019-11-13T19:00:00.000Z\": 6.8958,     \"2019-11-13T20:00:00.000Z\": 6.8785,     \"2019-11-13T21:00:00.000Z\": 6.8785,     \"2019-11-13T22:00:00.000Z\": 6.8958,     \"2019-11-13T23:00:00.000Z\": 6.89,     \"2019-11-14T01:00:00.000Z\": 6.9074,     \"2019-11-14T02:00:00.000Z\": 6.9508,     \"2019-11-14T03:00:00.000Z\": 6.9508,     \"2019-11-14T04:00:00.000Z\": 6.9132,     \"2019-11-14T05:00:00.000Z\": 6.8524,     \"2019-11-14T06:00:00.000Z\": 6.9074,     \"2019-11-14T07:00:00.000Z\": 6.9334,     \"2019-11-14T08:00:00.000Z\": 6.8582,     \"2019-11-14T09:00:00.000Z\": 6.8438,     \"2019-11-14T10:00:00.000Z\": 6.8785,     \"2019-11-14T11:00:00.000Z\": 6.8264,     \"2019-11-14T12:00:00.000Z\": 6.7975,     \"2019-11-14T13:00:00.000Z\": 6.7541,     \"2019-11-14T14:00:00.000Z\": 6.7598,     \"2019-11-14T15:00:00.000Z\": 6.7975,     \"2019-11-14T16:00:00.000Z\": 6.8409,     \"2019-11-14T17:00:00.000Z\": 6.8727,     \"2019-11-14T18:00:00.000Z\": 6.8466,     \"2019-11-14T19:00:00.000Z\": 6.838,     \"2019-11-14T20:00:00.000Z\": 6.8351,     \"2019-11-14T21:00:00.000Z\": 6.7975,     \"2019-11-14T22:00:00.000Z\": 6.7396,     \"2019-11-14T23:00:00.000Z\": 6.7541,     \"2019-11-15T01:00:00.000Z\": 6.8235,     \"2019-11-15T02:00:00.000Z\": 6.8524,     \"2019-11-15T03:00:00.000Z\": 6.8872,     \"2019-11-15T04:00:00.000Z\": 6.8351,     \"2019-11-15T05:00:00.000Z\": 6.7975,     \"2019-11-15T06:00:00.000Z\": 6.7917,     \"2019-11-15T07:00:00.000Z\": 6.8322,     \"2019-11-15T08:00:00.000Z\": 6.8553,     \"2019-11-15T09:00:00.000Z\": 6.8148,     \"2019-11-15T10:00:00.000Z\": 6.7078,     \"2019-11-15T11:00:00.000Z\": 6.7975,     \"2019-11-15T12:00:00.000Z\": 6.8235,     \"2019-11-15T13:00:00.000Z\": 6.7193,     \"2019-11-15T14:00:00.000Z\": 6.7946,     \"2019-11-15T15:00:00.000Z\": 6.8032,     \"2019-11-15T16:00:00.000Z\": 6.8524,     \"2019-11-15T17:00:00.000Z\": 6.8264,     \"2019-11-15T18:00:00.000Z\": 6.7975,     \"2019-11-15T19:00:00.000Z\": 6.7859,     \"2019-11-15T20:00:00.000Z\": 6.7598,     \"2019-11-15T21:00:00.000Z\": 6.6817,     \"2019-11-15T22:00:00.000Z\": 6.7714,     \"2019-11-15T23:00:00.000Z\": 6.7164,     \"2019-11-16T01:00:00.000Z\": 6.7425,     \"2019-11-16T02:00:00.000Z\": 6.8409,     \"2019-11-16T03:00:00.000Z\": 6.8438,     \"2019-11-16T04:00:00.000Z\": 6.8061,     \"2019-11-16T05:00:00.000Z\": 6.7164,     \"2019-11-16T06:00:00.000Z\": 6.7743,     \"2019-11-16T07:00:00.000Z\": 6.702,     \"2019-11-16T08:00:00.000Z\": 6.7888,     \"2019-11-16T09:00:00.000Z\": 6.7251,     \"2019-11-16T10:00:00.000Z\": 6.7946,     \"2019-11-16T11:00:00.000Z\": 6.8409,     \"2019-11-16T12:00:00.000Z\": 6.8351,     \"2019-11-16T13:00:00.000Z\": 6.809,     \"2019-11-16T14:00:00.000Z\": 6.8032,     \"2019-11-16T15:00:00.000Z\": 6.8148,     \"2019-11-16T16:00:00.000Z\": 6.8148,     \"2019-11-16T17:00:00.000Z\": 6.8206,     \"2019-11-16T18:00:00.000Z\": 6.809,     \"2019-11-16T19:00:00.000Z\": 6.7685,     \"2019-11-16T20:00:00.000Z\": 6.6846,     \"2019-11-16T21:00:00.000Z\": 6.7454,     \"2019-11-16T22:00:00.000Z\": 6.6846,     \"2019-11-16T23:00:00.000Z\": 6.7483,     \"2019-11-17T01:00:00.000Z\": 6.783,     \"2019-11-17T02:00:00.000Z\": 6.7975,     \"2019-11-17T03:00:00.000Z\": 6.8264,     \"2019-11-17T04:00:00.000Z\": 6.7975,     \"2019-11-17T05:00:00.000Z\": 6.7222,     \"2019-11-17T06:00:00.000Z\": 6.7598,     \"2019-11-17T07:00:00.000Z\": 6.7049,     \"2019-11-17T08:00:00.000Z\": 6.7975,     \"2019-11-17T09:00:00.000Z\": 6.7772,     \"2019-11-17T10:00:00.000Z\": 6.6412,     \"2019-11-17T11:00:00.000Z\": 6.7801,     \"2019-11-17T12:00:00.000Z\": 6.7685,     \"2019-11-17T13:00:00.000Z\": 6.7049,     \"2019-11-17T14:00:00.000Z\": 6.6644,     \"2019-11-17T15:00:00.000Z\": 6.7396,     \"2019-11-17T16:00:00.000Z\": 6.7772,     \"2019-11-17T17:00:00.000Z\": 6.7888,     \"2019-11-17T18:00:00.000Z\": 6.7772,     \"2019-11-17T19:00:00.000Z\": 6.7598,     \"2019-11-17T20:00:00.000Z\": 6.7251,     \"2019-11-17T21:00:00.000Z\": 6.6933,     \"2019-11-17T22:00:00.000Z\": 6.7598,     \"2019-11-17T23:00:00.000Z\": 6.702,     \"2019-11-18T01:00:00.000Z\": 6.7338,     \"2019-11-18T02:00:00.000Z\": 6.7685,     \"2019-11-18T03:00:00.000Z\": 6.7367,     \"2019-11-18T04:00:00.000Z\": 6.8148,     \"2019-11-18T05:00:00.000Z\": 6.7801,     \"2019-11-18T06:00:00.000Z\": 6.7367,     \"2019-11-18T07:00:00.000Z\": 6.7627,     \"2019-11-18T08:00:00.000Z\": 6.7772,     \"2019-11-18T09:00:00.000Z\": 6.7425,     \"2019-11-18T10:00:00.000Z\": 6.7367,     \"2019-11-18T11:00:00.000Z\": 6.7425,     \"2019-11-18T12:00:00.000Z\": 6.7975,     \"2019-11-18T13:00:00.000Z\": 6.8032,     \"2019-11-18T14:00:00.000Z\": 6.7801,     \"2019-11-18T15:00:00.000Z\": 6.7222,     \"2019-11-18T16:00:00.000Z\": 6.7627,     \"2019-11-18T17:00:00.000Z\": 6.809,     \"2019-11-18T18:00:00.000Z\": 6.7714,     \"2019-11-18T19:00:00.000Z\": 6.7714,     \"2019-11-18T20:00:00.000Z\": 6.7483,     \"2019-11-18T21:00:00.000Z\": 6.6875,     \"2019-11-18T22:00:00.000Z\": 6.7627,     \"2019-11-18T23:00:00.000Z\": 6.7164,     \"2019-11-19T01:00:00.000Z\": 6.7888,     \"2019-11-19T02:00:00.000Z\": 6.8495,     \"2019-11-19T03:00:00.000Z\": 6.8264,     \"2019-11-19T04:00:00.000Z\": 6.7598,     \"2019-11-19T05:00:00.000Z\": 6.7338,     \"2019-11-19T06:00:00.000Z\": 6.7946,     \"2019-11-19T07:00:00.000Z\": 6.8206,     \"2019-11-19T08:00:00.000Z\": 6.7946,     \"2019-11-19T09:00:00.000Z\": 6.7598,     \"2019-11-19T10:00:00.000Z\": 6.7743,     \"2019-11-19T11:00:00.000Z\": 6.7888,     \"2019-11-19T12:00:00.000Z\": 6.8061,     \"2019-11-19T13:00:00.000Z\": 6.7367,     \"2019-11-19T14:00:00.000Z\": 6.8264,     \"2019-11-19T15:00:00.000Z\": 6.8235,     \"2019-11-19T16:00:00.000Z\": 6.7946,     \"2019-11-19T17:00:00.000Z\": 6.8061,     \"2019-11-19T18:00:00.000Z\": 6.838,     \"2019-11-19T19:00:00.000Z\": 6.8553,     \"2019-11-19T20:00:00.000Z\": 6.8003,     \"2019-11-19T21:00:00.000Z\": 6.7251,     \"2019-11-19T22:00:00.000Z\": 6.7598,     \"2019-11-19T23:00:00.000Z\": 6.7627,     \"2019-11-20T01:00:00.000Z\": 6.8177,     \"2019-11-20T02:00:00.000Z\": 6.8148,     \"2019-11-20T03:00:00.000Z\": 6.7975,     \"2019-11-20T04:00:00.000Z\": 6.7888,     \"2019-11-20T05:00:00.000Z\": 6.7309,     \"2019-11-20T06:00:00.000Z\": 6.7483,     \"2019-11-20T07:00:00.000Z\": 6.8148,     \"2019-11-20T08:00:00.000Z\": 6.7396,     \"2019-11-20T09:00:00.000Z\": 6.6701,     \"2019-11-20T10:00:00.000Z\": 5.6516,     \"2019-11-20T11:00:00.000Z\": 5.6516,     \"2019-11-20T12:00:00.000Z\": 5.5475,     \"2019-11-20T13:00:00.000Z\": 5.7095,     \"2019-11-20T14:00:00.000Z\": 5.7095,     \"2019-11-20T15:00:00.000Z\": 5.7066,     \"2019-11-20T16:00:00.000Z\": 6.0509,     \"2019-11-20T17:00:00.000Z\": 5.967,     \"2019-11-20T18:00:00.000Z\": 6.4039,     \"2019-11-20T19:00:00.000Z\": 6.919,     \"2019-11-20T20:00:00.000Z\": 7.1071,     \"2019-11-20T21:00:00.000Z\": 6.5486,     \"2019-11-20T22:00:00.000Z\": 6.4676,     \"2019-11-20T23:00:00.000Z\": 6.8409,     \"2019-11-21T01:00:00.000Z\": 6.8206,     \"2019-11-21T02:00:00.000Z\": 6.8785,     \"2019-11-21T03:00:00.000Z\": 6.864,     \"2019-11-21T04:00:00.000Z\": 7.3935,     \"2019-11-21T05:00:00.000Z\": 7.1997,     \"2019-11-21T06:00:00.000Z\": 7.3877,     \"2019-11-21T07:00:00.000Z\": 7.3009,     \"2019-11-21T08:00:00.000Z\": 6.9682,     \"2019-11-21T09:00:00.000Z\": 7.2054,     \"2019-11-21T10:00:00.000Z\": 7.1765,     \"2019-11-21T11:00:00.000Z\": 7.2286,     \"2019-11-21T12:00:00.000Z\": 7.6163,     \"2019-11-21T13:00:00.000Z\": 7.4398,     \"2019-11-21T14:00:00.000Z\": 6.7743,     \"2019-11-21T15:00:00.000Z\": 7.434,     \"2019-11-21T16:00:00.000Z\": 7.3993,     \"2019-11-21T17:00:00.000Z\": 7.3646,     \"2019-11-21T18:00:00.000Z\": 7.2228,     \"2019-11-21T19:00:00.000Z\": 6.9913,     \"2019-11-21T20:00:00.000Z\": 7.0492,     \"2019-11-21T21:00:00.000Z\": 7.0984,     \"2019-11-21T22:00:00.000Z\": 7.1707,     \"2019-11-21T23:00:00.000Z\": 7.1505,     \"2019-11-22T01:00:00.000Z\": 7.5671,     \"2019-11-22T02:00:00.000Z\": 7.272,     \"2019-11-22T03:00:00.000Z\": 7.1794,     \"2019-11-22T04:00:00.000Z\": 7.3588,     \"2019-11-22T05:00:00.000Z\": 7.1852,     \"2019-11-22T06:00:00.000Z\": 7.1215,     \"2019-11-22T07:00:00.000Z\": 7.8131,     \"2019-11-22T08:00:00.000Z\": 7.6019,     \"2019-11-22T09:00:00.000Z\": 7.7639,     \"2019-11-22T10:00:00.000Z\": 7.6192,     \"2019-11-22T11:00:00.000Z\": 7.5932,     \"2019-11-22T12:00:00.000Z\": 7.6655,     \"2019-11-22T13:00:00.000Z\": 7.6453,     \"2019-11-22T14:00:00.000Z\": 7.9057,     \"2019-11-22T15:00:00.000Z\": 7.4977,     \"2019-11-22T16:00:00.000Z\": 7.4398,     \"2019-11-22T17:00:00.000Z\": 7.6076,     \"2019-11-22T18:00:00.000Z\": 7.434,     \"2019-11-22T19:00:00.000Z\": 7.4919,     \"2019-11-22T20:00:00.000Z\": 8.0677,     \"2019-11-22T21:00:00.000Z\": 7.7407,     \"2019-11-22T22:00:00.000Z\": 7.5816,     \"2019-11-22T23:00:00.000Z\": 8.1863,     \"2019-11-23T01:00:00.000Z\": 7.5295,     \"2019-11-23T02:00:00.000Z\": 8.0098,     \"2019-11-23T03:00:00.000Z\": 7.5295,     \"2019-11-23T04:00:00.000Z\": 7.6453,     \"2019-11-23T05:00:00.000Z\": 7.515,     \"2019-11-23T06:00:00.000Z\": 7.5093,     \"2019-11-23T07:00:00.000Z\": 7.4659,     \"2019-11-23T08:00:00.000Z\": 7.5729,     \"2019-11-23T09:00:00.000Z\": 7.5266,     \"2019-11-23T10:00:00.000Z\": 7.7378,     \"2019-11-23T11:00:00.000Z\": 7.842,     \"2019-11-23T12:00:00.000Z\": 7.8507,     \"2019-11-23T13:00:00.000Z\": 7.9635,     \"2019-11-23T14:00:00.000Z\": 7.9462,     \"2019-11-23T15:00:00.000Z\": 7.952,     \"2019-11-23T16:00:00.000Z\": 7.8449,     \"2019-11-23T17:00:00.000Z\": 7.9404,     \"2019-11-23T18:00:00.000Z\": 7.9983,     \"2019-11-23T19:00:00.000Z\": 7.9491,     \"2019-11-23T20:00:00.000Z\": 8.0069,     \"2019-11-23T21:00:00.000Z\": 8.0735,     \"2019-11-23T22:00:00.000Z\": 8.0417,     \"2019-11-23T23:00:00.000Z\": 7.816,     \"2019-11-24T01:00:00.000Z\": 7.8623,     \"2019-11-24T02:00:00.000Z\": 7.8449,     \"2019-11-24T03:00:00.000Z\": 7.8275,     \"2019-11-24T04:00:00.000Z\": 7.787,     \"2019-11-24T05:00:00.000Z\": 7.8362,     \"2019-11-24T06:00:00.000Z\": 7.7668,     \"2019-11-24T07:00:00.000Z\": 7.5932,     \"2019-11-24T08:00:00.000Z\": 7.6568,     \"2019-11-24T09:00:00.000Z\": 7.4659,     \"2019-11-24T10:00:00.000Z\": 7.5035,     \"2019-11-24T11:00:00.000Z\": 7.5816,     \"2019-11-24T12:00:00.000Z\": 7.6076,     \"2019-11-24T13:00:00.000Z\": 7.599,     \"2019-11-24T14:00:00.000Z\": 7.6568,     \"2019-11-24T15:00:00.000Z\": 7.625,     \"2019-11-24T16:00:00.000Z\": 7.6308,     \"2019-11-24T17:00:00.000Z\": 7.7147,     \"2019-11-24T18:00:00.000Z\": 7.5006,     \"2019-11-24T19:00:00.000Z\": 7.4716,     \"2019-11-24T20:00:00.000Z\": 7.4919,     \"2019-11-24T21:00:00.000Z\": 7.3646,     \"2019-11-24T22:00:00.000Z\": 7.3964,     \"2019-11-24T23:00:00.000Z\": 7.4919,     \"2019-11-25T01:00:00.000Z\": 7.787,     \"2019-11-25T02:00:00.000Z\": 7.4427,     \"2019-11-25T03:00:00.000Z\": 7.8189,     \"2019-11-25T04:00:00.000Z\": 7.4774,     \"2019-11-25T05:00:00.000Z\": 7.9578,     \"2019-11-25T06:00:00.000Z\": 7.8738,     \"2019-11-25T07:00:00.000Z\": 8.3802,     \"2019-11-25T08:00:00.000Z\": 8.1719,     \"2019-11-25T09:00:00.000Z\": 7.5064,     \"2019-11-25T10:00:00.000Z\": 8.1632,     \"2019-11-25T11:00:00.000Z\": 8.088,     \"2019-11-25T12:00:00.000Z\": 7.9578,     \"2019-11-25T13:00:00.000Z\": 7.6424,     \"2019-11-25T14:00:00.000Z\": 7.7841,     \"2019-11-25T15:00:00.000Z\": 7.6308,     \"2019-11-25T16:00:00.000Z\": 7.5932,     \"2019-11-25T17:00:00.000Z\": 7.5064,     \"2019-11-25T18:00:00.000Z\": 8.1343,     \"2019-11-25T19:00:00.000Z\": 8.305,     \"2019-11-25T20:00:00.000Z\": 8.0503,     \"2019-11-25T21:00:00.000Z\": 8.0012,     \"2019-11-25T22:00:00.000Z\": 8.0012,     \"2019-11-25T23:00:00.000Z\": 8.0069,     \"2019-11-26T01:00:00.000Z\": 7.8941,     \"2019-11-26T02:00:00.000Z\": 7.8825,     \"2019-11-26T03:00:00.000Z\": 7.6944,     \"2019-11-26T04:00:00.000Z\": 8.0301,     \"2019-11-26T05:00:00.000Z\": 8.088,     \"2019-11-26T06:00:00.000Z\": 8.0648,     \"2019-11-26T07:00:00.000Z\": 7.9867,     \"2019-11-26T08:00:00.000Z\": 7.8507,     \"2019-11-26T09:00:00.000Z\": 7.8565,     \"2019-11-26T10:00:00.000Z\": 7.9722,     \"2019-11-26T11:00:00.000Z\": 8.0446,     \"2019-11-26T12:00:00.000Z\": 8.1748,     \"2019-11-26T13:00:00.000Z\": 7.8362,     \"2019-11-26T14:00:00.000Z\": 8.0648,     \"2019-11-26T15:00:00.000Z\": 8.0793,     \"2019-11-26T16:00:00.000Z\": 8.088,     \"2019-11-26T17:00:00.000Z\": 8.0793,     \"2019-11-26T18:00:00.000Z\": 8.0532,     \"2019-11-26T19:00:00.000Z\": 8.0677,     \"2019-11-26T20:00:00.000Z\": 8.0475,     \"2019-11-26T21:00:00.000Z\": 8.0156,     \"2019-11-26T22:00:00.000Z\": 7.9635,     \"2019-11-26T23:00:00.000Z\": 7.8854,     \"2019-11-27T01:00:00.000Z\": 7.7813,     \"2019-11-27T02:00:00.000Z\": 8.0243,     \"2019-11-27T03:00:00.000Z\": 8.195,     \"2019-11-27T04:00:00.000Z\": 8.1632,     \"2019-11-27T05:00:00.000Z\": 8.0272,     \"2019-11-27T06:00:00.000Z\": 7.9983,     \"2019-11-27T07:00:00.000Z\": 8.1574,     \"2019-11-27T08:00:00.000Z\": 8.2095,     \"2019-11-27T09:00:00.000Z\": 8.3079,     \"2019-11-27T10:00:00.000Z\": 8.331,     \"2019-11-27T11:00:00.000Z\": 8.3166,     \"2019-11-27T12:00:00.000Z\": 8.3426,     \"2019-11-27T13:00:00.000Z\": 8.3802,     \"2019-11-27T14:00:00.000Z\": 8.386,     \"2019-11-27T15:00:00.000Z\": 8.2703,     \"2019-11-27T16:00:00.000Z\": 8.3021,     \"2019-11-27T17:00:00.000Z\": 8.2442,     \"2019-11-27T18:00:00.000Z\": 8.1892,     \"2019-11-27T19:00:00.000Z\": 8.2269,     \"2019-11-27T20:00:00.000Z\": 8.3079,     \"2019-11-27T21:00:00.000Z\": 8.386,     \"2019-11-27T22:00:00.000Z\": 8.6146,     \"2019-11-27T23:00:00.000Z\": 8.5538,     \"2019-11-28T01:00:00.000Z\": 8.713,     \"2019-11-28T02:00:00.000Z\": 8.7072,     \"2019-11-28T03:00:00.000Z\": 8.739,     \"2019-11-28T04:00:00.000Z\": 8.765,     \"2019-11-28T05:00:00.000Z\": 8.794,     \"2019-11-28T06:00:00.000Z\": 8.7998,     \"2019-11-28T07:00:00.000Z\": 8.7824,     \"2019-11-28T08:00:00.000Z\": 8.8171,     \"2019-11-28T09:00:00.000Z\": 8.8519,     \"2019-11-28T10:00:00.000Z\": 9.5926,     \"2019-11-28T11:00:00.000Z\": 10.1858,     \"2019-11-28T12:00:00.000Z\": 9.9716,     \"2019-11-28T13:00:00.000Z\": 9.4334,     \"2019-11-28T14:00:00.000Z\": 9.3814,     \"2019-11-28T15:00:00.000Z\": 10.3478,     \"2019-11-28T16:00:00.000Z\": 9.6013,     \"2019-11-28T17:00:00.000Z\": 10.912,     \"2019-11-28T18:00:00.000Z\": 10.64,     \"2019-11-28T19:00:00.000Z\": 10.9873,     \"2019-11-28T20:00:00.000Z\": 11.1522,     \"2019-11-28T21:00:00.000Z\": 11.1233,     \"2019-11-28T22:00:00.000Z\": 11.1493,     \"2019-11-28T23:00:00.000Z\": 10.9149,     \"2019-11-29T01:00:00.000Z\": 10.533,     \"2019-11-29T02:00:00.000Z\": 10.559,     \"2019-11-29T03:00:00.000Z\": 9.7662,     \"2019-11-29T04:00:00.000Z\": 11.2332,     \"2019-11-29T05:00:00.000Z\": 11.0683,     \"2019-11-29T06:00:00.000Z\": 11.2072,     \"2019-11-29T07:00:00.000Z\": 11.1522,     \"2019-11-29T08:00:00.000Z\": 11.1522,     \"2019-11-29T09:00:00.000Z\": 11.1522,     \"2019-11-29T10:00:00.000Z\": 11.4473,     \"2019-11-29T11:00:00.000Z\": 11.3142,     \"2019-11-29T12:00:00.000Z\": 11.3403,     \"2019-11-29T13:00:00.000Z\": 11.375,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 12,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 12,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.8918,     \"2019-11-30T02:00:00.000Z\": 10.64,     \"2019-11-30T03:00:00.000Z\": 10.5648,     \"2019-11-30T04:00:00.000Z\": 10.912,     \"2019-11-30T05:00:00.000Z\": 12,     \"2019-11-30T06:00:00.000Z\": 10.912,     \"2019-11-30T07:00:00.000Z\": 12,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 12,     \"2019-11-30T13:00:00.000Z\": 12,     \"2019-11-30T14:00:00.000Z\": 12,     \"2019-11-30T15:00:00.000Z\": 12 }"
          }
        },
        {
          "workflow_input_name": "ts_dataframe",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"pH a\": {         \"2019-11-29T01:00:00.000Z\": 10.533,         \"2019-11-29T02:00:00.000Z\": 10.559,         \"2019-11-29T03:00:00.000Z\": 9.7662,         \"2019-11-29T04:00:00.000Z\": 11.2332,         \"2019-11-29T05:00:00.000Z\": 11.0683,         \"2019-11-29T06:00:00.000Z\": 11.2072,         \"2019-11-29T07:00:00.000Z\": 11.1522,         \"2019-11-29T08:00:00.000Z\": 11.1522,         \"2019-11-29T09:00:00.000Z\": 11.1522,         \"2019-11-29T10:00:00.000Z\": 11.4473,         \"2019-11-29T11:00:00.000Z\": 11.3142,         \"2019-11-29T12:00:00.000Z\": 11.3403,         \"2019-11-29T13:00:00.000Z\": 11.375,         \"2019-11-29T14:00:00.000Z\": 12,         \"2019-11-29T15:00:00.000Z\": 11.4763,         \"2019-11-29T16:00:00.000Z\": 12,         \"2019-11-29T17:00:00.000Z\": 12,         \"2019-11-29T18:00:00.000Z\": 12,         \"2019-11-29T19:00:00.000Z\": 12,         \"2019-11-29T20:00:00.000Z\": 12,         \"2019-11-29T21:00:00.000Z\": 12,         \"2019-11-29T22:00:00.000Z\": 12,         \"2019-11-29T23:00:00.000Z\": 12,         \"2019-11-30T01:00:00.000Z\": 10.8918,         \"2019-11-30T02:00:00.000Z\": 10.64,         \"2019-11-30T03:00:00.000Z\": 10.5648,         \"2019-11-30T04:00:00.000Z\": 10.912,         \"2019-11-30T05:00:00.000Z\": 12,         \"2019-11-30T06:00:00.000Z\": 10.912,         \"2019-11-30T07:00:00.000Z\": 12,         \"2019-11-30T08:00:00.000Z\": 12,         \"2019-11-30T09:00:00.000Z\": 11.3663,         \"2019-11-30T10:00:00.000Z\": 11.1262,         \"2019-11-30T11:00:00.000Z\": 10.7471,         \"2019-11-30T12:00:00.000Z\": 12,         \"2019-11-30T13:00:00.000Z\": 12,         \"2019-11-30T14:00:00.000Z\": 12,         \"2019-11-30T15:00:00.000Z\": 12     },     \"pH b\": {         \"2019-11-29T01:00:00.000Z\": 10.7533,         \"2019-11-29T02:00:00.000Z\": 10.759,         \"2019-11-29T03:00:00.000Z\": 9.9662,         \"2019-11-29T04:00:00.000Z\": 11.1332,         \"2019-11-29T05:00:00.000Z\": 11.0083,         \"2019-11-29T06:00:00.000Z\": 11.1072,         \"2019-11-29T07:00:00.000Z\": 11.1222,         \"2019-11-29T08:00:00.000Z\": 11.1322,         \"2019-11-29T09:00:00.000Z\": 11.1422,         \"2019-11-29T10:00:00.000Z\": 11.7473,         \"2019-11-29T11:00:00.000Z\": 11.4142,         \"2019-11-29T12:00:00.000Z\": 11.4403,         \"2019-11-29T13:00:00.000Z\": 11.475,         \"2019-11-29T14:00:00.000Z\": 12,         \"2019-11-29T15:00:00.000Z\": 11.4763,         \"2019-11-29T16:00:00.000Z\": 12,         \"2019-11-29T17:00:00.000Z\": 12,         \"2019-11-29T18:00:00.000Z\": 13,         \"2019-11-29T19:00:00.000Z\": 12,         \"2019-11-29T20:00:00.000Z\": 12,         \"2019-11-29T21:00:00.000Z\": 13,         \"2019-11-29T22:00:00.000Z\": 12,         \"2019-11-29T23:00:00.000Z\": 12,         \"2019-11-30T01:00:00.000Z\": 10.7918,         \"2019-11-30T02:00:00.000Z\": 10.34,         \"2019-11-30T03:00:00.000Z\": 10.2648,         \"2019-11-30T04:00:00.000Z\": 10.112,         \"2019-11-30T05:00:00.000Z\": 11,         \"2019-11-30T06:00:00.000Z\": 10.312,         \"2019-11-30T07:00:00.000Z\": 11,         \"2019-11-30T08:00:00.000Z\": 12,         \"2019-11-30T09:00:00.000Z\": 11.3663,         \"2019-11-30T10:00:00.000Z\": 11.1262,         \"2019-11-30T11:00:00.000Z\": 10.7471,         \"2019-11-30T12:00:00.000Z\": 11,         \"2019-11-30T13:00:00.000Z\": 11,         \"2019-11-30T14:00:00.000Z\": 11,         \"2019-11-30T15:00:00.000Z\": 11.5     },     \"pH c\": {         \"2019-11-29T01:00:00.000Z\": 9.7533,         \"2019-11-29T02:00:00.000Z\": 8.759,         \"2019-11-29T03:00:00.000Z\": 9.1662,         \"2019-11-29T04:00:00.000Z\": 11.0332,         \"2019-11-29T05:00:00.000Z\": 11.0033,         \"2019-11-29T06:00:00.000Z\": 11.0172,         \"2019-11-29T07:00:00.000Z\": 11.0122,         \"2019-11-29T08:00:00.000Z\": 11.0222,         \"2019-11-29T09:00:00.000Z\": 11.0422,         \"2019-11-29T10:00:00.000Z\": 11.0273,         \"2019-11-29T11:00:00.000Z\": 11.1242,         \"2019-11-29T12:00:00.000Z\": 11.1703,         \"2019-11-29T13:00:00.000Z\": 11.035,         \"2019-11-29T14:00:00.000Z\": 12.1,         \"2019-11-29T15:00:00.000Z\": 11.2763,         \"2019-11-29T16:00:00.000Z\": 12.05,         \"2019-11-29T17:00:00.000Z\": 12.3,         \"2019-11-29T18:00:00.000Z\": 12.82,         \"2019-11-29T19:00:00.000Z\": 12.8,         \"2019-11-29T20:00:00.000Z\": 12.7,         \"2019-11-29T21:00:00.000Z\": 13.77,         \"2019-11-29T22:00:00.000Z\": 12.3,         \"2019-11-29T23:00:00.000Z\": 12.32,         \"2019-11-30T01:00:00.000Z\": 11.6918,         \"2019-11-30T02:00:00.000Z\": 11.22,         \"2019-11-30T03:00:00.000Z\": 11.0648,         \"2019-11-30T04:00:00.000Z\": 10.912,         \"2019-11-30T05:00:00.000Z\": 11.04,         \"2019-11-30T06:00:00.000Z\": 10.87,         \"2019-11-30T07:00:00.000Z\": 10.98,         \"2019-11-30T08:00:00.000Z\": 11.63,         \"2019-11-30T09:00:00.000Z\": 11.222,         \"2019-11-30T10:00:00.000Z\": 11.111,         \"2019-11-30T11:00:00.000Z\": 10.7676,         \"2019-11-30T12:00:00.000Z\": 10.8787,         \"2019-11-30T13:00:00.000Z\": 10.8889,         \"2019-11-30T14:00:00.000Z\": 10.9101,         \"2019-11-30T15:00:00.000Z\": 10.989     } }"
          }
        },
        {
          "workflow_input_name": "scatter_x",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-11-29T01:00:00.000Z\": 10.533,     \"2019-11-29T02:00:00.000Z\": 10.559,     \"2019-11-29T03:00:00.000Z\": 9.7662,     \"2019-11-29T04:00:00.000Z\": 11.2332,     \"2019-11-29T05:00:00.000Z\": 11.0683,     \"2019-11-29T06:00:00.000Z\": 11.2072,     \"2019-11-29T07:00:00.000Z\": 11.1522,     \"2019-11-29T08:00:00.000Z\": 11.1522,     \"2019-11-29T09:00:00.000Z\": 11.1522,     \"2019-11-29T10:00:00.000Z\": 11.4473,     \"2019-11-29T11:00:00.000Z\": 11.3142,     \"2019-11-29T12:00:00.000Z\": 11.3403,     \"2019-11-29T13:00:00.000Z\": 11.375,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 12,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 12,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.8918,     \"2019-11-30T02:00:00.000Z\": 10.64,     \"2019-11-30T03:00:00.000Z\": 10.5648,     \"2019-11-30T04:00:00.000Z\": 10.912,     \"2019-11-30T05:00:00.000Z\": 12,     \"2019-11-30T06:00:00.000Z\": 10.912,     \"2019-11-30T07:00:00.000Z\": 12,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 12,     \"2019-11-30T13:00:00.000Z\": 12,     \"2019-11-30T14:00:00.000Z\": 12,     \"2019-11-30T15:00:00.000Z\": 12 }"
          }
        },
        {
          "workflow_input_name": "scatter_y",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{     \"2019-11-29T01:00:00.000Z\": 10.7533,     \"2019-11-29T02:00:00.000Z\": 10.759,     \"2019-11-29T03:00:00.000Z\": 9.9662,     \"2019-11-29T04:00:00.000Z\": 11.1332,     \"2019-11-29T05:00:00.000Z\": 11.0083,     \"2019-11-29T06:00:00.000Z\": 11.1072,     \"2019-11-29T07:00:00.000Z\": 11.1222,     \"2019-11-29T08:00:00.000Z\": 11.1322,     \"2019-11-29T09:00:00.000Z\": 11.1422,     \"2019-11-29T10:00:00.000Z\": 11.7473,     \"2019-11-29T11:00:00.000Z\": 11.4142,     \"2019-11-29T12:00:00.000Z\": 11.4403,     \"2019-11-29T13:00:00.000Z\": 11.475,     \"2019-11-29T14:00:00.000Z\": 12,     \"2019-11-29T15:00:00.000Z\": 11.4763,     \"2019-11-29T16:00:00.000Z\": 12,     \"2019-11-29T17:00:00.000Z\": 12,     \"2019-11-29T18:00:00.000Z\": 13,     \"2019-11-29T19:00:00.000Z\": 12,     \"2019-11-29T20:00:00.000Z\": 12,     \"2019-11-29T21:00:00.000Z\": 13,     \"2019-11-29T22:00:00.000Z\": 12,     \"2019-11-29T23:00:00.000Z\": 12,     \"2019-11-30T01:00:00.000Z\": 10.7918,     \"2019-11-30T02:00:00.000Z\": 10.34,     \"2019-11-30T03:00:00.000Z\": 10.2648,     \"2019-11-30T04:00:00.000Z\": 10.112,     \"2019-11-30T05:00:00.000Z\": 11,     \"2019-11-30T06:00:00.000Z\": 10.312,     \"2019-11-30T07:00:00.000Z\": 11,     \"2019-11-30T08:00:00.000Z\": 12,     \"2019-11-30T09:00:00.000Z\": 11.3663,     \"2019-11-30T10:00:00.000Z\": 11.1262,     \"2019-11-30T11:00:00.000Z\": 10.7471,     \"2019-11-30T12:00:00.000Z\": 11,     \"2019-11-30T13:00:00.000Z\": 11,     \"2019-11-30T14:00:00.000Z\": 11,     \"2019-11-30T15:00:00.000Z\": 11.5 }"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "79ce1eb1-3ef8-4c74-9114-c856fd88dc89",
    "revision_group_id": "d0d40c45-aef0-424a-a8f4-b16cd5f8b129",
    "name": "Volatility Detection Example",
    "description": "Detect high volatility",
    "category": "Examples",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T16:33:35.699674+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "## Volatility Detection Example\n\nThis workflow demonstrates a simple, univariate anomaly detection on a timeseries: It detects higher than usual volatility.\n\nAn application could be the detection of repeatingly arising self-dissolving flow disturbances in a water stream where the input data is the measurement of a magnetic inductive flow sensor.\n\n## Examples\nThe json input of a typical call of this workflow is\n```\n{\n\t\"window_size\": \"180min\",\n\t\"window_timestamp_location\": \"center\",\n\t\"threshold\": 800,\n\t\"input_series\": {\n    \"2018-05-12T14:45:00.000Z\": 227.3,\n    \"2018-05-12T14:50:00.000Z\": 220.5,\n    \"2018-05-12T14:55:00.000Z\": 209.8,\n    \"2018-05-12T15:00:00.000Z\": 219.0,\n    \"2018-05-12T15:05:00.000Z\": 228.7,\n    \"2018-05-12T15:10:00.000Z\": 218.7,\n    \"2018-05-12T15:15:00.000Z\": 202.3,\n    \"2018-05-12T15:20:00.000Z\": 205.8,\n    \"2018-05-12T15:25:00.000Z\": 220.8,\n    \"2018-05-12T15:30:00.000Z\": 217.4,\n    \"2018-05-12T15:35:00.000Z\": 202.6,\n    \"2018-05-12T15:40:00.000Z\": 199.2,\n    \"2018-05-12T15:45:00.000Z\": 214.9,\n    \"2018-05-12T15:50:00.000Z\": 219.6,\n    \"2018-05-12T15:55:00.000Z\": 204.6,\n    \"2018-05-12T16:00:00.000Z\": 198.7777777778,\n    \"2018-05-12T16:05:00.000Z\": 214.7,\n    \"2018-05-12T16:10:00.000Z\": 224.2,\n    \"2018-05-12T16:15:00.000Z\": 213.2,\n    \"2018-05-12T16:20:00.000Z\": 194.1,\n    \"2018-05-12T16:25:00.000Z\": 198.4,\n    \"2018-05-12T16:30:00.000Z\": 213.6,\n    \"2018-05-12T16:35:00.000Z\": 210.7,\n    \"2018-05-12T16:40:00.000Z\": 190.5,\n    \"2018-05-12T16:45:00.000Z\": 182.4,\n    \"2018-05-12T16:50:00.000Z\": 198.7,\n    \"2018-05-12T16:55:00.000Z\": 207.9,\n    \"2018-05-12T17:00:00.000Z\": 197.6,\n    \"2018-05-12T17:05:00.000Z\": 182.6,\n    \"2018-05-12T17:10:00.000Z\": 184.3,\n    \"2018-05-12T17:15:00.000Z\": 199.2,\n    \"2018-05-12T17:20:00.000Z\": 198.2,\n    \"2018-05-12T17:25:00.000Z\": 187.0,\n    \"2018-05-12T17:30:00.000Z\": 182.3,\n    \"2018-05-12T17:35:00.000Z\": 200.3,\n    \"2018-05-12T17:40:00.000Z\": 210.2,\n    \"2018-05-12T17:45:00.000Z\": 200.2222222222,\n    \"2018-05-12T17:50:00.000Z\": 184.7,\n    \"2018-05-12T17:55:00.000Z\": 172.2,\n    \"2018-05-12T18:00:00.000Z\": 162.3,\n    \"2018-05-12T18:05:00.000Z\": 157.9,\n    \"2018-05-12T18:10:00.000Z\": 155.2,\n    \"2018-05-12T18:15:00.000Z\": 160.2,\n    \"2018-05-12T18:20:00.000Z\": 209.3,\n    \"2018-05-12T18:25:00.000Z\": 240.9,\n    \"2018-05-12T18:30:00.000Z\": 231.4,\n    \"2018-05-12T18:35:00.000Z\": 202.0,\n    \"2018-05-12T18:40:00.000Z\": 176.2,\n    \"2018-05-12T18:45:00.000Z\": 175.0,\n    \"2018-05-12T18:50:00.000Z\": 188.4,\n    \"2018-05-12T18:55:00.000Z\": 185.6,\n    \"2018-05-12T19:00:00.000Z\": 170.8,\n    \"2018-05-12T19:05:00.000Z\": 160.3,\n    \"2018-05-12T19:10:00.000Z\": 166.0,\n    \"2018-05-12T19:15:00.000Z\": 182.9,\n    \"2018-05-12T19:20:00.000Z\": 179.8,\n    \"2018-05-12T19:25:00.000Z\": 164.5,\n    \"2018-05-12T19:30:00.000Z\": 153.8,\n    \"2018-05-12T19:35:00.000Z\": 155.0,\n    \"2018-05-12T19:40:00.000Z\": 172.9,\n    \"2018-05-12T19:45:00.000Z\": 174.8,\n    \"2018-05-12T19:50:00.000Z\": 165.7,\n    \"2018-05-12T19:55:00.000Z\": 155.1,\n    \"2018-05-12T20:00:00.000Z\": 153.7,\n    \"2018-05-12T20:05:00.000Z\": 169.5555555556,\n    \"2018-05-12T20:10:00.000Z\": 171.3,\n    \"2018-05-12T20:15:00.000Z\": 161.1,\n    \"2018-05-12T20:20:00.000Z\": 150.5,\n    \"2018-05-12T20:25:00.000Z\": 149.3,\n    \"2018-05-12T20:30:00.000Z\": 167.2,\n    \"2018-05-12T20:35:00.000Z\": 169.9,\n    \"2018-05-12T20:40:00.000Z\": 158.7,\n    \"2018-05-12T20:45:00.000Z\": 145.5,\n    \"2018-05-12T20:50:00.000Z\": 143.2,\n    \"2018-05-12T20:55:00.000Z\": 160.8,\n    \"2018-05-12T21:00:00.000Z\": 169.4444444444,\n    \"2018-05-12T21:05:00.000Z\": 161.4,\n    \"2018-05-12T21:10:00.000Z\": 152.0,\n    \"2018-05-12T21:15:00.000Z\": 148.3,\n    \"2018-05-12T21:20:00.000Z\": 163.6,\n    \"2018-05-12T21:25:00.000Z\": 168.4,\n    \"2018-05-12T21:30:00.000Z\": 159.6,\n    \"2018-05-12T21:35:00.000Z\": 148.6,\n    \"2018-05-12T21:40:00.000Z\": 146.4,\n    \"2018-05-12T21:45:00.000Z\": 163.1,\n    \"2018-05-12T21:50:00.000Z\": 169.0,\n    \"2018-05-12T21:55:00.000Z\": 159.2,\n    \"2018-05-12T22:00:00.000Z\": 148.4,\n    \"2018-05-12T22:05:00.000Z\": 151.1,\n    \"2018-05-12T22:10:00.000Z\": 167.2222222222,\n    \"2018-05-12T22:15:00.000Z\": 169.9,\n    \"2018-05-12T22:20:00.000Z\": 158.8,\n    \"2018-05-12T22:25:00.000Z\": 146.8,\n    \"2018-05-12T22:30:00.000Z\": 151.3,\n    \"2018-05-12T22:35:00.000Z\": 170.3,\n    \"2018-05-12T22:40:00.000Z\": 170.5,\n    \"2018-05-12T22:45:00.000Z\": 159.6,\n    \"2018-05-12T22:50:00.000Z\": 152.3333333333,\n    \"2018-05-12T22:55:00.000Z\": 161.0,\n    \"2018-05-12T23:00:00.000Z\": 174.9,\n    \"2018-05-12T23:05:00.000Z\": 171.2,\n    \"2018-05-12T23:10:00.000Z\": 159.4,\n    \"2018-05-12T23:15:00.000Z\": 151.3,\n    \"2018-05-12T23:20:00.000Z\": 163.4,\n    \"2018-05-12T23:25:00.000Z\": 178.2222222222,\n    \"2018-05-12T23:30:00.000Z\": 171.9,\n    \"2018-05-12T23:35:00.000Z\": 159.9,\n    \"2018-05-12T23:40:00.000Z\": 151.7,\n    \"2018-05-12T23:45:00.000Z\": 166.2,\n    \"2018-05-12T23:50:00.000Z\": 177.7,\n    \"2018-05-12T23:55:00.000Z\": 168.9,\n    \"2018-05-13T00:00:00.000Z\": 156.9,\n    \"2018-05-13T00:05:00.000Z\": 154.4,\n    \"2018-05-13T00:10:00.000Z\": 169.4,\n    \"2018-05-13T00:15:00.000Z\": 173.7777777778,\n    \"2018-05-13T00:20:00.000Z\": 162.5,\n    \"2018-05-13T00:25:00.000Z\": 150.1,\n    \"2018-05-13T00:30:00.000Z\": 144.7,\n    \"2018-05-13T00:35:00.000Z\": 159.8,\n    \"2018-05-13T00:40:00.000Z\": 168.0,\n    \"2018-05-13T00:45:00.000Z\": 159.8,\n    \"2018-05-13T00:50:00.000Z\": 148.2,\n    \"2018-05-13T00:55:00.000Z\": 139.2222222222,\n    \"2018-05-13T01:00:00.000Z\": 145.9,\n    \"2018-05-13T01:05:00.000Z\": 162.6,\n    \"2018-05-13T01:10:00.000Z\": 160.6,\n    \"2018-05-13T01:15:00.000Z\": 149.5,\n    \"2018-05-13T01:20:00.000Z\": 140.4,\n    \"2018-05-13T01:25:00.000Z\": 140.7,\n    \"2018-05-13T01:30:00.000Z\": 157.1,\n    \"2018-05-13T01:35:00.000Z\": 160.6,\n    \"2018-05-13T01:40:00.000Z\": 151.0,\n    \"2018-05-13T01:45:00.000Z\": 140.3,\n    \"2018-05-13T01:50:00.000Z\": 135.7777777778,\n    \"2018-05-13T01:55:00.000Z\": 142.2,\n    \"2018-05-13T02:00:00.000Z\": 157.3,\n    \"2018-05-13T02:05:00.000Z\": 154.0909090909,\n    \"2018-05-13T02:10:00.000Z\": 143.5,\n    \"2018-05-13T02:15:00.000Z\": 136.2,\n    \"2018-05-13T02:20:00.000Z\": 134.4,\n    \"2018-05-13T02:25:00.000Z\": 147.0,\n    \"2018-05-13T02:30:00.000Z\": 154.8,\n    \"2018-05-13T02:35:00.000Z\": 145.3,\n    \"2018-05-13T02:40:00.000Z\": 136.1,\n    \"2018-05-13T02:45:00.000Z\": 126.5,\n    \"2018-05-13T02:50:00.000Z\": 123.9,\n    \"2018-05-13T02:55:00.000Z\": 142.7,\n    \"2018-05-13T03:00:00.000Z\": 146.3,\n    \"2018-05-13T03:05:00.000Z\": 138.6,\n    \"2018-05-13T03:10:00.000Z\": 130.2222222222,\n    \"2018-05-13T03:15:00.000Z\": 115.4,\n    \"2018-05-13T03:20:00.000Z\": 112.8,\n    \"2018-05-13T03:25:00.000Z\": 133.0,\n    \"2018-05-13T03:30:00.000Z\": 139.5,\n    \"2018-05-13T03:35:00.000Z\": 133.0,\n    \"2018-05-13T03:40:00.000Z\": 111.7,\n    \"2018-05-13T03:45:00.000Z\": 105.3,\n    \"2018-05-13T03:50:00.000Z\": 100.8,\n    \"2018-05-13T03:55:00.000Z\": 100.5,\n    \"2018-05-13T04:00:00.000Z\": 124.4444444444,\n    \"2018-05-13T04:05:00.000Z\": 133.6,\n    \"2018-05-13T04:10:00.000Z\": 113.6,\n    \"2018-05-13T04:15:00.000Z\": 103.7777777778,\n    \"2018-05-13T04:20:00.000Z\": 99.2,\n    \"2018-05-13T04:25:00.000Z\": 95.2222222222,\n    \"2018-05-13T04:30:00.000Z\": 97.6,\n    \"2018-05-13T04:35:00.000Z\": 108.8,\n    \"2018-05-13T04:40:00.000Z\": 119.2,\n    \"2018-05-13T04:45:00.000Z\": 112.6,\n    \"2018-05-13T04:50:00.000Z\": 102.3,\n    \"2018-05-13T04:55:00.000Z\": 95.7,\n    \"2018-05-13T05:00:00.000Z\": 91.9,\n    \"2018-05-13T05:05:00.000Z\": 89.9,\n    \"2018-05-13T05:10:00.000Z\": 96.6,\n    \"2018-05-13T05:15:00.000Z\": 111.9,\n    \"2018-05-13T05:20:00.000Z\": 110.9,\n    \"2018-05-13T05:25:00.000Z\": 101.5,\n    \"2018-05-13T05:30:00.000Z\": 94.7,\n    \"2018-05-13T05:35:00.000Z\": 89.1,\n    \"2018-05-13T05:40:00.000Z\": 85.5,\n    \"2018-05-13T05:45:00.000Z\": 83.1,\n    \"2018-05-13T05:50:00.000Z\": 89.8,\n    \"2018-05-13T05:55:00.000Z\": 105.1,\n    \"2018-05-13T06:00:00.000Z\": 104.2,\n    \"2018-05-13T06:05:00.000Z\": 95.2,\n    \"2018-05-13T06:10:00.000Z\": 87.4,\n    \"2018-05-13T06:15:00.000Z\": 82.1,\n    \"2018-05-13T06:20:00.000Z\": 78.4,\n    \"2018-05-13T06:25:00.000Z\": 76.2,\n    \"2018-05-13T06:30:00.000Z\": 75.1,\n    \"2018-05-13T06:35:00.000Z\": 91.4,\n    \"2018-05-13T06:40:00.000Z\": 101.6,\n    \"2018-05-13T06:45:00.000Z\": 100.1,\n    \"2018-05-13T06:50:00.000Z\": 92.0,\n    \"2018-05-13T06:55:00.000Z\": 82.9,\n    \"2018-05-13T07:00:00.000Z\": 76.9,\n    \"2018-05-13T07:05:00.000Z\": 72.1,\n    \"2018-05-13T07:10:00.000Z\": 70.9,\n    \"2018-05-13T07:15:00.000Z\": 68.6,\n    \"2018-05-13T07:20:00.000Z\": 81.2,\n    \"2018-05-13T07:25:00.000Z\": 99.3,\n    \"2018-05-13T07:30:00.000Z\": 99.2,\n    \"2018-05-13T07:35:00.000Z\": 90.6,\n    \"2018-05-13T07:40:00.000Z\": 80.2222222222,\n    \"2018-05-13T07:45:00.000Z\": 73.9,\n    \"2018-05-13T07:50:00.000Z\": 77.5,\n    \"2018-05-13T07:55:00.000Z\": 79.7,\n    \"2018-05-13T08:00:00.000Z\": 82.2,\n    \"2018-05-13T08:05:00.000Z\": 94.5,\n    \"2018-05-13T08:10:00.000Z\": 109.7,\n    \"2018-05-13T08:15:00.000Z\": 106.8,\n    \"2018-05-13T08:20:00.000Z\": 94.3333333333,\n    \"2018-05-13T08:25:00.000Z\": 88.1,\n    \"2018-05-13T08:30:00.000Z\": 86.1,\n    \"2018-05-13T08:35:00.000Z\": 86.2,\n    \"2018-05-13T08:40:00.000Z\": 84.7,\n    \"2018-05-13T08:45:00.000Z\": 83.1,\n    \"2018-05-13T08:50:00.000Z\": 98.9,\n    \"2018-05-13T08:55:00.000Z\": 123.7,\n    \"2018-05-13T09:00:00.000Z\": 128.9,\n    \"2018-05-13T09:05:00.000Z\": 121.2,\n    \"2018-05-13T09:10:00.000Z\": 101.3333333333,\n    \"2018-05-13T09:15:00.000Z\": 97.3,\n    \"2018-05-13T09:20:00.000Z\": 94.6,\n    \"2018-05-13T09:25:00.000Z\": 91.4,\n    \"2018-05-13T09:30:00.000Z\": 92.9,\n    \"2018-05-13T09:35:00.000Z\": 114.5,\n    \"2018-05-13T09:40:00.000Z\": 131.3,\n    \"2018-05-13T09:45:00.000Z\": 127.7,\n    \"2018-05-13T09:50:00.000Z\": 110.4,\n    \"2018-05-13T09:55:00.000Z\": 99.9,\n    \"2018-05-13T10:00:00.000Z\": 94.5555555556,\n    \"2018-05-13T10:05:00.000Z\": 92.1,\n    \"2018-05-13T10:10:00.000Z\": 98.8,\n    \"2018-05-13T10:15:00.000Z\": 127.3,\n    \"2018-05-13T10:20:00.000Z\": 135.8,\n    \"2018-05-13T10:25:00.000Z\": 126.8,\n    \"2018-05-13T10:30:00.000Z\": 120.9,\n    \"2018-05-13T10:35:00.000Z\": 111.5,\n    \"2018-05-13T10:40:00.000Z\": 104.7777777778,\n    \"2018-05-13T10:45:00.000Z\": 114.4,\n    \"2018-05-13T10:50:00.000Z\": 132.6,\n    \"2018-05-13T10:55:00.000Z\": 132.2,\n    \"2018-05-13T11:00:00.000Z\": 128.2,\n    \"2018-05-13T11:05:00.000Z\": 123.5,\n    \"2018-05-13T11:10:00.000Z\": 114.4,\n    \"2018-05-13T11:15:00.000Z\": 136.2,\n    \"2018-05-13T11:20:00.000Z\": 145.2,\n    \"2018-05-13T11:25:00.000Z\": 140.2,\n    \"2018-05-13T11:30:00.000Z\": 135.8,\n    \"2018-05-13T11:35:00.000Z\": 136.5,\n    \"2018-05-13T11:40:00.000Z\": 156.0,\n    \"2018-05-13T11:45:00.000Z\": 162.9,\n    \"2018-05-13T11:50:00.000Z\": 156.4,\n    \"2018-05-13T11:55:00.000Z\": 153.6,\n    \"2018-05-13T12:00:00.000Z\": 170.0,\n    \"2018-05-13T12:05:00.000Z\": 185.5,\n    \"2018-05-13T12:10:00.000Z\": 181.3,\n    \"2018-05-13T12:15:00.000Z\": 176.0,\n    \"2018-05-13T12:20:00.000Z\": 192.1,\n    \"2018-05-13T12:25:00.000Z\": 207.6,\n    \"2018-05-13T12:30:00.000Z\": 201.5,\n    \"2018-05-13T12:35:00.000Z\": 188.3,\n    \"2018-05-13T12:40:00.000Z\": 195.8,\n    \"2018-05-13T12:45:00.000Z\": 210.5,\n    \"2018-05-13T12:50:00.000Z\": 208.6,\n    \"2018-05-13T12:55:00.000Z\": 196.0,\n    \"2018-05-13T13:00:00.000Z\": 204.8,\n    \"2018-05-13T13:05:00.000Z\": 220.9,\n    \"2018-05-13T13:10:00.000Z\": 215.4,\n    \"2018-05-13T13:15:00.000Z\": 201.7,\n    \"2018-05-13T13:20:00.000Z\": 209.1,\n    \"2018-05-13T13:25:00.000Z\": 225.2,\n    \"2018-05-13T13:30:00.000Z\": 221.4,\n    \"2018-05-13T13:35:00.000Z\": 210.4,\n    \"2018-05-13T13:40:00.000Z\": 211.6,\n    \"2018-05-13T13:45:00.000Z\": 223.6,\n    \"2018-05-13T13:50:00.000Z\": 220.0,\n    \"2018-05-13T13:55:00.000Z\": 208.1,\n    \"2018-05-13T14:00:00.000Z\": 208.2,\n    \"2018-05-13T14:05:00.000Z\": 222.6,\n    \"2018-05-13T14:10:00.000Z\": 223.0,\n    \"2018-05-13T14:15:00.000Z\": 207.1,\n    \"2018-05-13T14:20:00.000Z\": 205.4,\n    \"2018-05-13T14:25:00.000Z\": 221.2,\n    \"2018-05-13T14:30:00.000Z\": 220.8,\n    \"2018-05-13T14:35:00.000Z\": 205.1,\n    \"2018-05-13T14:40:00.000Z\": 201.9,\n    \"2018-05-13T14:45:00.000Z\": 216.2222222222,\n    \"2018-05-13T14:50:00.000Z\": 219.4,\n    \"2018-05-13T14:55:00.000Z\": 205.7,\n    \"2018-05-13T15:00:00.000Z\": 195.1,\n    \"2018-05-13T15:05:00.000Z\": 208.2,\n    \"2018-05-13T15:10:00.000Z\": 214.3,\n    \"2018-05-13T15:15:00.000Z\": 204.4,\n    \"2018-05-13T15:20:00.000Z\": 196.9,\n    \"2018-05-13T15:25:00.000Z\": 208.3,\n    \"2018-05-13T15:30:00.000Z\": 217.7,\n    \"2018-05-13T15:35:00.000Z\": 206.1,\n    \"2018-05-13T15:40:00.000Z\": 190.1,\n    \"2018-05-13T15:45:00.000Z\": 195.8,\n    \"2018-05-13T15:50:00.000Z\": 211.6,\n    \"2018-05-13T15:55:00.000Z\": 204.8,\n    \"2018-05-13T16:00:00.000Z\": 188.5555555556,\n    \"2018-05-13T16:05:00.000Z\": 188.1,\n    \"2018-05-13T16:10:00.000Z\": 204.2,\n    \"2018-05-13T16:15:00.000Z\": 204.3,\n    \"2018-05-13T16:20:00.000Z\": 190.4,\n    \"2018-05-13T16:25:00.000Z\": 186.2,\n    \"2018-05-13T16:30:00.000Z\": 202.5,\n    \"2018-05-13T16:35:00.000Z\": 207.3,\n    \"2018-05-13T16:40:00.000Z\": 193.3,\n    \"2018-05-13T16:45:00.000Z\": 182.9,\n    \"2018-05-13T16:50:00.000Z\": 195.5,\n    \"2018-05-13T16:55:00.000Z\": 205.3,\n    \"2018-05-13T17:00:00.000Z\": 195.9,\n    \"2018-05-13T17:05:00.000Z\": 191.8,\n    \"2018-05-13T17:10:00.000Z\": 451.9,\n    \"2018-05-13T17:15:00.000Z\": 813.1,\n    \"2018-05-13T17:20:00.000Z\": 808.2,\n    \"2018-05-13T17:25:00.000Z\": 802.2,\n    \"2018-05-13T17:30:00.000Z\": 798.0,\n    \"2018-05-13T17:35:00.000Z\": 788.2,\n    \"2018-05-13T17:40:00.000Z\": 793.9,\n    \"2018-05-13T17:45:00.000Z\": 796.5,\n    \"2018-05-13T17:50:00.000Z\": 787.0,\n    \"2018-05-13T17:55:00.000Z\": 789.6,\n    \"2018-05-13T18:00:00.000Z\": 788.9,\n    \"2018-05-13T18:05:00.000Z\": 790.9,\n    \"2018-05-13T18:10:00.000Z\": 792.7,\n    \"2018-05-13T18:15:00.000Z\": 795.1,\n    \"2018-05-13T18:20:00.000Z\": 794.2,\n    \"2018-05-13T18:25:00.000Z\": 796.5,\n    \"2018-05-13T18:30:00.000Z\": 796.9,\n    \"2018-05-13T18:35:00.000Z\": 799.9,\n    \"2018-05-13T18:40:00.000Z\": 806.2,\n    \"2018-05-13T18:45:00.000Z\": 804.6,\n    \"2018-05-13T18:50:00.000Z\": 800.4,\n    \"2018-05-13T18:55:00.000Z\": 801.3,\n    \"2018-05-13T19:00:00.000Z\": 791.0,\n    \"2018-05-13T19:05:00.000Z\": 775.6,\n    \"2018-05-13T19:10:00.000Z\": 776.9,\n    \"2018-05-13T19:15:00.000Z\": 768.7,\n    \"2018-05-13T19:20:00.000Z\": 776.9,\n    \"2018-05-13T19:25:00.000Z\": 779.9,\n    \"2018-05-13T19:30:00.000Z\": 776.3,\n    \"2018-05-13T19:35:00.000Z\": 773.2,\n    \"2018-05-13T19:40:00.000Z\": 767.3,\n    \"2018-05-13T19:45:00.000Z\": 771.7,\n    \"2018-05-13T19:50:00.000Z\": 770.8,\n    \"2018-05-13T19:55:00.000Z\": 771.4,\n    \"2018-05-13T20:00:00.000Z\": 770.5,\n    \"2018-05-13T20:05:00.000Z\": 769.4,\n    \"2018-05-13T20:10:00.000Z\": 758.5,\n    \"2018-05-13T20:15:00.000Z\": 615.4,\n    \"2018-05-13T20:20:00.000Z\": 487.2,\n    \"2018-05-13T20:25:00.000Z\": 422.1,\n    \"2018-05-13T20:30:00.000Z\": 399.5,\n    \"2018-05-13T20:35:00.000Z\": 392.8,\n    \"2018-05-13T20:40:00.000Z\": 383.9,\n    \"2018-05-13T20:45:00.000Z\": 357.8,\n    \"2018-05-13T20:50:00.000Z\": 336.2222222222,\n    \"2018-05-13T20:55:00.000Z\": 322.3,\n    \"2018-05-13T21:00:00.000Z\": 309.4,\n    \"2018-05-13T21:05:00.000Z\": 303.9,\n    \"2018-05-13T21:10:00.000Z\": 299.0,\n    \"2018-05-13T21:15:00.000Z\": 295.6,\n    \"2018-05-13T21:20:00.000Z\": 295.5,\n    \"2018-05-13T21:25:00.000Z\": 295.0,\n    \"2018-05-13T21:30:00.000Z\": 294.7,\n    \"2018-05-13T21:35:00.000Z\": 294.6,\n    \"2018-05-13T21:40:00.000Z\": 294.9,\n    \"2018-05-13T21:45:00.000Z\": 305.5555555556,\n    \"2018-05-13T21:50:00.000Z\": 310.9,\n    \"2018-05-13T21:55:00.000Z\": 302.7,\n    \"2018-05-13T22:00:00.000Z\": 295.4,\n    \"2018-05-13T22:05:00.000Z\": 286.6,\n    \"2018-05-13T22:10:00.000Z\": 269.4,\n    \"2018-05-13T22:15:00.000Z\": 244.8,\n    \"2018-05-13T22:20:00.000Z\": 212.2,\n    \"2018-05-13T22:25:00.000Z\": 184.4,\n    \"2018-05-13T22:30:00.000Z\": 171.5,\n    \"2018-05-13T22:35:00.000Z\": 187.8,\n    \"2018-05-13T22:40:00.000Z\": 197.3,\n    \"2018-05-13T22:45:00.000Z\": 186.3,\n    \"2018-05-13T22:50:00.000Z\": 173.3,\n    \"2018-05-13T22:55:00.000Z\": 185.1,\n    \"2018-05-13T23:00:00.000Z\": 198.2222222222,\n    \"2018-05-13T23:05:00.000Z\": 188.8,\n    \"2018-05-13T23:10:00.000Z\": 172.3,\n    \"2018-05-13T23:15:00.000Z\": 171.1,\n    \"2018-05-13T23:20:00.000Z\": 185.2,\n    \"2018-05-13T23:25:00.000Z\": 182.4,\n    \"2018-05-13T23:30:00.000Z\": 166.9,\n    \"2018-05-13T23:35:00.000Z\": 158.9,\n    \"2018-05-13T23:40:00.000Z\": 183.8,\n    \"2018-05-13T23:45:00.000Z\": 195.1,\n    \"2018-05-13T23:50:00.000Z\": 177.5,\n    \"2018-05-13T23:55:00.000Z\": 161.9,\n    \"2018-05-14T00:00:00.000Z\": 157.9,\n    \"2018-05-14T00:05:00.000Z\": 177.9,\n    \"2018-05-14T00:10:00.000Z\": 181.4,\n    \"2018-05-14T00:15:00.000Z\": 168.1,\n    \"2018-05-14T00:20:00.000Z\": 156.0909090909,\n    \"2018-05-14T00:25:00.000Z\": 156.0,\n    \"2018-05-14T00:30:00.000Z\": 171.2,\n    \"2018-05-14T00:35:00.000Z\": 170.3,\n    \"2018-05-14T00:40:00.000Z\": 161.1,\n    \"2018-05-14T00:45:00.000Z\": 152.6,\n    \"2018-05-14T00:50:00.000Z\": 156.4,\n    \"2018-05-14T00:55:00.000Z\": 173.1818181818,\n    \"2018-05-14T01:00:00.000Z\": 173.0,\n    \"2018-05-14T01:05:00.000Z\": 160.3,\n    \"2018-05-14T01:10:00.000Z\": 150.6,\n    \"2018-05-14T01:15:00.000Z\": 157.6666666667,\n    \"2018-05-14T01:20:00.000Z\": 175.5,\n    \"2018-05-14T01:25:00.000Z\": 173.6,\n    \"2018-05-14T01:30:00.000Z\": 160.6,\n    \"2018-05-14T01:35:00.000Z\": 149.2222222222,\n    \"2018-05-14T01:40:00.000Z\": 166.3,\n    \"2018-05-14T01:45:00.000Z\": 229.9,\n    \"2018-05-14T01:50:00.000Z\": 262.2,\n    \"2018-05-14T01:55:00.000Z\": 261.3,\n    \"2018-05-14T02:00:00.000Z\": 252.8,\n    \"2018-05-14T02:05:00.000Z\": 258.7272727273,\n    \"2018-05-14T02:10:00.000Z\": 276.0,\n    \"2018-05-14T02:15:00.000Z\": 275.7,\n    \"2018-05-14T02:20:00.000Z\": 274.9,\n    \"2018-05-14T02:25:00.000Z\": 347.6,\n    \"2018-05-14T02:30:00.000Z\": 426.4,\n    \"2018-05-14T02:35:00.000Z\": 456.9090909091,\n    \"2018-05-14T02:40:00.000Z\": 469.2,\n    \"2018-05-14T02:45:00.000Z\": 483.6,\n    \"2018-05-14T02:50:00.000Z\": 495.8,\n    \"2018-05-14T02:55:00.000Z\": 508.3,\n    \"2018-05-14T03:00:00.000Z\": 514.0,\n    \"2018-05-14T03:05:00.000Z\": 497.9,\n    \"2018-05-14T03:10:00.000Z\": 461.6363636364,\n    \"2018-05-14T03:15:00.000Z\": 424.2,\n    \"2018-05-14T03:20:00.000Z\": 398.6,\n    \"2018-05-14T03:25:00.000Z\": 369.8,\n    \"2018-05-14T03:30:00.000Z\": 326.1,\n    \"2018-05-14T03:35:00.000Z\": 295.6,\n    \"2018-05-14T03:40:00.000Z\": 276.3636363636,\n    \"2018-05-14T03:45:00.000Z\": 261.2,\n    \"2018-05-14T03:50:00.000Z\": 239.1,\n    \"2018-05-14T03:55:00.000Z\": 209.6,\n    \"2018-05-14T04:00:00.000Z\": 184.5,\n    \"2018-05-14T04:05:00.000Z\": 179.3,\n    \"2018-05-14T04:10:00.000Z\": 185.5,\n    \"2018-05-14T04:15:00.000Z\": 173.0,\n    \"2018-05-14T04:20:00.000Z\": 154.5,\n    \"2018-05-14T04:25:00.000Z\": 143.3,\n    \"2018-05-14T04:30:00.000Z\": 137.0,\n    \"2018-05-14T04:35:00.000Z\": 141.4,\n    \"2018-05-14T04:40:00.000Z\": 149.4,\n    \"2018-05-14T04:45:00.000Z\": 143.1,\n    \"2018-05-14T04:50:00.000Z\": 142.0,\n    \"2018-05-14T04:55:00.000Z\": 144.9,\n    \"2018-05-14T05:00:00.000Z\": 144.1,\n    \"2018-05-14T05:05:00.000Z\": 144.3,\n    \"2018-05-14T05:10:00.000Z\": 141.9,\n    \"2018-05-14T05:15:00.000Z\": 139.2,\n    \"2018-05-14T05:20:00.000Z\": 146.5454545455,\n    \"2018-05-14T05:25:00.000Z\": 144.0909090909,\n    \"2018-05-14T05:30:00.000Z\": 140.3,\n    \"2018-05-14T05:35:00.000Z\": 136.6363636364,\n    \"2018-05-14T05:40:00.000Z\": 143.5,\n    \"2018-05-14T05:45:00.000Z\": 146.3,\n    \"2018-05-14T05:50:00.000Z\": 145.4,\n    \"2018-05-14T05:55:00.000Z\": 144.4,\n    \"2018-05-14T06:00:00.000Z\": 137.6,\n    \"2018-05-14T06:05:00.000Z\": 135.7,\n    \"2018-05-14T06:10:00.000Z\": 134.8,\n    \"2018-05-14T06:15:00.000Z\": 135.4,\n    \"2018-05-14T06:20:00.000Z\": 141.2,\n    \"2018-05-14T06:25:00.000Z\": 145.6,\n    \"2018-05-14T06:30:00.000Z\": 143.5454545455,\n    \"2018-05-14T06:35:00.000Z\": 137.6,\n    \"2018-05-14T06:40:00.000Z\": 135.5454545455,\n    \"2018-05-14T06:45:00.000Z\": 134.5,\n    \"2018-05-14T06:50:00.000Z\": 131.6363636364,\n    \"2018-05-14T06:55:00.000Z\": 132.0,\n    \"2018-05-14T07:00:00.000Z\": 139.6,\n    \"2018-05-14T07:05:00.000Z\": 141.6,\n    \"2018-05-14T07:10:00.000Z\": 113.4,\n    \"2018-05-14T07:15:00.000Z\": 128.4,\n    \"2018-05-14T07:20:00.000Z\": 131.9,\n    \"2018-05-14T07:25:00.000Z\": 128.7777777778,\n    \"2018-05-14T07:30:00.000Z\": 128.9090909091,\n    \"2018-05-14T07:35:00.000Z\": 128.8,\n    \"2018-05-14T07:40:00.000Z\": 137.7,\n    \"2018-05-14T07:45:00.000Z\": 142.7,\n    \"2018-05-14T07:50:00.000Z\": 137.3636363636,\n    \"2018-05-14T07:55:00.000Z\": 134.5,\n    \"2018-05-14T08:00:00.000Z\": 134.4545454545,\n    \"2018-05-14T08:05:00.000Z\": 131.8181818182,\n    \"2018-05-14T08:10:00.000Z\": 129.2,\n    \"2018-05-14T08:15:00.000Z\": 132.2727272727,\n    \"2018-05-14T08:20:00.000Z\": 143.9,\n    \"2018-05-14T08:25:00.000Z\": 143.8,\n    \"2018-05-14T08:30:00.000Z\": 139.8181818182,\n    \"2018-05-14T08:35:00.000Z\": 135.7,\n    \"2018-05-14T08:40:00.000Z\": 133.8,\n    \"2018-05-14T08:45:00.000Z\": 136.5,\n    \"2018-05-14T08:50:00.000Z\": 143.9,\n    \"2018-05-14T08:55:00.000Z\": 145.9090909091,\n    \"2018-05-14T09:00:00.000Z\": 136.0,\n    \"2018-05-14T09:05:00.000Z\": 140.2,\n    \"2018-05-14T09:10:00.000Z\": 143.8,\n    \"2018-05-14T09:15:00.000Z\": 144.0,\n    \"2018-05-14T09:20:00.000Z\": 144.8888888889,\n    \"2018-05-14T09:25:00.000Z\": 145.4,\n    \"2018-05-14T09:30:00.000Z\": 140.9,\n    \"2018-05-14T09:35:00.000Z\": 139.0,\n    \"2018-05-14T09:40:00.000Z\": 156.4545454545,\n    \"2018-05-14T09:45:00.000Z\": 171.0,\n    \"2018-05-14T09:50:00.000Z\": 166.4545454545,\n    \"2018-05-14T09:55:00.000Z\": 159.6,\n    \"2018-05-14T10:00:00.000Z\": 178.8,\n    \"2018-05-14T10:05:00.000Z\": 193.3636363636,\n    \"2018-05-14T10:10:00.000Z\": 186.0,\n    \"2018-05-14T10:15:00.000Z\": 181.3636363636,\n    \"2018-05-14T10:20:00.000Z\": 201.6,\n    \"2018-05-14T10:25:00.000Z\": 209.8,\n    \"2018-05-14T10:30:00.000Z\": 201.6,\n    \"2018-05-14T10:35:00.000Z\": 199.0,\n    \"2018-05-14T10:40:00.000Z\": 217.0,\n    \"2018-05-14T10:45:00.000Z\": 222.4545454545,\n    \"2018-05-14T10:50:00.000Z\": 211.4,\n    \"2018-05-14T10:55:00.000Z\": 207.2,\n    \"2018-05-14T11:00:00.000Z\": 222.9,\n    \"2018-05-14T11:05:00.000Z\": 223.6,\n    \"2018-05-14T11:10:00.000Z\": 209.0,\n    \"2018-05-14T11:15:00.000Z\": 207.6363636364,\n    \"2018-05-14T11:20:00.000Z\": 226.1818181818,\n    \"2018-05-14T11:25:00.000Z\": 230.0,\n    \"2018-05-14T11:30:00.000Z\": 217.2,\n    \"2018-05-14T11:35:00.000Z\": 216.6,\n    \"2018-05-14T11:40:00.000Z\": 231.9090909091,\n    \"2018-05-14T11:45:00.000Z\": 228.3,\n    \"2018-05-14T11:50:00.000Z\": 216.2,\n    \"2018-05-14T11:55:00.000Z\": 164.8181818182,\n    \"2018-05-14T12:00:00.000Z\": 3.9090909091,\n    \"2018-05-14T12:05:00.000Z\": 3.1,\n    \"2018-05-14T12:10:00.000Z\": 3.1,\n    \"2018-05-14T12:15:00.000Z\": 2.9090909091,\n    \"2018-05-14T12:20:00.000Z\": 2.7,\n    \"2018-05-14T12:25:00.000Z\": 2.7272727273,\n    \"2018-05-14T12:30:00.000Z\": 15.7272727273,\n    \"2018-05-14T12:35:00.000Z\": 660.5,\n    \"2018-05-14T12:40:00.000Z\": 769.8,\n    \"2018-05-14T12:45:00.000Z\": 608.7,\n    \"2018-05-14T12:50:00.000Z\": 330.2,\n    \"2018-05-14T12:55:00.000Z\": 233.0,\n    \"2018-05-14T13:00:00.000Z\": 221.2727272727,\n    \"2018-05-14T13:05:00.000Z\": 222.4545454545,\n    \"2018-05-14T13:10:00.000Z\": 207.7,\n    \"2018-05-14T13:15:00.000Z\": 199.0,\n    \"2018-05-14T13:20:00.000Z\": 212.3,\n    \"2018-05-14T13:25:00.000Z\": 222.6363636364,\n    \"2018-05-14T13:30:00.000Z\": 209.8181818182,\n    \"2018-05-14T13:35:00.000Z\": 196.8,\n    \"2018-05-14T13:40:00.000Z\": 204.6363636364,\n    \"2018-05-14T13:45:00.000Z\": 214.1,\n    \"2018-05-14T13:50:00.000Z\": 197.1666666667,\n    \"2018-05-14T13:55:00.000Z\": 167.1,\n    \"2018-05-14T14:00:00.000Z\": 154.0,\n    \"2018-05-14T14:05:00.000Z\": 181.5,\n    \"2018-05-14T14:10:00.000Z\": 197.4,\n    \"2018-05-14T14:15:00.000Z\": 221.0909090909,\n    \"2018-05-14T14:20:00.000Z\": 237.9090909091,\n    \"2018-05-14T14:25:00.000Z\": 237.2,\n    \"2018-05-14T14:30:00.000Z\": 227.4545454545,\n    \"2018-05-14T14:35:00.000Z\": 207.6363636364,\n    \"2018-05-14T14:40:00.000Z\": 191.2727272727,\n    \"2018-05-14T14:45:00.000Z\": 196.4,\n    \"2018-05-14T14:50:00.000Z\": 208.3,\n    \"2018-05-14T14:55:00.000Z\": 203.6363636364,\n    \"2018-05-14T15:00:00.000Z\": 193.4545454545,\n    \"2018-05-14T15:05:00.000Z\": 191.5,\n    \"2018-05-14T15:10:00.000Z\": 206.8181818182,\n    \"2018-05-14T15:15:00.000Z\": 207.4545454545,\n    \"2018-05-14T15:20:00.000Z\": 194.9,\n    \"2018-05-14T15:25:00.000Z\": 182.2727272727,\n    \"2018-05-14T15:30:00.000Z\": 190.3636363636,\n    \"2018-05-14T15:35:00.000Z\": 202.2727272727,\n    \"2018-05-14T15:40:00.000Z\": 193.9090909091,\n    \"2018-05-14T15:45:00.000Z\": 176.0,\n    \"2018-05-14T15:50:00.000Z\": 171.9090909091,\n    \"2018-05-14T15:55:00.000Z\": 192.9,\n    \"2018-05-14T16:00:00.000Z\": 197.7272727273,\n    \"2018-05-14T16:05:00.000Z\": 187.5,\n    \"2018-05-14T16:10:00.000Z\": 178.6363636364,\n    \"2018-05-14T16:15:00.000Z\": 191.4545454545,\n    \"2018-05-14T16:20:00.000Z\": 200.1818181818,\n    \"2018-05-14T16:25:00.000Z\": 188.9090909091,\n    \"2018-05-14T16:30:00.000Z\": 176.3636363636,\n    \"2018-05-14T16:35:00.000Z\": 187.0909090909,\n    \"2018-05-14T16:40:00.000Z\": 201.3636363636,\n    \"2018-05-14T16:45:00.000Z\": 195.7,\n    \"2018-05-14T16:50:00.000Z\": 179.5454545455,\n    \"2018-05-14T16:55:00.000Z\": 169.1,\n    \"2018-05-14T17:00:00.000Z\": 181.7272727273,\n    \"2018-05-14T17:05:00.000Z\": 194.8181818182,\n    \"2018-05-14T17:10:00.000Z\": 186.5,\n    \"2018-05-14T17:15:00.000Z\": 171.6,\n    \"2018-05-14T17:20:00.000Z\": 171.3,\n    \"2018-05-14T17:25:00.000Z\": 193.5454545455,\n    \"2018-05-14T17:30:00.000Z\": 201.8181818182,\n    \"2018-05-14T17:35:00.000Z\": 190.6363636364,\n    \"2018-05-14T17:40:00.000Z\": 175.3,\n    \"2018-05-14T17:45:00.000Z\": 179.9,\n    \"2018-05-14T17:50:00.000Z\": 193.4545454545,\n    \"2018-05-14T17:55:00.000Z\": 188.6363636364,\n    \"2018-05-14T18:00:00.000Z\": 176.6363636364,\n    \"2018-05-14T18:05:00.000Z\": 172.4545454545,\n    \"2018-05-14T18:10:00.000Z\": 189.1818181818,\n    \"2018-05-14T18:15:00.000Z\": 195.5454545455,\n    \"2018-05-14T18:20:00.000Z\": 183.7272727273,\n    \"2018-05-14T18:25:00.000Z\": 168.6363636364,\n    \"2018-05-14T18:30:00.000Z\": 169.5,\n    \"2018-05-14T18:35:00.000Z\": 186.6363636364,\n    \"2018-05-14T18:40:00.000Z\": 188.4,\n    \"2018-05-14T18:45:00.000Z\": 174.3636363636,\n    \"2018-05-14T18:50:00.000Z\": 163.2727272727,\n    \"2018-05-14T18:55:00.000Z\": 166.0909090909,\n    \"2018-05-14T19:00:00.000Z\": 182.8181818182,\n    \"2018-05-14T19:05:00.000Z\": 180.9090909091,\n    \"2018-05-14T19:10:00.000Z\": 167.7272727273,\n    \"2018-05-14T19:15:00.000Z\": 157.8181818182,\n    \"2018-05-14T19:20:00.000Z\": 163.7272727273,\n    \"2018-05-14T19:25:00.000Z\": 183.5454545455,\n    \"2018-05-14T19:30:00.000Z\": 182.7272727273,\n    \"2018-05-14T19:35:00.000Z\": 169.3636363636,\n    \"2018-05-14T19:40:00.000Z\": 158.7272727273,\n    \"2018-05-14T19:45:00.000Z\": 167.5454545455,\n    \"2018-05-14T19:50:00.000Z\": 188.0,\n    \"2018-05-14T19:55:00.000Z\": 187.6,\n    \"2018-05-14T20:00:00.000Z\": 170.9090909091,\n    \"2018-05-14T20:05:00.000Z\": 160.8181818182,\n    \"2018-05-14T20:10:00.000Z\": 170.8181818182,\n    \"2018-05-14T20:15:00.000Z\": 184.9090909091,\n    \"2018-05-14T20:20:00.000Z\": 178.9090909091,\n    \"2018-05-14T20:25:00.000Z\": 169.5454545455,\n    \"2018-05-14T20:30:00.000Z\": 163.7272727273,\n    \"2018-05-14T20:35:00.000Z\": 174.7272727273,\n    \"2018-05-14T20:40:00.000Z\": 183.5454545455,\n    \"2018-05-14T20:45:00.000Z\": 174.4545454545,\n    \"2018-05-14T20:50:00.000Z\": 161.4545454545,\n    \"2018-05-14T20:55:00.000Z\": 159.4545454545,\n    \"2018-05-14T21:00:00.000Z\": 179.9090909091,\n    \"2018-05-14T21:05:00.000Z\": 185.3636363636,\n    \"2018-05-14T21:10:00.000Z\": 174.0,\n    \"2018-05-14T21:15:00.000Z\": 164.5454545455,\n    \"2018-05-14T21:20:00.000Z\": 171.1818181818,\n    \"2018-05-14T21:25:00.000Z\": 185.2727272727,\n    \"2018-05-14T21:30:00.000Z\": 177.8181818182,\n    \"2018-05-14T21:35:00.000Z\": 165.0,\n    \"2018-05-14T21:40:00.000Z\": 160.0909090909,\n    \"2018-05-14T21:45:00.000Z\": 176.0,\n    \"2018-05-14T21:50:00.000Z\": 183.7272727273,\n    \"2018-05-14T21:55:00.000Z\": 172.7,\n    \"2018-05-14T22:00:00.000Z\": 164.6363636364,\n    \"2018-05-14T22:05:00.000Z\": 164.6363636364,\n    \"2018-05-14T22:10:00.000Z\": 178.8181818182,\n    \"2018-05-14T22:15:00.000Z\": 181.3636363636,\n    \"2018-05-14T22:20:00.000Z\": 169.8,\n    \"2018-05-14T22:25:00.000Z\": 161.4545454545,\n    \"2018-05-14T22:30:00.000Z\": 170.9090909091,\n    \"2018-05-14T22:35:00.000Z\": 188.7,\n    \"2018-05-14T22:40:00.000Z\": 184.6363636364,\n    \"2018-05-14T22:45:00.000Z\": 172.4545454545,\n    \"2018-05-14T22:50:00.000Z\": 171.5454545455,\n    \"2018-05-14T22:55:00.000Z\": 189.2727272727,\n    \"2018-05-14T23:00:00.000Z\": 190.0,\n    \"2018-05-14T23:05:00.000Z\": 179.2727272727,\n    \"2018-05-14T23:10:00.000Z\": 170.4545454545,\n    \"2018-05-14T23:15:00.000Z\": 182.9090909091,\n    \"2018-05-14T23:20:00.000Z\": 193.2727272727,\n    \"2018-05-14T23:25:00.000Z\": 184.6363636364,\n    \"2018-05-14T23:30:00.000Z\": 170.5454545455,\n    \"2018-05-14T23:35:00.000Z\": 170.2727272727,\n    \"2018-05-14T23:40:00.000Z\": 186.8181818182,\n    \"2018-05-14T23:45:00.000Z\": 187.7272727273,\n    \"2018-05-14T23:50:00.000Z\": 174.1818181818,\n    \"2018-05-14T23:55:00.000Z\": 164.5,\n    \"2018-05-15T00:00:00.000Z\": 176.4545454545,\n    \"2018-05-15T00:05:00.000Z\": 184.7272727273,\n    \"2018-05-15T00:10:00.000Z\": 174.5454545455,\n    \"2018-05-15T00:15:00.000Z\": 158.6363636364,\n    \"2018-05-15T00:20:00.000Z\": 152.2727272727,\n    \"2018-05-15T00:25:00.000Z\": 168.3636363636,\n    \"2018-05-15T00:30:00.000Z\": 174.4545454545,\n    \"2018-05-15T00:35:00.000Z\": 164.6363636364,\n    \"2018-05-15T00:40:00.000Z\": 152.6363636364,\n    \"2018-05-15T00:45:00.000Z\": 151.3636363636,\n    \"2018-05-15T00:50:00.000Z\": 170.1818181818,\n    \"2018-05-15T00:55:00.000Z\": 174.7272727273,\n    \"2018-05-15T01:00:00.000Z\": 162.0909090909,\n    \"2018-05-15T01:05:00.000Z\": 151.2727272727,\n    \"2018-05-15T01:10:00.000Z\": 154.3636363636,\n    \"2018-05-15T01:15:00.000Z\": 168.7272727273,\n    \"2018-05-15T01:20:00.000Z\": 167.6363636364,\n    \"2018-05-15T01:25:00.000Z\": 153.8181818182,\n    \"2018-05-15T01:30:00.000Z\": 146.6363636364,\n    \"2018-05-15T01:35:00.000Z\": 151.3,\n    \"2018-05-15T01:40:00.000Z\": 167.2727272727,\n    \"2018-05-15T01:45:00.000Z\": 165.5454545455,\n    \"2018-05-15T01:50:00.000Z\": 153.3636363636,\n    \"2018-05-15T01:55:00.000Z\": 143.9090909091,\n    \"2018-05-15T02:00:00.000Z\": 142.1818181818,\n    \"2018-05-15T02:05:00.000Z\": 155.8,\n    \"2018-05-15T02:10:00.000Z\": 157.1818181818,\n    \"2018-05-15T02:15:00.000Z\": 148.4545454545,\n    \"2018-05-15T02:20:00.000Z\": 138.0909090909,\n    \"2018-05-15T02:25:00.000Z\": 124.1818181818,\n    \"2018-05-15T02:30:00.000Z\": 140.9090909091,\n    \"2018-05-15T02:35:00.000Z\": 154.0909090909,\n    \"2018-05-15T02:40:00.000Z\": 148.4545454545,\n    \"2018-05-15T02:45:00.000Z\": 133.8181818182,\n    \"2018-05-15T02:50:00.000Z\": 112.2727272727,\n    \"2018-05-15T02:55:00.000Z\": 110.4545454545,\n    \"2018-05-15T03:00:00.000Z\": 131.4545454545,\n    \"2018-05-15T03:05:00.000Z\": 146.2727272727,\n    \"2018-05-15T03:10:00.000Z\": 140.9090909091,\n    \"2018-05-15T03:15:00.000Z\": 116.0909090909,\n    \"2018-05-15T03:20:00.000Z\": 109.5454545455,\n    \"2018-05-15T03:25:00.000Z\": 102.2727272727,\n    \"2018-05-15T03:30:00.000Z\": 100.0909090909,\n    \"2018-05-15T03:35:00.000Z\": 111.7272727273,\n    \"2018-05-15T03:40:00.000Z\": 123.5454545455,\n    \"2018-05-15T03:45:00.000Z\": 115.6,\n    \"2018-05-15T03:50:00.000Z\": 106.9090909091,\n    \"2018-05-15T03:55:00.000Z\": 101.4545454545,\n    \"2018-05-15T04:00:00.000Z\": 95.0,\n    \"2018-05-15T04:05:00.000Z\": 91.6,\n    \"2018-05-15T04:10:00.000Z\": 101.9090909091,\n    \"2018-05-15T04:15:00.000Z\": 111.7272727273,\n    \"2018-05-15T04:20:00.000Z\": 109.5454545455,\n    \"2018-05-15T04:25:00.000Z\": 102.5454545455,\n    \"2018-05-15T04:30:00.000Z\": 94.4545454545,\n    \"2018-05-15T04:35:00.000Z\": 85.3636363636,\n    \"2018-05-15T04:40:00.000Z\": 82.0,\n    \"2018-05-15T04:45:00.000Z\": 80.4545454545,\n    \"2018-05-15T04:50:00.000Z\": 92.2727272727,\n    \"2018-05-15T04:55:00.000Z\": 109.0,\n    \"2018-05-15T05:00:00.000Z\": 107.6363636364,\n    \"2018-05-15T05:05:00.000Z\": 99.8181818182,\n    \"2018-05-15T05:10:00.000Z\": 86.9090909091,\n    \"2018-05-15T05:15:00.000Z\": 80.9,\n    \"2018-05-15T05:20:00.000Z\": 76.1818181818,\n    \"2018-05-15T05:25:00.000Z\": 73.3636363636,\n    \"2018-05-15T05:30:00.000Z\": 76.4545454545,\n    \"2018-05-15T05:35:00.000Z\": 96.5454545455,\n    \"2018-05-15T05:40:00.000Z\": 106.6363636364,\n    \"2018-05-15T05:45:00.000Z\": 100.6363636364,\n    \"2018-05-15T05:50:00.000Z\": 88.7272727273,\n    \"2018-05-15T05:55:00.000Z\": 80.8181818182,\n    \"2018-05-15T06:00:00.000Z\": 77.1818181818,\n    \"2018-05-15T06:05:00.000Z\": 73.0,\n    \"2018-05-15T06:10:00.000Z\": 67.0,\n    \"2018-05-15T06:15:00.000Z\": 70.0909090909,\n    \"2018-05-15T06:20:00.000Z\": 93.5454545455,\n    \"2018-05-15T06:25:00.000Z\": 106.4545454545,\n    \"2018-05-15T06:30:00.000Z\": 100.4545454545,\n    \"2018-05-15T06:35:00.000Z\": 91.4545454545,\n    \"2018-05-15T06:40:00.000Z\": 84.1818181818,\n    \"2018-05-15T06:45:00.000Z\": 77.8,\n    \"2018-05-15T06:50:00.000Z\": 72.6363636364,\n    \"2018-05-15T06:55:00.000Z\": 67.3,\n    \"2018-05-15T07:00:00.000Z\": 71.1818181818,\n    \"2018-05-15T07:05:00.000Z\": 95.2727272727,\n    \"2018-05-15T07:10:00.000Z\": 100.5454545455,\n    \"2018-05-15T07:15:00.000Z\": 87.7272727273,\n    \"2018-05-15T07:20:00.000Z\": 82.9,\n    \"2018-05-15T07:25:00.000Z\": 78.5454545455,\n    \"2018-05-15T07:30:00.000Z\": 73.4545454545,\n    \"2018-05-15T07:35:00.000Z\": 68.0,\n    \"2018-05-15T07:40:00.000Z\": 64.7,\n    \"2018-05-15T07:45:00.000Z\": 77.0,\n    \"2018-05-15T07:50:00.000Z\": 102.9090909091,\n    \"2018-05-15T07:55:00.000Z\": 105.9090909091,\n    \"2018-05-15T08:00:00.000Z\": 94.0,\n    \"2018-05-15T08:05:00.000Z\": 89.7272727273,\n    \"2018-05-15T08:10:00.000Z\": 82.2727272727,\n    \"2018-05-15T08:15:00.000Z\": 77.9090909091,\n    \"2018-05-15T08:20:00.000Z\": 80.1818181818,\n    \"2018-05-15T08:25:00.000Z\": 101.3636363636,\n    \"2018-05-15T08:30:00.000Z\": 115.9090909091,\n    \"2018-05-15T08:35:00.000Z\": 111.8181818182,\n    \"2018-05-15T08:40:00.000Z\": 102.2727272727,\n    \"2018-05-15T08:45:00.000Z\": 97.0,\n    \"2018-05-15T08:50:00.000Z\": 93.9090909091,\n    \"2018-05-15T08:55:00.000Z\": 114.6363636364,\n    \"2018-05-15T09:00:00.000Z\": 141.8181818182,\n    \"2018-05-15T09:05:00.000Z\": 133.9090909091,\n    \"2018-05-15T09:10:00.000Z\": 101.9090909091,\n    \"2018-05-15T09:15:00.000Z\": 109.7272727273,\n    \"2018-05-15T09:20:00.000Z\": 103.7272727273,\n    \"2018-05-15T09:25:00.000Z\": 122.9090909091,\n    \"2018-05-15T09:30:00.000Z\": 144.5454545455,\n    \"2018-05-15T09:35:00.000Z\": 142.8181818182,\n    \"2018-05-15T09:40:00.000Z\": 139.9090909091,\n    \"2018-05-15T09:45:00.000Z\": 152.2727272727,\n    \"2018-05-15T09:50:00.000Z\": 171.7272727273,\n    \"2018-05-15T09:55:00.000Z\": 169.0,\n    \"2018-05-15T10:00:00.000Z\": 158.4545454545,\n    \"2018-05-15T10:05:00.000Z\": 144.2727272727,\n    \"2018-05-15T10:10:00.000Z\": 97.5454545455,\n    \"2018-05-15T10:15:00.000Z\": 66.3636363636,\n    \"2018-05-15T10:20:00.000Z\": 58.6363636364,\n    \"2018-05-15T10:25:00.000Z\": 53.8181818182,\n    \"2018-05-15T10:30:00.000Z\": 49.6,\n    \"2018-05-15T10:35:00.000Z\": 15.0,\n    \"2018-05-15T10:40:00.000Z\": 3.9090909091,\n    \"2018-05-15T10:45:00.000Z\": 3.2222222222,\n    \"2018-05-15T10:50:00.000Z\": 2.9,\n    \"2018-05-15T10:55:00.000Z\": 3.0,\n    \"2018-05-15T11:00:00.000Z\": 2.8181818182,\n    \"2018-05-15T11:05:00.000Z\": 2.7272727273,\n    \"2018-05-15T11:10:00.000Z\": 2.4,\n    \"2018-05-15T11:15:00.000Z\": 3.2,\n    \"2018-05-15T11:20:00.000Z\": 3.8,\n    \"2018-05-15T11:25:00.000Z\": 4.0,\n    \"2018-05-15T11:30:00.000Z\": 2.6666666667,\n    \"2018-05-15T11:35:00.000Z\": 3.2222222222,\n    \"2018-05-15T11:40:00.000Z\": 2.6363636364,\n    \"2018-05-15T11:45:00.000Z\": 3.2727272727,\n    \"2018-05-15T11:50:00.000Z\": 2.2727272727,\n    \"2018-05-15T11:55:00.000Z\": 2.9090909091,\n    \"2018-05-15T12:00:00.000Z\": 3.4,\n    \"2018-05-15T12:05:00.000Z\": 4.0,\n    \"2018-05-15T12:10:00.000Z\": 3.0,\n    \"2018-05-15T12:15:00.000Z\": 2.7272727273,\n    \"2018-05-15T12:20:00.000Z\": 3.0,\n    \"2018-05-15T12:25:00.000Z\": 2.8181818182,\n    \"2018-05-15T12:30:00.000Z\": 2.7272727273,\n    \"2018-05-15T12:35:00.000Z\": 2.4545454545,\n    \"2018-05-15T12:40:00.000Z\": 3.2727272727,\n    \"2018-05-15T12:45:00.000Z\": 3.6,\n    \"2018-05-15T12:50:00.000Z\": 3.9090909091,\n    \"2018-05-15T12:55:00.000Z\": 2.6363636364,\n    \"2018-05-15T13:00:00.000Z\": 3.0909090909,\n    \"2018-05-15T13:05:00.000Z\": 2.4545454545,\n    \"2018-05-15T13:10:00.000Z\": 3.3636363636,\n    \"2018-05-15T13:15:00.000Z\": 2.2727272727,\n    \"2018-05-15T13:20:00.000Z\": 2.9090909091,\n    \"2018-05-15T13:25:00.000Z\": 3.4545454545,\n    \"2018-05-15T13:30:00.000Z\": 4.0,\n    \"2018-05-15T13:35:00.000Z\": 3.0,\n    \"2018-05-15T13:40:00.000Z\": 2.8181818182,\n    \"2018-05-15T13:45:00.000Z\": 2.9090909091,\n    \"2018-05-15T13:50:00.000Z\": 3.0,\n    \"2018-05-15T13:55:00.000Z\": 210.8181818182,\n    \"2018-05-15T14:00:00.000Z\": 600.0,\n    \"2018-05-15T14:05:00.000Z\": 699.2727272727,\n    \"2018-05-15T14:10:00.000Z\": 748.4545454545,\n    \"2018-05-15T14:15:00.000Z\": 760.2727272727,\n    \"2018-05-15T14:20:00.000Z\": 773.8181818182,\n    \"2018-05-15T14:25:00.000Z\": 774.1818181818,\n    \"2018-05-15T14:30:00.000Z\": 774.0909090909,\n    \"2018-05-15T14:35:00.000Z\": 774.2727272727,\n    \"2018-05-15T14:40:00.000Z\": 773.2727272727,\n    \"2018-05-15T14:45:00.000Z\": 769.0909090909,\n    \"2018-05-15T14:50:00.000Z\": 765.7272727273,\n    \"2018-05-15T14:55:00.000Z\": 756.3636363636,\n    \"2018-05-15T15:00:00.000Z\": 717.3636363636,\n    \"2018-05-15T15:05:00.000Z\": 627.5454545455,\n    \"2018-05-15T15:10:00.000Z\": 492.5454545455,\n    \"2018-05-15T15:15:00.000Z\": 364.4545454545,\n    \"2018-05-15T15:20:00.000Z\": 289.0,\n    \"2018-05-15T15:25:00.000Z\": 239.8181818182,\n    \"2018-05-15T15:30:00.000Z\": 203.6363636364,\n    \"2018-05-15T15:35:00.000Z\": 196.7272727273,\n    \"2018-05-15T15:40:00.000Z\": 211.7272727273,\n    \"2018-05-15T15:45:00.000Z\": 209.4545454545,\n    \"2018-05-15T15:50:00.000Z\": 193.9090909091,\n    \"2018-05-15T15:55:00.000Z\": 179.0909090909,\n    \"2018-05-15T16:00:00.000Z\": 191.4545454545,\n    \"2018-05-15T16:05:00.000Z\": 202.2727272727,\n    \"2018-05-15T16:10:00.000Z\": 193.5454545455,\n    \"2018-05-15T16:15:00.000Z\": 178.0909090909,\n    \"2018-05-15T16:20:00.000Z\": 171.9090909091,\n    \"2018-05-15T16:25:00.000Z\": 187.1818181818,\n    \"2018-05-15T16:30:00.000Z\": 191.5454545455,\n    \"2018-05-15T16:35:00.000Z\": 177.7272727273,\n    \"2018-05-15T16:40:00.000Z\": 166.1818181818,\n    \"2018-05-15T16:45:00.000Z\": 177.3636363636,\n    \"2018-05-15T16:50:00.000Z\": 192.7272727273,\n    \"2018-05-15T16:55:00.000Z\": 186.0909090909,\n    \"2018-05-15T17:00:00.000Z\": 172.1818181818,\n    \"2018-05-15T17:05:00.000Z\": 169.8181818182,\n    \"2018-05-15T17:10:00.000Z\": 186.4545454545,\n    \"2018-05-15T17:15:00.000Z\": 185.6363636364,\n    \"2018-05-15T17:20:00.000Z\": 172.0909090909,\n    \"2018-05-15T17:25:00.000Z\": 159.1818181818,\n    \"2018-05-15T17:30:00.000Z\": 163.1818181818,\n    \"2018-05-15T17:35:00.000Z\": 179.9090909091,\n    \"2018-05-15T17:40:00.000Z\": 181.6363636364,\n    \"2018-05-15T17:45:00.000Z\": 169.7272727273,\n    \"2018-05-15T17:50:00.000Z\": 160.0909090909,\n    \"2018-05-15T17:55:00.000Z\": 168.7272727273,\n    \"2018-05-15T18:00:00.000Z\": 182.6363636364,\n    \"2018-05-15T18:05:00.000Z\": 176.5454545455,\n    \"2018-05-15T18:10:00.000Z\": 163.0,\n    \"2018-05-15T18:15:00.000Z\": 156.0,\n    \"2018-05-15T18:20:00.000Z\": 172.6363636364,\n    \"2018-05-15T18:25:00.000Z\": 181.2727272727,\n    \"2018-05-15T18:30:00.000Z\": 170.0909090909,\n    \"2018-05-15T18:35:00.000Z\": 157.3636363636,\n    \"2018-05-15T18:40:00.000Z\": 158.2727272727,\n    \"2018-05-15T18:45:00.000Z\": 177.0,\n    \"2018-05-15T18:50:00.000Z\": 178.3636363636,\n    \"2018-05-15T18:55:00.000Z\": 165.6363636364,\n    \"2018-05-15T19:00:00.000Z\": 154.1818181818,\n    \"2018-05-15T19:05:00.000Z\": 156.1818181818,\n    \"2018-05-15T19:10:00.000Z\": 175.0,\n    \"2018-05-15T19:15:00.000Z\": 178.1818181818,\n    \"2018-05-15T19:20:00.000Z\": 168.6363636364,\n    \"2018-05-15T19:25:00.000Z\": 157.5454545455,\n    \"2018-05-15T19:30:00.000Z\": 158.0909090909,\n    \"2018-05-15T19:35:00.000Z\": 177.6363636364,\n    \"2018-05-15T19:40:00.000Z\": 182.0,\n    \"2018-05-15T19:45:00.000Z\": 171.2,\n    \"2018-05-15T19:50:00.000Z\": 159.2727272727,\n    \"2018-05-15T19:55:00.000Z\": 157.6363636364,\n    \"2018-05-15T20:00:00.000Z\": 177.1818181818,\n    \"2018-05-15T20:05:00.000Z\": 183.8181818182,\n    \"2018-05-15T20:10:00.000Z\": 172.1818181818,\n    \"2018-05-15T20:15:00.000Z\": 158.9090909091,\n    \"2018-05-15T20:20:00.000Z\": 157.3636363636,\n    \"2018-05-15T20:25:00.000Z\": 175.3636363636,\n    \"2018-05-15T20:30:00.000Z\": 178.3636363636,\n    \"2018-05-15T20:35:00.000Z\": 167.3636363636,\n    \"2018-05-15T20:40:00.000Z\": 156.3636363636,\n    \"2018-05-15T20:45:00.000Z\": 157.9090909091,\n    \"2018-05-15T20:50:00.000Z\": 177.8181818182,\n    \"2018-05-15T20:55:00.000Z\": 180.7272727273,\n    \"2018-05-15T21:00:00.000Z\": 170.7272727273,\n    \"2018-05-15T21:05:00.000Z\": 161.0,\n    \"2018-05-15T21:10:00.000Z\": 167.0909090909,\n    \"2018-05-15T21:15:00.000Z\": 182.5454545455,\n    \"2018-05-15T21:20:00.000Z\": 179.8181818182,\n    \"2018-05-15T21:25:00.000Z\": 167.4545454545,\n    \"2018-05-15T21:30:00.000Z\": 157.9090909091,\n    \"2018-05-15T21:35:00.000Z\": 169.1818181818,\n    \"2018-05-15T21:40:00.000Z\": 187.5,\n    \"2018-05-15T21:45:00.000Z\": 182.4,\n    \"2018-05-15T21:50:00.000Z\": 169.2727272727,\n    \"2018-05-15T21:55:00.000Z\": 164.8181818182,\n    \"2018-05-15T22:00:00.000Z\": 180.4545454545,\n    \"2018-05-15T22:05:00.000Z\": 189.9090909091,\n    \"2018-05-15T22:10:00.000Z\": 178.3,\n    \"2018-05-15T22:15:00.000Z\": 165.6363636364,\n    \"2018-05-15T22:20:00.000Z\": 155.5454545455,\n    \"2018-05-15T22:25:00.000Z\": 152.2727272727,\n    \"2018-05-15T22:30:00.000Z\": 149.9090909091,\n    \"2018-05-15T22:35:00.000Z\": 150.8181818182,\n    \"2018-05-15T22:40:00.000Z\": 172.2727272727,\n    \"2018-05-15T22:45:00.000Z\": 224.2727272727,\n    \"2018-05-15T22:50:00.000Z\": 234.0,\n    \"2018-05-15T22:55:00.000Z\": 208.1818181818,\n    \"2018-05-15T23:00:00.000Z\": 183.3636363636,\n    \"2018-05-15T23:05:00.000Z\": 177.8181818182,\n    \"2018-05-15T23:10:00.000Z\": 195.1818181818,\n    \"2018-05-15T23:15:00.000Z\": 194.0,\n    \"2018-05-15T23:20:00.000Z\": 178.9090909091,\n    \"2018-05-15T23:25:00.000Z\": 168.1818181818,\n    \"2018-05-15T23:30:00.000Z\": 177.2,\n    \"2018-05-15T23:35:00.000Z\": 190.3636363636,\n    \"2018-05-15T23:40:00.000Z\": 183.7272727273,\n    \"2018-05-15T23:45:00.000Z\": 171.5454545455,\n    \"2018-05-15T23:50:00.000Z\": 168.5454545455,\n    \"2018-05-15T23:55:00.000Z\": 182.4545454545,\n    \"2018-05-16T00:00:00.000Z\": 184.4545454545,\n    \"2018-05-16T00:05:00.000Z\": 171.7272727273,\n    \"2018-05-16T00:10:00.000Z\": 159.0,\n    \"2018-05-16T00:15:00.000Z\": 156.7272727273,\n    \"2018-05-16T00:20:00.000Z\": 172.6363636364,\n    \"2018-05-16T00:25:00.000Z\": 173.5454545455,\n    \"2018-05-16T00:30:00.000Z\": 161.4545454545,\n    \"2018-05-16T00:35:00.000Z\": 150.7272727273,\n    \"2018-05-16T00:40:00.000Z\": 154.2727272727,\n    \"2018-05-16T00:45:00.000Z\": 171.1818181818,\n    \"2018-05-16T00:50:00.000Z\": 169.4545454545,\n    \"2018-05-16T00:55:00.000Z\": 156.0909090909,\n    \"2018-05-16T01:00:00.000Z\": 145.9090909091,\n    \"2018-05-16T01:05:00.000Z\": 153.3636363636,\n    \"2018-05-16T01:10:00.000Z\": 169.8181818182,\n    \"2018-05-16T01:15:00.000Z\": 167.0,\n    \"2018-05-16T01:20:00.000Z\": 156.7272727273,\n    \"2018-05-16T01:25:00.000Z\": 149.9090909091,\n    \"2018-05-16T01:30:00.000Z\": 161.7272727273,\n    \"2018-05-16T01:35:00.000Z\": 171.8181818182,\n    \"2018-05-16T01:40:00.000Z\": 161.6363636364,\n    \"2018-05-16T01:45:00.000Z\": 149.3636363636,\n    \"2018-05-16T01:50:00.000Z\": 142.6363636364,\n    \"2018-05-16T01:55:00.000Z\": 147.1818181818,\n    \"2018-05-16T02:00:00.000Z\": 162.0909090909,\n    \"2018-05-16T02:05:00.000Z\": 156.5,\n    \"2018-05-16T02:10:00.000Z\": 147.3636363636,\n    \"2018-05-16T02:15:00.000Z\": 134.0,\n    \"2018-05-16T02:20:00.000Z\": 124.7272727273,\n    \"2018-05-16T02:25:00.000Z\": 148.0909090909,\n    \"2018-05-16T02:30:00.000Z\": 151.2727272727,\n    \"2018-05-16T02:35:00.000Z\": 142.8181818182,\n    \"2018-05-16T02:40:00.000Z\": 124.3636363636,\n    \"2018-05-16T02:45:00.000Z\": 111.4545454545,\n    \"2018-05-16T02:50:00.000Z\": 114.0909090909,\n    \"2018-05-16T02:55:00.000Z\": 145.7272727273,\n    \"2018-05-16T03:00:00.000Z\": 145.7272727273,\n    \"2018-05-16T03:05:00.000Z\": 122.0,\n    \"2018-05-16T03:10:00.000Z\": 111.6363636364,\n    \"2018-05-16T03:15:00.000Z\": 105.0,\n    \"2018-05-16T03:20:00.000Z\": 99.1818181818,\n    \"2018-05-16T03:25:00.000Z\": 105.6363636364,\n    \"2018-05-16T03:30:00.000Z\": 130.0909090909,\n    \"2018-05-16T03:35:00.000Z\": 118.3636363636,\n    \"2018-05-16T03:40:00.000Z\": 106.4545454545,\n    \"2018-05-16T03:45:00.000Z\": 99.6363636364,\n    \"2018-05-16T03:50:00.000Z\": 92.9090909091,\n    \"2018-05-16T03:55:00.000Z\": 90.0,\n    \"2018-05-16T04:00:00.000Z\": 94.8181818182,\n    \"2018-05-16T04:05:00.000Z\": 108.2727272727,\n    \"2018-05-16T04:10:00.000Z\": 108.0909090909,\n    \"2018-05-16T04:15:00.000Z\": 99.3636363636,\n    \"2018-05-16T04:20:00.000Z\": 95.1818181818,\n    \"2018-05-16T04:25:00.000Z\": 87.4545454545,\n    \"2018-05-16T04:30:00.000Z\": 82.6363636364,\n    \"2018-05-16T04:35:00.000Z\": 79.6363636364,\n    \"2018-05-16T04:40:00.000Z\": 88.6,\n    \"2018-05-16T04:45:00.000Z\": 109.0,\n    \"2018-05-16T04:50:00.000Z\": 110.9090909091,\n    \"2018-05-16T04:55:00.000Z\": 99.3636363636,\n    \"2018-05-16T05:00:00.000Z\": 88.4545454545,\n    \"2018-05-16T05:05:00.000Z\": 78.0909090909,\n    \"2018-05-16T05:10:00.000Z\": 69.5454545455,\n    \"2018-05-16T05:15:00.000Z\": 68.6,\n    \"2018-05-16T05:20:00.000Z\": 67.1818181818,\n    \"2018-05-16T05:25:00.000Z\": 80.9090909091,\n    \"2018-05-16T05:30:00.000Z\": 100.2727272727,\n    \"2018-05-16T05:35:00.000Z\": 97.8181818182,\n    \"2018-05-16T05:40:00.000Z\": 89.3636363636,\n    \"2018-05-16T05:45:00.000Z\": 81.8181818182,\n    \"2018-05-16T05:50:00.000Z\": 77.4545454545,\n    \"2018-05-16T05:55:00.000Z\": 73.3636363636,\n    \"2018-05-16T06:00:00.000Z\": 70.4545454545,\n    \"2018-05-16T06:05:00.000Z\": 74.7272727273,\n    \"2018-05-16T06:10:00.000Z\": 98.2,\n    \"2018-05-16T06:15:00.000Z\": 106.0909090909,\n    \"2018-05-16T06:20:00.000Z\": 99.1818181818,\n    \"2018-05-16T06:25:00.000Z\": 87.7272727273,\n    \"2018-05-16T06:30:00.000Z\": 78.4545454545,\n    \"2018-05-16T06:35:00.000Z\": 71.5454545455,\n    \"2018-05-16T06:40:00.000Z\": 70.1818181818,\n    \"2018-05-16T06:45:00.000Z\": 68.8181818182,\n    \"2018-05-16T06:50:00.000Z\": 73.3636363636,\n    \"2018-05-16T06:55:00.000Z\": 98.9090909091,\n    \"2018-05-16T07:00:00.000Z\": 104.6363636364,\n    \"2018-05-16T07:05:00.000Z\": 93.7272727273,\n    \"2018-05-16T07:10:00.000Z\": 84.9090909091,\n    \"2018-05-16T07:15:00.000Z\": 78.0,\n    \"2018-05-16T07:20:00.000Z\": 73.3636363636,\n    \"2018-05-16T07:25:00.000Z\": 68.6,\n    \"2018-05-16T07:30:00.000Z\": 68.9,\n    \"2018-05-16T07:35:00.000Z\": 89.3636363636,\n    \"2018-05-16T07:40:00.000Z\": 107.4545454545,\n    \"2018-05-16T07:45:00.000Z\": 104.0,\n    \"2018-05-16T07:50:00.000Z\": 89.1818181818,\n    \"2018-05-16T07:55:00.000Z\": 71.6,\n    \"2018-05-16T08:00:00.000Z\": 68.2727272727,\n    \"2018-05-16T08:05:00.000Z\": 68.3636363636,\n    \"2018-05-16T08:10:00.000Z\": 72.1818181818,\n    \"2018-05-16T08:15:00.000Z\": 97.1818181818,\n    \"2018-05-16T08:20:00.000Z\": 111.0909090909,\n    \"2018-05-16T08:25:00.000Z\": 103.4545454545,\n    \"2018-05-16T08:30:00.000Z\": 81.7272727273,\n    \"2018-05-16T08:35:00.000Z\": 72.2727272727,\n    \"2018-05-16T08:40:00.000Z\": 69.4545454545,\n    \"2018-05-16T08:45:00.000Z\": 73.4545454545,\n    \"2018-05-16T08:50:00.000Z\": 103.4545454545,\n    \"2018-05-16T08:55:00.000Z\": 115.0909090909,\n    \"2018-05-16T09:00:00.000Z\": 107.2727272727,\n    \"2018-05-16T09:05:00.000Z\": 99.4545454545,\n    \"2018-05-16T09:10:00.000Z\": 97.0909090909,\n    \"2018-05-16T09:15:00.000Z\": 99.8181818182,\n    \"2018-05-16T09:20:00.000Z\": 123.1818181818,\n    \"2018-05-16T09:25:00.000Z\": 132.8181818182,\n    \"2018-05-16T09:30:00.000Z\": 105.4545454545,\n    \"2018-05-16T09:35:00.000Z\": 98.2727272727,\n    \"2018-05-16T09:40:00.000Z\": 118.5454545455,\n    \"2018-05-16T09:45:00.000Z\": 155.4545454545,\n    \"2018-05-16T09:50:00.000Z\": 155.9090909091,\n    \"2018-05-16T09:55:00.000Z\": 149.8181818182,\n    \"2018-05-16T10:00:00.000Z\": 156.1818181818,\n    \"2018-05-16T10:05:00.000Z\": 180.0909090909,\n    \"2018-05-16T10:10:00.000Z\": 181.7272727273,\n    \"2018-05-16T10:15:00.000Z\": 178.5454545455,\n    \"2018-05-16T10:20:00.000Z\": 197.5454545455,\n    \"2018-05-16T10:25:00.000Z\": 211.8181818182,\n    \"2018-05-16T10:30:00.000Z\": 205.3636363636,\n    \"2018-05-16T10:35:00.000Z\": 196.8181818182,\n    \"2018-05-16T10:40:00.000Z\": 210.0909090909,\n    \"2018-05-16T10:45:00.000Z\": 223.7272727273,\n    \"2018-05-16T10:50:00.000Z\": 212.7272727273,\n    \"2018-05-16T10:55:00.000Z\": 203.6363636364,\n    \"2018-05-16T11:00:00.000Z\": 215.8181818182,\n    \"2018-05-16T11:05:00.000Z\": 226.4545454545,\n    \"2018-05-16T11:10:00.000Z\": 214.8181818182,\n    \"2018-05-16T11:15:00.000Z\": 207.0909090909,\n    \"2018-05-16T11:20:00.000Z\": 220.9090909091,\n    \"2018-05-16T11:25:00.000Z\": 227.6363636364,\n    \"2018-05-16T11:30:00.000Z\": 213.4545454545,\n    \"2018-05-16T11:35:00.000Z\": 203.2727272727,\n    \"2018-05-16T11:40:00.000Z\": 218.9090909091,\n    \"2018-05-16T11:45:00.000Z\": 229.0909090909,\n    \"2018-05-16T11:50:00.000Z\": 218.0,\n    \"2018-05-16T11:55:00.000Z\": 206.9090909091,\n    \"2018-05-16T12:00:00.000Z\": 219.0909090909,\n    \"2018-05-16T12:05:00.000Z\": 226.8181818182,\n    \"2018-05-16T12:10:00.000Z\": 211.1818181818,\n    \"2018-05-16T12:15:00.000Z\": 201.3636363636,\n    \"2018-05-16T12:20:00.000Z\": 216.4545454545,\n    \"2018-05-16T12:25:00.000Z\": 226.7272727273,\n    \"2018-05-16T12:30:00.000Z\": 217.2727272727,\n    \"2018-05-16T12:35:00.000Z\": 205.4545454545,\n    \"2018-05-16T12:40:00.000Z\": 215.3636363636,\n    \"2018-05-16T12:45:00.000Z\": 218.4545454545,\n    \"2018-05-16T12:50:00.000Z\": 204.5454545455,\n    \"2018-05-16T12:55:00.000Z\": 194.6363636364,\n    \"2018-05-16T13:00:00.000Z\": 208.8181818182,\n    \"2018-05-16T13:05:00.000Z\": 219.3636363636,\n    \"2018-05-16T13:10:00.000Z\": 208.9,\n    \"2018-05-16T13:15:00.000Z\": 199.2727272727,\n    \"2018-05-16T13:20:00.000Z\": 209.5454545455,\n    \"2018-05-16T13:25:00.000Z\": 219.0,\n    \"2018-05-16T13:30:00.000Z\": 208.0,\n    \"2018-05-16T13:35:00.000Z\": 194.3636363636,\n    \"2018-05-16T13:40:00.000Z\": 197.2727272727,\n    \"2018-05-16T13:45:00.000Z\": 208.4,\n    \"2018-05-16T13:50:00.000Z\": 201.0,\n    \"2018-05-16T13:55:00.000Z\": 184.4545454545,\n    \"2018-05-16T14:00:00.000Z\": 179.8181818182,\n    \"2018-05-16T14:05:00.000Z\": 196.8181818182,\n    \"2018-05-16T14:10:00.000Z\": 199.8181818182,\n    \"2018-05-16T14:15:00.000Z\": 187.2727272727,\n    \"2018-05-16T14:20:00.000Z\": 178.6363636364,\n    \"2018-05-16T14:25:00.000Z\": 196.0,\n    \"2018-05-16T14:30:00.000Z\": 206.5454545455,\n    \"2018-05-16T14:35:00.000Z\": 199.8181818182,\n    \"2018-05-16T14:40:00.000Z\": 190.7272727273,\n    \"2018-05-16T14:45:00.000Z\": 198.3636363636,\n    \"2018-05-16T14:50:00.000Z\": 208.6363636364,\n    \"2018-05-16T14:55:00.000Z\": 199.4545454545,\n    \"2018-05-16T15:00:00.000Z\": 183.9,\n    \"2018-05-16T15:05:00.000Z\": 185.0909090909,\n    \"2018-05-16T15:10:00.000Z\": 201.5,\n    \"2018-05-16T15:15:00.000Z\": 200.0909090909,\n    \"2018-05-16T15:20:00.000Z\": 184.6363636364,\n    \"2018-05-16T15:25:00.000Z\": 172.4545454545,\n    \"2018-05-16T15:30:00.000Z\": 182.8181818182,\n    \"2018-05-16T15:35:00.000Z\": 196.1818181818,\n    \"2018-05-16T15:40:00.000Z\": 187.0909090909,\n    \"2018-05-16T15:45:00.000Z\": 173.8181818182,\n    \"2018-05-16T15:50:00.000Z\": 173.5454545455,\n    \"2018-05-16T15:55:00.000Z\": 192.1818181818,\n    \"2018-05-16T16:00:00.000Z\": 193.7272727273,\n    \"2018-05-16T16:05:00.000Z\": 178.0909090909,\n    \"2018-05-16T16:10:00.000Z\": 168.5454545455,\n    \"2018-05-16T16:15:00.000Z\": 181.8181818182,\n    \"2018-05-16T16:20:00.000Z\": 193.7,\n    \"2018-05-16T16:25:00.000Z\": 183.3636363636,\n    \"2018-05-16T16:30:00.000Z\": 168.0,\n    \"2018-05-16T16:35:00.000Z\": 161.4545454545,\n    \"2018-05-16T16:40:00.000Z\": 177.2727272727,\n    \"2018-05-16T16:45:00.000Z\": 183.0,\n    \"2018-05-16T16:50:00.000Z\": 172.3636363636,\n    \"2018-05-16T16:55:00.000Z\": 165.0909090909,\n    \"2018-05-16T17:00:00.000Z\": 183.5454545455,\n    \"2018-05-16T17:05:00.000Z\": 193.1818181818,\n    \"2018-05-16T17:10:00.000Z\": 182.2,\n    \"2018-05-16T17:15:00.000Z\": 162.7272727273,\n    \"2018-05-16T17:20:00.000Z\": 158.5454545455,\n    \"2018-05-16T17:25:00.000Z\": 177.9090909091,\n    \"2018-05-16T17:30:00.000Z\": 179.9090909091,\n    \"2018-05-16T17:35:00.000Z\": 167.4545454545,\n    \"2018-05-16T17:40:00.000Z\": 155.2727272727,\n    \"2018-05-16T17:45:00.000Z\": 165.8181818182,\n    \"2018-05-16T17:50:00.000Z\": 177.0,\n    \"2018-05-16T17:55:00.000Z\": 167.5555555556,\n    \"2018-05-16T18:00:00.000Z\": 154.0909090909,\n    \"2018-05-16T18:05:00.000Z\": 151.1818181818,\n    \"2018-05-16T18:10:00.000Z\": 166.9090909091,\n    \"2018-05-16T18:15:00.000Z\": 171.6363636364,\n    \"2018-05-16T18:20:00.000Z\": 160.0909090909,\n    \"2018-05-16T18:25:00.000Z\": 149.6363636364,\n    \"2018-05-16T18:30:00.000Z\": 155.0909090909,\n    \"2018-05-16T18:35:00.000Z\": 173.5454545455,\n    \"2018-05-16T18:40:00.000Z\": 171.1818181818,\n    \"2018-05-16T18:45:00.000Z\": 157.7272727273,\n    \"2018-05-16T18:50:00.000Z\": 148.2727272727,\n    \"2018-05-16T18:55:00.000Z\": 151.9090909091,\n    \"2018-05-16T19:00:00.000Z\": 171.4545454545,\n    \"2018-05-16T19:05:00.000Z\": 174.6363636364,\n    \"2018-05-16T19:10:00.000Z\": 164.2727272727,\n    \"2018-05-16T19:15:00.000Z\": 153.4545454545,\n    \"2018-05-16T19:20:00.000Z\": 159.4545454545,\n    \"2018-05-16T19:25:00.000Z\": 178.1818181818,\n    \"2018-05-16T19:30:00.000Z\": 180.8181818182,\n    \"2018-05-16T19:35:00.000Z\": 373.4545454545,\n    \"2018-05-16T19:40:00.000Z\": 823.1818181818,\n    \"2018-05-16T19:45:00.000Z\": 811.7272727273,\n    \"2018-05-16T19:50:00.000Z\": 804.3636363636,\n    \"2018-05-16T19:55:00.000Z\": 796.3636363636,\n    \"2018-05-16T20:00:00.000Z\": 785.4545454545,\n    \"2018-05-16T20:05:00.000Z\": 786.0,\n    \"2018-05-16T20:10:00.000Z\": 792.0,\n    \"2018-05-16T20:15:00.000Z\": 777.0,\n    \"2018-05-16T20:20:00.000Z\": 781.0909090909,\n    \"2018-05-16T20:25:00.000Z\": 784.0909090909,\n    \"2018-05-16T20:30:00.000Z\": 786.7272727273,\n    \"2018-05-16T20:35:00.000Z\": 786.4545454545,\n    \"2018-05-16T20:40:00.000Z\": 788.0,\n    \"2018-05-16T20:45:00.000Z\": 787.9090909091,\n    \"2018-05-16T20:50:00.000Z\": 786.0909090909,\n    \"2018-05-16T20:55:00.000Z\": 788.0,\n    \"2018-05-16T21:00:00.000Z\": 788.7272727273,\n    \"2018-05-16T21:05:00.000Z\": 789.6363636364,\n    \"2018-05-16T21:10:00.000Z\": 794.1818181818,\n    \"2018-05-16T21:15:00.000Z\": 802.3636363636,\n    \"2018-05-16T21:20:00.000Z\": 800.0909090909,\n    \"2018-05-16T21:25:00.000Z\": 801.1818181818,\n    \"2018-05-16T21:30:00.000Z\": 798.7272727273,\n    \"2018-05-16T21:35:00.000Z\": 802.5454545455,\n    \"2018-05-16T21:40:00.000Z\": 800.6363636364,\n    \"2018-05-16T21:45:00.000Z\": 799.0,\n    \"2018-05-16T21:50:00.000Z\": 802.5454545455,\n    \"2018-05-16T21:55:00.000Z\": 802.3636363636,\n    \"2018-05-16T22:00:00.000Z\": 801.8181818182,\n    \"2018-05-16T22:05:00.000Z\": 802.1818181818,\n    \"2018-05-16T22:10:00.000Z\": 798.3636363636,\n    \"2018-05-16T22:15:00.000Z\": 795.2727272727,\n    \"2018-05-16T22:20:00.000Z\": 796.4545454545,\n    \"2018-05-16T22:25:00.000Z\": 801.6363636364,\n    \"2018-05-16T22:30:00.000Z\": 803.5454545455,\n    \"2018-05-16T22:35:00.000Z\": 802.8181818182,\n    \"2018-05-16T22:40:00.000Z\": 801.1818181818,\n    \"2018-05-16T22:45:00.000Z\": 798.1818181818,\n    \"2018-05-16T22:50:00.000Z\": 799.8181818182,\n    \"2018-05-16T22:55:00.000Z\": 796.5454545455,\n    \"2018-05-16T23:00:00.000Z\": 795.4545454545,\n    \"2018-05-16T23:05:00.000Z\": 796.4545454545,\n    \"2018-05-16T23:10:00.000Z\": 794.5454545455,\n    \"2018-05-16T23:15:00.000Z\": 793.0909090909,\n    \"2018-05-16T23:20:00.000Z\": 792.7272727273,\n    \"2018-05-16T23:25:00.000Z\": 791.9090909091,\n    \"2018-05-16T23:30:00.000Z\": 794.5454545455,\n    \"2018-05-16T23:35:00.000Z\": 794.0,\n    \"2018-05-16T23:40:00.000Z\": 795.2727272727,\n    \"2018-05-16T23:45:00.000Z\": 792.2727272727,\n    \"2018-05-16T23:50:00.000Z\": 790.0,\n    \"2018-05-16T23:55:00.000Z\": 795.2727272727,\n    \"2018-05-17T00:00:00.000Z\": 790.9090909091,\n    \"2018-05-17T00:05:00.000Z\": 791.8181818182,\n    \"2018-05-17T00:10:00.000Z\": 791.9090909091,\n    \"2018-05-17T00:15:00.000Z\": 791.4545454545,\n    \"2018-05-17T00:20:00.000Z\": 790.2727272727,\n    \"2018-05-17T00:25:00.000Z\": 787.6363636364,\n    \"2018-05-17T00:30:00.000Z\": 788.5454545455,\n    \"2018-05-17T00:35:00.000Z\": 789.0909090909,\n    \"2018-05-17T00:40:00.000Z\": 787.9090909091,\n    \"2018-05-17T00:45:00.000Z\": 785.4545454545,\n    \"2018-05-17T00:50:00.000Z\": 784.3636363636,\n    \"2018-05-17T00:55:00.000Z\": 785.3636363636,\n    \"2018-05-17T01:00:00.000Z\": 782.5454545455,\n    \"2018-05-17T01:05:00.000Z\": 779.7272727273,\n    \"2018-05-17T01:10:00.000Z\": 781.8181818182,\n    \"2018-05-17T01:15:00.000Z\": 782.0909090909,\n    \"2018-05-17T01:20:00.000Z\": 780.9090909091,\n    \"2018-05-17T01:25:00.000Z\": 781.0909090909,\n    \"2018-05-17T01:30:00.000Z\": 781.3636363636,\n    \"2018-05-17T01:35:00.000Z\": 782.0909090909,\n    \"2018-05-17T01:40:00.000Z\": 778.6363636364,\n    \"2018-05-17T01:45:00.000Z\": 779.3636363636,\n    \"2018-05-17T01:50:00.000Z\": 778.5454545455,\n    \"2018-05-17T01:55:00.000Z\": 777.4545454545,\n    \"2018-05-17T02:00:00.000Z\": 777.1818181818,\n    \"2018-05-17T02:05:00.000Z\": 776.5,\n    \"2018-05-17T02:10:00.000Z\": 773.0909090909,\n    \"2018-05-17T02:15:00.000Z\": 773.2727272727,\n    \"2018-05-17T02:20:00.000Z\": 772.2727272727,\n    \"2018-05-17T02:25:00.000Z\": 773.0,\n    \"2018-05-17T02:30:00.000Z\": 768.0,\n    \"2018-05-17T02:35:00.000Z\": 778.9090909091,\n    \"2018-05-17T02:40:00.000Z\": 781.0909090909,\n    \"2018-05-17T02:45:00.000Z\": 776.3636363636,\n    \"2018-05-17T02:50:00.000Z\": 777.2727272727,\n    \"2018-05-17T02:55:00.000Z\": 772.0909090909,\n    \"2018-05-17T03:00:00.000Z\": 772.1818181818,\n    \"2018-05-17T03:05:00.000Z\": 768.5454545455,\n    \"2018-05-17T03:10:00.000Z\": 770.0,\n    \"2018-05-17T03:15:00.000Z\": 769.0,\n    \"2018-05-17T03:20:00.000Z\": 768.6363636364,\n    \"2018-05-17T03:25:00.000Z\": 699.6363636364,\n    \"2018-05-17T03:30:00.000Z\": 433.5454545455,\n    \"2018-05-17T03:35:00.000Z\": 296.0,\n    \"2018-05-17T03:40:00.000Z\": 261.0909090909,\n    \"2018-05-17T03:45:00.000Z\": 240.2727272727,\n    \"2018-05-17T03:50:00.000Z\": 227.1818181818,\n    \"2018-05-17T03:55:00.000Z\": 222.6363636364,\n    \"2018-05-17T04:00:00.000Z\": 218.2727272727,\n    \"2018-05-17T04:05:00.000Z\": 220.0909090909,\n    \"2018-05-17T04:10:00.000Z\": 237.0,\n    \"2018-05-17T04:15:00.000Z\": 251.7272727273,\n    \"2018-05-17T04:20:00.000Z\": 246.4545454545,\n    \"2018-05-17T04:25:00.000Z\": 229.2727272727,\n    \"2018-05-17T04:30:00.000Z\": 217.7272727273,\n    \"2018-05-17T04:35:00.000Z\": 209.9090909091,\n    \"2018-05-17T04:40:00.000Z\": 208.3636363636,\n    \"2018-05-17T04:45:00.000Z\": 208.4545454545,\n    \"2018-05-17T04:50:00.000Z\": 208.3636363636,\n    \"2018-05-17T04:55:00.000Z\": 213.4545454545,\n    \"2018-05-17T05:00:00.000Z\": 232.0909090909,\n    \"2018-05-17T05:05:00.000Z\": 239.9090909091,\n    \"2018-05-17T05:10:00.000Z\": 225.9090909091,\n    \"2018-05-17T05:15:00.000Z\": 204.2727272727,\n    \"2018-05-17T05:20:00.000Z\": 178.3636363636,\n    \"2018-05-17T05:25:00.000Z\": 151.8181818182,\n    \"2018-05-17T05:30:00.000Z\": 147.1818181818,\n    \"2018-05-17T05:35:00.000Z\": 140.2727272727,\n    \"2018-05-17T05:40:00.000Z\": 115.7272727273,\n    \"2018-05-17T05:45:00.000Z\": 120.8181818182,\n    \"2018-05-17T05:50:00.000Z\": 182.8181818182,\n    \"2018-05-17T05:55:00.000Z\": 129.5454545455,\n    \"2018-05-17T06:00:00.000Z\": 145.3636363636,\n    \"2018-05-17T06:05:00.000Z\": 139.0,\n    \"2018-05-17T06:10:00.000Z\": 113.5454545455,\n    \"2018-05-17T06:15:00.000Z\": 101.4545454545,\n    \"2018-05-17T06:20:00.000Z\": 139.4545454545,\n    \"2018-05-17T06:25:00.000Z\": 216.4545454545,\n    \"2018-05-17T06:30:00.000Z\": 241.3636363636,\n    \"2018-05-17T06:35:00.000Z\": 151.8181818182,\n    \"2018-05-17T06:40:00.000Z\": 98.0909090909,\n    \"2018-05-17T06:45:00.000Z\": 105.0,\n    \"2018-05-17T06:50:00.000Z\": 80.3636363636,\n    \"2018-05-17T06:55:00.000Z\": 79.7272727273,\n    \"2018-05-17T07:00:00.000Z\": 134.9090909091,\n    \"2018-05-17T07:05:00.000Z\": 208.4545454545,\n    \"2018-05-17T07:10:00.000Z\": 219.4545454545,\n    \"2018-05-17T07:15:00.000Z\": 151.5454545455,\n    \"2018-05-17T07:20:00.000Z\": 84.7272727273,\n    \"2018-05-17T07:25:00.000Z\": 99.7272727273,\n    \"2018-05-17T07:30:00.000Z\": 94.2727272727,\n    \"2018-05-17T07:35:00.000Z\": 95.5454545455,\n    \"2018-05-17T07:40:00.000Z\": 157.7,\n    \"2018-05-17T07:45:00.000Z\": 199.0,\n    \"2018-05-17T07:50:00.000Z\": 190.1818181818,\n    \"2018-05-17T07:55:00.000Z\": 123.7272727273,\n    \"2018-05-17T08:00:00.000Z\": 79.2727272727,\n    \"2018-05-17T08:05:00.000Z\": 102.7272727273,\n    \"2018-05-17T08:10:00.000Z\": 95.7272727273,\n    \"2018-05-17T08:15:00.000Z\": 102.1818181818,\n    \"2018-05-17T08:20:00.000Z\": 97.4545454545,\n    \"2018-05-17T08:25:00.000Z\": 93.7272727273,\n    \"2018-05-17T08:30:00.000Z\": 99.4545454545,\n    \"2018-05-17T08:35:00.000Z\": 136.2727272727,\n    \"2018-05-17T08:40:00.000Z\": 145.4545454545,\n    \"2018-05-17T08:45:00.000Z\": 121.6363636364,\n    \"2018-05-17T08:50:00.000Z\": 113.2727272727,\n    \"2018-05-17T08:55:00.000Z\": 110.3636363636,\n    \"2018-05-17T09:00:00.000Z\": 132.5454545455,\n    \"2018-05-17T09:05:00.000Z\": 144.2727272727,\n    \"2018-05-17T09:10:00.000Z\": 112.6363636364,\n    \"2018-05-17T09:15:00.000Z\": 100.7272727273,\n    \"2018-05-17T09:20:00.000Z\": 110.7272727273,\n    \"2018-05-17T09:25:00.000Z\": 120.2727272727,\n    \"2018-05-17T09:30:00.000Z\": 151.8181818182,\n    \"2018-05-17T09:35:00.000Z\": 152.3636363636,\n    \"2018-05-17T09:40:00.000Z\": 145.3636363636,\n    \"2018-05-17T09:45:00.000Z\": 148.5454545455,\n    \"2018-05-17T09:50:00.000Z\": 167.2727272727,\n    \"2018-05-17T09:55:00.000Z\": 169.8181818182,\n    \"2018-05-17T10:00:00.000Z\": 163.9090909091,\n    \"2018-05-17T10:05:00.000Z\": 178.2727272727,\n    \"2018-05-17T10:10:00.000Z\": 194.8181818182,\n    \"2018-05-17T10:15:00.000Z\": 189.8181818182,\n    \"2018-05-17T10:20:00.000Z\": 182.6363636364,\n    \"2018-05-17T10:25:00.000Z\": 201.1818181818,\n    \"2018-05-17T10:30:00.000Z\": 215.6363636364,\n    \"2018-05-17T10:35:00.000Z\": 204.7272727273,\n    \"2018-05-17T10:40:00.000Z\": 196.0909090909,\n    \"2018-05-17T10:45:00.000Z\": 212.1818181818,\n    \"2018-05-17T10:50:00.000Z\": 220.5454545455,\n    \"2018-05-17T10:55:00.000Z\": 205.9090909091,\n    \"2018-05-17T11:00:00.000Z\": 199.0909090909,\n    \"2018-05-17T11:05:00.000Z\": 215.0909090909,\n    \"2018-05-17T11:10:00.000Z\": 219.4545454545,\n    \"2018-05-17T11:15:00.000Z\": 207.5454545455,\n    \"2018-05-17T11:20:00.000Z\": 207.0,\n    \"2018-05-17T11:25:00.000Z\": 228.6363636364,\n    \"2018-05-17T11:30:00.000Z\": 231.2727272727,\n    \"2018-05-17T11:35:00.000Z\": 213.0,\n    \"2018-05-17T11:40:00.000Z\": 210.1818181818,\n    \"2018-05-17T11:45:00.000Z\": 225.5454545455,\n    \"2018-05-17T11:50:00.000Z\": 225.9090909091,\n    \"2018-05-17T11:55:00.000Z\": 206.3636363636,\n    \"2018-05-17T12:00:00.000Z\": 198.7272727273,\n    \"2018-05-17T12:05:00.000Z\": 217.2727272727,\n    \"2018-05-17T12:10:00.000Z\": 223.0909090909,\n    \"2018-05-17T12:15:00.000Z\": 210.1818181818,\n    \"2018-05-17T12:20:00.000Z\": 205.0909090909,\n    \"2018-05-17T12:25:00.000Z\": 219.6363636364,\n    \"2018-05-17T12:30:00.000Z\": 222.2727272727,\n    \"2018-05-17T12:35:00.000Z\": 204.4545454545,\n    \"2018-05-17T12:40:00.000Z\": 194.6363636364,\n    \"2018-05-17T12:45:00.000Z\": 210.2727272727,\n    \"2018-05-17T12:50:00.000Z\": 216.5454545455,\n    \"2018-05-17T12:55:00.000Z\": 202.4545454545,\n    \"2018-05-17T13:00:00.000Z\": 186.6363636364,\n    \"2018-05-17T13:05:00.000Z\": 177.4545454545,\n    \"2018-05-17T13:10:00.000Z\": 168.9090909091,\n    \"2018-05-17T13:15:00.000Z\": 164.6363636364,\n    \"2018-05-17T13:20:00.000Z\": 162.7272727273,\n    \"2018-05-17T13:25:00.000Z\": 163.2727272727,\n    \"2018-05-17T13:30:00.000Z\": 162.7272727273,\n    \"2018-05-17T13:35:00.000Z\": 164.0,\n    \"2018-05-17T13:40:00.000Z\": 164.0909090909,\n    \"2018-05-17T13:45:00.000Z\": 163.2727272727,\n    \"2018-05-17T13:50:00.000Z\": 203.5454545455,\n    \"2018-05-17T13:55:00.000Z\": 285.7272727273,\n    \"2018-05-17T14:00:00.000Z\": 294.1818181818,\n    \"2018-05-17T14:05:00.000Z\": 272.8181818182,\n    \"2018-05-17T14:10:00.000Z\": 229.0909090909,\n    \"2018-05-17T14:15:00.000Z\": 191.6363636364,\n    \"2018-05-17T14:20:00.000Z\": 178.1818181818,\n    \"2018-05-17T14:25:00.000Z\": 187.5454545455,\n    \"2018-05-17T14:30:00.000Z\": 196.4545454545,\n    \"2018-05-17T14:35:00.000Z\": 186.4,\n    \"2018-05-17T14:40:00.000Z\": 182.9090909091,\n    \"2018-05-17T14:45:00.000Z\": 195.0,\n    \"2018-05-17T14:50:00.000Z\": 194.4545454545,\n    \"2018-05-17T14:55:00.000Z\": 183.7272727273,\n    \"2018-05-17T15:00:00.000Z\": 184.9090909091,\n    \"2018-05-17T15:05:00.000Z\": 197.9090909091,\n    \"2018-05-17T15:10:00.000Z\": 193.2727272727,\n    \"2018-05-17T15:15:00.000Z\": 180.1,\n    \"2018-05-17T15:20:00.000Z\": 181.2727272727,\n    \"2018-05-17T15:25:00.000Z\": 194.0909090909,\n    \"2018-05-17T15:30:00.000Z\": 187.8181818182,\n    \"2018-05-17T15:35:00.000Z\": 173.9090909091,\n    \"2018-05-17T15:40:00.000Z\": 176.4545454545,\n    \"2018-05-17T15:45:00.000Z\": 189.7,\n    \"2018-05-17T15:50:00.000Z\": 184.7272727273,\n    \"2018-05-17T15:55:00.000Z\": 171.5454545455,\n    \"2018-05-17T16:00:00.000Z\": 177.1818181818,\n    \"2018-05-17T16:05:00.000Z\": 192.3636363636,\n    \"2018-05-17T16:10:00.000Z\": 186.6363636364,\n    \"2018-05-17T16:15:00.000Z\": 175.7272727273,\n    \"2018-05-17T16:20:00.000Z\": 183.4545454545,\n    \"2018-05-17T16:25:00.000Z\": 193.8181818182,\n    \"2018-05-17T16:30:00.000Z\": 189.2727272727,\n    \"2018-05-17T16:35:00.000Z\": 189.2727272727,\n    \"2018-05-17T16:40:00.000Z\": 200.0909090909,\n    \"2018-05-17T16:45:00.000Z\": 192.4545454545,\n    \"2018-05-17T16:50:00.000Z\": 175.2727272727,\n    \"2018-05-17T16:55:00.000Z\": 166.0909090909,\n    \"2018-05-17T17:00:00.000Z\": 178.3636363636,\n    \"2018-05-17T17:05:00.000Z\": 179.2727272727,\n    \"2018-05-17T17:10:00.000Z\": 166.0909090909,\n    \"2018-05-17T17:15:00.000Z\": 161.5454545455,\n    \"2018-05-17T17:20:00.000Z\": 175.2727272727,\n    \"2018-05-17T17:25:00.000Z\": 176.8181818182,\n    \"2018-05-17T17:30:00.000Z\": 164.0,\n    \"2018-05-17T17:35:00.000Z\": 157.3636363636,\n    \"2018-05-17T17:40:00.000Z\": 168.6363636364,\n    \"2018-05-17T17:45:00.000Z\": 175.2727272727,\n    \"2018-05-17T17:50:00.000Z\": 164.0,\n    \"2018-05-17T17:55:00.000Z\": 156.4545454545,\n    \"2018-05-17T18:00:00.000Z\": 164.0,\n    \"2018-05-17T18:05:00.000Z\": 175.3636363636,\n    \"2018-05-17T18:10:00.000Z\": 167.1818181818,\n    \"2018-05-17T18:15:00.000Z\": 156.9090909091,\n    \"2018-05-17T18:20:00.000Z\": 161.4545454545,\n    \"2018-05-17T18:25:00.000Z\": 174.7272727273,\n    \"2018-05-17T18:30:00.000Z\": 170.7,\n    \"2018-05-17T18:35:00.000Z\": 159.3636363636,\n    \"2018-05-17T18:40:00.000Z\": 157.5454545455,\n    \"2018-05-17T18:45:00.000Z\": 169.7272727273,\n    \"2018-05-17T18:50:00.000Z\": 173.0909090909,\n    \"2018-05-17T18:55:00.000Z\": 163.4,\n    \"2018-05-17T19:00:00.000Z\": 158.0,\n    \"2018-05-17T19:05:00.000Z\": 168.1818181818,\n    \"2018-05-17T19:10:00.000Z\": 180.6363636364,\n    \"2018-05-17T19:15:00.000Z\": 172.7272727273,\n    \"2018-05-17T19:20:00.000Z\": 162.0909090909,\n    \"2018-05-17T19:25:00.000Z\": 162.6363636364,\n    \"2018-05-17T19:30:00.000Z\": 178.9090909091,\n    \"2018-05-17T19:35:00.000Z\": 179.5454545455,\n    \"2018-05-17T19:40:00.000Z\": 166.3636363636,\n    \"2018-05-17T19:45:00.000Z\": 158.0,\n    \"2018-05-17T19:50:00.000Z\": 165.6363636364,\n    \"2018-05-17T19:55:00.000Z\": 175.5454545455,\n    \"2018-05-17T20:00:00.000Z\": 167.2727272727,\n    \"2018-05-17T20:05:00.000Z\": 158.7272727273,\n    \"2018-05-17T20:10:00.000Z\": 157.9090909091,\n    \"2018-05-17T20:15:00.000Z\": 173.3636363636,\n    \"2018-05-17T20:20:00.000Z\": 173.3636363636,\n    \"2018-05-17T20:25:00.000Z\": 160.7272727273,\n    \"2018-05-17T20:30:00.000Z\": 153.7272727273,\n    \"2018-05-17T20:35:00.000Z\": 159.5454545455,\n    \"2018-05-17T20:40:00.000Z\": 174.0909090909,\n    \"2018-05-17T20:45:00.000Z\": 169.7272727273,\n    \"2018-05-17T20:50:00.000Z\": 160.0,\n    \"2018-05-17T20:55:00.000Z\": 157.1,\n    \"2018-05-17T21:00:00.000Z\": 171.0,\n    \"2018-05-17T21:05:00.000Z\": 177.7272727273,\n    \"2018-05-17T21:10:00.000Z\": 168.9090909091,\n    \"2018-05-17T21:15:00.000Z\": 158.6363636364,\n    \"2018-05-17T21:20:00.000Z\": 161.9090909091,\n    \"2018-05-17T21:25:00.000Z\": 178.0909090909,\n    \"2018-05-17T21:30:00.000Z\": 174.6363636364,\n    \"2018-05-17T21:35:00.000Z\": 161.4545454545,\n    \"2018-05-17T21:40:00.000Z\": 158.8181818182,\n    \"2018-05-17T21:45:00.000Z\": 172.7272727273,\n    \"2018-05-17T21:50:00.000Z\": 178.3636363636,\n    \"2018-05-17T21:55:00.000Z\": 168.3636363636,\n    \"2018-05-17T22:00:00.000Z\": 159.8181818182,\n    \"2018-05-17T22:05:00.000Z\": 168.0,\n    \"2018-05-17T22:10:00.000Z\": 179.6363636364,\n    \"2018-05-17T22:15:00.000Z\": 171.5454545455,\n    \"2018-05-17T22:20:00.000Z\": 160.4545454545,\n    \"2018-05-17T22:25:00.000Z\": 163.4545454545,\n    \"2018-05-17T22:30:00.000Z\": 180.0,\n    \"2018-05-17T22:35:00.000Z\": 180.4545454545,\n    \"2018-05-17T22:40:00.000Z\": 169.1818181818,\n    \"2018-05-17T22:45:00.000Z\": 166.1818181818,\n    \"2018-05-17T22:50:00.000Z\": 181.2727272727,\n    \"2018-05-17T22:55:00.000Z\": 183.8181818182,\n    \"2018-05-17T23:00:00.000Z\": 172.7272727273,\n    \"2018-05-17T23:05:00.000Z\": 167.4545454545,\n    \"2018-05-17T23:10:00.000Z\": 182.3636363636,\n    \"2018-05-17T23:15:00.000Z\": 184.6363636364,\n    \"2018-05-17T23:20:00.000Z\": 172.2727272727,\n    \"2018-05-17T23:25:00.000Z\": 167.9090909091,\n    \"2018-05-17T23:30:00.000Z\": 183.8181818182,\n    \"2018-05-17T23:35:00.000Z\": 189.4545454545,\n    \"2018-05-17T23:40:00.000Z\": 181.3636363636,\n    \"2018-05-17T23:45:00.000Z\": 167.3,\n    \"2018-05-17T23:50:00.000Z\": 174.9090909091,\n    \"2018-05-17T23:55:00.000Z\": 184.2727272727,\n    \"2018-05-18T00:00:00.000Z\": 176.5454545455,\n    \"2018-05-18T00:05:00.000Z\": 163.5454545455,\n    \"2018-05-18T00:10:00.000Z\": 161.0909090909,\n    \"2018-05-18T00:15:00.000Z\": 176.5454545455,\n    \"2018-05-18T00:20:00.000Z\": 179.6,\n    \"2018-05-18T00:25:00.000Z\": 165.9090909091,\n    \"2018-05-18T00:30:00.000Z\": 157.9090909091,\n    \"2018-05-18T00:35:00.000Z\": 168.6363636364,\n    \"2018-05-18T00:40:00.000Z\": 175.6363636364,\n    \"2018-05-18T00:45:00.000Z\": 165.7272727273,\n    \"2018-05-18T00:50:00.000Z\": 156.0,\n    \"2018-05-18T00:55:00.000Z\": 156.9090909091,\n    \"2018-05-18T01:00:00.000Z\": 169.2727272727,\n    \"2018-05-18T01:05:00.000Z\": 167.0909090909,\n    \"2018-05-18T01:10:00.000Z\": 151.2727272727,\n    \"2018-05-18T01:15:00.000Z\": 153.0,\n    \"2018-05-18T01:20:00.000Z\": 153.9090909091,\n    \"2018-05-18T01:25:00.000Z\": 173.6363636364,\n    \"2018-05-18T01:30:00.000Z\": 173.8181818182,\n    \"2018-05-18T01:35:00.000Z\": 163.2727272727,\n    \"2018-05-18T01:40:00.000Z\": 152.5454545455,\n    \"2018-05-18T01:45:00.000Z\": 160.0909090909,\n    \"2018-05-18T01:50:00.000Z\": 164.8181818182,\n    \"2018-05-18T01:55:00.000Z\": 157.7272727273,\n    \"2018-05-18T02:00:00.000Z\": 151.6363636364,\n    \"2018-05-18T02:05:00.000Z\": 151.0,\n    \"2018-05-18T02:10:00.000Z\": 157.1818181818,\n    \"2018-05-18T02:15:00.000Z\": 156.6363636364,\n    \"2018-05-18T02:20:00.000Z\": 149.5454545455,\n    \"2018-05-18T02:25:00.000Z\": 136.9090909091,\n    \"2018-05-18T02:30:00.000Z\": 122.3636363636,\n    \"2018-05-18T02:35:00.000Z\": 135.8181818182,\n    \"2018-05-18T02:40:00.000Z\": 144.8181818182,\n    \"2018-05-18T02:45:00.000Z\": 141.5454545455,\n    \"2018-05-18T02:50:00.000Z\": 128.0,\n    \"2018-05-18T02:55:00.000Z\": 115.4545454545,\n    \"2018-05-18T03:00:00.000Z\": 105.7272727273,\n    \"2018-05-18T03:05:00.000Z\": 124.7272727273,\n    \"2018-05-18T03:10:00.000Z\": 134.8181818182,\n    \"2018-05-18T03:15:00.000Z\": 127.4545454545,\n    \"2018-05-18T03:20:00.000Z\": 116.0909090909,\n    \"2018-05-18T03:25:00.000Z\": 157.3636363636,\n    \"2018-05-18T03:30:00.000Z\": 265.2727272727,\n    \"2018-05-18T03:35:00.000Z\": 162.3636363636,\n    \"2018-05-18T03:40:00.000Z\": 122.3636363636,\n    \"2018-05-18T03:45:00.000Z\": 127.3636363636,\n    \"2018-05-18T03:50:00.000Z\": 115.8181818182,\n    \"2018-05-18T03:55:00.000Z\": 239.7272727273,\n    \"2018-05-18T04:00:00.000Z\": 338.2727272727,\n    \"2018-05-18T04:05:00.000Z\": 351.5454545455,\n    \"2018-05-18T04:10:00.000Z\": 223.7272727273,\n    \"2018-05-18T04:15:00.000Z\": 116.8181818182,\n    \"2018-05-18T04:20:00.000Z\": 123.4545454545,\n    \"2018-05-18T04:25:00.000Z\": 307.9090909091,\n    \"2018-05-18T04:30:00.000Z\": 363.0,\n    \"2018-05-18T04:35:00.000Z\": 385.9090909091,\n    \"2018-05-18T04:40:00.000Z\": 210.6363636364,\n    \"2018-05-18T04:45:00.000Z\": 124.2727272727,\n    \"2018-05-18T04:50:00.000Z\": 331.4545454545,\n    \"2018-05-18T04:55:00.000Z\": 260.6363636364,\n    \"2018-05-18T05:00:00.000Z\": 319.6363636364,\n    \"2018-05-18T05:05:00.000Z\": 386.0,\n    \"2018-05-18T05:10:00.000Z\": 324.2727272727,\n    \"2018-05-18T05:15:00.000Z\": 95.2727272727,\n    \"2018-05-18T05:20:00.000Z\": 93.5454545455,\n    \"2018-05-18T05:25:00.000Z\": 93.4545454545,\n    \"2018-05-18T05:30:00.000Z\": 208.5454545455,\n    \"2018-05-18T05:35:00.000Z\": 381.6363636364,\n    \"2018-05-18T05:40:00.000Z\": 384.8181818182,\n    \"2018-05-18T05:45:00.000Z\": 350.9090909091,\n    \"2018-05-18T05:50:00.000Z\": 180.2727272727,\n    \"2018-05-18T05:55:00.000Z\": 92.9090909091,\n    \"2018-05-18T06:00:00.000Z\": 91.4,\n    \"2018-05-18T06:05:00.000Z\": 89.7272727273,\n    \"2018-05-18T06:10:00.000Z\": 90.0,\n    \"2018-05-18T06:15:00.000Z\": 123.6363636364,\n    \"2018-05-18T06:20:00.000Z\": 389.1818181818,\n    \"2018-05-18T06:25:00.000Z\": 415.5454545455,\n    \"2018-05-18T06:30:00.000Z\": 184.3636363636,\n    \"2018-05-18T06:35:00.000Z\": 90.2727272727,\n    \"2018-05-18T06:40:00.000Z\": 89.4,\n    \"2018-05-18T06:45:00.000Z\": 88.3333333333,\n    \"2018-05-18T06:50:00.000Z\": 88.8181818182,\n    \"2018-05-18T06:55:00.000Z\": 90.1,\n    \"2018-05-18T07:00:00.000Z\": 139.6363636364,\n    \"2018-05-18T07:05:00.000Z\": 334.4545454545,\n    \"2018-05-18T07:10:00.000Z\": 407.8181818182,\n    \"2018-05-18T07:15:00.000Z\": 154.4545454545,\n    \"2018-05-18T07:20:00.000Z\": 92.8181818182,\n    \"2018-05-18T07:25:00.000Z\": 91.2727272727,\n    \"2018-05-18T07:30:00.000Z\": 89.8,\n    \"2018-05-18T07:35:00.000Z\": 89.0909090909,\n    \"2018-05-18T07:40:00.000Z\": 90.9090909091,\n    \"2018-05-18T07:45:00.000Z\": 110.0909090909,\n    \"2018-05-18T07:50:00.000Z\": 279.5454545455,\n    \"2018-05-18T07:55:00.000Z\": 218.0909090909,\n    \"2018-05-18T08:00:00.000Z\": 94.1818181818,\n    \"2018-05-18T08:05:00.000Z\": 92.6363636364,\n    \"2018-05-18T08:10:00.000Z\": 91.2727272727,\n    \"2018-05-18T08:15:00.000Z\": 90.6363636364,\n    \"2018-05-18T08:20:00.000Z\": 92.0,\n    \"2018-05-18T08:25:00.000Z\": 161.1818181818,\n    \"2018-05-18T08:30:00.000Z\": 391.3636363636,\n    \"2018-05-18T08:35:00.000Z\": 395.0909090909,\n    \"2018-05-18T08:40:00.000Z\": 366.8181818182,\n    \"2018-05-18T08:45:00.000Z\": 350.75,\n    \"2018-05-18T08:50:00.000Z\": 219.0,\n    \"2018-05-18T08:55:00.000Z\": 345.7,\n    \"2018-05-18T09:00:00.000Z\": 212.4545454545,\n    \"2018-05-18T09:05:00.000Z\": 121.7272727273,\n    \"2018-05-18T09:10:00.000Z\": 123.0909090909,\n    \"2018-05-18T09:15:00.000Z\": 247.0909090909,\n    \"2018-05-18T09:20:00.000Z\": 279.2727272727,\n    \"2018-05-18T09:25:00.000Z\": 148.2727272727,\n    \"2018-05-18T09:30:00.000Z\": 145.9090909091,\n    \"2018-05-18T09:35:00.000Z\": 140.4545454545,\n    \"2018-05-18T09:40:00.000Z\": 108.5454545455,\n    \"2018-05-18T09:45:00.000Z\": 116.5454545455,\n    \"2018-05-18T09:50:00.000Z\": 141.0,\n    \"2018-05-18T09:55:00.000Z\": 141.4545454545,\n    \"2018-05-18T10:00:00.000Z\": 123.0909090909,\n    \"2018-05-18T10:05:00.000Z\": 141.7272727273,\n    \"2018-05-18T10:10:00.000Z\": 146.3,\n    \"2018-05-18T10:15:00.000Z\": 144.6363636364,\n    \"2018-05-18T10:20:00.000Z\": 154.2727272727,\n    \"2018-05-18T10:25:00.000Z\": 161.5454545455,\n    \"2018-05-18T10:30:00.000Z\": 158.5454545455,\n    \"2018-05-18T10:35:00.000Z\": 171.6363636364,\n    \"2018-05-18T10:40:00.000Z\": 208.8181818182,\n    \"2018-05-18T10:45:00.000Z\": 208.2727272727,\n    \"2018-05-18T10:50:00.000Z\": 203.3636363636,\n    \"2018-05-18T10:55:00.000Z\": 169.3636363636,\n    \"2018-05-18T11:00:00.000Z\": 257.0909090909,\n    \"2018-05-18T11:05:00.000Z\": 219.8181818182,\n    \"2018-05-18T11:10:00.000Z\": 214.2727272727,\n    \"2018-05-18T11:15:00.000Z\": 127.1818181818,\n    \"2018-05-18T11:20:00.000Z\": 3.8181818182,\n    \"2018-05-18T11:25:00.000Z\": 3.0,\n    \"2018-05-18T11:30:00.000Z\": 3.3636363636,\n    \"2018-05-18T11:35:00.000Z\": 2.8181818182,\n    \"2018-05-18T11:40:00.000Z\": 207.0909090909,\n    \"2018-05-18T11:45:00.000Z\": 787.0,\n    \"2018-05-18T11:50:00.000Z\": 456.0909090909,\n    \"2018-05-18T11:55:00.000Z\": 273.8181818182,\n    \"2018-05-18T12:00:00.000Z\": 228.5454545455,\n    \"2018-05-18T12:05:00.000Z\": 225.0,\n    \"2018-05-18T12:10:00.000Z\": 214.4545454545,\n    \"2018-05-18T12:15:00.000Z\": 209.6363636364,\n    \"2018-05-18T12:20:00.000Z\": 221.3636363636,\n    \"2018-05-18T12:25:00.000Z\": 221.0,\n    \"2018-05-18T12:30:00.000Z\": 208.6363636364,\n    \"2018-05-18T12:35:00.000Z\": 217.2727272727,\n    \"2018-05-18T12:40:00.000Z\": 224.0,\n    \"2018-05-18T12:45:00.000Z\": 206.8181818182,\n    \"2018-05-18T12:50:00.000Z\": 197.4545454545,\n    \"2018-05-18T12:55:00.000Z\": 209.5454545455,\n    \"2018-05-18T13:00:00.000Z\": 206.3636363636,\n    \"2018-05-18T13:05:00.000Z\": 191.1818181818,\n    \"2018-05-18T13:10:00.000Z\": 196.9090909091,\n    \"2018-05-18T13:15:00.000Z\": 205.6363636364,\n    \"2018-05-18T13:20:00.000Z\": 194.9090909091,\n    \"2018-05-18T13:25:00.000Z\": 188.5454545455,\n    \"2018-05-18T13:30:00.000Z\": 203.9090909091,\n    \"2018-05-18T13:35:00.000Z\": 205.7272727273,\n    \"2018-05-18T13:40:00.000Z\": 192.6363636364,\n    \"2018-05-18T13:45:00.000Z\": 196.9,\n    \"2018-05-18T13:50:00.000Z\": 205.2,\n    \"2018-05-18T13:55:00.000Z\": 195.0,\n    \"2018-05-18T14:00:00.000Z\": 184.2727272727,\n    \"2018-05-18T14:05:00.000Z\": 196.8181818182,\n    \"2018-05-18T14:10:00.000Z\": 202.4444444444,\n    \"2018-05-18T14:15:00.000Z\": 190.4545454545,\n    \"2018-05-18T14:20:00.000Z\": 182.1818181818,\n    \"2018-05-18T14:25:00.000Z\": 194.0,\n    \"2018-05-18T14:30:00.000Z\": 196.6363636364,\n    \"2018-05-18T14:35:00.000Z\": 184.4545454545,\n    \"2018-05-18T14:40:00.000Z\": 184.1818181818,\n    \"2018-05-18T14:45:00.000Z\": 195.1818181818,\n    \"2018-05-18T14:50:00.000Z\": 189.0,\n    \"2018-05-18T14:55:00.000Z\": 178.0,\n    \"2018-05-18T15:00:00.000Z\": 183.0909090909,\n    \"2018-05-18T15:05:00.000Z\": 193.3636363636,\n    \"2018-05-18T15:10:00.000Z\": 185.8181818182,\n    \"2018-05-18T15:15:00.000Z\": 176.1818181818,\n    \"2018-05-18T15:20:00.000Z\": 186.3636363636,\n    \"2018-05-18T15:25:00.000Z\": 196.0909090909,\n    \"2018-05-18T15:30:00.000Z\": 186.0,\n    \"2018-05-18T15:35:00.000Z\": 180.0909090909,\n    \"2018-05-18T15:40:00.000Z\": 193.9090909091,\n    \"2018-05-18T15:45:00.000Z\": 195.0909090909,\n    \"2018-05-18T15:50:00.000Z\": 185.6363636364,\n    \"2018-05-18T15:55:00.000Z\": 189.1818181818,\n    \"2018-05-18T16:00:00.000Z\": 203.0,\n    \"2018-05-18T16:05:00.000Z\": 197.1818181818,\n    \"2018-05-18T16:10:00.000Z\": 182.6,\n    \"2018-05-18T16:15:00.000Z\": 185.0,\n    \"2018-05-18T16:20:00.000Z\": 196.9090909091,\n    \"2018-05-18T16:25:00.000Z\": 190.3636363636,\n    \"2018-05-18T16:30:00.000Z\": 178.2727272727,\n    \"2018-05-18T16:35:00.000Z\": 184.0,\n    \"2018-05-18T16:40:00.000Z\": 191.8181818182,\n    \"2018-05-18T16:45:00.000Z\": 183.3636363636,\n    \"2018-05-18T16:50:00.000Z\": 170.2727272727,\n    \"2018-05-18T16:55:00.000Z\": 175.7272727273,\n    \"2018-05-18T17:00:00.000Z\": 183.7272727273,\n    \"2018-05-18T17:05:00.000Z\": 174.3636363636,\n    \"2018-05-18T17:10:00.000Z\": 165.0,\n    \"2018-05-18T17:15:00.000Z\": 174.8181818182,\n    \"2018-05-18T17:20:00.000Z\": 180.3636363636,\n    \"2018-05-18T17:25:00.000Z\": 168.4545454545,\n    \"2018-05-18T17:30:00.000Z\": 163.9090909091,\n    \"2018-05-18T17:35:00.000Z\": 176.3636363636,\n    \"2018-05-18T17:40:00.000Z\": 175.5454545455,\n    \"2018-05-18T17:45:00.000Z\": 163.6363636364,\n    \"2018-05-18T17:50:00.000Z\": 163.4545454545,\n    \"2018-05-18T17:55:00.000Z\": 176.7272727273,\n    \"2018-05-18T18:00:00.000Z\": 173.5454545455,\n    \"2018-05-18T18:05:00.000Z\": 161.3636363636,\n    \"2018-05-18T18:10:00.000Z\": 158.6,\n    \"2018-05-18T18:15:00.000Z\": 170.8181818182,\n    \"2018-05-18T18:20:00.000Z\": 171.7272727273,\n    \"2018-05-18T18:25:00.000Z\": 161.2727272727,\n    \"2018-05-18T18:30:00.000Z\": 160.1818181818,\n    \"2018-05-18T18:35:00.000Z\": 173.5,\n    \"2018-05-18T18:40:00.000Z\": 173.0,\n    \"2018-05-18T18:45:00.000Z\": 161.0,\n    \"2018-05-18T18:50:00.000Z\": 158.7272727273,\n    \"2018-05-18T18:55:00.000Z\": 172.0,\n    \"2018-05-18T19:00:00.000Z\": 172.2727272727,\n    \"2018-05-18T19:05:00.000Z\": 160.3636363636,\n    \"2018-05-18T19:10:00.000Z\": 159.6363636364,\n    \"2018-05-18T19:15:00.000Z\": 175.7272727273,\n    \"2018-05-18T19:20:00.000Z\": 175.9090909091,\n    \"2018-05-18T19:25:00.000Z\": 164.7272727273,\n    \"2018-05-18T19:30:00.000Z\": 162.5,\n    \"2018-05-18T19:35:00.000Z\": 178.2727272727,\n    \"2018-05-18T19:40:00.000Z\": 178.8181818182,\n    \"2018-05-18T19:45:00.000Z\": 167.6363636364,\n    \"2018-05-18T19:50:00.000Z\": 161.8,\n    \"2018-05-18T19:55:00.000Z\": 173.2727272727,\n    \"2018-05-18T20:00:00.000Z\": 175.7272727273,\n    \"2018-05-18T20:05:00.000Z\": 164.0909090909,\n    \"2018-05-18T20:10:00.000Z\": 156.4545454545,\n    \"2018-05-18T20:15:00.000Z\": 165.8181818182,\n    \"2018-05-18T20:20:00.000Z\": 175.5454545455,\n    \"2018-05-18T20:25:00.000Z\": 168.0,\n    \"2018-05-18T20:30:00.000Z\": 161.4545454545,\n    \"2018-05-18T20:35:00.000Z\": 173.5454545455,\n    \"2018-05-18T20:40:00.000Z\": 180.2727272727,\n    \"2018-05-18T20:45:00.000Z\": 169.8181818182,\n    \"2018-05-18T20:50:00.000Z\": 160.4545454545,\n    \"2018-05-18T20:55:00.000Z\": 171.8181818182,\n    \"2018-05-18T21:00:00.000Z\": 182.7272727273,\n    \"2018-05-18T21:05:00.000Z\": 174.5454545455,\n    \"2018-05-18T21:10:00.000Z\": 163.0,\n    \"2018-05-18T21:15:00.000Z\": 172.3636363636,\n    \"2018-05-18T21:20:00.000Z\": 182.4545454545,\n    \"2018-05-18T21:25:00.000Z\": 173.8181818182,\n    \"2018-05-18T21:30:00.000Z\": 160.4545454545,\n    \"2018-05-18T21:35:00.000Z\": 163.9,\n    \"2018-05-18T21:40:00.000Z\": 178.2727272727,\n    \"2018-05-18T21:45:00.000Z\": 174.3636363636,\n    \"2018-05-18T21:50:00.000Z\": 161.7272727273,\n    \"2018-05-18T21:55:00.000Z\": 161.8181818182,\n    \"2018-05-18T22:00:00.000Z\": 177.6363636364,\n    \"2018-05-18T22:05:00.000Z\": 178.2727272727,\n    \"2018-05-18T22:10:00.000Z\": 165.4545454545,\n    \"2018-05-18T22:15:00.000Z\": 158.7272727273,\n    \"2018-05-18T22:20:00.000Z\": 173.2727272727,\n    \"2018-05-18T22:25:00.000Z\": 180.0,\n    \"2018-05-18T22:30:00.000Z\": 170.6363636364,\n    \"2018-05-18T22:35:00.000Z\": 165.0,\n    \"2018-05-18T22:40:00.000Z\": 178.2727272727,\n    \"2018-05-18T22:45:00.000Z\": 181.1818181818,\n    \"2018-05-18T22:50:00.000Z\": 169.3636363636,\n    \"2018-05-18T22:55:00.000Z\": 162.2222222222,\n    \"2018-05-18T23:00:00.000Z\": 175.0909090909,\n    \"2018-05-18T23:05:00.000Z\": 181.9090909091,\n    \"2018-05-18T23:10:00.000Z\": 172.5454545455,\n    \"2018-05-18T23:15:00.000Z\": 163.0909090909,\n    \"2018-05-18T23:20:00.000Z\": 175.0,\n    \"2018-05-18T23:25:00.000Z\": 181.2,\n    \"2018-05-18T23:30:00.000Z\": 171.1818181818,\n    \"2018-05-18T23:35:00.000Z\": 160.5454545455,\n    \"2018-05-18T23:40:00.000Z\": 171.0,\n    \"2018-05-18T23:45:00.000Z\": 179.3636363636,\n    \"2018-05-18T23:50:00.000Z\": 169.3,\n    \"2018-05-18T23:55:00.000Z\": 158.0,\n    \"2018-05-19T00:00:00.000Z\": 162.1818181818,\n    \"2018-05-19T00:05:00.000Z\": 176.6363636364,\n    \"2018-05-19T00:10:00.000Z\": 170.0,\n    \"2018-05-19T00:15:00.000Z\": 159.0909090909,\n    \"2018-05-19T00:20:00.000Z\": 153.7272727273,\n    \"2018-05-19T00:25:00.000Z\": 162.8,\n    \"2018-05-19T00:30:00.000Z\": 168.9090909091,\n    \"2018-05-19T00:35:00.000Z\": 159.1818181818,\n    \"2018-05-19T00:40:00.000Z\": 150.0909090909,\n    \"2018-05-19T00:45:00.000Z\": 148.1818181818,\n    \"2018-05-19T00:50:00.000Z\": 159.0,\n    \"2018-05-19T00:55:00.000Z\": 160.7272727273,\n    \"2018-05-19T01:00:00.000Z\": 149.9090909091,\n    \"2018-05-19T01:05:00.000Z\": 135.7272727273,\n    \"2018-05-19T01:10:00.000Z\": 139.2727272727,\n    \"2018-05-19T01:15:00.000Z\": 154.7272727273,\n    \"2018-05-19T01:20:00.000Z\": 154.3636363636,\n    \"2018-05-19T01:25:00.000Z\": 145.3636363636,\n    \"2018-05-19T01:30:00.000Z\": 136.1818181818,\n    \"2018-05-19T01:35:00.000Z\": 144.8181818182,\n    \"2018-05-19T01:40:00.000Z\": 157.3636363636,\n    \"2018-05-19T01:45:00.000Z\": 153.1,\n    \"2018-05-19T01:50:00.000Z\": 141.6363636364,\n    \"2018-05-19T01:55:00.000Z\": 124.6363636364,\n    \"2018-05-19T02:00:00.000Z\": 132.0,\n    \"2018-05-19T02:05:00.000Z\": 154.6363636364,\n    \"2018-05-19T02:10:00.000Z\": 151.0,\n    \"2018-05-19T02:15:00.000Z\": 138.0,\n    \"2018-05-19T02:20:00.000Z\": 119.0,\n    \"2018-05-19T02:25:00.000Z\": 116.0,\n    \"2018-05-19T02:30:00.000Z\": 138.1818181818,\n    \"2018-05-19T02:35:00.000Z\": 150.2727272727,\n    \"2018-05-19T02:40:00.000Z\": 134.9,\n    \"2018-05-19T02:45:00.000Z\": 113.7272727273,\n    \"2018-05-19T02:50:00.000Z\": 108.4545454545,\n    \"2018-05-19T02:55:00.000Z\": 107.7272727273,\n    \"2018-05-19T03:00:00.000Z\": 123.4545454545,\n    \"2018-05-19T03:05:00.000Z\": 126.1818181818,\n    \"2018-05-19T03:10:00.000Z\": 116.8181818182,\n    \"2018-05-19T03:15:00.000Z\": 104.7,\n    \"2018-05-19T03:20:00.000Z\": 97.7272727273,\n    \"2018-05-19T03:25:00.000Z\": 96.9090909091,\n    \"2018-05-19T03:30:00.000Z\": 115.4545454545,\n    \"2018-05-19T03:35:00.000Z\": 123.6,\n    \"2018-05-19T03:40:00.000Z\": 117.5454545455,\n    \"2018-05-19T03:45:00.000Z\": 102.0,\n    \"2018-05-19T03:50:00.000Z\": 93.9090909091,\n    \"2018-05-19T03:55:00.000Z\": 89.5454545455,\n    \"2018-05-19T04:00:00.000Z\": 93.1818181818,\n    \"2018-05-19T04:05:00.000Z\": 109.6363636364,\n    \"2018-05-19T04:10:00.000Z\": 115.2727272727,\n    \"2018-05-19T04:15:00.000Z\": 109.3636363636,\n    \"2018-05-19T04:20:00.000Z\": 94.0909090909,\n    \"2018-05-19T04:25:00.000Z\": 85.4545454545,\n    \"2018-05-19T04:30:00.000Z\": 79.7272727273,\n    \"2018-05-19T04:35:00.000Z\": 82.2727272727,\n    \"2018-05-19T04:40:00.000Z\": 103.0,\n    \"2018-05-19T04:45:00.000Z\": 111.0,\n    \"2018-05-19T04:50:00.000Z\": 102.9090909091,\n    \"2018-05-19T04:55:00.000Z\": 92.0,\n    \"2018-05-19T05:00:00.000Z\": 82.2727272727,\n    \"2018-05-19T05:05:00.000Z\": 125.6363636364,\n    \"2018-05-19T05:10:00.000Z\": 148.8181818182,\n    \"2018-05-19T05:15:00.000Z\": 95.7272727273,\n    \"2018-05-19T05:20:00.000Z\": 104.0909090909,\n    \"2018-05-19T05:25:00.000Z\": 108.1,\n    \"2018-05-19T05:30:00.000Z\": 100.0,\n    \"2018-05-19T05:35:00.000Z\": 82.6363636364,\n    \"2018-05-19T05:40:00.000Z\": 160.0909090909,\n    \"2018-05-19T05:45:00.000Z\": 210.7272727273,\n    \"2018-05-19T05:50:00.000Z\": 211.6363636364,\n    \"2018-05-19T05:55:00.000Z\": 191.9090909091,\n    \"2018-05-19T06:00:00.000Z\": 117.5454545455,\n    \"2018-05-19T06:05:00.000Z\": 109.1818181818,\n    \"2018-05-19T06:10:00.000Z\": 105.2727272727,\n    \"2018-05-19T06:15:00.000Z\": 89.7,\n    \"2018-05-19T06:20:00.000Z\": 160.5454545455,\n    \"2018-05-19T06:25:00.000Z\": 210.0909090909,\n    \"2018-05-19T06:30:00.000Z\": 234.0909090909,\n    \"2018-05-19T06:35:00.000Z\": 262.5454545455,\n    \"2018-05-19T06:40:00.000Z\": 262.1818181818,\n    \"2018-05-19T06:45:00.000Z\": 101.7272727273,\n    \"2018-05-19T06:50:00.000Z\": 103.7272727273,\n    \"2018-05-19T06:55:00.000Z\": 98.3636363636,\n    \"2018-05-19T07:00:00.000Z\": 84.7272727273,\n    \"2018-05-19T07:05:00.000Z\": 201.6363636364,\n    \"2018-05-19T07:10:00.000Z\": 261.4545454545,\n    \"2018-05-19T07:15:00.000Z\": 275.0,\n    \"2018-05-19T07:20:00.000Z\": 282.0,\n    \"2018-05-19T07:25:00.000Z\": 250.4545454545,\n    \"2018-05-19T07:30:00.000Z\": 88.2727272727,\n    \"2018-05-19T07:35:00.000Z\": 94.1818181818,\n    \"2018-05-19T07:40:00.000Z\": 75.6363636364,\n    \"2018-05-19T07:45:00.000Z\": 90.8181818182,\n    \"2018-05-19T07:50:00.000Z\": 220.5454545455,\n    \"2018-05-19T07:55:00.000Z\": 254.2727272727,\n    \"2018-05-19T08:00:00.000Z\": 266.4545454545,\n    \"2018-05-19T08:05:00.000Z\": 271.2727272727,\n    \"2018-05-19T08:10:00.000Z\": 181.0,\n    \"2018-05-19T08:15:00.000Z\": 86.7272727273,\n    \"2018-05-19T08:20:00.000Z\": 98.2727272727,\n    \"2018-05-19T08:25:00.000Z\": 84.7272727273,\n    \"2018-05-19T08:30:00.000Z\": 91.8181818182,\n    \"2018-05-19T08:35:00.000Z\": 201.6363636364,\n    \"2018-05-19T08:40:00.000Z\": 234.0,\n    \"2018-05-19T08:45:00.000Z\": 255.0909090909,\n    \"2018-05-19T08:50:00.000Z\": 144.2727272727,\n    \"2018-05-19T08:55:00.000Z\": 93.4545454545,\n    \"2018-05-19T09:00:00.000Z\": 81.3636363636,\n    \"2018-05-19T09:05:00.000Z\": 71.0,\n    \"2018-05-19T09:10:00.000Z\": 91.1818181818,\n    \"2018-05-19T09:15:00.000Z\": 208.0,\n    \"2018-05-19T09:20:00.000Z\": 231.2727272727,\n    \"2018-05-19T09:25:00.000Z\": 155.7272727273,\n    \"2018-05-19T09:30:00.000Z\": 82.4545454545,\n    \"2018-05-19T09:35:00.000Z\": 85.9090909091,\n    \"2018-05-19T09:40:00.000Z\": 74.0909090909,\n    \"2018-05-19T09:45:00.000Z\": 70.5454545455,\n    \"2018-05-19T09:50:00.000Z\": 70.8181818182,\n    \"2018-05-19T09:55:00.000Z\": 71.4545454545,\n    \"2018-05-19T10:00:00.000Z\": 74.9090909091,\n    \"2018-05-19T10:05:00.000Z\": 72.1818181818,\n    \"2018-05-19T10:10:00.000Z\": 65.4545454545,\n    \"2018-05-19T10:15:00.000Z\": 74.2727272727,\n    \"2018-05-19T10:20:00.000Z\": 79.1818181818,\n    \"2018-05-19T10:25:00.000Z\": 80.8181818182,\n    \"2018-05-19T10:30:00.000Z\": 96.6363636364,\n    \"2018-05-19T10:35:00.000Z\": 95.4545454545,\n    \"2018-05-19T10:40:00.000Z\": 77.0,\n    \"2018-05-19T10:45:00.000Z\": 83.7272727273,\n    \"2018-05-19T10:50:00.000Z\": 86.2,\n    \"2018-05-19T10:55:00.000Z\": 123.9090909091,\n    \"2018-05-19T11:00:00.000Z\": 155.1818181818,\n    \"2018-05-19T11:05:00.000Z\": 150.8181818182,\n    \"2018-05-19T11:10:00.000Z\": 148.3636363636,\n    \"2018-05-19T11:15:00.000Z\": 161.0,\n    \"2018-05-19T11:20:00.000Z\": 171.8181818182,\n    \"2018-05-19T11:25:00.000Z\": 166.6363636364,\n    \"2018-05-19T11:30:00.000Z\": 166.7272727273,\n    \"2018-05-19T11:35:00.000Z\": 186.0,\n    \"2018-05-19T11:40:00.000Z\": 190.7272727273,\n    \"2018-05-19T11:45:00.000Z\": 181.5454545455,\n    \"2018-05-19T11:50:00.000Z\": 183.5454545455,\n    \"2018-05-19T11:55:00.000Z\": 202.0909090909,\n    \"2018-05-19T12:00:00.000Z\": 201.1,\n    \"2018-05-19T12:05:00.000Z\": 192.5454545455,\n    \"2018-05-19T12:10:00.000Z\": 206.5454545455,\n    \"2018-05-19T12:15:00.000Z\": 215.7272727273,\n    \"2018-05-19T12:20:00.000Z\": 206.7272727273,\n    \"2018-05-19T12:25:00.000Z\": 206.9090909091,\n    \"2018-05-19T12:30:00.000Z\": 221.5454545455,\n    \"2018-05-19T12:35:00.000Z\": 215.9090909091,\n    \"2018-05-19T12:40:00.000Z\": 207.8181818182,\n    \"2018-05-19T12:45:00.000Z\": 218.8181818182,\n    \"2018-05-19T12:50:00.000Z\": 222.7272727273,\n    \"2018-05-19T12:55:00.000Z\": 209.2727272727,\n    \"2018-05-19T13:00:00.000Z\": 213.4545454545,\n    \"2018-05-19T13:05:00.000Z\": 226.4545454545,\n    \"2018-05-19T13:10:00.000Z\": 218.4545454545,\n    \"2018-05-19T13:15:00.000Z\": 210.8181818182,\n    \"2018-05-19T13:20:00.000Z\": 225.8181818182,\n    \"2018-05-19T13:25:00.000Z\": 226.6363636364,\n    \"2018-05-19T13:30:00.000Z\": 211.3636363636,\n    \"2018-05-19T13:35:00.000Z\": 212.1818181818,\n    \"2018-05-19T13:40:00.000Z\": 223.7272727273,\n    \"2018-05-19T13:45:00.000Z\": 218.6666666667,\n    \"2018-05-19T13:50:00.000Z\": 209.0,\n    \"2018-05-19T13:55:00.000Z\": 222.2727272727,\n    \"2018-05-19T14:00:00.000Z\": 228.5454545455,\n    \"2018-05-19T14:05:00.000Z\": 212.7272727273,\n    \"2018-05-19T14:10:00.000Z\": 194.1818181818,\n    \"2018-05-19T14:15:00.000Z\": 183.4545454545,\n    \"2018-05-19T14:20:00.000Z\": 178.5454545455,\n    \"2018-05-19T14:25:00.000Z\": 175.2727272727,\n    \"2018-05-19T14:30:00.000Z\": 181.0,\n    \"2018-05-19T14:35:00.000Z\": 230.2727272727,\n    \"2018-05-19T14:40:00.000Z\": 248.3636363636,\n    \"2018-05-19T14:45:00.000Z\": 243.6363636364,\n    \"2018-05-19T14:50:00.000Z\": 241.0,\n    \"2018-05-19T14:55:00.000Z\": 230.6363636364,\n    \"2018-05-19T15:00:00.000Z\": 207.7272727273,\n    \"2018-05-19T15:05:00.000Z\": 195.1818181818,\n    \"2018-05-19T15:10:00.000Z\": 208.0,\n    \"2018-05-19T15:15:00.000Z\": 208.6363636364,\n    \"2018-05-19T15:20:00.000Z\": 192.8181818182,\n    \"2018-05-19T15:25:00.000Z\": 185.8181818182,\n    \"2018-05-19T15:30:00.000Z\": 202.2727272727,\n    \"2018-05-19T15:35:00.000Z\": 204.3636363636,\n    \"2018-05-19T15:40:00.000Z\": 188.8181818182,\n    \"2018-05-19T15:45:00.000Z\": 181.7272727273,\n    \"2018-05-19T15:50:00.000Z\": 194.0909090909,\n    \"2018-05-19T15:55:00.000Z\": 200.2,\n    \"2018-05-19T16:00:00.000Z\": 190.1818181818,\n    \"2018-05-19T16:05:00.000Z\": 181.9090909091,\n    \"2018-05-19T16:10:00.000Z\": 190.9,\n    \"2018-05-19T16:15:00.000Z\": 199.3636363636,\n    \"2018-05-19T16:20:00.000Z\": 189.1818181818,\n    \"2018-05-19T16:25:00.000Z\": 179.9090909091,\n    \"2018-05-19T16:30:00.000Z\": 187.3636363636,\n    \"2018-05-19T16:35:00.000Z\": 192.0909090909,\n    \"2018-05-19T16:40:00.000Z\": 181.2727272727,\n    \"2018-05-19T16:45:00.000Z\": 170.7,\n    \"2018-05-19T16:50:00.000Z\": 177.6363636364,\n    \"2018-05-19T16:55:00.000Z\": 188.5454545455,\n    \"2018-05-19T17:00:00.000Z\": 180.8181818182,\n    \"2018-05-19T17:05:00.000Z\": 168.1818181818,\n    \"2018-05-19T17:10:00.000Z\": 175.1818181818,\n    \"2018-05-19T17:15:00.000Z\": 194.1818181818,\n    \"2018-05-19T17:20:00.000Z\": 188.0909090909,\n    \"2018-05-19T17:25:00.000Z\": 171.0,\n    \"2018-05-19T17:30:00.000Z\": 160.5454545455,\n    \"2018-05-19T17:35:00.000Z\": 172.7272727273,\n    \"2018-05-19T17:40:00.000Z\": 182.4545454545,\n    \"2018-05-19T17:45:00.000Z\": 171.9090909091,\n    \"2018-05-19T17:50:00.000Z\": 159.6363636364,\n    \"2018-05-19T17:55:00.000Z\": 164.3636363636,\n    \"2018-05-19T18:00:00.000Z\": 179.0909090909,\n    \"2018-05-19T18:05:00.000Z\": 175.4545454545,\n    \"2018-05-19T18:10:00.000Z\": 161.0,\n    \"2018-05-19T18:15:00.000Z\": 158.5454545455,\n    \"2018-05-19T18:20:00.000Z\": 172.0,\n    \"2018-05-19T18:25:00.000Z\": 175.6,\n    \"2018-05-19T18:30:00.000Z\": 163.1818181818,\n    \"2018-05-19T18:35:00.000Z\": 155.0,\n    \"2018-05-19T18:40:00.000Z\": 164.0,\n    \"2018-05-19T18:45:00.000Z\": 174.8181818182,\n    \"2018-05-19T18:50:00.000Z\": 166.9090909091,\n    \"2018-05-19T18:55:00.000Z\": 155.7272727273,\n    \"2018-05-19T19:00:00.000Z\": 156.1818181818,\n    \"2018-05-19T19:05:00.000Z\": 173.0909090909,\n    \"2018-05-19T19:10:00.000Z\": 175.1818181818,\n    \"2018-05-19T19:15:00.000Z\": 161.0,\n    \"2018-05-19T19:20:00.000Z\": 152.3,\n    \"2018-05-19T19:25:00.000Z\": 158.7272727273,\n    \"2018-05-19T19:30:00.000Z\": 172.0,\n    \"2018-05-19T19:35:00.000Z\": 166.8181818182,\n    \"2018-05-19T19:40:00.000Z\": 157.6363636364,\n    \"2018-05-19T19:45:00.000Z\": 155.1818181818,\n    \"2018-05-19T19:50:00.000Z\": 168.9090909091,\n    \"2018-05-19T19:55:00.000Z\": 175.0909090909,\n    \"2018-05-19T20:00:00.000Z\": 165.2,\n    \"2018-05-19T20:05:00.000Z\": 153.9,\n    \"2018-05-19T20:10:00.000Z\": 155.4545454545,\n    \"2018-05-19T20:15:00.000Z\": 169.6363636364,\n    \"2018-05-19T20:20:00.000Z\": 170.0909090909,\n    \"2018-05-19T20:25:00.000Z\": 160.0909090909,\n    \"2018-05-19T20:30:00.000Z\": 152.4545454545,\n    \"2018-05-19T20:35:00.000Z\": 161.1818181818,\n    \"2018-05-19T20:40:00.000Z\": 175.2727272727,\n    \"2018-05-19T20:45:00.000Z\": 171.5454545455,\n    \"2018-05-19T20:50:00.000Z\": 158.4545454545,\n    \"2018-05-19T20:55:00.000Z\": 153.2727272727,\n    \"2018-05-19T21:00:00.000Z\": 166.0,\n    \"2018-05-19T21:05:00.000Z\": 172.9090909091,\n    \"2018-05-19T21:10:00.000Z\": 163.5454545455,\n    \"2018-05-19T21:15:00.000Z\": 152.9090909091,\n    \"2018-05-19T21:20:00.000Z\": 156.1818181818,\n    \"2018-05-19T21:25:00.000Z\": 170.1818181818,\n    \"2018-05-19T21:30:00.000Z\": 168.4,\n    \"2018-05-19T21:35:00.000Z\": 156.6363636364,\n    \"2018-05-19T21:40:00.000Z\": 149.0909090909,\n    \"2018-05-19T21:45:00.000Z\": 157.9090909091,\n    \"2018-05-19T21:50:00.000Z\": 172.9,\n    \"2018-05-19T21:55:00.000Z\": 169.9,\n    \"2018-05-19T22:00:00.000Z\": 159.9090909091,\n    \"2018-05-19T22:05:00.000Z\": 162.8181818182,\n    \"2018-05-19T22:10:00.000Z\": 174.9090909091,\n    \"2018-05-19T22:15:00.000Z\": 169.7272727273,\n    \"2018-05-19T22:20:00.000Z\": 156.8181818182,\n    \"2018-05-19T22:25:00.000Z\": 152.7272727273,\n    \"2018-05-19T22:30:00.000Z\": 166.4545454545,\n    \"2018-05-19T22:35:00.000Z\": 172.3,\n    \"2018-05-19T22:40:00.000Z\": 160.7272727273,\n    \"2018-05-19T22:45:00.000Z\": 150.1,\n    \"2018-05-19T22:50:00.000Z\": 153.3636363636,\n    \"2018-05-19T22:55:00.000Z\": 170.2727272727,\n    \"2018-05-19T23:00:00.000Z\": 170.0,\n    \"2018-05-19T23:05:00.000Z\": 159.0,\n    \"2018-05-19T23:10:00.000Z\": 152.1818181818,\n    \"2018-05-19T23:15:00.000Z\": 163.5454545455,\n    \"2018-05-19T23:20:00.000Z\": 170.0,\n    \"2018-05-19T23:25:00.000Z\": 159.6363636364,\n    \"2018-05-19T23:30:00.000Z\": 149.7,\n    \"2018-05-19T23:35:00.000Z\": 153.1818181818,\n    \"2018-05-19T23:40:00.000Z\": 169.8181818182,\n    \"2018-05-19T23:45:00.000Z\": 167.5454545455,\n    \"2018-05-19T23:50:00.000Z\": 154.9090909091,\n    \"2018-05-19T23:55:00.000Z\": 148.0,\n    \"2018-05-20T00:00:00.000Z\": 158.0909090909,\n    \"2018-05-20T00:05:00.000Z\": 169.2727272727,\n    \"2018-05-20T00:10:00.000Z\": 160.9090909091,\n    \"2018-05-20T00:15:00.000Z\": 148.9090909091,\n    \"2018-05-20T00:20:00.000Z\": 144.7272727273,\n    \"2018-05-20T00:25:00.000Z\": 155.8181818182,\n    \"2018-05-20T00:30:00.000Z\": 163.1,\n    \"2018-05-20T00:35:00.000Z\": 152.9090909091,\n    \"2018-05-20T00:40:00.000Z\": 143.0909090909,\n    \"2018-05-20T00:45:00.000Z\": 131.5454545455,\n    \"2018-05-20T00:50:00.000Z\": 148.4545454545,\n    \"2018-05-20T00:55:00.000Z\": 155.3636363636,\n    \"2018-05-20T01:00:00.000Z\": 146.6363636364,\n    \"2018-05-20T01:05:00.000Z\": 127.4545454545,\n    \"2018-05-20T01:10:00.000Z\": 119.3636363636,\n    \"2018-05-20T01:15:00.000Z\": 134.8181818182,\n    \"2018-05-20T01:20:00.000Z\": 149.2727272727,\n    \"2018-05-20T01:25:00.000Z\": 145.0,\n    \"2018-05-20T01:30:00.000Z\": 127.0909090909,\n    \"2018-05-20T01:35:00.000Z\": 118.0909090909,\n    \"2018-05-20T01:40:00.000Z\": 127.8,\n    \"2018-05-20T01:45:00.000Z\": 149.4545454545,\n    \"2018-05-20T01:50:00.000Z\": 148.2727272727,\n    \"2018-05-20T01:55:00.000Z\": 134.2727272727,\n    \"2018-05-20T02:00:00.000Z\": 117.0,\n    \"2018-05-20T02:05:00.000Z\": 117.3636363636,\n    \"2018-05-20T02:10:00.000Z\": 146.6363636364,\n    \"2018-05-20T02:15:00.000Z\": 147.7272727273,\n    \"2018-05-20T02:20:00.000Z\": 134.0,\n    \"2018-05-20T02:25:00.000Z\": 114.0909090909,\n    \"2018-05-20T02:30:00.000Z\": 112.2727272727,\n    \"2018-05-20T02:35:00.000Z\": 132.0,\n    \"2018-05-20T02:40:00.000Z\": 147.5454545455,\n    \"2018-05-20T02:45:00.000Z\": 129.8181818182,\n    \"2018-05-20T02:50:00.000Z\": 108.5454545455,\n    \"2018-05-20T02:55:00.000Z\": 101.8181818182,\n    \"2018-05-20T03:00:00.000Z\": 103.0909090909,\n    \"2018-05-20T03:05:00.000Z\": 128.0909090909,\n    \"2018-05-20T03:10:00.000Z\": 141.4,\n    \"2018-05-20T03:15:00.000Z\": 113.3636363636,\n    \"2018-05-20T03:20:00.000Z\": 106.8181818182,\n    \"2018-05-20T03:25:00.000Z\": 99.4545454545,\n    \"2018-05-20T03:30:00.000Z\": 97.2727272727,\n    \"2018-05-20T03:35:00.000Z\": 114.0,\n    \"2018-05-20T03:40:00.000Z\": 135.4545454545,\n    \"2018-05-20T03:45:00.000Z\": 110.0,\n    \"2018-05-20T03:50:00.000Z\": 103.3636363636,\n    \"2018-05-20T03:55:00.000Z\": 96.0909090909,\n    \"2018-05-20T04:00:00.000Z\": 89.6363636364,\n    \"2018-05-20T04:05:00.000Z\": 93.0909090909,\n    \"2018-05-20T04:10:00.000Z\": 106.9090909091,\n    \"2018-05-20T04:15:00.000Z\": 108.2727272727,\n    \"2018-05-20T04:20:00.000Z\": 102.0909090909,\n    \"2018-05-20T04:25:00.000Z\": 90.3636363636,\n    \"2018-05-20T04:30:00.000Z\": 81.3636363636,\n    \"2018-05-20T04:35:00.000Z\": 78.7272727273,\n    \"2018-05-20T04:40:00.000Z\": 75.6363636364,\n    \"2018-05-20T04:45:00.000Z\": 89.3636363636,\n    \"2018-05-20T04:50:00.000Z\": 103.4545454545,\n    \"2018-05-20T04:55:00.000Z\": 97.4545454545,\n    \"2018-05-20T05:00:00.000Z\": 91.6,\n    \"2018-05-20T05:05:00.000Z\": 80.5454545455,\n    \"2018-05-20T05:10:00.000Z\": 74.9090909091,\n    \"2018-05-20T05:15:00.000Z\": 74.1818181818,\n    \"2018-05-20T05:20:00.000Z\": 74.0,\n    \"2018-05-20T05:25:00.000Z\": 89.0909090909,\n    \"2018-05-20T05:30:00.000Z\": 104.0909090909,\n    \"2018-05-20T05:35:00.000Z\": 100.1818181818,\n    \"2018-05-20T05:40:00.000Z\": 91.0909090909,\n    \"2018-05-20T05:45:00.000Z\": 79.6363636364,\n    \"2018-05-20T05:50:00.000Z\": 120.4545454545,\n    \"2018-05-20T05:55:00.000Z\": 182.3636363636,\n    \"2018-05-20T06:00:00.000Z\": 209.1818181818,\n    \"2018-05-20T06:05:00.000Z\": 167.2727272727,\n    \"2018-05-20T06:10:00.000Z\": 94.2727272727,\n    \"2018-05-20T06:15:00.000Z\": 103.9,\n    \"2018-05-20T06:20:00.000Z\": 96.8181818182,\n    \"2018-05-20T06:25:00.000Z\": 107.2727272727,\n    \"2018-05-20T06:30:00.000Z\": 175.1818181818,\n    \"2018-05-20T06:35:00.000Z\": 224.3636363636,\n    \"2018-05-20T06:40:00.000Z\": 237.2727272727,\n    \"2018-05-20T06:45:00.000Z\": 245.7272727273,\n    \"2018-05-20T06:50:00.000Z\": 230.6363636364,\n    \"2018-05-20T06:55:00.000Z\": 98.1818181818,\n    \"2018-05-20T07:00:00.000Z\": 78.7272727273,\n    \"2018-05-20T07:05:00.000Z\": 70.9090909091,\n    \"2018-05-20T07:10:00.000Z\": 129.1818181818,\n    \"2018-05-20T07:15:00.000Z\": 159.4545454545,\n    \"2018-05-20T07:20:00.000Z\": 220.0,\n    \"2018-05-20T07:25:00.000Z\": 247.1818181818,\n    \"2018-05-20T07:30:00.000Z\": 254.0,\n    \"2018-05-20T07:35:00.000Z\": 258.3,\n    \"2018-05-20T07:40:00.000Z\": 187.1818181818,\n    \"2018-05-20T07:45:00.000Z\": 100.9090909091,\n    \"2018-05-20T07:50:00.000Z\": 97.0909090909,\n    \"2018-05-20T07:55:00.000Z\": 143.2727272727,\n    \"2018-05-20T08:00:00.000Z\": 212.6363636364,\n    \"2018-05-20T08:05:00.000Z\": 249.0,\n    \"2018-05-20T08:10:00.000Z\": 257.1818181818,\n    \"2018-05-20T08:15:00.000Z\": 259.0,\n    \"2018-05-20T08:20:00.000Z\": 262.8181818182,\n    \"2018-05-20T08:25:00.000Z\": 216.8181818182,\n    \"2018-05-20T08:30:00.000Z\": 103.0909090909,\n    \"2018-05-20T08:35:00.000Z\": 103.9090909091,\n    \"2018-05-20T08:40:00.000Z\": 118.2727272727,\n    \"2018-05-20T08:45:00.000Z\": 229.3636363636,\n    \"2018-05-20T08:50:00.000Z\": 252.7272727273,\n    \"2018-05-20T08:55:00.000Z\": 259.6363636364,\n    \"2018-05-20T09:00:00.000Z\": 254.0,\n    \"2018-05-20T09:05:00.000Z\": 250.1818181818,\n    \"2018-05-20T09:10:00.000Z\": 228.8181818182,\n    \"2018-05-20T09:15:00.000Z\": 98.6363636364,\n    \"2018-05-20T09:20:00.000Z\": 100.1818181818,\n    \"2018-05-20T09:25:00.000Z\": 134.7272727273,\n    \"2018-05-20T09:30:00.000Z\": 232.0909090909,\n    \"2018-05-20T09:35:00.000Z\": 252.0909090909,\n    \"2018-05-20T09:40:00.000Z\": 260.0,\n    \"2018-05-20T09:45:00.000Z\": 262.0909090909,\n    \"2018-05-20T09:50:00.000Z\": 255.8181818182,\n    \"2018-05-20T09:55:00.000Z\": 104.6363636364,\n    \"2018-05-20T10:00:00.000Z\": 101.4545454545,\n    \"2018-05-20T10:05:00.000Z\": 93.5454545455,\n    \"2018-05-20T10:10:00.000Z\": 161.5454545455,\n    \"2018-05-20T10:15:00.000Z\": 235.1818181818,\n    \"2018-05-20T10:20:00.000Z\": 245.0909090909,\n    \"2018-05-20T10:25:00.000Z\": 173.0,\n    \"2018-05-20T10:30:00.000Z\": 105.7272727273,\n    \"2018-05-20T10:35:00.000Z\": 108.7272727273,\n    \"2018-05-20T10:40:00.000Z\": 105.4545454545,\n    \"2018-05-20T10:45:00.000Z\": 100.0,\n    \"2018-05-20T10:50:00.000Z\": 91.7272727273,\n    \"2018-05-20T10:55:00.000Z\": 103.0909090909,\n    \"2018-05-20T11:00:00.000Z\": 114.2727272727,\n    \"2018-05-20T11:05:00.000Z\": 113.6363636364,\n    \"2018-05-20T11:10:00.000Z\": 113.2727272727,\n    \"2018-05-20T11:15:00.000Z\": 104.6363636364,\n    \"2018-05-20T11:20:00.000Z\": 128.2727272727,\n    \"2018-05-20T11:25:00.000Z\": 154.9090909091,\n    \"2018-05-20T11:30:00.000Z\": 150.5454545455,\n    \"2018-05-20T11:35:00.000Z\": 146.7272727273,\n    \"2018-05-20T11:40:00.000Z\": 156.1818181818,\n    \"2018-05-20T11:45:00.000Z\": 166.8181818182,\n    \"2018-05-20T11:50:00.000Z\": 162.3636363636,\n    \"2018-05-20T11:55:00.000Z\": 158.4545454545,\n    \"2018-05-20T12:00:00.000Z\": 170.7272727273,\n    \"2018-05-20T12:05:00.000Z\": 184.5454545455,\n    \"2018-05-20T12:10:00.000Z\": 178.9090909091,\n    \"2018-05-20T12:15:00.000Z\": 175.4545454545,\n    \"2018-05-20T12:20:00.000Z\": 189.4545454545,\n    \"2018-05-20T12:25:00.000Z\": 195.4545454545,\n    \"2018-05-20T12:30:00.000Z\": 185.0,\n    \"2018-05-20T12:35:00.000Z\": 183.5454545455,\n    \"2018-05-20T12:40:00.000Z\": 198.5454545455,\n    \"2018-05-20T12:45:00.000Z\": 198.9090909091,\n    \"2018-05-20T12:50:00.000Z\": 187.6363636364,\n    \"2018-05-20T12:55:00.000Z\": 195.6363636364,\n    \"2018-05-20T13:00:00.000Z\": 204.2727272727,\n    \"2018-05-20T13:05:00.000Z\": 196.3636363636,\n    \"2018-05-20T13:10:00.000Z\": 194.7272727273,\n    \"2018-05-20T13:15:00.000Z\": 209.0909090909,\n    \"2018-05-20T13:20:00.000Z\": 210.5454545455,\n    \"2018-05-20T13:25:00.000Z\": 196.2727272727,\n    \"2018-05-20T13:30:00.000Z\": 200.9090909091,\n    \"2018-05-20T13:35:00.000Z\": 212.2727272727,\n    \"2018-05-20T13:40:00.000Z\": 205.7272727273,\n    \"2018-05-20T13:45:00.000Z\": 199.5454545455,\n    \"2018-05-20T13:50:00.000Z\": 210.1818181818,\n    \"2018-05-20T13:55:00.000Z\": 211.0909090909,\n    \"2018-05-20T14:00:00.000Z\": 196.7272727273,\n    \"2018-05-20T14:05:00.000Z\": 199.0909090909,\n    \"2018-05-20T14:10:00.000Z\": 209.4545454545,\n    \"2018-05-20T14:15:00.000Z\": 200.5454545455,\n    \"2018-05-20T14:20:00.000Z\": 191.0909090909,\n    \"2018-05-20T14:25:00.000Z\": 203.5454545455,\n    \"2018-05-20T14:30:00.000Z\": 209.4545454545,\n    \"2018-05-20T14:35:00.000Z\": 197.3636363636,\n    \"2018-05-20T14:40:00.000Z\": 196.2727272727,\n    \"2018-05-20T14:45:00.000Z\": 209.0,\n    \"2018-05-20T14:50:00.000Z\": 208.9090909091,\n    \"2018-05-20T14:55:00.000Z\": 196.5454545455,\n    \"2018-05-20T15:00:00.000Z\": 200.5454545455,\n    \"2018-05-20T15:05:00.000Z\": 209.0909090909,\n    \"2018-05-20T15:10:00.000Z\": 197.6363636364,\n    \"2018-05-20T15:15:00.000Z\": 186.8181818182,\n    \"2018-05-20T15:20:00.000Z\": 198.6,\n    \"2018-05-20T15:25:00.000Z\": 202.9090909091,\n    \"2018-05-20T15:30:00.000Z\": 190.2727272727,\n    \"2018-05-20T15:35:00.000Z\": 186.0,\n    \"2018-05-20T15:40:00.000Z\": 199.3636363636,\n    \"2018-05-20T15:45:00.000Z\": 198.7272727273,\n    \"2018-05-20T15:50:00.000Z\": 185.2727272727,\n    \"2018-05-20T15:55:00.000Z\": 190.6363636364,\n    \"2018-05-20T16:00:00.000Z\": 205.0,\n    \"2018-05-20T16:05:00.000Z\": 197.9090909091,\n    \"2018-05-20T16:10:00.000Z\": 183.6363636364,\n    \"2018-05-20T16:15:00.000Z\": 184.5454545455,\n    \"2018-05-20T16:20:00.000Z\": 196.4545454545,\n    \"2018-05-20T16:25:00.000Z\": 188.1818181818,\n    \"2018-05-20T16:30:00.000Z\": 175.6363636364,\n    \"2018-05-20T16:35:00.000Z\": 180.0,\n    \"2018-05-20T16:40:00.000Z\": 190.9090909091,\n    \"2018-05-20T16:45:00.000Z\": 183.5454545455,\n    \"2018-05-20T16:50:00.000Z\": 168.8181818182,\n    \"2018-05-20T16:55:00.000Z\": 171.5454545455,\n    \"2018-05-20T17:00:00.000Z\": 181.8181818182,\n    \"2018-05-20T17:05:00.000Z\": 175.6363636364,\n    \"2018-05-20T17:10:00.000Z\": 162.0,\n    \"2018-05-20T17:15:00.000Z\": 161.0,\n    \"2018-05-20T17:20:00.000Z\": 176.1818181818,\n    \"2018-05-20T17:25:00.000Z\": 175.6363636364,\n    \"2018-05-20T17:30:00.000Z\": 163.4,\n    \"2018-05-20T17:35:00.000Z\": 155.2727272727,\n    \"2018-05-20T17:40:00.000Z\": 166.1818181818,\n    \"2018-05-20T17:45:00.000Z\": 174.0909090909,\n    \"2018-05-20T17:50:00.000Z\": 164.3,\n    \"2018-05-20T17:55:00.000Z\": 152.9090909091,\n    \"2018-05-20T18:00:00.000Z\": 155.5454545455,\n    \"2018-05-20T18:05:00.000Z\": 169.5454545455,\n    \"2018-05-20T18:10:00.000Z\": 165.8181818182,\n    \"2018-05-20T18:15:00.000Z\": 153.9090909091,\n    \"2018-05-20T18:20:00.000Z\": 148.5454545455,\n    \"2018-05-20T18:25:00.000Z\": 157.8181818182,\n    \"2018-05-20T18:30:00.000Z\": 166.1818181818,\n    \"2018-05-20T18:35:00.000Z\": 156.6363636364,\n    \"2018-05-20T18:40:00.000Z\": 147.6363636364,\n    \"2018-05-20T18:45:00.000Z\": 145.0909090909,\n    \"2018-05-20T18:50:00.000Z\": 157.9090909091,\n    \"2018-05-20T18:55:00.000Z\": 163.6363636364,\n    \"2018-05-20T19:00:00.000Z\": 154.6363636364,\n    \"2018-05-20T19:05:00.000Z\": 145.7272727273,\n    \"2018-05-20T19:10:00.000Z\": 143.5454545455,\n    \"2018-05-20T19:15:00.000Z\": 155.5454545455,\n    \"2018-05-20T19:20:00.000Z\": 159.6363636364,\n    \"2018-05-20T19:25:00.000Z\": 152.9090909091,\n    \"2018-05-20T19:30:00.000Z\": 144.7272727273,\n    \"2018-05-20T19:35:00.000Z\": 141.8181818182,\n    \"2018-05-20T19:40:00.000Z\": 155.2727272727,\n    \"2018-05-20T19:45:00.000Z\": 157.8181818182,\n    \"2018-05-20T19:50:00.000Z\": 150.0909090909,\n    \"2018-05-20T19:55:00.000Z\": 142.0909090909,\n    \"2018-05-20T20:00:00.000Z\": 140.9090909091,\n    \"2018-05-20T20:05:00.000Z\": 153.6363636364,\n    \"2018-05-20T20:10:00.000Z\": 158.8181818182,\n    \"2018-05-20T20:15:00.000Z\": 151.6363636364,\n    \"2018-05-20T20:20:00.000Z\": 142.6363636364,\n    \"2018-05-20T20:25:00.000Z\": 125.1818181818,\n    \"2018-05-20T20:30:00.000Z\": 148.9090909091,\n    \"2018-05-20T20:35:00.000Z\": 157.8181818182,\n    \"2018-05-20T20:40:00.000Z\": 152.6363636364,\n    \"2018-05-20T20:45:00.000Z\": 141.6363636364,\n    \"2018-05-20T20:50:00.000Z\": 123.4545454545,\n    \"2018-05-20T20:55:00.000Z\": 149.9090909091,\n    \"2018-05-20T21:00:00.000Z\": 156.4545454545,\n    \"2018-05-20T21:05:00.000Z\": 151.2727272727,\n    \"2018-05-20T21:10:00.000Z\": 144.0,\n    \"2018-05-20T21:15:00.000Z\": 133.4545454545,\n    \"2018-05-20T21:20:00.000Z\": 149.7272727273,\n    \"2018-05-20T21:25:00.000Z\": 158.7272727273,\n    \"2018-05-20T21:30:00.000Z\": 151.8181818182,\n    \"2018-05-20T21:35:00.000Z\": 143.6363636364,\n    \"2018-05-20T21:40:00.000Z\": 143.0,\n    \"2018-05-20T21:45:00.000Z\": 156.7272727273,\n    \"2018-05-20T21:50:00.000Z\": 161.4545454545,\n    \"2018-05-20T21:55:00.000Z\": 152.3636363636,\n    \"2018-05-20T22:00:00.000Z\": 145.0,\n    \"2018-05-20T22:05:00.000Z\": 149.6363636364,\n    \"2018-05-20T22:10:00.000Z\": 161.6363636364,\n    \"2018-05-20T22:15:00.000Z\": 158.9090909091,\n    \"2018-05-20T22:20:00.000Z\": 148.5454545455,\n    \"2018-05-20T22:25:00.000Z\": 143.8181818182,\n    \"2018-05-20T22:30:00.000Z\": 152.7272727273,\n    \"2018-05-20T22:35:00.000Z\": 163.1818181818,\n    \"2018-05-20T22:40:00.000Z\": 158.2727272727,\n    \"2018-05-20T22:45:00.000Z\": 149.5454545455,\n    \"2018-05-20T22:50:00.000Z\": 146.6363636364,\n    \"2018-05-20T22:55:00.000Z\": 159.0909090909,\n    \"2018-05-20T23:00:00.000Z\": 167.2,\n    \"2018-05-20T23:05:00.000Z\": 159.0,\n    \"2018-05-20T23:10:00.000Z\": 150.0909090909,\n    \"2018-05-20T23:15:00.000Z\": 150.5454545455,\n    \"2018-05-20T23:20:00.000Z\": 163.6363636364,\n    \"2018-05-20T23:25:00.000Z\": 164.1818181818,\n    \"2018-05-20T23:30:00.000Z\": 154.3,\n    \"2018-05-20T23:35:00.000Z\": 145.7272727273,\n    \"2018-05-20T23:40:00.000Z\": 152.0909090909,\n    \"2018-05-20T23:45:00.000Z\": 163.9090909091,\n    \"2018-05-20T23:50:00.000Z\": 158.4545454545,\n    \"2018-05-20T23:55:00.000Z\": 148.0,\n    \"2018-05-21T00:00:00.000Z\": 144.2727272727,\n    \"2018-05-21T00:05:00.000Z\": 155.4545454545,\n    \"2018-05-21T00:10:00.000Z\": 163.3636363636,\n    \"2018-05-21T00:15:00.000Z\": 155.0909090909,\n    \"2018-05-21T00:20:00.000Z\": 145.4545454545,\n    \"2018-05-21T00:25:00.000Z\": 141.8181818182,\n    \"2018-05-21T00:30:00.000Z\": 153.5454545455,\n    \"2018-05-21T00:35:00.000Z\": 161.1,\n    \"2018-05-21T00:40:00.000Z\": 153.7272727273,\n    \"2018-05-21T00:45:00.000Z\": 144.7272727273,\n    \"2018-05-21T00:50:00.000Z\": 124.0,\n    \"2018-05-21T00:55:00.000Z\": 132.9090909091,\n    \"2018-05-21T01:00:00.000Z\": 151.9090909091,\n    \"2018-05-21T01:05:00.000Z\": 149.6363636364,\n    \"2018-05-21T01:10:00.000Z\": 135.6363636364,\n    \"2018-05-21T01:15:00.000Z\": 120.0,\n    \"2018-05-21T01:20:00.000Z\": 127.7272727273,\n    \"2018-05-21T01:25:00.000Z\": 149.0909090909,\n    \"2018-05-21T01:30:00.000Z\": 146.9090909091,\n    \"2018-05-21T01:35:00.000Z\": 128.1818181818,\n    \"2018-05-21T01:40:00.000Z\": 112.3636363636,\n    \"2018-05-21T01:45:00.000Z\": 110.9090909091,\n    \"2018-05-21T01:50:00.000Z\": 143.1818181818,\n    \"2018-05-21T01:55:00.000Z\": 147.8181818182,\n    \"2018-05-21T02:00:00.000Z\": 134.0909090909,\n    \"2018-05-21T02:05:00.000Z\": 114.0909090909,\n    \"2018-05-21T02:10:00.000Z\": 111.2727272727,\n    \"2018-05-21T02:15:00.000Z\": 126.6363636364,\n    \"2018-05-21T02:20:00.000Z\": 146.2727272727,\n    \"2018-05-21T02:25:00.000Z\": 136.0909090909,\n    \"2018-05-21T02:30:00.000Z\": 113.9,\n    \"2018-05-21T02:35:00.000Z\": 107.0909090909,\n    \"2018-05-21T02:40:00.000Z\": 105.0909090909,\n    \"2018-05-21T02:45:00.000Z\": 128.0,\n    \"2018-05-21T02:50:00.000Z\": 140.2727272727,\n    \"2018-05-21T02:55:00.000Z\": 113.2727272727,\n    \"2018-05-21T03:00:00.000Z\": 101.4545454545,\n    \"2018-05-21T03:05:00.000Z\": 92.0,\n    \"2018-05-21T03:10:00.000Z\": 93.4545454545,\n    \"2018-05-21T03:15:00.000Z\": 105.7272727273,\n    \"2018-05-21T03:20:00.000Z\": 110.5454545455,\n    \"2018-05-21T03:25:00.000Z\": 102.8181818182,\n    \"2018-05-21T03:30:00.000Z\": 94.3636363636,\n    \"2018-05-21T03:35:00.000Z\": 89.2727272727,\n    \"2018-05-21T03:40:00.000Z\": 88.3636363636,\n    \"2018-05-21T03:45:00.000Z\": 97.6363636364,\n    \"2018-05-21T03:50:00.000Z\": 107.0909090909,\n    \"2018-05-21T03:55:00.000Z\": 103.5454545455,\n    \"2018-05-21T04:00:00.000Z\": 97.2727272727,\n    \"2018-05-21T04:05:00.000Z\": 85.6363636364,\n    \"2018-05-21T04:10:00.000Z\": 78.5454545455,\n    \"2018-05-21T04:15:00.000Z\": 80.0909090909,\n    \"2018-05-21T04:20:00.000Z\": 91.2727272727,\n    \"2018-05-21T04:25:00.000Z\": 105.2727272727,\n    \"2018-05-21T04:30:00.000Z\": 104.1818181818,\n    \"2018-05-21T04:35:00.000Z\": 95.2727272727,\n    \"2018-05-21T04:40:00.000Z\": 82.1,\n    \"2018-05-21T04:45:00.000Z\": 74.0909090909,\n    \"2018-05-21T04:50:00.000Z\": 70.3636363636,\n    \"2018-05-21T04:55:00.000Z\": 71.9090909091,\n    \"2018-05-21T05:00:00.000Z\": 90.0,\n    \"2018-05-21T05:05:00.000Z\": 103.4545454545,\n    \"2018-05-21T05:10:00.000Z\": 97.9090909091,\n    \"2018-05-21T05:15:00.000Z\": 85.6363636364,\n    \"2018-05-21T05:20:00.000Z\": 74.2727272727,\n    \"2018-05-21T05:25:00.000Z\": 70.5454545455,\n    \"2018-05-21T05:30:00.000Z\": 87.5454545455,\n    \"2018-05-21T05:35:00.000Z\": 69.1818181818,\n    \"2018-05-21T05:40:00.000Z\": 75.2727272727,\n    \"2018-05-21T05:45:00.000Z\": 85.7272727273,\n    \"2018-05-21T05:50:00.000Z\": 79.4545454545,\n    \"2018-05-21T05:55:00.000Z\": 72.4545454545,\n    \"2018-05-21T06:00:00.000Z\": 68.4545454545,\n    \"2018-05-21T06:05:00.000Z\": 73.3636363636,\n    \"2018-05-21T06:10:00.000Z\": 190.7272727273,\n    \"2018-05-21T06:15:00.000Z\": 219.7272727273,\n    \"2018-05-21T06:20:00.000Z\": 214.7272727273,\n    \"2018-05-21T06:25:00.000Z\": 116.4545454545,\n    \"2018-05-21T06:30:00.000Z\": 102.2727272727,\n    \"2018-05-21T06:35:00.000Z\": 98.4545454545,\n    \"2018-05-21T06:40:00.000Z\": 85.4545454545,\n    \"2018-05-21T06:45:00.000Z\": 89.7272727273,\n    \"2018-05-21T06:50:00.000Z\": 204.4545454545,\n    \"2018-05-21T06:55:00.000Z\": 232.7272727273,\n    \"2018-05-21T07:00:00.000Z\": 247.6363636364,\n    \"2018-05-21T07:05:00.000Z\": 242.9090909091,\n    \"2018-05-21T07:10:00.000Z\": 111.5454545455,\n    \"2018-05-21T07:15:00.000Z\": 106.9090909091,\n    \"2018-05-21T07:20:00.000Z\": 100.9090909091,\n    \"2018-05-21T07:25:00.000Z\": 84.0909090909,\n    \"2018-05-21T07:30:00.000Z\": 153.1818181818,\n    \"2018-05-21T07:35:00.000Z\": 230.0909090909,\n    \"2018-05-21T07:40:00.000Z\": 245.0909090909,\n    \"2018-05-21T07:45:00.000Z\": 249.0,\n    \"2018-05-21T07:50:00.000Z\": 251.4545454545,\n    \"2018-05-21T07:55:00.000Z\": 143.9090909091,\n    \"2018-05-21T08:00:00.000Z\": 110.5454545455,\n    \"2018-05-21T08:05:00.000Z\": 101.0909090909,\n    \"2018-05-21T08:10:00.000Z\": 134.6363636364,\n    \"2018-05-21T08:15:00.000Z\": 181.8181818182,\n    \"2018-05-21T08:20:00.000Z\": 230.0909090909,\n    \"2018-05-21T08:25:00.000Z\": 241.0,\n    \"2018-05-21T08:30:00.000Z\": 248.2727272727,\n    \"2018-05-21T08:35:00.000Z\": 248.7272727273,\n    \"2018-05-21T08:40:00.000Z\": 136.2727272727,\n    \"2018-05-21T08:45:00.000Z\": 106.3636363636,\n    \"2018-05-21T08:50:00.000Z\": 98.8181818182,\n    \"2018-05-21T08:55:00.000Z\": 157.6363636364,\n    \"2018-05-21T09:00:00.000Z\": 200.4545454545,\n    \"2018-05-21T09:05:00.000Z\": 215.2727272727,\n    \"2018-05-21T09:10:00.000Z\": 237.3636363636,\n    \"2018-05-21T09:15:00.000Z\": 249.0,\n    \"2018-05-21T09:20:00.000Z\": 238.5454545455,\n    \"2018-05-21T09:25:00.000Z\": 101.5454545455,\n    \"2018-05-21T09:30:00.000Z\": 100.8181818182,\n    \"2018-05-21T09:35:00.000Z\": 116.3636363636,\n    \"2018-05-21T09:40:00.000Z\": 190.2727272727,\n    \"2018-05-21T09:45:00.000Z\": 218.7272727273,\n    \"2018-05-21T09:50:00.000Z\": 237.5454545455,\n    \"2018-05-21T09:55:00.000Z\": 244.0909090909,\n    \"2018-05-21T10:00:00.000Z\": 236.9090909091,\n    \"2018-05-21T10:05:00.000Z\": 100.3636363636,\n    \"2018-05-21T10:10:00.000Z\": 97.2727272727,\n    \"2018-05-21T10:15:00.000Z\": 92.0909090909,\n    \"2018-05-21T10:20:00.000Z\": 118.0,\n    \"2018-05-21T10:25:00.000Z\": 185.3636363636,\n    \"2018-05-21T10:30:00.000Z\": 199.1818181818,\n    \"2018-05-21T10:35:00.000Z\": 94.6363636364,\n    \"2018-05-21T10:40:00.000Z\": 102.9090909091,\n    \"2018-05-21T10:45:00.000Z\": 101.8181818182,\n    \"2018-05-21T10:50:00.000Z\": 101.0909090909,\n    \"2018-05-21T10:55:00.000Z\": 92.1818181818,\n    \"2018-05-21T11:00:00.000Z\": 92.5454545455,\n    \"2018-05-21T11:05:00.000Z\": 106.4545454545,\n    \"2018-05-21T11:10:00.000Z\": 104.0909090909,\n    \"2018-05-21T11:15:00.000Z\": 102.5454545455,\n    \"2018-05-21T11:20:00.000Z\": 99.7272727273,\n    \"2018-05-21T11:25:00.000Z\": 111.4545454545,\n    \"2018-05-21T11:30:00.000Z\": 148.2727272727,\n    \"2018-05-21T11:35:00.000Z\": 145.7,\n    \"2018-05-21T11:40:00.000Z\": 126.0,\n    \"2018-05-21T11:45:00.000Z\": 135.0,\n    \"2018-05-21T11:50:00.000Z\": 159.9090909091,\n    \"2018-05-21T11:55:00.000Z\": 162.2727272727,\n    \"2018-05-21T12:00:00.000Z\": 156.5454545455,\n    \"2018-05-21T12:05:00.000Z\": 162.1818181818,\n    \"2018-05-21T12:10:00.000Z\": 177.8181818182,\n    \"2018-05-21T12:15:00.000Z\": 178.1818181818,\n    \"2018-05-21T12:20:00.000Z\": 171.7272727273,\n    \"2018-05-21T12:25:00.000Z\": 177.0909090909,\n    \"2018-05-21T12:30:00.000Z\": 186.4545454545,\n    \"2018-05-21T12:35:00.000Z\": 181.0,\n    \"2018-05-21T12:40:00.000Z\": 178.9090909091,\n    \"2018-05-21T12:45:00.000Z\": 192.9090909091,\n    \"2018-05-21T12:50:00.000Z\": 196.4,\n    \"2018-05-21T12:55:00.000Z\": 185.9090909091,\n    \"2018-05-21T13:00:00.000Z\": 192.0909090909,\n    \"2018-05-21T13:05:00.000Z\": 203.6363636364,\n    \"2018-05-21T13:10:00.000Z\": 199.2727272727,\n    \"2018-05-21T13:15:00.000Z\": 192.2727272727,\n    \"2018-05-21T13:20:00.000Z\": 203.6363636364,\n    \"2018-05-21T13:25:00.000Z\": 204.1818181818,\n    \"2018-05-21T13:30:00.000Z\": 191.7272727273,\n    \"2018-05-21T13:35:00.000Z\": 191.2727272727,\n    \"2018-05-21T13:40:00.000Z\": 205.3636363636,\n    \"2018-05-21T13:45:00.000Z\": 203.9090909091,\n    \"2018-05-21T13:50:00.000Z\": 194.9090909091,\n    \"2018-05-21T13:55:00.000Z\": 203.8181818182,\n    \"2018-05-21T14:00:00.000Z\": 208.9090909091,\n    \"2018-05-21T14:05:00.000Z\": 196.7272727273,\n    \"2018-05-21T14:10:00.000Z\": 192.4545454545,\n    \"2018-05-21T14:15:00.000Z\": 203.3636363636,\n    \"2018-05-21T14:20:00.000Z\": 206.4545454545,\n    \"2018-05-21T14:25:00.000Z\": 198.8181818182,\n    \"2018-05-21T14:30:00.000Z\": 205.0,\n    \"2018-05-21T14:35:00.000Z\": 210.9090909091,\n    \"2018-05-21T14:40:00.000Z\": 199.1818181818,\n    \"2018-05-21T14:45:00.000Z\": 182.4545454545,\n    \"2018-05-21T14:50:00.000Z\": 170.7272727273,\n    \"2018-05-21T14:55:00.000Z\": 165.1818181818,\n    \"2018-05-21T15:00:00.000Z\": 165.0,\n    \"2018-05-21T15:05:00.000Z\": 167.0909090909,\n    \"2018-05-21T15:10:00.000Z\": 199.2727272727,\n    \"2018-05-21T15:15:00.000Z\": 244.6363636364,\n    \"2018-05-21T15:20:00.000Z\": 246.1818181818,\n    \"2018-05-21T15:25:00.000Z\": 241.9090909091,\n    \"2018-05-21T15:30:00.000Z\": 228.3636363636,\n    \"2018-05-21T15:35:00.000Z\": 205.3636363636,\n    \"2018-05-21T15:40:00.000Z\": 190.0909090909,\n    \"2018-05-21T15:45:00.000Z\": 196.5454545455,\n    \"2018-05-21T15:50:00.000Z\": 201.4545454545,\n    \"2018-05-21T15:55:00.000Z\": 190.2727272727,\n    \"2018-05-21T16:00:00.000Z\": 182.0909090909,\n    \"2018-05-21T16:05:00.000Z\": 193.0909090909,\n    \"2018-05-21T16:10:00.000Z\": 198.9090909091,\n    \"2018-05-21T16:15:00.000Z\": 187.8181818182,\n    \"2018-05-21T16:20:00.000Z\": 177.4545454545,\n    \"2018-05-21T16:25:00.000Z\": 186.4545454545,\n    \"2018-05-21T16:30:00.000Z\": 189.4545454545,\n    \"2018-05-21T16:35:00.000Z\": 177.0909090909,\n    \"2018-05-21T16:40:00.000Z\": 170.3636363636,\n    \"2018-05-21T16:45:00.000Z\": 183.1818181818,\n    \"2018-05-21T16:50:00.000Z\": 186.8181818182,\n    \"2018-05-21T16:55:00.000Z\": 177.0909090909,\n    \"2018-05-21T17:00:00.000Z\": 167.4545454545,\n    \"2018-05-21T17:05:00.000Z\": 174.5454545455,\n    \"2018-05-21T17:10:00.000Z\": 180.5454545455,\n    \"2018-05-21T17:15:00.000Z\": 171.2727272727,\n    \"2018-05-21T17:20:00.000Z\": 158.2727272727,\n    \"2018-05-21T17:25:00.000Z\": 163.9090909091,\n    \"2018-05-21T17:30:00.000Z\": 176.3636363636,\n    \"2018-05-21T17:35:00.000Z\": 169.2727272727,\n    \"2018-05-21T17:40:00.000Z\": 156.5454545455,\n    \"2018-05-21T17:45:00.000Z\": 155.6363636364,\n    \"2018-05-21T17:50:00.000Z\": 172.0,\n    \"2018-05-21T17:55:00.000Z\": 170.2727272727,\n    \"2018-05-21T18:00:00.000Z\": 157.6363636364,\n    \"2018-05-21T18:05:00.000Z\": 152.6363636364,\n    \"2018-05-21T18:10:00.000Z\": 165.7272727273,\n    \"2018-05-21T18:15:00.000Z\": 169.7272727273,\n    \"2018-05-21T18:20:00.000Z\": 158.6363636364,\n    \"2018-05-21T18:25:00.000Z\": 149.0,\n    \"2018-05-21T18:30:00.000Z\": 153.1818181818,\n    \"2018-05-21T18:35:00.000Z\": 165.8181818182,\n    \"2018-05-21T18:40:00.000Z\": 160.0909090909,\n    \"2018-05-21T18:45:00.000Z\": 148.8181818182,\n    \"2018-05-21T18:50:00.000Z\": 143.5454545455,\n    \"2018-05-21T18:55:00.000Z\": 150.4545454545,\n    \"2018-05-21T19:00:00.000Z\": 160.2727272727,\n    \"2018-05-21T19:05:00.000Z\": 153.6,\n    \"2018-05-21T19:10:00.000Z\": 145.1818181818,\n    \"2018-05-21T19:15:00.000Z\": 132.6363636364,\n    \"2018-05-21T19:20:00.000Z\": 147.4545454545,\n    \"2018-05-21T19:25:00.000Z\": 154.1818181818,\n    \"2018-05-21T19:30:00.000Z\": 148.5454545455,\n    \"2018-05-21T19:35:00.000Z\": 135.1818181818,\n    \"2018-05-21T19:40:00.000Z\": 119.0909090909,\n    \"2018-05-21T19:45:00.000Z\": 151.7272727273,\n    \"2018-05-21T19:50:00.000Z\": 160.3636363636,\n    \"2018-05-21T19:55:00.000Z\": 152.0909090909,\n    \"2018-05-21T20:00:00.000Z\": 144.5454545455,\n    \"2018-05-21T20:05:00.000Z\": 143.3636363636,\n    \"2018-05-21T20:10:00.000Z\": 157.8181818182,\n    \"2018-05-21T20:15:00.000Z\": 163.8181818182,\n    \"2018-05-21T20:20:00.000Z\": 152.7272727273,\n    \"2018-05-21T20:25:00.000Z\": 145.1818181818,\n    \"2018-05-21T20:30:00.000Z\": 145.9090909091,\n    \"2018-05-21T20:35:00.000Z\": 159.8181818182,\n    \"2018-05-21T20:40:00.000Z\": 161.5454545455,\n    \"2018-05-21T20:45:00.000Z\": 151.1818181818,\n    \"2018-05-21T20:50:00.000Z\": 143.9090909091,\n    \"2018-05-21T20:55:00.000Z\": 146.6363636364,\n    \"2018-05-21T21:00:00.000Z\": 159.1818181818,\n    \"2018-05-21T21:05:00.000Z\": 159.8181818182,\n    \"2018-05-21T21:10:00.000Z\": 150.4545454545,\n    \"2018-05-21T21:15:00.000Z\": 144.9090909091,\n    \"2018-05-21T21:20:00.000Z\": 154.1818181818,\n    \"2018-05-21T21:25:00.000Z\": 165.7272727273,\n    \"2018-05-21T21:30:00.000Z\": 158.9090909091,\n    \"2018-05-21T21:35:00.000Z\": 148.2727272727,\n    \"2018-05-21T21:40:00.000Z\": 149.1818181818,\n    \"2018-05-21T21:45:00.000Z\": 166.7,\n    \"2018-05-21T21:50:00.000Z\": 167.5454545455,\n    \"2018-05-21T21:55:00.000Z\": 157.0,\n    \"2018-05-21T22:00:00.000Z\": 153.3636363636,\n    \"2018-05-21T22:05:00.000Z\": 166.9090909091,\n    \"2018-05-21T22:10:00.000Z\": 171.3636363636,\n    \"2018-05-21T22:15:00.000Z\": 162.1,\n    \"2018-05-21T22:20:00.000Z\": 152.1818181818,\n    \"2018-05-21T22:25:00.000Z\": 161.3636363636,\n    \"2018-05-21T22:30:00.000Z\": 172.9090909091,\n    \"2018-05-21T22:35:00.000Z\": 165.4545454545,\n    \"2018-05-21T22:40:00.000Z\": 154.3636363636,\n    \"2018-05-21T22:45:00.000Z\": 160.3636363636,\n    \"2018-05-21T22:50:00.000Z\": 175.7272727273,\n    \"2018-05-21T22:55:00.000Z\": 172.9090909091,\n    \"2018-05-21T23:00:00.000Z\": 161.8181818182,\n    \"2018-05-21T23:05:00.000Z\": 160.2727272727,\n    \"2018-05-21T23:10:00.000Z\": 174.7272727273,\n    \"2018-05-21T23:15:00.000Z\": 175.1818181818,\n    \"2018-05-21T23:20:00.000Z\": 163.4545454545,\n    \"2018-05-21T23:25:00.000Z\": 158.1818181818,\n    \"2018-05-21T23:30:00.000Z\": 173.0,\n    \"2018-05-21T23:35:00.000Z\": 178.8181818182,\n    \"2018-05-21T23:40:00.000Z\": 169.4545454545,\n    \"2018-05-21T23:45:00.000Z\": 162.1818181818,\n    \"2018-05-21T23:50:00.000Z\": 174.0,\n    \"2018-05-21T23:55:00.000Z\": 179.1818181818,\n    \"2018-05-22T00:00:00.000Z\": 169.7272727273,\n    \"2018-05-22T00:05:00.000Z\": 156.6363636364,\n    \"2018-05-22T00:10:00.000Z\": 157.9,\n    \"2018-05-22T00:15:00.000Z\": 169.8181818182,\n    \"2018-05-22T00:20:00.000Z\": 164.7272727273,\n    \"2018-05-22T00:25:00.000Z\": 151.6363636364,\n    \"2018-05-22T00:30:00.000Z\": 145.5454545455,\n    \"2018-05-22T00:35:00.000Z\": 152.7272727273,\n    \"2018-05-22T00:40:00.000Z\": 165.1818181818,\n    \"2018-05-22T00:45:00.000Z\": 159.6363636364,\n    \"2018-05-22T00:50:00.000Z\": 148.2727272727,\n    \"2018-05-22T00:55:00.000Z\": 142.8181818182,\n    \"2018-05-22T01:00:00.000Z\": 151.1818181818,\n    \"2018-05-22T01:05:00.000Z\": 162.0,\n    \"2018-05-22T01:10:00.000Z\": 155.0,\n    \"2018-05-22T01:15:00.000Z\": 143.9,\n    \"2018-05-22T01:20:00.000Z\": 139.0909090909,\n    \"2018-05-22T01:25:00.000Z\": 150.4545454545,\n    \"2018-05-22T01:30:00.000Z\": 157.6363636364,\n    \"2018-05-22T01:35:00.000Z\": 149.3636363636,\n    \"2018-05-22T01:40:00.000Z\": 139.8181818182,\n    \"2018-05-22T01:45:00.000Z\": 123.2727272727,\n    \"2018-05-22T01:50:00.000Z\": 148.9090909091,\n    \"2018-05-22T01:55:00.000Z\": 154.5454545455,\n    \"2018-05-22T02:00:00.000Z\": 146.7272727273,\n    \"2018-05-22T02:05:00.000Z\": 126.7272727273,\n    \"2018-05-22T02:10:00.000Z\": 114.0,\n    \"2018-05-22T02:15:00.000Z\": 133.0,\n    \"2018-05-22T02:20:00.000Z\": 147.8181818182,\n    \"2018-05-22T02:25:00.000Z\": 138.5454545455,\n    \"2018-05-22T02:30:00.000Z\": 111.2727272727,\n    \"2018-05-22T02:35:00.000Z\": 103.4444444444,\n    \"2018-05-22T02:40:00.000Z\": 101.7272727273,\n    \"2018-05-22T02:45:00.000Z\": 120.5454545455,\n    \"2018-05-22T02:50:00.000Z\": 142.3636363636,\n    \"2018-05-22T02:55:00.000Z\": 116.7272727273,\n    \"2018-05-22T03:00:00.000Z\": 101.8181818182,\n    \"2018-05-22T03:05:00.000Z\": 93.1818181818,\n    \"2018-05-22T03:10:00.000Z\": 87.0,\n    \"2018-05-22T03:15:00.000Z\": 97.8181818182,\n    \"2018-05-22T03:20:00.000Z\": 108.6363636364,\n    \"2018-05-22T03:25:00.000Z\": 104.2727272727,\n    \"2018-05-22T03:30:00.000Z\": 96.0,\n    \"2018-05-22T03:35:00.000Z\": 86.7272727273,\n    \"2018-05-22T03:40:00.000Z\": 80.6,\n    \"2018-05-22T03:45:00.000Z\": 76.9090909091,\n    \"2018-05-22T03:50:00.000Z\": 90.0909090909,\n    \"2018-05-22T03:55:00.000Z\": 103.3636363636,\n    \"2018-05-22T04:00:00.000Z\": 101.8181818182,\n    \"2018-05-22T04:05:00.000Z\": 92.6363636364,\n    \"2018-05-22T04:10:00.000Z\": 82.0,\n    \"2018-05-22T04:15:00.000Z\": 77.7272727273,\n    \"2018-05-22T04:20:00.000Z\": 74.5,\n    \"2018-05-22T04:25:00.000Z\": 83.4166666667,\n    \"2018-05-22T04:30:00.000Z\": 102.8181818182,\n    \"2018-05-22T04:35:00.000Z\": 103.0,\n    \"2018-05-22T04:40:00.000Z\": 120.2727272727,\n    \"2018-05-22T04:45:00.000Z\": 253.0,\n    \"2018-05-22T04:50:00.000Z\": 353.75,\n    \"2018-05-22T04:55:00.000Z\": 437.3333333333,\n    \"2018-05-22T05:00:00.000Z\": 687.0909090909,\n    \"2018-05-22T05:05:00.000Z\": 816.7272727273,\n    \"2018-05-22T05:10:00.000Z\": 799.8181818182,\n    \"2018-05-22T05:15:00.000Z\": 800.7272727273,\n    \"2018-05-22T05:20:00.000Z\": 807.0909090909,\n    \"2018-05-22T05:25:00.000Z\": 811.2727272727,\n    \"2018-05-22T05:30:00.000Z\": 806.7272727273,\n    \"2018-05-22T05:35:00.000Z\": 806.4545454545,\n    \"2018-05-22T05:40:00.000Z\": 806.0,\n    \"2018-05-22T05:45:00.000Z\": 805.2727272727,\n    \"2018-05-22T05:50:00.000Z\": 802.8181818182,\n    \"2018-05-22T05:55:00.000Z\": 801.0,\n    \"2018-05-22T06:00:00.000Z\": 796.0,\n    \"2018-05-22T06:05:00.000Z\": 796.0,\n    \"2018-05-22T06:10:00.000Z\": 796.0\n    }\n}\n```\n",
    "content": {
      "operators": [
        {
          "id": "3519e005-cbdb-473a-8749-b564203d119a",
          "revision_group_id": "0c3c74d0-89b6-1948-fedd-753eaa47ca0e",
          "name": "Simple Volatility Score",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "0c3c74d0-89b6-1948-fedd-753eaa47ca0e",
          "inputs": [
            {
              "id": "1cc7c62a-0206-8ea0-ea26-05dbd6953aff",
              "name": "timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "5424d11b-b9d4-07d6-81ed-66707d71e381",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "aad10ed2-5e2f-dde9-8204-782cd0d2876f",
              "name": "window_timestamp_location",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "a26e2cdb-6390-53ed-ebbf-6f2e0201a6b7",
              "name": "volatilities",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 460,
            "y": 200
          }
        },
        {
          "id": "8e382eb9-ee49-4593-8b3b-e73e83b06360",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "Pass Through (Series)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -50,
            "y": 350
          }
        },
        {
          "id": "25825125-e2fd-4507-af09-d66fe55d5d2f",
          "revision_group_id": "38f168ef-cb06-d89c-79b3-0cd823f32e9d",
          "name": "Alerts from Score",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "38f168ef-cb06-d89c-79b3-0cd823f32e9d",
          "inputs": [
            {
              "id": "3110e5f9-9ef5-7db7-a857-a6c701086527",
              "name": "scores",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "d3d0b592-a24f-991d-2731-0531d5479e7f",
              "name": "threshold",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f63a12d8-81d2-6701-20ce-948575f7b012",
              "name": "alerts",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 930,
            "y": 200
          }
        },
        {
          "id": "6b028851-a407-4946-b131-954a64703506",
          "revision_group_id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
          "name": "Single Timeseries Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
          "inputs": [
            {
              "id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 890,
            "y": 50
          }
        },
        {
          "id": "3a5a440a-13b8-4a5e-a21d-f15405201dea",
          "revision_group_id": "95c006e4-5050-7722-6717-d1c6be2ba890",
          "name": "Timeseries and Alerts Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "95c006e4-5050-7722-6717-d1c6be2ba890",
          "inputs": [
            {
              "id": "554b29fa-2965-7063-5be1-229202673085",
              "name": "alert_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "607d77a9-5f98-b787-2987-fccb9d0a7843",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "83af48bc-135e-9def-a5cf-e9a2f233f03f",
              "name": "alert_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1380,
            "y": 320
          }
        }
      ],
      "links": [
        {
          "id": "6533736a-61bd-4d1d-9685-9e4d7368da02",
          "start": {
            "operator": "3519e005-cbdb-473a-8749-b564203d119a",
            "connector": {
              "id": "a26e2cdb-6390-53ed-ebbf-6f2e0201a6b7",
              "name": "volatilities",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "25825125-e2fd-4507-af09-d66fe55d5d2f",
            "connector": {
              "id": "3110e5f9-9ef5-7db7-a857-a6c701086527",
              "name": "scores",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "0f9a0bc5-6e43-40ee-9845-a57a1eaaa498",
          "start": {
            "operator": "3519e005-cbdb-473a-8749-b564203d119a",
            "connector": {
              "id": "a26e2cdb-6390-53ed-ebbf-6f2e0201a6b7",
              "name": "volatilities",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "6b028851-a407-4946-b131-954a64703506",
            "connector": {
              "id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "886781a7-34e3-461b-8454-94061b51cc62",
          "start": {
            "operator": "25825125-e2fd-4507-af09-d66fe55d5d2f",
            "connector": {
              "id": "f63a12d8-81d2-6701-20ce-948575f7b012",
              "name": "alerts",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "3a5a440a-13b8-4a5e-a21d-f15405201dea",
            "connector": {
              "id": "554b29fa-2965-7063-5be1-229202673085",
              "name": "alert_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "17e43181-d080-4b4c-a9d2-7568839fe408",
          "start": {
            "operator": "8e382eb9-ee49-4593-8b3b-e73e83b06360",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "3519e005-cbdb-473a-8749-b564203d119a",
            "connector": {
              "id": "1cc7c62a-0206-8ea0-ea26-05dbd6953aff",
              "name": "timeseries",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "efca3497-896f-45f7-9e89-eec92b5caffb",
          "start": {
            "operator": "8e382eb9-ee49-4593-8b3b-e73e83b06360",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "3a5a440a-13b8-4a5e-a21d-f15405201dea",
            "connector": {
              "id": "607d77a9-5f98-b787-2987-fccb9d0a7843",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "28d9e282-f7ab-4f41-87c0-d71a668dbec6",
          "start": {
            "connector": {
              "id": "9b855306-1544-4de3-acd9-696c933966f0",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 210,
                "y": 290
              }
            }
          },
          "end": {
            "operator": "3519e005-cbdb-473a-8749-b564203d119a",
            "connector": {
              "id": "5424d11b-b9d4-07d6-81ed-66707d71e381",
              "name": "window_size",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "c3ff4bc9-8cf6-4e98-a750-a4d9a56b3afc",
          "start": {
            "connector": {
              "id": "e24eb512-8d63-469d-9991-00e512a74633",
              "name": "window_timestamp_location",
              "data_type": "STRING",
              "position": {
                "x": 210,
                "y": 320
              }
            }
          },
          "end": {
            "operator": "3519e005-cbdb-473a-8749-b564203d119a",
            "connector": {
              "id": "aad10ed2-5e2f-dde9-8204-782cd0d2876f",
              "name": "window_timestamp_location",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "98805e2a-6272-4600-8a51-1fa2aeed1be8",
          "start": {
            "connector": {
              "id": "928d247e-012d-43b1-a877-2707e5f03140",
              "name": "threshold",
              "data_type": "FLOAT",
              "position": {
                "x": 680,
                "y": 290
              }
            }
          },
          "end": {
            "operator": "25825125-e2fd-4507-af09-d66fe55d5d2f",
            "connector": {
              "id": "d3d0b592-a24f-991d-2731-0531d5479e7f",
              "name": "threshold",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "433d8dec-0d67-48c0-8b12-42aa0c6fdcf4",
          "start": {
            "connector": {
              "id": "0557ddc6-1e14-493d-9b0a-6def9ede5889",
              "name": "input_series",
              "data_type": "SERIES",
              "position": {
                "x": -300,
                "y": 410
              }
            }
          },
          "end": {
            "operator": "8e382eb9-ee49-4593-8b3b-e73e83b06360",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e5366cf0-78b1-47dd-921f-3d1b8fa050b0",
          "start": {
            "operator": "6b028851-a407-4946-b131-954a64703506",
            "connector": {
              "id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "7203a149-f86c-42e4-a37f-6a89520ba523",
              "name": "score",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1340,
                "y": 110
              }
            }
          },
          "path": []
        },
        {
          "id": "4538b84b-b89d-4677-9288-4b9c9263ff14",
          "start": {
            "operator": "3a5a440a-13b8-4a5e-a21d-f15405201dea",
            "connector": {
              "id": "83af48bc-135e-9def-a5cf-e9a2f233f03f",
              "name": "alert_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "c212b5b2-dc6a-46cb-a8c5-d812c40d4b05",
              "name": "data_and_alerts",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1830,
                "y": 380
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "9b855306-1544-4de3-acd9-696c933966f0",
          "name": "window_size",
          "data_type": "STRING",
          "operator_id": "3519e005-cbdb-473a-8749-b564203d119a",
          "connector_id": "5424d11b-b9d4-07d6-81ed-66707d71e381",
          "operator_name": "Simple Volatility Score",
          "connector_name": "window_size",
          "position": {
            "x": 210,
            "y": 290
          }
        },
        {
          "id": "e24eb512-8d63-469d-9991-00e512a74633",
          "name": "window_timestamp_location",
          "data_type": "STRING",
          "operator_id": "3519e005-cbdb-473a-8749-b564203d119a",
          "connector_id": "aad10ed2-5e2f-dde9-8204-782cd0d2876f",
          "operator_name": "Simple Volatility Score",
          "connector_name": "window_timestamp_location",
          "position": {
            "x": 210,
            "y": 320
          }
        },
        {
          "id": "0557ddc6-1e14-493d-9b0a-6def9ede5889",
          "name": "input_series",
          "data_type": "SERIES",
          "operator_id": "8e382eb9-ee49-4593-8b3b-e73e83b06360",
          "connector_id": "f103c395-92b6-444d-320a-93950ed6d857",
          "operator_name": "Pass Through (Series)",
          "connector_name": "input",
          "position": {
            "x": -300,
            "y": 410
          }
        },
        {
          "id": "928d247e-012d-43b1-a877-2707e5f03140",
          "name": "threshold",
          "data_type": "FLOAT",
          "operator_id": "25825125-e2fd-4507-af09-d66fe55d5d2f",
          "connector_id": "d3d0b592-a24f-991d-2731-0531d5479e7f",
          "operator_name": "Alerts from Score",
          "connector_name": "threshold",
          "position": {
            "x": 680,
            "y": 290
          }
        }
      ],
      "outputs": [
        {
          "id": "7203a149-f86c-42e4-a37f-6a89520ba523",
          "name": "score",
          "data_type": "PLOTLYJSON",
          "operator_id": "6b028851-a407-4946-b131-954a64703506",
          "connector_id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
          "operator_name": "Single Timeseries Plot",
          "connector_name": "plot",
          "position": {
            "x": 1340,
            "y": 110
          }
        },
        {
          "id": "c212b5b2-dc6a-46cb-a8c5-d812c40d4b05",
          "name": "data_and_alerts",
          "data_type": "PLOTLYJSON",
          "operator_id": "3a5a440a-13b8-4a5e-a21d-f15405201dea",
          "connector_id": "83af48bc-135e-9def-a5cf-e9a2f233f03f",
          "operator_name": "Timeseries and Alerts Plot",
          "connector_name": "alert_plot",
          "position": {
            "x": 1830,
            "y": 380
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "9b855306-1544-4de3-acd9-696c933966f0",
          "name": "window_size",
          "data_type": "STRING"
        },
        {
          "id": "e24eb512-8d63-469d-9991-00e512a74633",
          "name": "window_timestamp_location",
          "data_type": "STRING"
        },
        {
          "id": "0557ddc6-1e14-493d-9b0a-6def9ede5889",
          "name": "input_series",
          "data_type": "SERIES"
        },
        {
          "id": "928d247e-012d-43b1-a877-2707e5f03140",
          "name": "threshold",
          "data_type": "FLOAT"
        }
      ],
      "outputs": [
        {
          "id": "7203a149-f86c-42e4-a37f-6a89520ba523",
          "name": "score",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "c212b5b2-dc6a-46cb-a8c5-d812c40d4b05",
          "name": "data_and_alerts",
          "data_type": "PLOTLYJSON"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "window_size",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "180min"
          }
        },
        {
          "workflow_input_name": "window_timestamp_location",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "center"
          }
        },
        {
          "workflow_input_name": "threshold",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "600.0"
          }
        },
        {
          "workflow_input_name": "input_series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\"2018-05-19T22:20:00.000Z\":86.9358994238,\"2018-05-19T22:25:00.000Z\":78.6552569681,\"2018-05-19T22:30:00.000Z\":93.515633185,\"2018-05-19T22:35:00.000Z\":96.3497006614,\"2018-05-19T22:40:00.000Z\":83.1926874657,\"2018-05-19T22:45:00.000Z\":69.9740743464,\"2018-05-19T22:50:00.000Z\":90.5433921349,\"2018-05-19T22:55:00.000Z\":97.4750274531,\"2018-05-19T23:00:00.000Z\":101.6738801355,\"2018-05-19T23:05:00.000Z\":85.8482897506,\"2018-05-19T23:10:00.000Z\":84.770860201,\"2018-05-19T23:15:00.000Z\":85.8559629927,\"2018-05-19T23:20:00.000Z\":86.5037351162,\"2018-05-19T23:25:00.000Z\":80.7784552462,\"2018-05-19T23:30:00.000Z\":89.8411904351,\"2018-05-19T23:35:00.000Z\":83.1826662979,\"2018-05-19T23:40:00.000Z\":103.3734694408,\"2018-05-19T23:45:00.000Z\":101.6826743271,\"2018-05-19T23:50:00.000Z\":86.4656528841,\"2018-05-19T23:55:00.000Z\":74.1823425367,\"2018-05-20T00:00:00.000Z\":77.5083836047,\"2018-05-20T00:05:00.000Z\":109.1359083963,\"2018-05-20T00:10:00.000Z\":86.9635555496,\"2018-05-20T00:15:00.000Z\":72.4734381604,\"2018-05-20T00:20:00.000Z\":82.6569065462,\"2018-05-20T00:25:00.000Z\":95.6306292516,\"2018-05-20T00:30:00.000Z\":96.5189997059,\"2018-05-20T00:35:00.000Z\":80.0414834298,\"2018-05-20T00:40:00.000Z\":81.5688589141,\"2018-05-20T00:45:00.000Z\":66.8476389718,\"2018-05-20T00:50:00.000Z\":82.1313723217,\"2018-05-20T00:55:00.000Z\":88.9032494153,\"2018-05-20T01:00:00.000Z\":78.8591066896,\"2018-05-20T01:05:00.000Z\":60.278205314,\"2018-05-20T01:10:00.000Z\":53.8951835823,\"2018-05-20T01:15:00.000Z\":71.4961130601,\"2018-05-20T01:20:00.000Z\":78.9503633957,\"2018-05-20T01:25:00.000Z\":88.2164623807,\"2018-05-20T01:30:00.000Z\":67.4817188089,\"2018-05-20T01:35:00.000Z\":48.9307150285,\"2018-05-20T01:40:00.000Z\":65.6820065898,\"2018-05-20T01:45:00.000Z\":80.4674129099,\"2018-05-20T01:50:00.000Z\":83.0974319003,\"2018-05-20T01:55:00.000Z\":66.4044977776,\"2018-05-20T02:00:00.000Z\":52.6199439715,\"2018-05-20T02:05:00.000Z\":50.2284429626,\"2018-05-20T02:10:00.000Z\":85.1886876577,\"2018-05-20T02:15:00.000Z\":85.5129601692,\"2018-05-20T02:20:00.000Z\":71.3317339188,\"2018-05-20T02:25:00.000Z\":52.917747152,\"2018-05-20T02:30:00.000Z\":52.3827727031,\"2018-05-20T02:35:00.000Z\":64.1071562615,\"2018-05-20T02:40:00.000Z\":83.0344096679,\"2018-05-20T02:45:00.000Z\":71.5022451453,\"2018-05-20T02:50:00.000Z\":46.4394249402,\"2018-05-20T02:55:00.000Z\":43.382501745,\"2018-05-20T03:00:00.000Z\":54.4602695018,\"2018-05-20T03:05:00.000Z\":76.2991858088,\"2018-05-20T03:10:00.000Z\":82.7155861643,\"2018-05-20T03:15:00.000Z\":52.7799214093,\"2018-05-20T03:20:00.000Z\":48.0293243988,\"2018-05-20T03:25:00.000Z\":40.2136775726,\"2018-05-20T03:30:00.000Z\":30.8733628055,\"2018-05-20T03:35:00.000Z\":56.7236835216,\"2018-05-20T03:40:00.000Z\":80.7648985358,\"2018-05-20T03:45:00.000Z\":60.5576562717,\"2018-05-20T03:50:00.000Z\":42.7602142735,\"2018-05-20T03:55:00.000Z\":42.8245428316,\"2018-05-20T04:00:00.000Z\":45.9636153002,\"2018-05-20T04:05:00.000Z\":39.4304037403,\"2018-05-20T04:10:00.000Z\":54.3346944195,\"2018-05-20T04:15:00.000Z\":53.7024337135,\"2018-05-20T04:20:00.000Z\":48.0270534763,\"2018-05-20T04:25:00.000Z\":28.7165651222,\"2018-05-20T04:30:00.000Z\":25.1043662316,\"2018-05-20T04:35:00.000Z\":29.6552481484,\"2018-05-20T04:40:00.000Z\":33.9357116455,\"2018-05-20T04:45:00.000Z\":36.5774719321,\"2018-05-20T04:50:00.000Z\":57.2633214106,\"2018-05-20T04:55:00.000Z\":49.2236152236,\"2018-05-20T05:00:00.000Z\":42.0204170321,\"2018-05-20T05:05:00.000Z\":29.0357907363,\"2018-05-20T05:10:00.000Z\":28.972519502,\"2018-05-20T05:15:00.000Z\":25.5883073669,\"2018-05-20T05:20:00.000Z\":25.7142077601,\"2018-05-20T05:25:00.000Z\":44.4557411598,\"2018-05-20T05:30:00.000Z\":61.0614822236,\"2018-05-20T05:35:00.000Z\":52.7493209614,\"2018-05-20T05:40:00.000Z\":38.4079501823,\"2018-05-20T05:45:00.000Z\":31.3086890977,\"2018-05-20T05:50:00.000Z\":79.1806006473,\"2018-05-20T05:55:00.000Z\":138.3298304464,\"2018-05-20T06:00:00.000Z\":159.0636434544,\"2018-05-20T06:05:00.000Z\":123.3056279812,\"2018-05-20T06:10:00.000Z\":40.9117923242,\"2018-05-20T06:15:00.000Z\":54.6703391987,\"2018-05-20T06:20:00.000Z\":60.1409043033,\"2018-05-20T06:25:00.000Z\":61.773021148,\"2018-05-20T06:30:00.000Z\":136.3291547746,\"2018-05-20T06:35:00.000Z\":172.0109041951,\"2018-05-20T06:40:00.000Z\":185.3083213323,\"2018-05-20T06:45:00.000Z\":197.8518333074,\"2018-05-20T06:50:00.000Z\":184.816863378,\"2018-05-20T06:55:00.000Z\":52.3640067807,\"2018-05-20T07:00:00.000Z\":30.3856767594,\"2018-05-20T07:05:00.000Z\":19.6763950118,\"2018-05-20T07:10:00.000Z\":84.8995442156,\"2018-05-20T07:15:00.000Z\":106.2051480693,\"2018-05-20T07:20:00.000Z\":169.8752300099,\"2018-05-20T07:25:00.000Z\":213.8776647446,\"2018-05-20T07:30:00.000Z\":218.137763105,\"2018-05-20T07:35:00.000Z\":211.9986058951,\"2018-05-20T07:40:00.000Z\":141.5436667966,\"2018-05-20T07:45:00.000Z\":55.0101414275,\"2018-05-20T07:50:00.000Z\":54.6697059315,\"2018-05-20T07:55:00.000Z\":108.6148802995,\"2018-05-20T08:00:00.000Z\":164.3342435021,\"2018-05-20T08:05:00.000Z\":205.9293219405,\"2018-05-20T08:10:00.000Z\":216.0155924794,\"2018-05-20T08:15:00.000Z\":219.5429889277,\"2018-05-20T08:20:00.000Z\":214.6161859555,\"2018-05-20T08:25:00.000Z\":182.517250994,\"2018-05-20T08:30:00.000Z\":62.0884876359,\"2018-05-20T08:35:00.000Z\":67.2103674858,\"2018-05-20T08:40:00.000Z\":78.5314292403,\"2018-05-20T08:45:00.000Z\":189.482915713,\"2018-05-20T08:50:00.000Z\":217.701588994,\"2018-05-20T08:55:00.000Z\":215.6707899191,\"2018-05-20T09:00:00.000Z\":220.6857971485,\"2018-05-20T09:05:00.000Z\":223.2626321138,\"2018-05-20T09:10:00.000Z\":186.0879452113,\"2018-05-20T09:15:00.000Z\":66.6061463066,\"2018-05-20T09:20:00.000Z\":71.8896721611,\"2018-05-20T09:25:00.000Z\":106.1131048244,\"2018-05-20T09:30:00.000Z\":194.2396819964,\"2018-05-20T09:35:00.000Z\":212.9194052403,\"2018-05-20T09:40:00.000Z\":228.7988558129,\"2018-05-20T09:45:00.000Z\":223.0539335965,\"2018-05-20T09:50:00.000Z\":229.3014824671,\"2018-05-20T09:55:00.000Z\":73.057370576,\"2018-05-20T10:00:00.000Z\":63.8777934173,\"2018-05-20T10:05:00.000Z\":55.7252891637,\"2018-05-20T10:10:00.000Z\":124.6033069636,\"2018-05-20T10:15:00.000Z\":208.999834057,\"2018-05-20T10:20:00.000Z\":210.5973352137,\"2018-05-20T10:25:00.000Z\":134.6987564878,\"2018-05-20T10:30:00.000Z\":80.7366860452,\"2018-05-20T10:35:00.000Z\":74.0239748251,\"2018-05-20T10:40:00.000Z\":69.6519772124,\"2018-05-20T10:45:00.000Z\":66.6507449417,\"2018-05-20T10:50:00.000Z\":63.6565231819,\"2018-05-20T10:55:00.000Z\":77.2641910553,\"2018-05-20T11:00:00.000Z\":76.3756956564,\"2018-05-20T11:05:00.000Z\":78.390474376,\"2018-05-20T11:10:00.000Z\":91.0208850327,\"2018-05-20T11:15:00.000Z\":84.8828852992,\"2018-05-20T11:20:00.000Z\":100.6171083238,\"2018-05-20T11:25:00.000Z\":121.420014114,\"2018-05-20T11:30:00.000Z\":122.7422457964,\"2018-05-20T11:35:00.000Z\":114.0672784089,\"2018-05-20T11:40:00.000Z\":124.9792048426,\"2018-05-20T11:45:00.000Z\":153.3861054222,\"2018-05-20T11:50:00.000Z\":140.2611586143,\"2018-05-20T11:55:00.000Z\":138.9443262784,\"2018-05-20T12:00:00.000Z\":148.510151628,\"2018-05-20T12:05:00.000Z\":152.9166475408,\"2018-05-20T12:10:00.000Z\":160.2447124871,\"2018-05-20T12:15:00.000Z\":159.5788094645,\"2018-05-20T12:20:00.000Z\":165.8041637338,\"2018-05-20T12:25:00.000Z\":159.285387551,\"2018-05-20T12:30:00.000Z\":165.271884833,\"2018-05-20T12:35:00.000Z\":161.3833736925,\"2018-05-20T12:40:00.000Z\":176.8410887258,\"2018-05-20T12:45:00.000Z\":180.5956340785,\"2018-05-20T12:50:00.000Z\":170.5980778735,\"2018-05-20T12:55:00.000Z\":167.2900126682,\"2018-05-20T13:00:00.000Z\":185.4767849358,\"2018-05-20T13:05:00.000Z\":179.9265264363,\"2018-05-20T13:10:00.000Z\":176.207298797,\"2018-05-20T13:15:00.000Z\":188.3835400671,\"2018-05-20T13:20:00.000Z\":195.4749511852,\"2018-05-20T13:25:00.000Z\":166.0712157493,\"2018-05-20T13:30:00.000Z\":176.8166973904,\"2018-05-20T13:35:00.000Z\":189.1987544304,\"2018-05-20T13:40:00.000Z\":183.4236375455,\"2018-05-20T13:45:00.000Z\":186.5117851915,\"2018-05-20T13:50:00.000Z\":184.9337200978,\"2018-05-20T13:55:00.000Z\":187.4601888511,\"2018-05-20T14:00:00.000Z\":189.1652389195,\"2018-05-20T14:05:00.000Z\":186.1269425153,\"2018-05-20T14:10:00.000Z\":190.0385586888,\"2018-05-20T14:15:00.000Z\":176.2308785787,\"2018-05-20T14:20:00.000Z\":170.889032631,\"2018-05-20T14:25:00.000Z\":200.3437418988,\"2018-05-20T14:30:00.000Z\":191.8904045089,\"2018-05-20T14:35:00.000Z\":189.7712383502,\"2018-05-20T14:40:00.000Z\":180.1290800151,\"2018-05-20T14:45:00.000Z\":197.1780600239,\"2018-05-20T14:50:00.000Z\":195.0832041298,\"2018-05-20T14:55:00.000Z\":175.8725668583,\"2018-05-20T15:00:00.000Z\":187.3043246389,\"2018-05-20T15:05:00.000Z\":197.2477733158,\"2018-05-20T15:10:00.000Z\":189.7663337729,\"2018-05-20T15:15:00.000Z\":179.2387550989,\"2018-05-20T15:20:00.000Z\":183.8158897523,\"2018-05-20T15:25:00.000Z\":186.5921372968,\"2018-05-20T15:30:00.000Z\":181.0236973864,\"2018-05-20T15:35:00.000Z\":173.2669536706,\"2018-05-20T15:40:00.000Z\":179.3250753491,\"2018-05-20T15:45:00.000Z\":183.2442350433,\"2018-05-20T15:50:00.000Z\":174.8351975126,\"2018-05-20T15:55:00.000Z\":177.7823510347,\"2018-05-20T16:00:00.000Z\":195.2615650293,\"2018-05-20T16:05:00.000Z\":174.7665754694,\"2018-05-20T16:10:00.000Z\":175.6502762854,\"2018-05-20T16:15:00.000Z\":180.2494148226,\"2018-05-20T16:20:00.000Z\":187.516513023,\"2018-05-20T16:25:00.000Z\":185.899972629,\"2018-05-20T16:30:00.000Z\":167.5664793106,\"2018-05-20T16:35:00.000Z\":169.6490691354,\"2018-05-20T16:40:00.000Z\":176.158768683,\"2018-05-20T16:45:00.000Z\":184.3236702768,\"2018-05-20T16:50:00.000Z\":163.8026982105,\"2018-05-20T16:55:00.000Z\":157.6914259458,\"2018-05-20T17:00:00.000Z\":166.0935360593,\"2018-05-20T17:05:00.000Z\":159.1095964847,\"2018-05-20T17:10:00.000Z\":147.7065369358,\"2018-05-20T17:15:00.000Z\":154.7057897245,\"2018-05-20T17:20:00.000Z\":168.3555509087,\"2018-05-20T17:25:00.000Z\":170.5614796039,\"2018-05-20T17:30:00.000Z\":158.4394920499,\"2018-05-20T17:35:00.000Z\":141.5043245617,\"2018-05-20T17:40:00.000Z\":163.4957902013,\"2018-05-20T17:45:00.000Z\":174.2984169626,\"2018-05-20T17:50:00.000Z\":156.5764681255,\"2018-05-20T17:55:00.000Z\":145.6017108276,\"2018-05-20T18:00:00.000Z\":147.6871890956,\"2018-05-20T18:05:00.000Z\":162.9423506747,\"2018-05-20T18:10:00.000Z\":162.8512641091,\"2018-05-20T18:15:00.000Z\":149.6910092824,\"2018-05-20T18:20:00.000Z\":140.5253960882,\"2018-05-20T18:25:00.000Z\":158.8771839914,\"2018-05-20T18:30:00.000Z\":172.6007529438,\"2018-05-20T18:35:00.000Z\":160.4501536466,\"2018-05-20T18:40:00.000Z\":144.8699494803,\"2018-05-20T18:45:00.000Z\":143.2864996159,\"2018-05-20T18:50:00.000Z\":156.0899311688,\"2018-05-20T18:55:00.000Z\":166.2063491434,\"2018-05-20T19:00:00.000Z\":154.1839333819,\"2018-05-20T19:05:00.000Z\":142.1280736423,\"2018-05-20T19:10:00.000Z\":137.0410387908,\"2018-05-20T19:15:00.000Z\":150.8775981298,\"2018-05-20T19:20:00.000Z\":154.3254832531,\"2018-05-20T19:25:00.000Z\":153.1508155345,\"2018-05-20T19:30:00.000Z\":143.9982068534,\"2018-05-20T19:35:00.000Z\":142.3341752461,\"2018-05-20T19:40:00.000Z\":151.720255615,\"2018-05-20T19:45:00.000Z\":158.2621281129,\"2018-05-20T19:50:00.000Z\":153.4968545282,\"2018-05-20T19:55:00.000Z\":143.7376693548,\"2018-05-20T20:00:00.000Z\":142.0514856047,\"2018-05-20T20:05:00.000Z\":150.8437823056,\"2018-05-20T20:10:00.000Z\":166.1271294879,\"2018-05-20T20:15:00.000Z\":150.5006327538,\"2018-05-20T20:20:00.000Z\":134.8359733416,\"2018-05-20T20:25:00.000Z\":133.4771648482,\"2018-05-20T20:30:00.000Z\":149.6004988879,\"2018-05-20T20:35:00.000Z\":154.5810230519,\"2018-05-20T20:40:00.000Z\":162.066364617,\"2018-05-20T20:45:00.000Z\":145.7448446292,\"2018-05-20T20:50:00.000Z\":131.9934783902,\"2018-05-20T20:55:00.000Z\":148.1438116264,\"2018-05-20T21:00:00.000Z\":159.0688775438,\"2018-05-20T21:05:00.000Z\":164.1180432476,\"2018-05-20T21:10:00.000Z\":149.5302407304,\"2018-05-20T21:15:00.000Z\":140.28660358,\"2018-05-20T21:20:00.000Z\":149.2851079194,\"2018-05-20T21:25:00.000Z\":165.5659893612,\"2018-05-20T21:30:00.000Z\":154.1439776518,\"2018-05-20T21:35:00.000Z\":149.4644136489,\"2018-05-20T21:40:00.000Z\":154.5941907831,\"2018-05-20T21:45:00.000Z\":164.8406319427,\"2018-05-20T21:50:00.000Z\":181.6959680527,\"2018-05-20T21:55:00.000Z\":154.7350000859,\"2018-05-20T22:00:00.000Z\":151.5230909704,\"2018-05-20T22:05:00.000Z\":160.1882851689,\"2018-05-20T22:10:00.000Z\":174.8887210965,\"2018-05-20T22:15:00.000Z\":173.587771397,\"2018-05-20T22:20:00.000Z\":165.0105987918,\"2018-05-20T22:25:00.000Z\":161.9471576448,\"2018-05-20T22:30:00.000Z\":164.6495581777,\"2018-05-20T22:35:00.000Z\":171.8843956932,\"2018-05-20T22:40:00.000Z\":177.9174520466,\"2018-05-20T22:45:00.000Z\":166.6287705491,\"2018-05-20T22:50:00.000Z\":151.8515290201,\"2018-05-20T22:55:00.000Z\":173.3088905867,\"2018-05-20T23:00:00.000Z\":180.786055938,\"2018-05-20T23:05:00.000Z\":176.1478069596,\"2018-05-20T23:10:00.000Z\":164.6055015361,\"2018-05-20T23:15:00.000Z\":165.8118961347,\"2018-05-20T23:20:00.000Z\":182.7612266921,\"2018-05-20T23:25:00.000Z\":178.1625682363,\"2018-05-20T23:30:00.000Z\":176.1401257364,\"2018-05-20T23:35:00.000Z\":160.2761683119,\"2018-05-20T23:40:00.000Z\":174.3541932561,\"2018-05-20T23:45:00.000Z\":185.1896388696,\"2018-05-20T23:50:00.000Z\":173.4366359349,\"2018-05-20T23:55:00.000Z\":162.1251562512,\"2018-05-21T00:00:00.000Z\":152.2594113395,\"2018-05-21T00:05:00.000Z\":164.8759416863,\"2018-05-21T00:10:00.000Z\":182.6967505432,\"2018-05-21T00:15:00.000Z\":173.9322883794,\"2018-05-21T00:20:00.000Z\":167.9858934981,\"2018-05-21T00:25:00.000Z\":154.8519440563,\"2018-05-21T00:30:00.000Z\":171.5228817334,\"2018-05-21T00:35:00.000Z\":181.9999215285,\"2018-05-21T00:40:00.000Z\":169.4980785854,\"2018-05-21T00:45:00.000Z\":164.5742191052,\"2018-05-21T00:50:00.000Z\":149.1684670774,\"2018-05-21T00:55:00.000Z\":160.1198995794,\"2018-05-21T01:00:00.000Z\":172.462731262,\"2018-05-21T01:05:00.000Z\":170.5161373658,\"2018-05-21T01:10:00.000Z\":152.1337734829,\"2018-05-21T01:15:00.000Z\":130.6612099559,\"2018-05-21T01:20:00.000Z\":152.2316047161,\"2018-05-21T01:25:00.000Z\":168.4448294636,\"2018-05-21T01:30:00.000Z\":170.1531364678,\"2018-05-21T01:35:00.000Z\":152.5175797995,\"2018-05-21T01:40:00.000Z\":127.6457147537,\"2018-05-21T01:45:00.000Z\":137.6715320223,\"2018-05-21T01:50:00.000Z\":165.742231698,\"2018-05-21T01:55:00.000Z\":181.8724040376,\"2018-05-21T02:00:00.000Z\":159.056580575,\"2018-05-21T02:05:00.000Z\":133.7876578796,\"2018-05-21T02:10:00.000Z\":135.2260247207,\"2018-05-21T02:15:00.000Z\":148.615568763,\"2018-05-21T02:20:00.000Z\":170.7364057672,\"2018-05-21T02:25:00.000Z\":161.5976827976,\"2018-05-21T02:30:00.000Z\":139.7862988032,\"2018-05-21T02:35:00.000Z\":137.0496843075,\"2018-05-21T02:40:00.000Z\":130.2219953094,\"2018-05-21T02:45:00.000Z\":149.4338745325,\"2018-05-21T02:50:00.000Z\":167.1641922817,\"2018-05-21T02:55:00.000Z\":145.8422497591,\"2018-05-21T03:00:00.000Z\":130.4670061942,\"2018-05-21T03:05:00.000Z\":116.312792923,\"2018-05-21T03:10:00.000Z\":110.4228534731,\"2018-05-21T03:15:00.000Z\":130.5443425156,\"2018-05-21T03:20:00.000Z\":137.5629238799,\"2018-05-21T03:25:00.000Z\":137.8296174877,\"2018-05-21T03:30:00.000Z\":128.3065165246,\"2018-05-21T03:35:00.000Z\":121.0885937611,\"2018-05-21T03:40:00.000Z\":111.2250157042,\"2018-05-21T03:45:00.000Z\":132.4450062421,\"2018-05-21T03:50:00.000Z\":127.7633559327,\"2018-05-21T03:55:00.000Z\":134.8909334032,\"2018-05-21T04:00:00.000Z\":128.446440207,\"2018-05-21T04:05:00.000Z\":110.441006872,\"2018-05-21T04:10:00.000Z\":109.700946095,\"2018-05-21T04:15:00.000Z\":114.5340437289,\"2018-05-21T04:20:00.000Z\":122.0335804153,\"2018-05-21T04:25:00.000Z\":140.3120967139,\"2018-05-21T04:30:00.000Z\":141.6490414641,\"2018-05-21T04:35:00.000Z\":129.2456715238,\"2018-05-21T04:40:00.000Z\":128.3604702735,\"2018-05-21T04:45:00.000Z\":103.6823697419,\"2018-05-21T04:50:00.000Z\":107.7692280091,\"2018-05-21T04:55:00.000Z\":105.3069016698,\"2018-05-21T05:00:00.000Z\":133.3823375377,\"2018-05-21T05:05:00.000Z\":135.5761918319,\"2018-05-21T05:10:00.000Z\":126.3400846309,\"2018-05-21T05:15:00.000Z\":116.1887040832,\"2018-05-21T05:20:00.000Z\":110.0880811292,\"2018-05-21T05:25:00.000Z\":107.804272825,\"2018-05-21T05:30:00.000Z\":126.1140477471,\"2018-05-21T05:35:00.000Z\":100.5340249354,\"2018-05-21T05:40:00.000Z\":113.0860552474,\"2018-05-21T05:45:00.000Z\":125.3068239043,\"2018-05-21T05:50:00.000Z\":120.7452754491,\"2018-05-21T05:55:00.000Z\":109.0093390122,\"2018-05-21T06:00:00.000Z\":104.4720080124,\"2018-05-21T06:05:00.000Z\":114.3773182728,\"2018-05-21T06:10:00.000Z\":235.5743866226,\"2018-05-21T06:15:00.000Z\":259.9093971669,\"2018-05-21T06:20:00.000Z\":252.2075690771,\"2018-05-21T06:25:00.000Z\":160.3976473829,\"2018-05-21T06:30:00.000Z\":138.4378069079,\"2018-05-21T06:35:00.000Z\":135.5228422482,\"2018-05-21T06:40:00.000Z\":127.1940938929,\"2018-05-21T06:45:00.000Z\":131.0889830803,\"2018-05-21T06:50:00.000Z\":246.3764762481,\"2018-05-21T06:55:00.000Z\":275.7713523003,\"2018-05-21T07:00:00.000Z\":293.7155039596,\"2018-05-21T07:05:00.000Z\":285.5505063576,\"2018-05-21T07:10:00.000Z\":146.78786506,\"2018-05-21T07:15:00.000Z\":149.8764086882,\"2018-05-21T07:20:00.000Z\":144.187013584,\"2018-05-21T07:25:00.000Z\":130.86381675,\"2018-05-21T07:30:00.000Z\":194.7438116517,\"2018-05-21T07:35:00.000Z\":272.7913552453,\"2018-05-21T07:40:00.000Z\":290.820978105,\"2018-05-21T07:45:00.000Z\":296.9505939576,\"2018-05-21T07:50:00.000Z\":298.0083885275,\"2018-05-21T07:55:00.000Z\":187.4321505365,\"2018-05-21T08:00:00.000Z\":162.0547652346,\"2018-05-21T08:05:00.000Z\":150.9500058684,\"2018-05-21T08:10:00.000Z\":177.2718457395,\"2018-05-21T08:15:00.000Z\":226.9682405716,\"2018-05-21T08:20:00.000Z\":281.6991259616,\"2018-05-21T08:25:00.000Z\":299.6170843508,\"2018-05-21T08:30:00.000Z\":294.2845290055,\"2018-05-21T08:35:00.000Z\":293.2341244794,\"2018-05-21T08:40:00.000Z\":185.7453367837,\"2018-05-21T08:45:00.000Z\":150.9503373023,\"2018-05-21T08:50:00.000Z\":151.0371469267,\"2018-05-21T08:55:00.000Z\":206.0515768125,\"2018-05-21T09:00:00.000Z\":254.9134971128,\"2018-05-21T09:05:00.000Z\":260.5309795404,\"2018-05-21T09:10:00.000Z\":283.5240895158,\"2018-05-21T09:15:00.000Z\":299.5669472092,\"2018-05-21T09:20:00.000Z\":290.4716478637,\"2018-05-21T09:25:00.000Z\":150.1792877788,\"2018-05-21T09:30:00.000Z\":153.350843163,\"2018-05-21T09:35:00.000Z\":168.3919070356,\"2018-05-21T09:40:00.000Z\":246.2511128942,\"2018-05-21T09:45:00.000Z\":272.6459016925,\"2018-05-21T09:50:00.000Z\":284.3291444312,\"2018-05-21T09:55:00.000Z\":287.8771578655,\"2018-05-21T10:00:00.000Z\":293.9291535394,\"2018-05-21T10:05:00.000Z\":148.1034467543,\"2018-05-21T10:10:00.000Z\":144.6698776958,\"2018-05-21T10:15:00.000Z\":150.4993603999,\"2018-05-21T10:20:00.000Z\":165.9184380435,\"2018-05-21T10:25:00.000Z\":234.9516814197,\"2018-05-21T10:30:00.000Z\":258.7242848345,\"2018-05-21T10:35:00.000Z\":149.5856562879,\"2018-05-21T10:40:00.000Z\":157.3995593779,\"2018-05-21T10:45:00.000Z\":163.5934703779,\"2018-05-21T10:50:00.000Z\":165.4229952016,\"2018-05-21T10:55:00.000Z\":147.402825158,\"2018-05-21T11:00:00.000Z\":147.0929068055,\"2018-05-21T11:05:00.000Z\":169.5109621667,\"2018-05-21T11:10:00.000Z\":162.7524694778,\"2018-05-21T11:15:00.000Z\":156.2755862145,\"2018-05-21T11:20:00.000Z\":165.1037874415,\"2018-05-21T11:25:00.000Z\":174.8500792849,\"2018-05-21T11:30:00.000Z\":201.1382307932,\"2018-05-21T11:35:00.000Z\":194.9702303703,\"2018-05-21T11:40:00.000Z\":186.4801486217,\"2018-05-21T11:45:00.000Z\":199.7644485453,\"2018-05-21T11:50:00.000Z\":225.0726034308,\"2018-05-21T11:55:00.000Z\":229.2145947795,\"2018-05-21T12:00:00.000Z\":222.5780094354,\"2018-05-21T12:05:00.000Z\":220.3030741961,\"2018-05-21T12:10:00.000Z\":233.3964392018,\"2018-05-21T12:15:00.000Z\":239.4059502363,\"2018-05-21T12:20:00.000Z\":240.3887803522,\"2018-05-21T12:25:00.000Z\":240.8112614065,\"2018-05-21T12:30:00.000Z\":256.5808995769,\"2018-05-21T12:35:00.000Z\":242.7919703895,\"2018-05-21T12:40:00.000Z\":238.6621344019,\"2018-05-21T12:45:00.000Z\":250.261457039,\"2018-05-21T12:50:00.000Z\":259.4516469448,\"2018-05-21T12:55:00.000Z\":247.4866188483,\"2018-05-21T13:00:00.000Z\":262.8559965981,\"2018-05-21T13:05:00.000Z\":271.1144597549,\"2018-05-21T13:10:00.000Z\":268.1243822049,\"2018-05-21T13:15:00.000Z\":252.8992999006,\"2018-05-21T13:20:00.000Z\":263.7082366234,\"2018-05-21T13:25:00.000Z\":266.4385594157,\"2018-05-21T13:30:00.000Z\":254.0656734496,\"2018-05-21T13:35:00.000Z\":261.2732814771,\"2018-05-21T13:40:00.000Z\":269.0084799247,\"2018-05-21T13:45:00.000Z\":272.3602853329,\"2018-05-21T13:50:00.000Z\":264.6174163215,\"2018-05-21T13:55:00.000Z\":273.3087959959,\"2018-05-21T14:00:00.000Z\":271.2140332534,\"2018-05-21T14:05:00.000Z\":268.8151027545,\"2018-05-21T14:10:00.000Z\":255.285584259,\"2018-05-21T14:15:00.000Z\":269.3637345526,\"2018-05-21T14:20:00.000Z\":268.1926599218,\"2018-05-21T14:25:00.000Z\":267.99650141,\"2018-05-21T14:30:00.000Z\":279.18412017,\"2018-05-21T14:35:00.000Z\":275.8955013989,\"2018-05-21T14:40:00.000Z\":266.4569053169,\"2018-05-21T14:45:00.000Z\":258.4459289038,\"2018-05-21T14:50:00.000Z\":240.515998635,\"2018-05-21T14:55:00.000Z\":236.4320345496,\"2018-05-21T15:00:00.000Z\":232.7289742452,\"2018-05-21T15:05:00.000Z\":234.8597697921,\"2018-05-21T15:10:00.000Z\":269.9023580616,\"2018-05-21T15:15:00.000Z\":316.1587352767,\"2018-05-21T15:20:00.000Z\":323.8701332699,\"2018-05-21T15:25:00.000Z\":317.1190739985,\"2018-05-21T15:30:00.000Z\":301.2711390737,\"2018-05-21T15:35:00.000Z\":273.5258666903,\"2018-05-21T15:40:00.000Z\":261.1074678772,\"2018-05-21T15:45:00.000Z\":267.2029071704,\"2018-05-21T15:50:00.000Z\":280.0055655431,\"2018-05-21T15:55:00.000Z\":262.7845262553,\"2018-05-21T16:00:00.000Z\":253.3816216091,\"2018-05-21T16:05:00.000Z\":261.568429667,\"2018-05-21T16:10:00.000Z\":275.2199153263,\"2018-05-21T16:15:00.000Z\":261.7716808722,\"2018-05-21T16:20:00.000Z\":253.6702085202,\"2018-05-21T16:25:00.000Z\":264.644546991,\"2018-05-21T16:30:00.000Z\":260.0792034028,\"2018-05-21T16:35:00.000Z\":255.6138360084,\"2018-05-21T16:40:00.000Z\":237.9523419399,\"2018-05-21T16:45:00.000Z\":254.7334032544,\"2018-05-21T16:50:00.000Z\":269.3378390459,\"2018-05-21T16:55:00.000Z\":249.3728867568,\"2018-05-21T17:00:00.000Z\":248.1575754584,\"2018-05-21T17:05:00.000Z\":246.5340665318,\"2018-05-21T17:10:00.000Z\":265.0021522274,\"2018-05-21T17:15:00.000Z\":250.1687925269,\"2018-05-21T17:20:00.000Z\":231.7427349071,\"2018-05-21T17:25:00.000Z\":252.4959783249,\"2018-05-21T17:30:00.000Z\":266.3043893095,\"2018-05-21T17:35:00.000Z\":242.5763346215,\"2018-05-21T17:40:00.000Z\":235.7665786001,\"2018-05-21T17:45:00.000Z\":243.7718278734,\"2018-05-21T17:50:00.000Z\":252.3190830758,\"2018-05-21T17:55:00.000Z\":248.5787566114,\"2018-05-21T18:00:00.000Z\":240.5047675689,\"2018-05-21T18:05:00.000Z\":232.3865041056,\"2018-05-21T18:10:00.000Z\":251.6981540088,\"2018-05-21T18:15:00.000Z\":248.9267343335,\"2018-05-21T18:20:00.000Z\":230.5404194973,\"2018-05-21T18:25:00.000Z\":242.7762844033,\"2018-05-21T18:30:00.000Z\":232.2519884073,\"2018-05-21T18:35:00.000Z\":239.7646228635,\"2018-05-21T18:40:00.000Z\":241.3671348806,\"2018-05-21T18:45:00.000Z\":230.8082371746,\"2018-05-21T18:50:00.000Z\":223.0095260547,\"2018-05-21T18:55:00.000Z\":236.5057738225,\"2018-05-21T19:00:00.000Z\":244.1521561349,\"2018-05-21T19:05:00.000Z\":229.8200184242,\"2018-05-21T19:10:00.000Z\":227.260960443,\"2018-05-21T19:15:00.000Z\":224.8377126659,\"2018-05-21T19:20:00.000Z\":227.89230623,\"2018-05-21T19:25:00.000Z\":239.8052105909,\"2018-05-21T19:30:00.000Z\":234.7738052962,\"2018-05-21T19:35:00.000Z\":227.0413327901,\"2018-05-21T19:40:00.000Z\":209.0694083257,\"2018-05-21T19:45:00.000Z\":243.4394369104,\"2018-05-21T19:50:00.000Z\":244.0213561339,\"2018-05-21T19:55:00.000Z\":241.6512902164,\"2018-05-21T20:00:00.000Z\":235.9499431139,\"2018-05-21T20:05:00.000Z\":233.8867893589,\"2018-05-21T20:10:00.000Z\":248.4678463306,\"2018-05-21T20:15:00.000Z\":250.8534584491,\"2018-05-21T20:20:00.000Z\":244.7945724698,\"2018-05-21T20:25:00.000Z\":223.9864173817,\"2018-05-21T20:30:00.000Z\":236.3576690687,\"2018-05-21T20:35:00.000Z\":252.8759042316,\"2018-05-21T20:40:00.000Z\":251.7834371473,\"2018-05-21T20:45:00.000Z\":251.7672641732,\"2018-05-21T20:50:00.000Z\":241.3963533459,\"2018-05-21T20:55:00.000Z\":230.4328128909,\"2018-05-21T21:00:00.000Z\":247.6399977861,\"2018-05-21T21:05:00.000Z\":253.7207127357,\"2018-05-21T21:10:00.000Z\":239.4657299581,\"2018-05-21T21:15:00.000Z\":247.9547043044,\"2018-05-21T21:20:00.000Z\":246.305074974,\"2018-05-21T21:25:00.000Z\":263.3165011851,\"2018-05-21T21:30:00.000Z\":249.2690772476,\"2018-05-21T21:35:00.000Z\":241.6100739807,\"2018-05-21T21:40:00.000Z\":243.4235918785,\"2018-05-21T21:45:00.000Z\":266.8562870047,\"2018-05-21T21:50:00.000Z\":266.5168016185,\"2018-05-21T21:55:00.000Z\":245.7146588239,\"2018-05-21T22:00:00.000Z\":239.4711229568,\"2018-05-21T22:05:00.000Z\":258.4958009255,\"2018-05-21T22:10:00.000Z\":268.3613431855,\"2018-05-21T22:15:00.000Z\":262.6967871798,\"2018-05-21T22:20:00.000Z\":247.5249566328,\"2018-05-21T22:25:00.000Z\":254.4802266552,\"2018-05-21T22:30:00.000Z\":271.8935426721,\"2018-05-21T22:35:00.000Z\":261.5589828459,\"2018-05-21T22:40:00.000Z\":250.4267352513,\"2018-05-21T22:45:00.000Z\":253.8074231597,\"2018-05-21T22:50:00.000Z\":277.0182034074,\"2018-05-21T22:55:00.000Z\":275.6463660401,\"2018-05-21T23:00:00.000Z\":253.2511679689,\"2018-05-21T23:05:00.000Z\":267.1565324881,\"2018-05-21T23:10:00.000Z\":270.4126473875,\"2018-05-21T23:15:00.000Z\":269.9145241413,\"2018-05-21T23:20:00.000Z\":260.0427486542,\"2018-05-21T23:25:00.000Z\":261.8064823512,\"2018-05-21T23:30:00.000Z\":266.6216156216,\"2018-05-21T23:35:00.000Z\":284.688721616,\"2018-05-21T23:40:00.000Z\":263.1994072853,\"2018-05-21T23:45:00.000Z\":271.5607869015,\"2018-05-21T23:50:00.000Z\":285.3811400046,\"2018-05-21T23:55:00.000Z\":281.9405519198,\"2018-05-22T00:00:00.000Z\":260.0894340273,\"2018-05-22T00:05:00.000Z\":250.6104664999,\"2018-05-22T00:10:00.000Z\":260.8163204059,\"2018-05-22T00:15:00.000Z\":277.4287752733,\"2018-05-22T00:20:00.000Z\":271.4001182926,\"2018-05-22T00:25:00.000Z\":250.8881918718,\"2018-05-22T00:30:00.000Z\":255.5231829841,\"2018-05-22T00:35:00.000Z\":258.1096199613,\"2018-05-22T00:40:00.000Z\":268.8494409385,\"2018-05-22T00:45:00.000Z\":262.0037381571,\"2018-05-22T00:50:00.000Z\":257.0855238447,\"2018-05-22T00:55:00.000Z\":247.2844317479,\"2018-05-22T01:00:00.000Z\":257.2944776947,\"2018-05-22T01:05:00.000Z\":272.5675702006,\"2018-05-22T01:10:00.000Z\":261.694463174,\"2018-05-22T01:15:00.000Z\":240.8498347495,\"2018-05-22T01:20:00.000Z\":245.9439936497,\"2018-05-22T01:25:00.000Z\":258.387774892,\"2018-05-22T01:30:00.000Z\":269.2886912867,\"2018-05-22T01:35:00.000Z\":261.8955542843,\"2018-05-22T01:40:00.000Z\":251.2915418634,\"2018-05-22T01:45:00.000Z\":237.4755708467,\"2018-05-22T01:50:00.000Z\":257.9397295362,\"2018-05-22T01:55:00.000Z\":266.9124394115,\"2018-05-22T02:00:00.000Z\":259.1095812604,\"2018-05-22T02:05:00.000Z\":239.1312736228,\"2018-05-22T02:10:00.000Z\":226.8252040128,\"2018-05-22T02:15:00.000Z\":239.7562523088,\"2018-05-22T02:20:00.000Z\":259.1618084356,\"2018-05-22T02:25:00.000Z\":251.9870362708,\"2018-05-22T02:30:00.000Z\":222.695188851,\"2018-05-22T02:35:00.000Z\":214.7192107025,\"2018-05-22T02:40:00.000Z\":225.2440938564,\"2018-05-22T02:45:00.000Z\":233.3238891005,\"2018-05-22T02:50:00.000Z\":252.4799835974,\"2018-05-22T02:55:00.000Z\":227.6566076947,\"2018-05-22T03:00:00.000Z\":211.2675840162,\"2018-05-22T03:05:00.000Z\":202.8194796906,\"2018-05-22T03:10:00.000Z\":201.0177535739,\"2018-05-22T03:15:00.000Z\":221.0236022647,\"2018-05-22T03:20:00.000Z\":225.1295211278,\"2018-05-22T03:25:00.000Z\":214.0598596335,\"2018-05-22T03:30:00.000Z\":210.8554415183,\"2018-05-22T03:35:00.000Z\":207.9182176868,\"2018-05-22T03:40:00.000Z\":195.2428509288,\"2018-05-22T03:45:00.000Z\":187.3339838169,\"2018-05-22T03:50:00.000Z\":209.9363325208,\"2018-05-22T03:55:00.000Z\":221.0133169503,\"2018-05-22T04:00:00.000Z\":225.7554925234,\"2018-05-22T04:05:00.000Z\":204.6003619505,\"2018-05-22T04:10:00.000Z\":206.6622865083,\"2018-05-22T04:15:00.000Z\":190.8732616037,\"2018-05-22T04:20:00.000Z\":199.5414898747,\"2018-05-22T04:25:00.000Z\":192.3027709022,\"2018-05-22T04:30:00.000Z\":226.3519300424,\"2018-05-22T04:35:00.000Z\":227.4075134562,\"2018-05-22T04:40:00.000Z\":237.5801354038,\"2018-05-22T04:45:00.000Z\":370.0233873937,\"2018-05-22T04:50:00.000Z\":476.6929263243,\"2018-05-22T04:55:00.000Z\":556.1444745173,\"2018-05-22T05:00:00.000Z\":809.9805079678,\"2018-05-22T05:05:00.000Z\":940.1002078546,\"2018-05-22T05:10:00.000Z\":922.2172570652,\"2018-05-22T05:15:00.000Z\":921.9394395256,\"2018-05-22T05:20:00.000Z\":931.1326843594,\"2018-05-22T05:25:00.000Z\":927.7988392295,\"2018-05-22T05:30:00.000Z\":924.5430977054,\"2018-05-22T05:35:00.000Z\":932.5727269319,\"2018-05-22T05:40:00.000Z\":936.4962950281,\"2018-05-22T05:45:00.000Z\":929.0260192607,\"2018-05-22T05:50:00.000Z\":926.4357356548,\"2018-05-22T05:55:00.000Z\":934.7257131637,\"2018-05-22T06:00:00.000Z\":908.4082221891,\"2018-05-22T06:05:00.000Z\":917.7112901544,\"2018-05-22T06:10:00.000Z\":924.0958121497}"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "2cbb87e7-ea99-4404-abe1-be550f22763f",
    "revision_group_id": "31415338-ed7d-4905-92bb-1c29593c0f1f",
    "name": "Data From Last Positive Step",
    "description": "Demonstrate a simple step detection / filtering",
    "category": "Examples",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T16:33:37.042435+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "## Get data from last positive Step\n\nThis workflow detects positive steps in a timeseries and then returns only the data from the last detected step onwards. Step detection is simply done by comparing differences between consecutive values against a threshhold.\n\nThis workflow is an example for a workflow that can be used as an operator in another workflow.\n\n\n## Examples\nThe json input of a typical call of this workflow is\n```\n{\n\t\"positive_step_size\": 0.25,\n\t\"inp_series\": {\n    \"2020-05-01T00:00:00.000Z\": 2.5340945967,\n    \"2020-05-01T01:00:00.000Z\": 2.5658768256,\n    \"2020-05-01T02:00:00.000Z\": 2.570679579,\n    \"2020-05-01T03:00:00.000Z\": 2.5618633791,\n    \"2020-05-01T04:00:00.000Z\": 2.5709272918,\n    \"2020-05-01T05:00:00.000Z\": 2.5447713467,\n    \"2020-05-01T06:00:00.000Z\": 2.544863302,\n    \"2020-05-01T07:00:00.000Z\": 2.5890837968,\n    \"2020-05-01T08:00:00.000Z\": 2.5646962713,\n    \"2020-05-01T09:00:00.000Z\": 2.5335594298,\n    \"2020-05-01T10:00:00.000Z\": 2.5570004281,\n    \"2020-05-01T11:00:00.000Z\": 2.5279007185,\n    \"2020-05-01T12:00:00.000Z\": 2.5180691208,\n    \"2020-05-01T13:00:00.000Z\": 2.5425170109,\n    \"2020-05-01T14:00:00.000Z\": 2.5193970292,\n    \"2020-05-01T15:00:00.000Z\": 2.505462918,\n    \"2020-05-01T16:00:00.000Z\": 2.5569998157,\n    \"2020-05-01T17:00:00.000Z\": 2.507311926,\n    \"2020-05-01T18:00:00.000Z\": 2.498353005,\n    \"2020-05-01T19:00:00.000Z\": 2.546221722,\n    \"2020-05-01T20:00:00.000Z\": 2.5223358532,\n    \"2020-05-01T21:00:00.000Z\": 2.4936112195,\n    \"2020-05-01T22:00:00.000Z\": 2.4929833196,\n    \"2020-05-01T23:00:00.000Z\": 2.5375547278,\n    \"2020-05-02T00:00:00.000Z\": 2.5104412318,\n    \"2020-05-02T01:00:00.000Z\": 2.5113524681,\n    \"2020-05-02T02:00:00.000Z\": 2.5337742397,\n    \"2020-05-02T03:00:00.000Z\": 2.5038516369,\n    \"2020-05-02T04:00:00.000Z\": 2.4963372908,\n    \"2020-05-02T05:00:00.000Z\": 2.5195275913,\n    \"2020-05-02T06:00:00.000Z\": 2.4935793186,\n    \"2020-05-02T07:00:00.000Z\": 2.5164266646,\n    \"2020-05-02T08:00:00.000Z\": 2.5185465582,\n    \"2020-05-02T09:00:00.000Z\": 2.5350140943,\n    \"2020-05-02T10:00:00.000Z\": 2.5117286988,\n    \"2020-05-02T11:00:00.000Z\": 2.5082871799,\n    \"2020-05-02T12:00:00.000Z\": 2.5149836071,\n    \"2020-05-02T13:00:00.000Z\": 2.5028807486,\n    \"2020-05-02T14:00:00.000Z\": 2.523517088,\n    \"2020-05-02T15:00:00.000Z\": 2.554328315,\n    \"2020-05-02T16:00:00.000Z\": 2.4982672405,\n    \"2020-05-02T17:00:00.000Z\": 2.5212582072,\n    \"2020-05-02T18:00:00.000Z\": 2.5408671362,\n    \"2020-05-02T19:00:00.000Z\": 2.534927499,\n    \"2020-05-02T20:00:00.000Z\": 2.5499492231,\n    \"2020-05-02T21:00:00.000Z\": 2.506651042,\n    \"2020-05-02T22:00:00.000Z\": 2.5362261202,\n    \"2020-05-02T23:00:00.000Z\": 2.5289785015,\n    \"2020-05-03T00:00:00.000Z\": 2.5439596654,\n    \"2020-05-03T01:00:00.000Z\": 2.5349408476,\n    \"2020-05-03T02:00:00.000Z\": 2.4928973472,\n    \"2020-05-03T03:00:00.000Z\": 2.5235283235,\n    \"2020-05-03T04:00:00.000Z\": 2.4952145471,\n    \"2020-05-03T05:00:00.000Z\": 2.5357483131,\n    \"2020-05-03T06:00:00.000Z\": 2.4875558337,\n    \"2020-05-03T07:00:00.000Z\": 2.4976392088,\n    \"2020-05-03T08:00:00.000Z\": 2.4934381565,\n    \"2020-05-03T09:00:00.000Z\": 2.5499418548,\n    \"2020-05-03T10:00:00.000Z\": 2.5353427119,\n    \"2020-05-03T11:00:00.000Z\": 2.5438575598,\n    \"2020-05-03T12:00:00.000Z\": 2.5477980799,\n    \"2020-05-03T13:00:00.000Z\": 2.5353353389,\n    \"2020-05-03T14:00:00.000Z\": 2.490339555,\n    \"2020-05-03T15:00:00.000Z\": 2.5258760102,\n    \"2020-05-03T16:00:00.000Z\": 2.4909430024,\n    \"2020-05-03T17:00:00.000Z\": 2.5418209819,\n    \"2020-05-03T18:00:00.000Z\": 2.4963330331,\n    \"2020-05-03T19:00:00.000Z\": 2.4893977942,\n    \"2020-05-03T20:00:00.000Z\": 2.5157624715,\n    \"2020-05-03T21:00:00.000Z\": 2.5332988324,\n    \"2020-05-03T22:00:00.000Z\": 2.5080267414,\n    \"2020-05-03T23:00:00.000Z\": 2.5110675161,\n    \"2020-05-04T00:00:00.000Z\": 2.4916789597,\n    \"2020-05-04T01:00:00.000Z\": 2.4857544538,\n    \"2020-05-04T02:00:00.000Z\": 2.5523625847,\n    \"2020-05-04T03:00:00.000Z\": 2.5161945193,\n    \"2020-05-04T04:00:00.000Z\": 2.5031237636,\n    \"2020-05-04T05:00:00.000Z\": 2.499693572,\n    \"2020-05-04T06:00:00.000Z\": 2.5310847546,\n    \"2020-05-04T07:00:00.000Z\": 2.5294701706,\n    \"2020-05-04T08:00:00.000Z\": 2.4953251286,\n    \"2020-05-04T09:00:00.000Z\": 2.5145793132,\n    \"2020-05-04T10:00:00.000Z\": 2.537795696,\n    \"2020-05-04T11:00:00.000Z\": 2.5177948972,\n    \"2020-05-04T12:00:00.000Z\": 2.4771575641,\n    \"2020-05-04T13:00:00.000Z\": 2.4766223173,\n    \"2020-05-04T14:00:00.000Z\": 2.4866457947,\n    \"2020-05-04T15:00:00.000Z\": 2.4773926315,\n    \"2020-05-04T16:00:00.000Z\": 2.4849491065,\n    \"2020-05-04T17:00:00.000Z\": 2.4614148496,\n    \"2020-05-04T18:00:00.000Z\": 2.5140566144,\n    \"2020-05-04T19:00:00.000Z\": 2.4610181004,\n    \"2020-05-04T20:00:00.000Z\": 2.5032041998,\n    \"2020-05-04T21:00:00.000Z\": 2.4602600843,\n    \"2020-05-04T22:00:00.000Z\": 2.4425060895,\n    \"2020-05-04T23:00:00.000Z\": 2.4887562624,\n    \"2020-05-05T00:00:00.000Z\": 2.4587981472,\n    \"2020-05-05T01:00:00.000Z\": 2.4976287919,\n    \"2020-05-05T02:00:00.000Z\": 2.4759566315,\n    \"2020-05-05T03:00:00.000Z\": 2.4983647141,\n    \"2020-05-05T04:00:00.000Z\": 2.4481869955,\n    \"2020-05-05T05:00:00.000Z\": 2.4620033756,\n    \"2020-05-05T06:00:00.000Z\": 2.4722438504,\n    \"2020-05-05T07:00:00.000Z\": 2.4836028877,\n    \"2020-05-05T08:00:00.000Z\": 2.4999365634,\n    \"2020-05-05T09:00:00.000Z\": 2.4590343725,\n    \"2020-05-05T10:00:00.000Z\": 2.485029072,\n    \"2020-05-05T11:00:00.000Z\": 2.4832933203,\n    \"2020-05-05T12:00:00.000Z\": 2.4493189797,\n    \"2020-05-05T13:00:00.000Z\": 2.4555612652,\n    \"2020-05-05T14:00:00.000Z\": 2.4331822011,\n    \"2020-05-05T15:00:00.000Z\": 2.4437542619,\n    \"2020-05-05T16:00:00.000Z\": 2.4103224236,\n    \"2020-05-05T17:00:00.000Z\": 2.4599756767,\n    \"2020-05-05T18:00:00.000Z\": 2.4195711603,\n    \"2020-05-05T19:00:00.000Z\": 2.4204898355,\n    \"2020-05-05T20:00:00.000Z\": 2.4271840023,\n    \"2020-05-05T21:00:00.000Z\": 2.4093728506,\n    \"2020-05-05T22:00:00.000Z\": 2.4287596847,\n    \"2020-05-05T23:00:00.000Z\": 2.4502553829,\n    \"2020-05-06T00:00:00.000Z\": 2.4032112072,\n    \"2020-05-06T01:00:00.000Z\": 2.4164635616,\n    \"2020-05-06T02:00:00.000Z\": 2.3964321581,\n    \"2020-05-06T03:00:00.000Z\": 2.4296400627,\n    \"2020-05-06T04:00:00.000Z\": 2.4597693405,\n    \"2020-05-06T05:00:00.000Z\": 2.4051327723,\n    \"2020-05-06T06:00:00.000Z\": 2.39231384,\n    \"2020-05-06T07:00:00.000Z\": 2.4227524163,\n    \"2020-05-06T08:00:00.000Z\": 2.4241047304,\n    \"2020-05-06T09:00:00.000Z\": 2.383595989,\n    \"2020-05-06T10:00:00.000Z\": 2.3830219146,\n    \"2020-05-06T11:00:00.000Z\": 2.391330956,\n    \"2020-05-06T12:00:00.000Z\": 2.4083971686,\n    \"2020-05-06T13:00:00.000Z\": 2.4019011994,\n    \"2020-05-06T14:00:00.000Z\": 2.3741282476,\n    \"2020-05-06T15:00:00.000Z\": 2.408673447,\n    \"2020-05-06T16:00:00.000Z\": 2.3888631077,\n    \"2020-05-06T17:00:00.000Z\": 2.3805006535,\n    \"2020-05-06T18:00:00.000Z\": 2.4118540536,\n    \"2020-05-06T19:00:00.000Z\": 2.3915179257,\n    \"2020-05-06T20:00:00.000Z\": 2.3692830106,\n    \"2020-05-06T21:00:00.000Z\": 2.4088917478,\n    \"2020-05-06T22:00:00.000Z\": 2.3724274396,\n    \"2020-05-06T23:00:00.000Z\": 2.3524618611,\n    \"2020-05-07T00:00:00.000Z\": 2.3824901899,\n    \"2020-05-07T01:00:00.000Z\": 2.39644748,\n    \"2020-05-07T02:00:00.000Z\": 2.4080285331,\n    \"2020-05-07T03:00:00.000Z\": 2.3540845158,\n    \"2020-05-07T04:00:00.000Z\": 2.377081574,\n    \"2020-05-07T05:00:00.000Z\": 2.3825706704,\n    \"2020-05-07T06:00:00.000Z\": 2.3969814116,\n    \"2020-05-07T07:00:00.000Z\": 2.3902110487,\n    \"2020-05-07T08:00:00.000Z\": 2.8876608764,\n    \"2020-05-07T09:00:00.000Z\": 2.8554512351,\n    \"2020-05-07T10:00:00.000Z\": 2.9011506947,\n    \"2020-05-07T11:00:00.000Z\": 2.8739810027,\n    \"2020-05-07T12:00:00.000Z\": 2.8642327429,\n    \"2020-05-07T13:00:00.000Z\": 2.8609388862,\n    \"2020-05-07T14:00:00.000Z\": 2.8691609675,\n    \"2020-05-07T15:00:00.000Z\": 2.8516302986,\n    \"2020-05-07T16:00:00.000Z\": 2.8860791586,\n    \"2020-05-07T17:00:00.000Z\": 2.8417859745,\n    \"2020-05-07T18:00:00.000Z\": 2.8577750865,\n    \"2020-05-07T19:00:00.000Z\": 2.861678322,\n    \"2020-05-07T20:00:00.000Z\": 2.8064804686,\n    \"2020-05-07T21:00:00.000Z\": 2.8447594889,\n    \"2020-05-07T22:00:00.000Z\": 2.855936299,\n    \"2020-05-07T23:00:00.000Z\": 2.8142863343,\n    \"2020-05-08T00:00:00.000Z\": 2.8373024815,\n    \"2020-05-08T01:00:00.000Z\": 2.8435283639,\n    \"2020-05-08T02:00:00.000Z\": 2.8654301284,\n    \"2020-05-08T03:00:00.000Z\": 2.821334943,\n    \"2020-05-08T04:00:00.000Z\": 2.8432670041,\n    \"2020-05-08T05:00:00.000Z\": 2.8557929741,\n    \"2020-05-08T06:00:00.000Z\": 2.8156375097,\n    \"2020-05-08T07:00:00.000Z\": 2.855427583,\n    \"2020-05-08T08:00:00.000Z\": 2.8338698983,\n    \"2020-05-08T09:00:00.000Z\": 2.8455777397,\n    \"2020-05-08T10:00:00.000Z\": 2.8302046473,\n    \"2020-05-08T11:00:00.000Z\": 2.811772505,\n    \"2020-05-08T12:00:00.000Z\": 2.8327504575,\n    \"2020-05-08T13:00:00.000Z\": 2.8149162137,\n    \"2020-05-08T14:00:00.000Z\": 2.8418180107,\n    \"2020-05-08T15:00:00.000Z\": 2.77624676,\n    \"2020-05-08T16:00:00.000Z\": 2.7750554183,\n    \"2020-05-08T17:00:00.000Z\": 2.8217362031,\n    \"2020-05-08T18:00:00.000Z\": 2.7887413672,\n    \"2020-05-08T19:00:00.000Z\": 2.8221631708,\n    \"2020-05-08T20:00:00.000Z\": 2.7607433072,\n    \"2020-05-08T21:00:00.000Z\": 2.8068503911,\n    \"2020-05-08T22:00:00.000Z\": 2.8275220851,\n    \"2020-05-08T23:00:00.000Z\": 2.7854105273,\n    \"2020-05-09T00:00:00.000Z\": 2.8234034853,\n    \"2020-05-09T01:00:00.000Z\": 2.7770116762,\n    \"2020-05-09T02:00:00.000Z\": 2.8169012822,\n    \"2020-05-09T03:00:00.000Z\": 2.7867158786,\n    \"2020-05-09T04:00:00.000Z\": 2.7771182754,\n    \"2020-05-09T05:00:00.000Z\": 2.8149487573,\n    \"2020-05-09T06:00:00.000Z\": 2.804412661,\n    \"2020-05-09T07:00:00.000Z\": 2.8110121218,\n    \"2020-05-09T08:00:00.000Z\": 2.7997556599,\n    \"2020-05-09T09:00:00.000Z\": 2.827594843,\n    \"2020-05-09T10:00:00.000Z\": 2.8026913184,\n    \"2020-05-09T11:00:00.000Z\": 2.7666065452,\n    \"2020-05-09T12:00:00.000Z\": 2.8146925781,\n    \"2020-05-09T13:00:00.000Z\": 2.8285910075,\n    \"2020-05-09T14:00:00.000Z\": 2.819171443,\n    \"2020-05-09T15:00:00.000Z\": 2.8276060552,\n    \"2020-05-09T16:00:00.000Z\": 2.786607283,\n    \"2020-05-09T17:00:00.000Z\": 2.8048391834,\n    \"2020-05-09T18:00:00.000Z\": 2.8159184436,\n    \"2020-05-09T19:00:00.000Z\": 2.7891395973,\n    \"2020-05-09T20:00:00.000Z\": 2.8116468863,\n    \"2020-05-09T21:00:00.000Z\": 2.7978174856,\n    \"2020-05-09T22:00:00.000Z\": 2.7989229558,\n    \"2020-05-09T23:00:00.000Z\": 2.7688699705,\n    \"2020-05-10T00:00:00.000Z\": 2.8017221595,\n    \"2020-05-10T01:00:00.000Z\": 2.772552825,\n    \"2020-05-10T02:00:00.000Z\": 2.7706036817,\n    \"2020-05-10T03:00:00.000Z\": 2.8012202962,\n    \"2020-05-10T04:00:00.000Z\": 2.785791312,\n    \"2020-05-10T05:00:00.000Z\": 2.7742417236,\n    \"2020-05-10T06:00:00.000Z\": 2.7712404497,\n    \"2020-05-10T07:00:00.000Z\": 2.8023151587,\n    \"2020-05-10T08:00:00.000Z\": 2.8038778267,\n    \"2020-05-10T09:00:00.000Z\": 2.7654629581,\n    \"2020-05-10T10:00:00.000Z\": 2.7723918403,\n    \"2020-05-10T11:00:00.000Z\": 2.7758481247,\n    \"2020-05-10T12:00:00.000Z\": 2.767177124,\n    \"2020-05-10T13:00:00.000Z\": 2.7656505946,\n    \"2020-05-10T14:00:00.000Z\": 2.7967909952,\n    \"2020-05-10T15:00:00.000Z\": 2.7623871484,\n    \"2020-05-10T16:00:00.000Z\": 2.7634893745,\n    \"2020-05-10T17:00:00.000Z\": 2.8194647161,\n    \"2020-05-10T18:00:00.000Z\": 2.770016505,\n    \"2020-05-10T19:00:00.000Z\": 2.791569751,\n    \"2020-05-10T20:00:00.000Z\": 2.7731723248,\n    \"2020-05-10T21:00:00.000Z\": 2.7867953525,\n    \"2020-05-10T22:00:00.000Z\": 2.779407642,\n    \"2020-05-10T23:00:00.000Z\": 2.8176463762,\n    \"2020-05-11T00:00:00.000Z\": 2.7962230453,\n    \"2020-05-11T01:00:00.000Z\": 2.7806077636,\n    \"2020-05-11T02:00:00.000Z\": 2.8055549689,\n    \"2020-05-11T03:00:00.000Z\": 2.7778179322,\n    \"2020-05-11T04:00:00.000Z\": 2.7663530922,\n    \"2020-05-11T05:00:00.000Z\": 2.8133794994,\n    \"2020-05-11T06:00:00.000Z\": 2.8175014886,\n    \"2020-05-11T07:00:00.000Z\": 2.8094160034,\n    \"2020-05-11T08:00:00.000Z\": 2.7852624609,\n    \"2020-05-11T09:00:00.000Z\": 2.7784953118,\n    \"2020-05-11T10:00:00.000Z\": 2.7841129905,\n    \"2020-05-11T11:00:00.000Z\": 2.7954359299,\n    \"2020-05-11T12:00:00.000Z\": 2.7670627932,\n    \"2020-05-11T13:00:00.000Z\": 2.7513481564,\n    \"2020-05-11T14:00:00.000Z\": 2.7789241783,\n    \"2020-05-11T15:00:00.000Z\": 2.7950077875,\n    \"2020-05-11T16:00:00.000Z\": 2.7340843339,\n    \"2020-05-11T17:00:00.000Z\": 2.7706471042,\n    \"2020-05-11T18:00:00.000Z\": 2.7340350929,\n    \"2020-05-11T19:00:00.000Z\": 2.7857325803,\n    \"2020-05-11T20:00:00.000Z\": 2.7754412275,\n    \"2020-05-11T21:00:00.000Z\": 2.7255128288,\n    \"2020-05-11T22:00:00.000Z\": 2.7736621437,\n    \"2020-05-11T23:00:00.000Z\": 2.7741544669,\n    \"2020-05-12T00:00:00.000Z\": 2.7567000156,\n    \"2020-05-12T01:00:00.000Z\": 2.7286863092,\n    \"2020-05-12T02:00:00.000Z\": 2.7251265494,\n    \"2020-05-12T03:00:00.000Z\": 2.7373543428,\n    \"2020-05-12T04:00:00.000Z\": 2.7232293938,\n    \"2020-05-12T05:00:00.000Z\": 2.7407298649,\n    \"2020-05-12T06:00:00.000Z\": 2.7512581857,\n    \"2020-05-12T07:00:00.000Z\": 2.720196368,\n    \"2020-05-12T08:00:00.000Z\": 2.7268853219,\n    \"2020-05-12T09:00:00.000Z\": 2.7248220638,\n    \"2020-05-12T10:00:00.000Z\": 2.7589560897,\n    \"2020-05-12T11:00:00.000Z\": 2.7355221787,\n    \"2020-05-12T12:00:00.000Z\": 2.7154885845,\n    \"2020-05-12T13:00:00.000Z\": 2.6972396153,\n    \"2020-05-12T14:00:00.000Z\": 2.6945708743,\n    \"2020-05-12T15:00:00.000Z\": 2.728854137,\n    \"2020-05-12T16:00:00.000Z\": 2.741924416,\n    \"2020-05-12T17:00:00.000Z\": 2.681514517,\n    \"2020-05-12T18:00:00.000Z\": 2.7359950179,\n    \"2020-05-12T19:00:00.000Z\": 2.7258032095,\n    \"2020-05-12T20:00:00.000Z\": 2.7151585953,\n    \"2020-05-12T21:00:00.000Z\": 2.6768890865,\n    \"2020-05-12T22:00:00.000Z\": 2.7274083591,\n    \"2020-05-12T23:00:00.000Z\": 2.6761276008,\n    \"2020-05-13T00:00:00.000Z\": 2.7166516426,\n    \"2020-05-13T01:00:00.000Z\": 2.6845210743,\n    \"2020-05-13T02:00:00.000Z\": 2.7179678993,\n    \"2020-05-13T03:00:00.000Z\": 2.6928699958,\n    \"2020-05-13T04:00:00.000Z\": 2.7208969343,\n    \"2020-05-13T05:00:00.000Z\": 2.6712462796,\n    \"2020-05-13T06:00:00.000Z\": 2.7076362206,\n    \"2020-05-13T07:00:00.000Z\": 2.7303837224,\n    \"2020-05-13T08:00:00.000Z\": 2.7057166449,\n    \"2020-05-13T09:00:00.000Z\": 2.6738723965,\n    \"2020-05-13T10:00:00.000Z\": 2.6983200178,\n    \"2020-05-13T11:00:00.000Z\": 2.7183696993,\n    \"2020-05-13T12:00:00.000Z\": 2.6584979712,\n    \"2020-05-13T13:00:00.000Z\": 2.7019644564,\n    \"2020-05-13T14:00:00.000Z\": 2.6980747823,\n    \"2020-05-13T15:00:00.000Z\": 2.6837261034,\n    \"2020-05-13T16:00:00.000Z\": 2.6480272182,\n    \"2020-05-13T17:00:00.000Z\": 2.6373243943,\n    \"2020-05-13T18:00:00.000Z\": 2.6789372856,\n    \"2020-05-13T19:00:00.000Z\": 2.6539083585,\n    \"2020-05-13T20:00:00.000Z\": 2.6905034117,\n    \"2020-05-13T21:00:00.000Z\": 2.6637545007,\n    \"2020-05-13T22:00:00.000Z\": 2.6615138317,\n    \"2020-05-13T23:00:00.000Z\": 2.6877730651,\n    \"2020-05-14T00:00:00.000Z\": 2.6778959828,\n    \"2020-05-14T01:00:00.000Z\": 2.6791458864,\n    \"2020-05-14T02:00:00.000Z\": 2.6282751287,\n    \"2020-05-14T03:00:00.000Z\": 2.691481752,\n    \"2020-05-14T04:00:00.000Z\": 2.6438410933,\n    \"2020-05-14T05:00:00.000Z\": 2.6446438349,\n    \"2020-05-14T06:00:00.000Z\": 2.6664778986,\n    \"2020-05-14T07:00:00.000Z\": 2.6749865152,\n    \"2020-05-14T08:00:00.000Z\": 2.6197573996,\n    \"2020-05-14T09:00:00.000Z\": 2.63033336,\n    \"2020-05-14T10:00:00.000Z\": 2.6196842281,\n    \"2020-05-14T11:00:00.000Z\": 2.665106046,\n    \"2020-05-14T12:00:00.000Z\": 2.653752376,\n    \"2020-05-14T13:00:00.000Z\": 2.6624281378,\n    \"2020-05-14T14:00:00.000Z\": 2.6601045184,\n    \"2020-05-14T15:00:00.000Z\": 2.6642180189,\n    \"2020-05-14T16:00:00.000Z\": 2.6121169417,\n    \"2020-05-14T17:00:00.000Z\": 2.617543464,\n    \"2020-05-14T18:00:00.000Z\": 2.6513501098,\n    \"2020-05-14T19:00:00.000Z\": 2.6522931433,\n    \"2020-05-14T20:00:00.000Z\": 2.6010705104,\n    \"2020-05-14T21:00:00.000Z\": 2.6449498766,\n    \"2020-05-14T22:00:00.000Z\": 2.5983408246,\n    \"2020-05-14T23:00:00.000Z\": 2.5985499313,\n    \"2020-05-15T00:00:00.000Z\": 2.6413951229,\n    \"2020-05-15T01:00:00.000Z\": 2.6424818539,\n    \"2020-05-15T02:00:00.000Z\": 2.5927885137,\n    \"2020-05-15T03:00:00.000Z\": 2.6240514022,\n    \"2020-05-15T04:00:00.000Z\": 2.5925715035,\n    \"2020-05-15T05:00:00.000Z\": 2.6138055716,\n    \"2020-05-15T06:00:00.000Z\": 2.5910883652,\n    \"2020-05-15T07:00:00.000Z\": 2.5769435193,\n    \"2020-05-15T08:00:00.000Z\": 2.6266156697,\n    \"2020-05-15T09:00:00.000Z\": 2.6374539388,\n    \"2020-05-15T10:00:00.000Z\": 2.5787424447,\n    \"2020-05-15T11:00:00.000Z\": 2.5678192952,\n    \"2020-05-15T12:00:00.000Z\": 2.6153927681,\n    \"2020-05-15T13:00:00.000Z\": 2.5853832131,\n    \"2020-05-15T14:00:00.000Z\": 2.6132661902,\n    \"2020-05-15T15:00:00.000Z\": 2.5931169794,\n    \"2020-05-15T16:00:00.000Z\": 2.5833136246,\n    \"2020-05-15T17:00:00.000Z\": 2.591572653,\n    \"2020-05-15T18:00:00.000Z\": 2.5957702589,\n    \"2020-05-15T19:00:00.000Z\": 2.5913523358,\n    \"2020-05-15T20:00:00.000Z\": 2.601923737,\n    \"2020-05-15T21:00:00.000Z\": 2.5841345704,\n    \"2020-05-15T22:00:00.000Z\": 2.5392555788,\n    \"2020-05-15T23:00:00.000Z\": 2.5391458001,\n    \"2020-05-16T00:00:00.000Z\": 2.5678552605,\n    \"2020-05-16T01:00:00.000Z\": 2.5837382437,\n    \"2020-05-16T02:00:00.000Z\": 2.575568777,\n    \"2020-05-16T03:00:00.000Z\": 2.5546579073,\n    \"2020-05-16T04:00:00.000Z\": 2.5788964958,\n    \"2020-05-16T05:00:00.000Z\": 2.5711382881,\n    \"2020-05-16T06:00:00.000Z\": 2.5954454415,\n    \"2020-05-16T07:00:00.000Z\": 2.5547805625,\n    \"2020-05-16T08:00:00.000Z\": 2.5734597485,\n    \"2020-05-16T09:00:00.000Z\": 2.5353495222,\n    \"2020-05-16T10:00:00.000Z\": 2.5712632657,\n    \"2020-05-16T11:00:00.000Z\": 2.5893826923,\n    \"2020-05-16T12:00:00.000Z\": 2.5872103903,\n    \"2020-05-16T13:00:00.000Z\": 2.5923852379,\n    \"2020-05-16T14:00:00.000Z\": 2.5792818832,\n    \"2020-05-16T15:00:00.000Z\": 2.5990198819,\n    \"2020-05-16T16:00:00.000Z\": 2.5778749408,\n    \"2020-05-16T17:00:00.000Z\": 2.543925516,\n    \"2020-05-16T18:00:00.000Z\": 2.5972598182,\n    \"2020-05-16T19:00:00.000Z\": 2.5423908565,\n    \"2020-05-16T20:00:00.000Z\": 2.5578227224,\n    \"2020-05-16T21:00:00.000Z\": 2.5858883985,\n    \"2020-05-16T22:00:00.000Z\": 2.5805623562,\n    \"2020-05-16T23:00:00.000Z\": 2.5448297192,\n    \"2020-05-17T00:00:00.000Z\": 2.5491601489,\n    \"2020-05-17T01:00:00.000Z\": 2.5731124094,\n    \"2020-05-17T02:00:00.000Z\": 2.5736406969,\n    \"2020-05-17T03:00:00.000Z\": 2.5626850061,\n    \"2020-05-17T04:00:00.000Z\": 2.5436138376,\n    \"2020-05-17T05:00:00.000Z\": 2.5855244367,\n    \"2020-05-17T06:00:00.000Z\": 2.5701957181,\n    \"2020-05-17T07:00:00.000Z\": 2.5898424455,\n    \"2020-05-17T08:00:00.000Z\": 2.5407796698,\n    \"2020-05-17T09:00:00.000Z\": 2.6043293124,\n    \"2020-05-17T10:00:00.000Z\": 2.5897971392,\n    \"2020-05-17T11:00:00.000Z\": 2.591151675,\n    \"2020-05-17T12:00:00.000Z\": 2.5381999262,\n    \"2020-05-17T13:00:00.000Z\": 2.5496228887,\n    \"2020-05-17T14:00:00.000Z\": 2.5541065096,\n    \"2020-05-17T15:00:00.000Z\": 2.5871030528,\n    \"2020-05-17T16:00:00.000Z\": 2.6038788497,\n    \"2020-05-17T17:00:00.000Z\": 2.5506534759,\n    \"2020-05-17T18:00:00.000Z\": 2.5866884411,\n    \"2020-05-17T19:00:00.000Z\": 2.5455842598,\n    \"2020-05-17T20:00:00.000Z\": 2.5487742565,\n    \"2020-05-17T21:00:00.000Z\": 2.5406442875,\n    \"2020-05-17T22:00:00.000Z\": 2.5737797011,\n    \"2020-05-17T23:00:00.000Z\": 2.5390274429,\n    \"2020-05-18T00:00:00.000Z\": 2.561363499,\n    \"2020-05-18T01:00:00.000Z\": 2.5911964892,\n    \"2020-05-18T02:00:00.000Z\": 2.5796647228,\n    \"2020-05-18T03:00:00.000Z\": 2.5697442187,\n    \"2020-05-18T04:00:00.000Z\": 2.5946197386,\n    \"2020-05-18T05:00:00.000Z\": 2.6040066764,\n    \"2020-05-18T06:00:00.000Z\": 2.5510987719,\n    \"2020-05-18T07:00:00.000Z\": 2.5467777836,\n    \"2020-05-18T08:00:00.000Z\": 2.5285608801,\n    \"2020-05-18T09:00:00.000Z\": 2.5624147864,\n    \"2020-05-18T10:00:00.000Z\": 2.5722812283,\n    \"2020-05-18T11:00:00.000Z\": 2.5278309885,\n    \"2020-05-18T12:00:00.000Z\": 2.5354241218,\n    \"2020-05-18T13:00:00.000Z\": 2.5589556058,\n    \"2020-05-18T14:00:00.000Z\": 2.5464946567,\n    \"2020-05-18T15:00:00.000Z\": 2.5107928288,\n    \"2020-05-18T16:00:00.000Z\": 2.5077725848,\n    \"2020-05-18T17:00:00.000Z\": 2.5586393555,\n    \"2020-05-18T18:00:00.000Z\": 2.5007512067,\n    \"2020-05-18T19:00:00.000Z\": 2.5039389529,\n    \"2020-05-18T20:00:00.000Z\": 2.4914330926,\n    \"2020-05-18T21:00:00.000Z\": 2.5565952434,\n    \"2020-05-18T22:00:00.000Z\": 2.5287467728,\n    \"2020-05-18T23:00:00.000Z\": 2.522552616,\n    \"2020-05-19T00:00:00.000Z\": 2.549253813,\n    \"2020-05-19T01:00:00.000Z\": 2.556982035,\n    \"2020-05-19T02:00:00.000Z\": 2.5008039191,\n    \"2020-05-19T03:00:00.000Z\": 2.4974688627,\n    \"2020-05-19T04:00:00.000Z\": 2.5190140812,\n    \"2020-05-19T05:00:00.000Z\": 2.4941905269,\n    \"2020-05-19T06:00:00.000Z\": 2.5027892972,\n    \"2020-05-19T07:00:00.000Z\": 2.4878828835,\n    \"2020-05-19T08:00:00.000Z\": 2.5477026977,\n    \"2020-05-19T09:00:00.000Z\": 2.5224390682,\n    \"2020-05-19T10:00:00.000Z\": 2.535521406,\n    \"2020-05-19T11:00:00.000Z\": 2.5355743475,\n    \"2020-05-19T12:00:00.000Z\": 2.4792855611,\n    \"2020-05-19T13:00:00.000Z\": 2.5215776496,\n    \"2020-05-19T14:00:00.000Z\": 2.5044866209,\n    \"2020-05-19T15:00:00.000Z\": 2.4703409983,\n    \"2020-05-19T16:00:00.000Z\": 2.4601050583,\n    \"2020-05-19T17:00:00.000Z\": 2.4696577071,\n    \"2020-05-19T18:00:00.000Z\": 2.4938061169,\n    \"2020-05-19T19:00:00.000Z\": 2.5085306803,\n    \"2020-05-19T20:00:00.000Z\": 2.4842918727,\n    \"2020-05-19T21:00:00.000Z\": 2.4808950741,\n    \"2020-05-19T22:00:00.000Z\": 2.4660397747,\n    \"2020-05-19T23:00:00.000Z\": 2.4943824127,\n    \"2020-05-20T00:00:00.000Z\": 2.4817219064,\n    \"2020-05-20T01:00:00.000Z\": 2.5147926716,\n    \"2020-05-20T02:00:00.000Z\": 2.470617541,\n    \"2020-05-20T03:00:00.000Z\": 2.4616569742,\n    \"2020-05-20T04:00:00.000Z\": 2.4553394116,\n    \"2020-05-20T05:00:00.000Z\": 2.4874017253,\n    \"2020-05-20T06:00:00.000Z\": 2.4713692517,\n    \"2020-05-20T07:00:00.000Z\": 2.442824733,\n    \"2020-05-20T08:00:00.000Z\": 2.4667143821,\n    \"2020-05-20T09:00:00.000Z\": 2.4675433882,\n    \"2020-05-20T10:00:00.000Z\": 2.4729672287,\n    \"2020-05-20T11:00:00.000Z\": 2.4588428232,\n    \"2020-05-20T12:00:00.000Z\": 2.447491051,\n    \"2020-05-20T13:00:00.000Z\": 2.4471712469,\n    \"2020-05-20T14:00:00.000Z\": 2.4346698167,\n    \"2020-05-20T15:00:00.000Z\": 2.4578873391,\n    \"2020-05-20T16:00:00.000Z\": 2.4737688817,\n    \"2020-05-20T17:00:00.000Z\": 2.44960546,\n    \"2020-05-20T18:00:00.000Z\": 2.4650394974,\n    \"2020-05-20T19:00:00.000Z\": 2.4429578423,\n    \"2020-05-20T20:00:00.000Z\": 2.4125596516,\n    \"2020-05-20T21:00:00.000Z\": 2.4147819577,\n    \"2020-05-20T22:00:00.000Z\": 2.4481842665,\n    \"2020-05-20T23:00:00.000Z\": 2.4224650937,\n    \"2020-05-21T00:00:00.000Z\": 2.4026664814,\n    \"2020-05-21T01:00:00.000Z\": 2.466764339,\n    \"2020-05-21T02:00:00.000Z\": 2.4513187372,\n    \"2020-05-21T03:00:00.000Z\": 2.458536271,\n    \"2020-05-21T04:00:00.000Z\": 2.4245890798,\n    \"2020-05-21T05:00:00.000Z\": 2.4688075588,\n    \"2020-05-21T06:00:00.000Z\": 2.4405861286,\n    \"2020-05-21T07:00:00.000Z\": 2.3964599329,\n    \"2020-05-21T08:00:00.000Z\": 2.435074941,\n    \"2020-05-21T09:00:00.000Z\": 2.4060865447,\n    \"2020-05-21T10:00:00.000Z\": 2.4452533621,\n    \"2020-05-21T11:00:00.000Z\": 2.3889190886,\n    \"2020-05-21T12:00:00.000Z\": 2.3827470555,\n    \"2020-05-21T13:00:00.000Z\": 2.3999072124,\n    \"2020-05-21T14:00:00.000Z\": 2.3811214257,\n    \"2020-05-21T15:00:00.000Z\": 2.3957512349,\n    \"2020-05-21T16:00:00.000Z\": 2.367176444,\n    \"2020-05-21T17:00:00.000Z\": 2.3667989162,\n    \"2020-05-21T18:00:00.000Z\": 2.4097563074,\n    \"2020-05-21T19:00:00.000Z\": 2.364553978,\n    \"2020-05-21T20:00:00.000Z\": 2.3876010939,\n    \"2020-05-21T21:00:00.000Z\": 2.3854184921,\n    \"2020-05-21T22:00:00.000Z\": 2.3732121899,\n    \"2020-05-21T23:00:00.000Z\": 2.3901082352,\n    \"2020-05-22T00:00:00.000Z\": 2.3737547667,\n    \"2020-05-22T01:00:00.000Z\": 2.3845882331,\n    \"2020-05-22T02:00:00.000Z\": 2.3605831468,\n    \"2020-05-22T03:00:00.000Z\": 2.3828253831,\n    \"2020-05-22T04:00:00.000Z\": 2.3717004247,\n    \"2020-05-22T05:00:00.000Z\": 2.3632612577,\n    \"2020-05-22T06:00:00.000Z\": 2.3792611882,\n    \"2020-05-22T07:00:00.000Z\": 2.3633100994,\n    \"2020-05-22T08:00:00.000Z\": 2.3894403828,\n    \"2020-05-22T09:00:00.000Z\": 2.3584370477,\n    \"2020-05-22T10:00:00.000Z\": 2.3933310636,\n    \"2020-05-22T11:00:00.000Z\": 2.3871154084,\n    \"2020-05-22T12:00:00.000Z\": 2.380782142,\n    \"2020-05-22T13:00:00.000Z\": 2.3701802855,\n    \"2020-05-22T14:00:00.000Z\": 2.3835220151,\n    \"2020-05-22T15:00:00.000Z\": 2.3760978453,\n    \"2020-05-22T16:00:00.000Z\": 2.3373011628,\n    \"2020-05-22T17:00:00.000Z\": 2.3382425414,\n    \"2020-05-22T18:00:00.000Z\": 2.3650870754,\n    \"2020-05-22T19:00:00.000Z\": 2.3587905078,\n    \"2020-05-22T20:00:00.000Z\": 2.3215876808,\n    \"2020-05-22T21:00:00.000Z\": 2.3288642393,\n    \"2020-05-22T22:00:00.000Z\": 2.3696680585,\n    \"2020-05-22T23:00:00.000Z\": 2.3575409325,\n    \"2020-05-23T00:00:00.000Z\": 2.317467971,\n    \"2020-05-23T01:00:00.000Z\": 2.3163217478,\n    \"2020-05-23T02:00:00.000Z\": 2.3497703926,\n    \"2020-05-23T03:00:00.000Z\": 2.3673813145,\n    \"2020-05-23T04:00:00.000Z\": 2.348324602,\n    \"2020-05-23T05:00:00.000Z\": 2.3183434648,\n    \"2020-05-23T06:00:00.000Z\": 2.3177696674,\n    \"2020-05-23T07:00:00.000Z\": 2.3515651594,\n    \"2020-05-23T08:00:00.000Z\": 2.3128771772,\n    \"2020-05-23T09:00:00.000Z\": 2.3163857401,\n    \"2020-05-23T10:00:00.000Z\": 2.356220498,\n    \"2020-05-23T11:00:00.000Z\": 2.3230863058,\n    \"2020-05-23T12:00:00.000Z\": 2.3222366944,\n    \"2020-05-23T13:00:00.000Z\": 2.3503805409,\n    \"2020-05-23T14:00:00.000Z\": 2.3635722983,\n    \"2020-05-23T15:00:00.000Z\": 2.3646286918,\n    \"2020-05-23T16:00:00.000Z\": 2.3578381079,\n    \"2020-05-23T17:00:00.000Z\": 2.3176569752,\n    \"2020-05-23T18:00:00.000Z\": 2.3414491826,\n    \"2020-05-23T19:00:00.000Z\": 2.331806027,\n    \"2020-05-23T20:00:00.000Z\": 2.3117808223,\n    \"2020-05-23T21:00:00.000Z\": 2.3753074369,\n    \"2020-05-23T22:00:00.000Z\": 2.3113172098,\n    \"2020-05-23T23:00:00.000Z\": 2.3265853179,\n    \"2020-05-24T00:00:00.000Z\": 2.3732642937,\n    \"2020-05-24T01:00:00.000Z\": 2.3680356495,\n    \"2020-05-24T02:00:00.000Z\": 2.374909295,\n    \"2020-05-24T03:00:00.000Z\": 2.3493766638,\n    \"2020-05-24T04:00:00.000Z\": 2.3359450082,\n    \"2020-05-24T05:00:00.000Z\": 2.37211517,\n    \"2020-05-24T06:00:00.000Z\": 2.3623120316,\n    \"2020-05-24T07:00:00.000Z\": 2.3301069077,\n    \"2020-05-24T08:00:00.000Z\": 2.3729559093,\n    \"2020-05-24T09:00:00.000Z\": 2.3609485986,\n    \"2020-05-24T10:00:00.000Z\": 2.3424942096,\n    \"2020-05-24T11:00:00.000Z\": 2.3197571838,\n    \"2020-05-24T12:00:00.000Z\": 2.3710370622,\n    \"2020-05-24T13:00:00.000Z\": 2.3179119157,\n    \"2020-05-24T14:00:00.000Z\": 2.3416944935,\n    \"2020-05-24T15:00:00.000Z\": 2.3370203896,\n    \"2020-05-24T16:00:00.000Z\": 2.3538106751,\n    \"2020-05-24T17:00:00.000Z\": 2.3291531084,\n    \"2020-05-24T18:00:00.000Z\": 2.3345230688,\n    \"2020-05-24T19:00:00.000Z\": 2.3722221681,\n    \"2020-05-24T20:00:00.000Z\": 2.3386888412,\n    \"2020-05-24T21:00:00.000Z\": 2.3352960009,\n    \"2020-05-24T22:00:00.000Z\": 2.362323786,\n    \"2020-05-24T23:00:00.000Z\": 2.3393720985,\n    \"2020-05-25T00:00:00.000Z\": 2.3250893285,\n    \"2020-05-25T01:00:00.000Z\": 2.3335853665,\n    \"2020-05-25T02:00:00.000Z\": 2.3342798565,\n    \"2020-05-25T03:00:00.000Z\": 2.355586723,\n    \"2020-05-25T04:00:00.000Z\": 2.3375514173,\n    \"2020-05-25T05:00:00.000Z\": 2.3414990313,\n    \"2020-05-25T06:00:00.000Z\": 2.3436017427,\n    \"2020-05-25T07:00:00.000Z\": 2.3293509691,\n    \"2020-05-25T08:00:00.000Z\": 2.3704824342,\n    \"2020-05-25T09:00:00.000Z\": 2.327739129,\n    \"2020-05-25T10:00:00.000Z\": 2.3141902095,\n    \"2020-05-25T11:00:00.000Z\": 2.3037736953,\n    \"2020-05-25T12:00:00.000Z\": 2.3481850616,\n    \"2020-05-25T13:00:00.000Z\": 2.3378050724,\n    \"2020-05-25T14:00:00.000Z\": 2.3519978131,\n    \"2020-05-25T15:00:00.000Z\": 2.3111453787,\n    \"2020-05-25T16:00:00.000Z\": 2.3117858997,\n    \"2020-05-25T17:00:00.000Z\": 2.3437823839,\n    \"2020-05-25T18:00:00.000Z\": 2.2985355935,\n    \"2020-05-25T19:00:00.000Z\": 2.2889319628,\n    \"2020-05-25T20:00:00.000Z\": 2.3141072335,\n    \"2020-05-25T21:00:00.000Z\": 2.2663323608,\n    \"2020-05-25T22:00:00.000Z\": 2.2663467487,\n    \"2020-05-25T23:00:00.000Z\": 2.3139569202,\n    \"2020-05-26T00:00:00.000Z\": 2.3129660677,\n    \"2020-05-26T01:00:00.000Z\": 2.2993218542,\n    \"2020-05-26T02:00:00.000Z\": 2.2902738561,\n    \"2020-05-26T03:00:00.000Z\": 2.3081958222,\n    \"2020-05-26T04:00:00.000Z\": 2.2772477378,\n    \"2020-05-26T05:00:00.000Z\": 2.2833754102,\n    \"2020-05-26T06:00:00.000Z\": 2.298624666,\n    \"2020-05-26T07:00:00.000Z\": 2.3208954595,\n    \"2020-05-26T08:00:00.000Z\": 2.3117240553,\n    \"2020-05-26T09:00:00.000Z\": 2.2581707124,\n    \"2020-05-26T10:00:00.000Z\": 2.3074877882,\n    \"2020-05-26T11:00:00.000Z\": 2.2788177398,\n    \"2020-05-26T12:00:00.000Z\": 2.28910202,\n    \"2020-05-26T13:00:00.000Z\": 2.2542432777,\n    \"2020-05-26T14:00:00.000Z\": 2.2889851565,\n    \"2020-05-26T15:00:00.000Z\": 2.2558450265,\n    \"2020-05-26T16:00:00.000Z\": 2.2350560292,\n    \"2020-05-26T17:00:00.000Z\": 2.2520909581,\n    \"2020-05-26T18:00:00.000Z\": 2.2404024881,\n    \"2020-05-26T19:00:00.000Z\": 2.2450243247,\n    \"2020-05-26T20:00:00.000Z\": 2.2414637677,\n    \"2020-05-26T21:00:00.000Z\": 2.2549509291,\n    \"2020-05-26T22:00:00.000Z\": 2.2677979399,\n    \"2020-05-26T23:00:00.000Z\": 2.2591624133,\n    \"2020-05-27T00:00:00.000Z\": 2.2643949437,\n    \"2020-05-27T01:00:00.000Z\": 2.2324029864,\n    \"2020-05-27T02:00:00.000Z\": 2.2204872979,\n    \"2020-05-27T03:00:00.000Z\": 2.2671816003,\n    \"2020-05-27T04:00:00.000Z\": 2.2306875543,\n    \"2020-05-27T05:00:00.000Z\": 2.2269123244,\n    \"2020-05-27T06:00:00.000Z\": 2.2200746478,\n    \"2020-05-27T07:00:00.000Z\": 2.2452332587,\n    \"2020-05-27T08:00:00.000Z\": 2.2781186957,\n    \"2020-05-27T09:00:00.000Z\": 2.2682838438,\n    \"2020-05-27T10:00:00.000Z\": 2.2457983355,\n    \"2020-05-27T11:00:00.000Z\": 2.2482833103,\n    \"2020-05-27T12:00:00.000Z\": 2.2440763375,\n    \"2020-05-27T13:00:00.000Z\": 2.2496754332,\n    \"2020-05-27T14:00:00.000Z\": 2.2377133006,\n    \"2020-05-27T15:00:00.000Z\": 2.2295662521,\n    \"2020-05-27T16:00:00.000Z\": 2.2425895424,\n    \"2020-05-27T17:00:00.000Z\": 2.1867354651,\n    \"2020-05-27T18:00:00.000Z\": 2.2163906738,\n    \"2020-05-27T19:00:00.000Z\": 2.2085768065,\n    \"2020-05-27T20:00:00.000Z\": 2.2285712981,\n    \"2020-05-27T21:00:00.000Z\": 2.1805731795,\n    \"2020-05-27T22:00:00.000Z\": 2.22810313,\n    \"2020-05-27T23:00:00.000Z\": 2.2138538519,\n    \"2020-05-28T00:00:00.000Z\": 2.2441786299,\n    \"2020-05-28T01:00:00.000Z\": 2.1803427779,\n    \"2020-05-28T02:00:00.000Z\": 2.1992977156,\n    \"2020-05-28T03:00:00.000Z\": 2.2416509924,\n    \"2020-05-28T04:00:00.000Z\": 2.2079578008,\n    \"2020-05-28T05:00:00.000Z\": 2.2354591923,\n    \"2020-05-28T06:00:00.000Z\": 2.2412756431,\n    \"2020-05-28T07:00:00.000Z\": 2.1753252775,\n    \"2020-05-28T08:00:00.000Z\": 2.2150658764,\n    \"2020-05-28T09:00:00.000Z\": 2.1862375701,\n    \"2020-05-28T10:00:00.000Z\": 2.2181060672,\n    \"2020-05-28T11:00:00.000Z\": 2.2245614275,\n    \"2020-05-28T12:00:00.000Z\": 2.2105838228,\n    \"2020-05-28T13:00:00.000Z\": 2.1950357091,\n    \"2020-05-28T14:00:00.000Z\": 2.2175681951,\n    \"2020-05-28T15:00:00.000Z\": 2.2071353605,\n    \"2020-05-28T16:00:00.000Z\": 2.1753563139,\n    \"2020-05-28T17:00:00.000Z\": 2.1543748944,\n    \"2020-05-28T18:00:00.000Z\": 2.1911450449,\n    \"2020-05-28T19:00:00.000Z\": 2.1370935896,\n    \"2020-05-28T20:00:00.000Z\": 2.1732676508,\n    \"2020-05-28T21:00:00.000Z\": 2.1649085713,\n    \"2020-05-28T22:00:00.000Z\": 2.1334434498,\n    \"2020-05-28T23:00:00.000Z\": 2.1373257318,\n    \"2020-05-29T00:00:00.000Z\": 2.1415503769,\n    \"2020-05-29T01:00:00.000Z\": 2.1741583417,\n    \"2020-05-29T02:00:00.000Z\": 2.1300865559,\n    \"2020-05-29T03:00:00.000Z\": 2.187064251,\n    \"2020-05-29T04:00:00.000Z\": 2.1513825069,\n    \"2020-05-29T05:00:00.000Z\": 2.148031209,\n    \"2020-05-29T06:00:00.000Z\": 2.1331376479,\n    \"2020-05-29T07:00:00.000Z\": 2.1866245451,\n    \"2020-05-29T08:00:00.000Z\": 2.1624172082,\n    \"2020-05-29T09:00:00.000Z\": 2.1499761981,\n    \"2020-05-29T10:00:00.000Z\": 2.1777404933,\n    \"2020-05-29T11:00:00.000Z\": 2.1764986815,\n    \"2020-05-29T12:00:00.000Z\": 2.1468509665,\n    \"2020-05-29T13:00:00.000Z\": 2.1455738939,\n    \"2020-05-29T14:00:00.000Z\": 2.1549592857,\n    \"2020-05-29T15:00:00.000Z\": 2.1269280095,\n    \"2020-05-29T16:00:00.000Z\": 2.1164827024,\n    \"2020-05-29T17:00:00.000Z\": 2.1100834923,\n    \"2020-05-29T18:00:00.000Z\": 2.1519334744,\n    \"2020-05-29T19:00:00.000Z\": 2.1371329129,\n    \"2020-05-29T20:00:00.000Z\": 2.1307888009,\n    \"2020-05-29T21:00:00.000Z\": 2.0880198804,\n    \"2020-05-29T22:00:00.000Z\": 2.127288623,\n    \"2020-05-29T23:00:00.000Z\": 2.1287463572,\n    \"2020-05-30T00:00:00.000Z\": 2.1008850918,\n    \"2020-05-30T01:00:00.000Z\": 2.1057585274,\n    \"2020-05-30T02:00:00.000Z\": 2.094936324,\n    \"2020-05-30T03:00:00.000Z\": 2.1372542762,\n    \"2020-05-30T04:00:00.000Z\": 2.1179414143,\n    \"2020-05-30T05:00:00.000Z\": 2.1476393765,\n    \"2020-05-30T06:00:00.000Z\": 2.1205701259,\n    \"2020-05-30T07:00:00.000Z\": 2.1262053678,\n    \"2020-05-30T08:00:00.000Z\": 2.1034287209,\n    \"2020-05-30T09:00:00.000Z\": 2.1354021483,\n    \"2020-05-30T10:00:00.000Z\": 2.1334894546,\n    \"2020-05-30T11:00:00.000Z\": 2.1229640927,\n    \"2020-05-30T12:00:00.000Z\": 2.1171839151,\n    \"2020-05-30T13:00:00.000Z\": 2.1067720936,\n    \"2020-05-30T14:00:00.000Z\": 2.0950818038,\n    \"2020-05-30T15:00:00.000Z\": 2.1165297234,\n    \"2020-05-30T16:00:00.000Z\": 2.0956712067,\n    \"2020-05-30T17:00:00.000Z\": 2.1244171597,\n    \"2020-05-30T18:00:00.000Z\": 2.1326702003,\n    \"2020-05-30T19:00:00.000Z\": 2.1150019978,\n    \"2020-05-30T20:00:00.000Z\": 2.1278116649,\n    \"2020-05-30T21:00:00.000Z\": 2.0869849234,\n    \"2020-05-30T22:00:00.000Z\": 2.125263829,\n    \"2020-05-30T23:00:00.000Z\": 2.1139123953,\n    \"2020-05-31T00:00:00.000Z\": 2.1152377215,\n    \"2020-05-31T01:00:00.000Z\": 2.1327071907,\n    \"2020-05-31T02:00:00.000Z\": 2.1167130658,\n    \"2020-05-31T03:00:00.000Z\": 2.1544416014,\n    \"2020-05-31T04:00:00.000Z\": 2.0879369852,\n    \"2020-05-31T05:00:00.000Z\": 2.1003692503,\n    \"2020-05-31T06:00:00.000Z\": 2.1174453335,\n    \"2020-05-31T07:00:00.000Z\": 2.1327697996,\n    \"2020-05-31T08:00:00.000Z\": 2.1119295366,\n    \"2020-05-31T09:00:00.000Z\": 2.1069297046,\n    \"2020-05-31T10:00:00.000Z\": 2.1386254617,\n    \"2020-05-31T11:00:00.000Z\": 2.1337873369,\n    \"2020-05-31T12:00:00.000Z\": 2.1320484796,\n    \"2020-05-31T13:00:00.000Z\": 2.1413517653,\n    \"2020-05-31T14:00:00.000Z\": 2.1145457701,\n    \"2020-05-31T15:00:00.000Z\": 2.1302952654,\n    \"2020-05-31T16:00:00.000Z\": 2.1023544041,\n    \"2020-05-31T17:00:00.000Z\": 2.0877782935,\n    \"2020-05-31T18:00:00.000Z\": 2.0851633362,\n    \"2020-05-31T19:00:00.000Z\": 2.1097252537,\n    \"2020-05-31T20:00:00.000Z\": 2.0969373432,\n    \"2020-05-31T21:00:00.000Z\": 2.1420687879,\n    \"2020-05-31T22:00:00.000Z\": 2.1491158273,\n    \"2020-05-31T23:00:00.000Z\": 2.124131625,\n    \"2020-06-01T00:00:00.000Z\": 2.1425570685,\n    \"2020-06-01T01:00:00.000Z\": 2.1430335317,\n    \"2020-06-01T02:00:00.000Z\": 2.0961178869,\n    \"2020-06-01T03:00:00.000Z\": 2.091500574,\n    \"2020-06-01T04:00:00.000Z\": 2.1289326241,\n    \"2020-06-01T05:00:00.000Z\": 2.1001815773,\n    \"2020-06-01T06:00:00.000Z\": 2.0956116776,\n    \"2020-06-01T07:00:00.000Z\": 2.1276899602,\n    \"2020-06-01T08:00:00.000Z\": 2.0883829359,\n    \"2020-06-01T09:00:00.000Z\": 2.1191745956,\n    \"2020-06-01T10:00:00.000Z\": 2.1359184385,\n    \"2020-06-01T11:00:00.000Z\": 2.1150058764,\n    \"2020-06-01T12:00:00.000Z\": 2.1059588226,\n    \"2020-06-01T13:00:00.000Z\": 2.1100688769,\n    \"2020-06-01T14:00:00.000Z\": 2.092024714,\n    \"2020-06-01T15:00:00.000Z\": 2.0816991334,\n    \"2020-06-01T16:00:00.000Z\": 2.0674233713,\n    \"2020-06-01T17:00:00.000Z\": 2.0731764502,\n    \"2020-06-01T18:00:00.000Z\": 2.0602776299,\n    \"2020-06-01T19:00:00.000Z\": 2.0453738282,\n    \"2020-06-01T20:00:00.000Z\": 2.0585446903,\n    \"2020-06-01T21:00:00.000Z\": 2.0987198157,\n    \"2020-06-01T22:00:00.000Z\": 2.0422762919,\n    \"2020-06-01T23:00:00.000Z\": 2.1045616634,\n    \"2020-06-02T00:00:00.000Z\": 2.1073579135,\n    \"2020-06-02T01:00:00.000Z\": 2.0780935507,\n    \"2020-06-02T02:00:00.000Z\": 2.0729714237,\n    \"2020-06-02T03:00:00.000Z\": 2.0573977155,\n    \"2020-06-02T04:00:00.000Z\": 2.0608699953,\n    \"2020-06-02T05:00:00.000Z\": 2.0714640979,\n    \"2020-06-02T06:00:00.000Z\": 2.094514572,\n    \"2020-06-02T07:00:00.000Z\": 2.1033975554,\n    \"2020-06-02T08:00:00.000Z\": 2.0476842497,\n    \"2020-06-02T09:00:00.000Z\": 2.0913142616,\n    \"2020-06-02T10:00:00.000Z\": 2.0336843467,\n    \"2020-06-02T11:00:00.000Z\": 2.0383831388,\n    \"2020-06-02T12:00:00.000Z\": 2.0418092971,\n    \"2020-06-02T13:00:00.000Z\": 2.0649145453,\n    \"2020-06-02T14:00:00.000Z\": 2.0512161839,\n    \"2020-06-02T15:00:00.000Z\": 2.0686642896,\n    \"2020-06-02T16:00:00.000Z\": 2.0598713812,\n    \"2020-06-02T17:00:00.000Z\": 2.0219322476,\n    \"2020-06-02T18:00:00.000Z\": 2.0351501934,\n    \"2020-06-02T19:00:00.000Z\": 2.0266163426,\n    \"2020-06-02T20:00:00.000Z\": 2.0644049299,\n    \"2020-06-02T21:00:00.000Z\": 2.016462477,\n    \"2020-06-02T22:00:00.000Z\": 2.050952448,\n    \"2020-06-02T23:00:00.000Z\": 2.0540254954,\n    \"2020-06-03T00:00:00.000Z\": 2.0210876923,\n    \"2020-06-03T01:00:00.000Z\": 2.0509779924,\n    \"2020-06-03T02:00:00.000Z\": 1.9978356372,\n    \"2020-06-03T03:00:00.000Z\": 2.0218252491,\n    \"2020-06-03T04:00:00.000Z\": 2.0153880438,\n    \"2020-06-03T05:00:00.000Z\": 2.0631142101,\n    \"2020-06-03T06:00:00.000Z\": 2.0265129691,\n    \"2020-06-03T07:00:00.000Z\": 2.0129508505,\n    \"2020-06-03T08:00:00.000Z\": 2.0249723556,\n    \"2020-06-03T09:00:00.000Z\": 2.0305358457,\n    \"2020-06-03T10:00:00.000Z\": 2.0089213589,\n    \"2020-06-03T11:00:00.000Z\": 2.0247600939,\n    \"2020-06-03T12:00:00.000Z\": 1.9836005561,\n    \"2020-06-03T13:00:00.000Z\": 2.0217152172,\n    \"2020-06-03T14:00:00.000Z\": 1.9796010588,\n    \"2020-06-03T15:00:00.000Z\": 1.9818004199,\n    \"2020-06-03T16:00:00.000Z\": 2.0308196048,\n    \"2020-06-03T17:00:00.000Z\": 1.9945792697,\n    \"2020-06-03T18:00:00.000Z\": 1.963538552,\n    \"2020-06-03T19:00:00.000Z\": 1.974156957,\n    \"2020-06-03T20:00:00.000Z\": 1.9956456414,\n    \"2020-06-03T21:00:00.000Z\": 1.9907259797,\n    \"2020-06-03T22:00:00.000Z\": 1.9962944007,\n    \"2020-06-03T23:00:00.000Z\": 1.9605906684,\n    \"2020-06-04T00:00:00.000Z\": 2.0150474252,\n    \"2020-06-04T01:00:00.000Z\": 1.9720500907,\n    \"2020-06-04T02:00:00.000Z\": 2.0157201445,\n    \"2020-06-04T03:00:00.000Z\": 1.9646814322,\n    \"2020-06-04T04:00:00.000Z\": 1.9730844286,\n    \"2020-06-04T05:00:00.000Z\": 2.0107599578,\n    \"2020-06-04T06:00:00.000Z\": 2.0072156705,\n    \"2020-06-04T07:00:00.000Z\": 2.0048548668,\n    \"2020-06-04T08:00:00.000Z\": 1.9958200518,\n    \"2020-06-04T09:00:00.000Z\": 1.9679680676,\n    \"2020-06-04T10:00:00.000Z\": 1.9793470877,\n    \"2020-06-04T11:00:00.000Z\": 1.9592617077,\n    \"2020-06-04T12:00:00.000Z\": 1.9887023322,\n    \"2020-06-04T13:00:00.000Z\": 1.9344542709,\n    \"2020-06-04T14:00:00.000Z\": 1.9880870209,\n    \"2020-06-04T15:00:00.000Z\": 1.9461746893,\n    \"2020-06-04T16:00:00.000Z\": 1.9825521986,\n    \"2020-06-04T17:00:00.000Z\": 1.979853137,\n    \"2020-06-04T18:00:00.000Z\": 1.9343908128,\n    \"2020-06-04T19:00:00.000Z\": 1.9542340726,\n    \"2020-06-04T20:00:00.000Z\": 1.9194681724,\n    \"2020-06-04T21:00:00.000Z\": 1.9475225896,\n    \"2020-06-04T22:00:00.000Z\": 1.9186403536,\n    \"2020-06-04T23:00:00.000Z\": 1.9089691019,\n    \"2020-06-05T00:00:00.000Z\": 1.9347044622,\n    \"2020-06-05T01:00:00.000Z\": 1.9686426954,\n    \"2020-06-05T02:00:00.000Z\": 1.9347011013,\n    \"2020-06-05T03:00:00.000Z\": 1.9123184662,\n    \"2020-06-05T04:00:00.000Z\": 1.9501929906,\n    \"2020-06-05T05:00:00.000Z\": 1.9495252168,\n    \"2020-06-05T06:00:00.000Z\": 1.936373197,\n    \"2020-06-05T07:00:00.000Z\": 1.9554062787,\n    \"2020-06-05T08:00:00.000Z\": 1.9487862742,\n    \"2020-06-05T09:00:00.000Z\": 1.897130141,\n    \"2020-06-05T10:00:00.000Z\": 1.9151998984,\n    \"2020-06-05T11:00:00.000Z\": 1.9167378534,\n    \"2020-06-05T12:00:00.000Z\": 1.9230983108,\n    \"2020-06-05T13:00:00.000Z\": 1.9058410026,\n    \"2020-06-05T14:00:00.000Z\": 1.922041465,\n    \"2020-06-05T15:00:00.000Z\": 1.9168180426,\n    \"2020-06-05T16:00:00.000Z\": 1.9089082012,\n    \"2020-06-05T17:00:00.000Z\": 1.8950817099,\n    \"2020-06-05T18:00:00.000Z\": 1.8881599743,\n    \"2020-06-05T19:00:00.000Z\": 1.86709386,\n    \"2020-06-05T20:00:00.000Z\": 1.8847201573,\n    \"2020-06-05T21:00:00.000Z\": 1.9280194342,\n    \"2020-06-05T22:00:00.000Z\": 1.8687165683,\n    \"2020-06-05T23:00:00.000Z\": 1.9175760407,\n    \"2020-06-06T00:00:00.000Z\": 1.9144149245,\n    \"2020-06-06T01:00:00.000Z\": 1.9048689942,\n    \"2020-06-06T02:00:00.000Z\": 1.90828592,\n    \"2020-06-06T03:00:00.000Z\": 1.9297969376,\n    \"2020-06-06T04:00:00.000Z\": 1.9149704211,\n    \"2020-06-06T05:00:00.000Z\": 1.8929761375,\n    \"2020-06-06T06:00:00.000Z\": 1.8971279541,\n    \"2020-06-06T07:00:00.000Z\": 1.9263268993,\n    \"2020-06-06T08:00:00.000Z\": 1.8958174786,\n    \"2020-06-06T09:00:00.000Z\": 1.8761773916,\n    \"2020-06-06T10:00:00.000Z\": 1.8660876667,\n    \"2020-06-06T11:00:00.000Z\": 1.8916842966,\n    \"2020-06-06T12:00:00.000Z\": 1.9127603337,\n    \"2020-06-06T13:00:00.000Z\": 1.9011050005,\n    \"2020-06-06T14:00:00.000Z\": 1.8896462276,\n    \"2020-06-06T15:00:00.000Z\": 1.8711809414,\n    \"2020-06-06T16:00:00.000Z\": 1.8916412969,\n    \"2020-06-06T17:00:00.000Z\": 1.8800334125,\n    \"2020-06-06T18:00:00.000Z\": 1.8642478045,\n    \"2020-06-06T19:00:00.000Z\": 1.8957160305,\n    \"2020-06-06T20:00:00.000Z\": 1.9129895837,\n    \"2020-06-06T21:00:00.000Z\": 1.8864261351,\n    \"2020-06-06T22:00:00.000Z\": 1.874593256,\n    \"2020-06-06T23:00:00.000Z\": 1.8760368949,\n    \"2020-06-07T00:00:00.000Z\": 1.9109769621,\n    \"2020-06-07T01:00:00.000Z\": 1.8716809077,\n    \"2020-06-07T02:00:00.000Z\": 1.9041580864,\n    \"2020-06-07T03:00:00.000Z\": 1.8750807346,\n    \"2020-06-07T04:00:00.000Z\": 1.9202575144,\n    \"2020-06-07T05:00:00.000Z\": 1.8610116065,\n    \"2020-06-07T06:00:00.000Z\": 1.8945901134,\n    \"2020-06-07T07:00:00.000Z\": 1.8946142489,\n    \"2020-06-07T08:00:00.000Z\": 1.8614582248,\n    \"2020-06-07T09:00:00.000Z\": 1.863572688,\n    \"2020-06-07T10:00:00.000Z\": 1.9297434778,\n    \"2020-06-07T11:00:00.000Z\": 1.9187304684,\n    \"2020-06-07T12:00:00.000Z\": 1.9298306208,\n    \"2020-06-07T13:00:00.000Z\": 1.8608512867,\n    \"2020-06-07T14:00:00.000Z\": 1.9118411163,\n    \"2020-06-07T15:00:00.000Z\": 1.9066744163,\n    \"2020-06-07T16:00:00.000Z\": 1.9116551009,\n    \"2020-06-07T17:00:00.000Z\": 1.8828661629,\n    \"2020-06-07T18:00:00.000Z\": 1.8866379428,\n    \"2020-06-07T19:00:00.000Z\": 1.8788772036,\n    \"2020-06-07T20:00:00.000Z\": 1.9042945734,\n    \"2020-06-07T21:00:00.000Z\": 1.9056594968,\n    \"2020-06-07T22:00:00.000Z\": 1.8887214568,\n    \"2020-06-07T23:00:00.000Z\": 1.8835326276,\n    \"2020-06-08T00:00:00.000Z\": 1.9284506235,\n    \"2020-06-08T01:00:00.000Z\": 1.9143168494,\n    \"2020-06-08T02:00:00.000Z\": 1.9007075218,\n    \"2020-06-08T03:00:00.000Z\": 1.8777673036,\n    \"2020-06-08T04:00:00.000Z\": 1.8952513778,\n    \"2020-06-08T05:00:00.000Z\": 1.9264865217,\n    \"2020-06-08T06:00:00.000Z\": 1.8817259003,\n    \"2020-06-08T07:00:00.000Z\": 1.921584556,\n    \"2020-06-08T08:00:00.000Z\": 1.9018817759,\n    \"2020-06-08T09:00:00.000Z\": 1.859008478,\n    \"2020-06-08T10:00:00.000Z\": 1.8824316125,\n    \"2020-06-08T11:00:00.000Z\": 1.8904210058,\n    \"2020-06-08T12:00:00.000Z\": 1.8955465242,\n    \"2020-06-08T13:00:00.000Z\": 1.87751679,\n    \"2020-06-08T14:00:00.000Z\": 1.8580814686,\n    \"2020-06-08T15:00:00.000Z\": 1.8642935056,\n    \"2020-06-08T16:00:00.000Z\": 1.8605427948,\n    \"2020-06-08T17:00:00.000Z\": 1.8785871911,\n    \"2020-06-08T18:00:00.000Z\": 1.8686244945,\n    \"2020-06-08T19:00:00.000Z\": 1.8326614693,\n    \"2020-06-08T20:00:00.000Z\": 1.8783741861,\n    \"2020-06-08T21:00:00.000Z\": 1.8839774383,\n    \"2020-06-08T22:00:00.000Z\": 1.8581453184,\n    \"2020-06-08T23:00:00.000Z\": 1.8737832229,\n    \"2020-06-09T00:00:00.000Z\": 1.825608836,\n    \"2020-06-09T01:00:00.000Z\": 1.8419542375,\n    \"2020-06-09T02:00:00.000Z\": 1.8341249644,\n    \"2020-06-09T03:00:00.000Z\": 1.8737361118,\n    \"2020-06-09T04:00:00.000Z\": 1.8373356528,\n    \"2020-06-09T05:00:00.000Z\": 1.8610829866,\n    \"2020-06-09T06:00:00.000Z\": 1.8647217478,\n    \"2020-06-09T07:00:00.000Z\": 1.8542354706,\n    \"2020-06-09T08:00:00.000Z\": 1.8584044488,\n    \"2020-06-09T09:00:00.000Z\": 1.8574092583,\n    \"2020-06-09T10:00:00.000Z\": 1.8314458281,\n    \"2020-06-09T11:00:00.000Z\": 1.8291249077,\n    \"2020-06-09T12:00:00.000Z\": 1.794912816,\n    \"2020-06-09T13:00:00.000Z\": 1.806780492,\n    \"2020-06-09T14:00:00.000Z\": 1.8515750872,\n    \"2020-06-09T15:00:00.000Z\": 1.7881377768,\n    \"2020-06-09T16:00:00.000Z\": 1.782908594,\n    \"2020-06-09T17:00:00.000Z\": 1.7871490101,\n    \"2020-06-09T18:00:00.000Z\": 1.7824570591,\n    \"2020-06-09T19:00:00.000Z\": 1.8381627319,\n    \"2020-06-09T20:00:00.000Z\": 1.7788963713,\n    \"2020-06-09T21:00:00.000Z\": 1.8135459458,\n    \"2020-06-09T22:00:00.000Z\": 1.7706291347,\n    \"2020-06-09T23:00:00.000Z\": 1.7832814738,\n    \"2020-06-10T00:00:00.000Z\": 1.7915501526,\n    \"2020-06-10T01:00:00.000Z\": 1.797562649,\n    \"2020-06-10T02:00:00.000Z\": 1.810740465,\n    \"2020-06-10T03:00:00.000Z\": 1.8039826415,\n    \"2020-06-10T04:00:00.000Z\": 1.8061031814,\n    \"2020-06-10T05:00:00.000Z\": 1.7798470634,\n    \"2020-06-10T06:00:00.000Z\": 1.824419133,\n    \"2020-06-10T07:00:00.000Z\": 1.7714949585,\n    \"2020-06-10T08:00:00.000Z\": 1.8110842269,\n    \"2020-06-10T09:00:00.000Z\": 1.7653148984,\n    \"2020-06-10T10:00:00.000Z\": 1.7642104437,\n    \"2020-06-10T11:00:00.000Z\": 1.7882945391,\n    \"2020-06-10T12:00:00.000Z\": 1.7510199158,\n    \"2020-06-10T13:00:00.000Z\": 1.7602817891,\n    \"2020-06-10T14:00:00.000Z\": 1.7692896514,\n    \"2020-06-10T15:00:00.000Z\": 1.7816856687,\n    \"2020-06-10T16:00:00.000Z\": 1.7726023267,\n    \"2020-06-10T17:00:00.000Z\": 1.7529701599,\n    \"2020-06-10T18:00:00.000Z\": 1.7944730908,\n    \"2020-06-10T19:00:00.000Z\": 1.7959826561,\n    \"2020-06-10T20:00:00.000Z\": 1.7262595779,\n    \"2020-06-10T21:00:00.000Z\": 1.7599426932,\n    \"2020-06-10T22:00:00.000Z\": 1.7942664293,\n    \"2020-06-10T23:00:00.000Z\": 1.7568792181,\n    \"2020-06-11T00:00:00.000Z\": 1.7503584801,\n    \"2020-06-11T01:00:00.000Z\": 1.772818345,\n    \"2020-06-11T02:00:00.000Z\": 1.7599267103,\n    \"2020-06-11T03:00:00.000Z\": 1.7543246604,\n    \"2020-06-11T04:00:00.000Z\": 1.7716360143,\n    \"2020-06-11T05:00:00.000Z\": 1.7497533172,\n    \"2020-06-11T06:00:00.000Z\": 1.7296714486,\n    \"2020-06-11T07:00:00.000Z\": 1.7868207192,\n    \"2020-06-11T08:00:00.000Z\": 1.7441884421,\n    \"2020-06-11T09:00:00.000Z\": 1.7268847381,\n    \"2020-06-11T10:00:00.000Z\": 1.7372780067,\n    \"2020-06-11T11:00:00.000Z\": 1.7531690232,\n    \"2020-06-11T12:00:00.000Z\": 1.7563962807,\n    \"2020-06-11T13:00:00.000Z\": 1.7337006137,\n    \"2020-06-11T14:00:00.000Z\": 1.7567559875,\n    \"2020-06-11T15:00:00.000Z\": 1.7314396428\n    }\n}\n```",
    "content": {
      "operators": [
        {
          "id": "06086b0b-c67a-4741-9d77-95d928f5a48e",
          "revision_group_id": "f759e4c0-1468-0f2e-9740-41302b860193",
          "name": "Greater or equal",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "f759e4c0-1468-0f2e-9740-41302b860193",
          "inputs": [
            {
              "id": "211c703a-891e-0dcd-a5d6-49756e02cf53",
              "name": "left",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "a1e4707a-d2ba-46ea-b866-627fd12bc5d0",
              "name": "right",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "6023ec09-572e-d0a9-b71c-78a85b9dac7b",
              "name": "result",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1000,
            "y": 110
          }
        },
        {
          "id": "addefd98-a5bb-4878-a237-71289fb17ac2",
          "revision_group_id": "2f511674-f766-748d-2de3-ad5e62e10a1a",
          "name": "Pass Through (Float)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "2f511674-f766-748d-2de3-ad5e62e10a1a",
          "inputs": [
            {
              "id": "c57127e7-6b84-03f8-6ef1-dcd7232bf3bf",
              "name": "input",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "9cef5ade-69f0-3cdb-4279-3d49fc9914fc",
              "name": "output",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 570,
            "y": 190
          }
        },
        {
          "id": "fa226958-06de-4d79-8777-e053a18b15a5",
          "revision_group_id": "18260aab-bdd6-af5c-cac1-7bafde85188f",
          "name": "Filter",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "18260aab-bdd6-af5c-cac1-7bafde85188f",
          "inputs": [
            {
              "id": "ad0fb04c-fa46-f59d-5d59-054e6fc7b766",
              "name": "data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "c84b0db5-bbe6-c5ef-a30d-79015134c4cf",
              "name": "filter_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "4309e6d9-dc4d-781c-4ef4-e2d8fa1d195c",
              "name": "filtered",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1430,
            "y": 80
          }
        },
        {
          "id": "adcabc05-afe9-49f5-8356-51b1b4e049bd",
          "revision_group_id": "ce801dcb-8ce1-14ad-029d-a14796dcac92",
          "name": "Consecutive differences",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "ce801dcb-8ce1-14ad-029d-a14796dcac92",
          "inputs": [
            {
              "id": "41d0c7d6-e752-ed73-3f58-50791cf1ed6a",
              "name": "data",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "fbade8ef-7e0a-b310-a971-0b935be91a9c",
              "name": "diff",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 570,
            "y": 80
          }
        },
        {
          "id": "c46ce00f-31e6-4da3-91d1-4ed336a5d495",
          "revision_group_id": "c8e3bc64-b214-6486-31db-92a8888d8991",
          "name": "Last Datetime Index",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "c8e3bc64-b214-6486-31db-92a8888d8991",
          "inputs": [
            {
              "id": "06f2cfef-51fa-fe5f-1a71-8ccfe1fd7419",
              "name": "timeseries_data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "a688a7d0-dede-d300-fd72-c6b76f42139f",
              "name": "last_index",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1860,
            "y": 80
          }
        },
        {
          "id": "664c0aa9-eaa3-4b4a-adf7-559bcbd8e1a6",
          "revision_group_id": "c8e3bc64-b214-6486-31db-92a8888d8991",
          "name": "Last Datetime Index (2)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "c8e3bc64-b214-6486-31db-92a8888d8991",
          "inputs": [
            {
              "id": "06f2cfef-51fa-fe5f-1a71-8ccfe1fd7419",
              "name": "timeseries_data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "a688a7d0-dede-d300-fd72-c6b76f42139f",
              "name": "last_index",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1450,
            "y": 320
          }
        },
        {
          "id": "c216bbc4-1f99-45c1-97b7-8d3665fbb8d0",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "Pass Through (Series)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 10,
            "y": -20
          }
        },
        {
          "id": "4f1b4f7b-2f09-479f-961d-f79ae337b2ec",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "Pass Through (Series) (2)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 2830,
            "y": -30
          }
        },
        {
          "id": "92988b62-4321-4f35-8734-7ca4fec2d0f6",
          "revision_group_id": "bf469c0a-d17c-ca6f-59ac-9838b2ff67ac",
          "name": "Restrict to time interval",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bf469c0a-d17c-ca6f-59ac-9838b2ff67ac",
          "inputs": [
            {
              "id": "1039e08a-964f-2cc8-cffd-37d53078daf8",
              "name": "data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "7e7ecf61-c319-f6be-1a3f-1526a879fd9a",
              "name": "start",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "a1154696-3e13-8fe2-ee80-3dea4e879b7d",
              "name": "stop",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "21fe8c45-8a45-9d81-4e17-0c73ca7a66f4",
              "name": "interval",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 2420,
            "y": -30
          }
        }
      ],
      "links": [
        {
          "id": "79c87242-b377-49f9-b715-14724dd55a82",
          "start": {
            "operator": "adcabc05-afe9-49f5-8356-51b1b4e049bd",
            "connector": {
              "id": "fbade8ef-7e0a-b310-a971-0b935be91a9c",
              "name": "diff",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "06086b0b-c67a-4741-9d77-95d928f5a48e",
            "connector": {
              "id": "211c703a-891e-0dcd-a5d6-49756e02cf53",
              "name": "left",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "8930e095-f463-4f84-a580-a54c7dd8e5f4",
          "start": {
            "operator": "addefd98-a5bb-4878-a237-71289fb17ac2",
            "connector": {
              "id": "9cef5ade-69f0-3cdb-4279-3d49fc9914fc",
              "name": "output",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "06086b0b-c67a-4741-9d77-95d928f5a48e",
            "connector": {
              "id": "a1e4707a-d2ba-46ea-b866-627fd12bc5d0",
              "name": "right",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "63c58de3-28fb-4fea-a6ac-eda6c92e5f38",
          "start": {
            "operator": "06086b0b-c67a-4741-9d77-95d928f5a48e",
            "connector": {
              "id": "6023ec09-572e-d0a9-b71c-78a85b9dac7b",
              "name": "result",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "fa226958-06de-4d79-8777-e053a18b15a5",
            "connector": {
              "id": "c84b0db5-bbe6-c5ef-a30d-79015134c4cf",
              "name": "filter_series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "269c1633-68d0-4eb8-a996-a667bfaffdf8",
          "start": {
            "operator": "c216bbc4-1f99-45c1-97b7-8d3665fbb8d0",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "adcabc05-afe9-49f5-8356-51b1b4e049bd",
            "connector": {
              "id": "41d0c7d6-e752-ed73-3f58-50791cf1ed6a",
              "name": "data",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "cea4579d-e697-4f4e-9bf1-4cdd8e64c172",
          "start": {
            "operator": "c216bbc4-1f99-45c1-97b7-8d3665fbb8d0",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "fa226958-06de-4d79-8777-e053a18b15a5",
            "connector": {
              "id": "ad0fb04c-fa46-f59d-5d59-054e6fc7b766",
              "name": "data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "dc41c8c2-a375-4a4a-b686-4a8896221790",
          "start": {
            "connector": {
              "id": "b8e04c00-b389-4ec1-8e3e-ba1645551745",
              "name": "inp_series",
              "data_type": "SERIES",
              "position": {
                "x": -240,
                "y": 40
              }
            }
          },
          "end": {
            "operator": "c216bbc4-1f99-45c1-97b7-8d3665fbb8d0",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "60160f34-34f2-4fe8-9a4b-a999f41c021b",
          "start": {
            "operator": "fa226958-06de-4d79-8777-e053a18b15a5",
            "connector": {
              "id": "4309e6d9-dc4d-781c-4ef4-e2d8fa1d195c",
              "name": "filtered",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "c46ce00f-31e6-4da3-91d1-4ed336a5d495",
            "connector": {
              "id": "06f2cfef-51fa-fe5f-1a71-8ccfe1fd7419",
              "name": "timeseries_data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "ed8c346f-b1ea-4207-b050-a447fee342d8",
          "start": {
            "operator": "c46ce00f-31e6-4da3-91d1-4ed336a5d495",
            "connector": {
              "id": "a688a7d0-dede-d300-fd72-c6b76f42139f",
              "name": "last_index",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "92988b62-4321-4f35-8734-7ca4fec2d0f6",
            "connector": {
              "id": "7e7ecf61-c319-f6be-1a3f-1526a879fd9a",
              "name": "start",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "b14037bd-67a7-409e-8d18-b3b428dc133e",
          "start": {
            "operator": "c216bbc4-1f99-45c1-97b7-8d3665fbb8d0",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "664c0aa9-eaa3-4b4a-adf7-559bcbd8e1a6",
            "connector": {
              "id": "06f2cfef-51fa-fe5f-1a71-8ccfe1fd7419",
              "name": "timeseries_data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "17b59376-e9d2-4122-92a3-a8fdf5715747",
          "start": {
            "operator": "664c0aa9-eaa3-4b4a-adf7-559bcbd8e1a6",
            "connector": {
              "id": "a688a7d0-dede-d300-fd72-c6b76f42139f",
              "name": "last_index",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "92988b62-4321-4f35-8734-7ca4fec2d0f6",
            "connector": {
              "id": "a1154696-3e13-8fe2-ee80-3dea4e879b7d",
              "name": "stop",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "cb053869-6bc5-4b97-8f36-246bb736b08a",
          "start": {
            "operator": "c216bbc4-1f99-45c1-97b7-8d3665fbb8d0",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "92988b62-4321-4f35-8734-7ca4fec2d0f6",
            "connector": {
              "id": "1039e08a-964f-2cc8-cffd-37d53078daf8",
              "name": "data",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "f5d02311-895f-4ab2-bc53-2a6f4671bf80",
          "start": {
            "operator": "92988b62-4321-4f35-8734-7ca4fec2d0f6",
            "connector": {
              "id": "21fe8c45-8a45-9d81-4e17-0c73ca7a66f4",
              "name": "interval",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "4f1b4f7b-2f09-479f-961d-f79ae337b2ec",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e949a9ef-cbd0-4951-aa4d-c38d3422b497",
          "start": {
            "operator": "4f1b4f7b-2f09-479f-961d-f79ae337b2ec",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "fb643e6f-98d9-4df8-a69e-0c7e142c768d",
              "name": "series_from_last_step",
              "data_type": "SERIES",
              "position": {
                "x": 3230,
                "y": 30
              }
            }
          },
          "path": []
        },
        {
          "id": "da32ed73-1e7e-4300-b48f-ecb4b7455785",
          "start": {
            "connector": {
              "id": "9f517001-688c-4a09-bcea-76c1bf54ec5b",
              "name": "positive_step_size",
              "data_type": "FLOAT",
              "position": {
                "x": 190,
                "y": 250
              }
            }
          },
          "end": {
            "operator": "addefd98-a5bb-4878-a237-71289fb17ac2",
            "connector": {
              "id": "c57127e7-6b84-03f8-6ef1-dcd7232bf3bf",
              "name": "input",
              "data_type": "FLOAT",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "9f517001-688c-4a09-bcea-76c1bf54ec5b",
          "name": "positive_step_size",
          "data_type": "FLOAT",
          "operator_id": "addefd98-a5bb-4878-a237-71289fb17ac2",
          "connector_id": "c57127e7-6b84-03f8-6ef1-dcd7232bf3bf",
          "operator_name": "Pass Through (Float)",
          "connector_name": "input",
          "position": {
            "x": 190,
            "y": 250
          }
        },
        {
          "id": "b8e04c00-b389-4ec1-8e3e-ba1645551745",
          "name": "inp_series",
          "data_type": "SERIES",
          "operator_id": "c216bbc4-1f99-45c1-97b7-8d3665fbb8d0",
          "connector_id": "f103c395-92b6-444d-320a-93950ed6d857",
          "operator_name": "Pass Through (Series)",
          "connector_name": "input",
          "position": {
            "x": -240,
            "y": 40
          }
        }
      ],
      "outputs": [
        {
          "id": "fb643e6f-98d9-4df8-a69e-0c7e142c768d",
          "name": "series_from_last_step",
          "data_type": "SERIES",
          "operator_id": "4f1b4f7b-2f09-479f-961d-f79ae337b2ec",
          "connector_id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
          "operator_name": "Pass Through (Series) (2)",
          "connector_name": "output",
          "position": {
            "x": 3230,
            "y": 30
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "9f517001-688c-4a09-bcea-76c1bf54ec5b",
          "name": "positive_step_size",
          "data_type": "FLOAT"
        },
        {
          "id": "b8e04c00-b389-4ec1-8e3e-ba1645551745",
          "name": "inp_series",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "fb643e6f-98d9-4df8-a69e-0c7e142c768d",
          "name": "series_from_last_step",
          "data_type": "SERIES"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "inp_series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\"2020-05-01T00:00:00.000Z\":2.5340945967,\"2020-05-01T01:00:00.000Z\":2.5658768256,\"2020-05-01T02:00:00.000Z\":2.570679579,\"2020-05-01T03:00:00.000Z\":2.5618633791,\"2020-05-01T04:00:00.000Z\":2.5709272918,\"2020-05-01T05:00:00.000Z\":2.5447713467,\"2020-05-01T06:00:00.000Z\":2.544863302,\"2020-05-01T07:00:00.000Z\":2.5890837968,\"2020-05-01T08:00:00.000Z\":2.5646962713,\"2020-05-01T09:00:00.000Z\":2.5335594298,\"2020-05-01T10:00:00.000Z\":2.5570004281,\"2020-05-01T11:00:00.000Z\":2.5279007185,\"2020-05-01T12:00:00.000Z\":2.5180691208,\"2020-05-01T13:00:00.000Z\":2.5425170109,\"2020-05-01T14:00:00.000Z\":2.5193970292,\"2020-05-01T15:00:00.000Z\":2.505462918,\"2020-05-01T16:00:00.000Z\":2.5569998157,\"2020-05-01T17:00:00.000Z\":2.507311926,\"2020-05-01T18:00:00.000Z\":2.498353005,\"2020-05-01T19:00:00.000Z\":2.546221722,\"2020-05-01T20:00:00.000Z\":2.5223358532,\"2020-05-01T21:00:00.000Z\":2.4936112195,\"2020-05-01T22:00:00.000Z\":2.4929833196,\"2020-05-01T23:00:00.000Z\":2.5375547278,\"2020-05-02T00:00:00.000Z\":2.5104412318,\"2020-05-02T01:00:00.000Z\":2.5113524681,\"2020-05-02T02:00:00.000Z\":2.5337742397,\"2020-05-02T03:00:00.000Z\":2.5038516369,\"2020-05-02T04:00:00.000Z\":2.4963372908,\"2020-05-02T05:00:00.000Z\":2.5195275913,\"2020-05-02T06:00:00.000Z\":2.4935793186,\"2020-05-02T07:00:00.000Z\":2.5164266646,\"2020-05-02T08:00:00.000Z\":2.5185465582,\"2020-05-02T09:00:00.000Z\":2.5350140943,\"2020-05-02T10:00:00.000Z\":2.5117286988,\"2020-05-02T11:00:00.000Z\":2.5082871799,\"2020-05-02T12:00:00.000Z\":2.5149836071,\"2020-05-02T13:00:00.000Z\":2.5028807486,\"2020-05-02T14:00:00.000Z\":2.523517088,\"2020-05-02T15:00:00.000Z\":2.554328315,\"2020-05-02T16:00:00.000Z\":2.4982672405,\"2020-05-02T17:00:00.000Z\":2.5212582072,\"2020-05-02T18:00:00.000Z\":2.5408671362,\"2020-05-02T19:00:00.000Z\":2.534927499,\"2020-05-02T20:00:00.000Z\":2.5499492231,\"2020-05-02T21:00:00.000Z\":2.506651042,\"2020-05-02T22:00:00.000Z\":2.5362261202,\"2020-05-02T23:00:00.000Z\":2.5289785015,\"2020-05-03T00:00:00.000Z\":2.5439596654,\"2020-05-03T01:00:00.000Z\":2.5349408476,\"2020-05-03T02:00:00.000Z\":2.4928973472,\"2020-05-03T03:00:00.000Z\":2.5235283235,\"2020-05-03T04:00:00.000Z\":2.4952145471,\"2020-05-03T05:00:00.000Z\":2.5357483131,\"2020-05-03T06:00:00.000Z\":2.4875558337,\"2020-05-03T07:00:00.000Z\":2.4976392088,\"2020-05-03T08:00:00.000Z\":2.4934381565,\"2020-05-03T09:00:00.000Z\":2.5499418548,\"2020-05-03T10:00:00.000Z\":2.5353427119,\"2020-05-03T11:00:00.000Z\":2.5438575598,\"2020-05-03T12:00:00.000Z\":2.5477980799,\"2020-05-03T13:00:00.000Z\":2.5353353389,\"2020-05-03T14:00:00.000Z\":2.490339555,\"2020-05-03T15:00:00.000Z\":2.5258760102,\"2020-05-03T16:00:00.000Z\":2.4909430024,\"2020-05-03T17:00:00.000Z\":2.5418209819,\"2020-05-03T18:00:00.000Z\":2.4963330331,\"2020-05-03T19:00:00.000Z\":2.4893977942,\"2020-05-03T20:00:00.000Z\":2.5157624715,\"2020-05-03T21:00:00.000Z\":2.5332988324,\"2020-05-03T22:00:00.000Z\":2.5080267414,\"2020-05-03T23:00:00.000Z\":2.5110675161,\"2020-05-04T00:00:00.000Z\":2.4916789597,\"2020-05-04T01:00:00.000Z\":2.4857544538,\"2020-05-04T02:00:00.000Z\":2.5523625847,\"2020-05-04T03:00:00.000Z\":2.5161945193,\"2020-05-04T04:00:00.000Z\":2.5031237636,\"2020-05-04T05:00:00.000Z\":2.499693572,\"2020-05-04T06:00:00.000Z\":2.5310847546,\"2020-05-04T07:00:00.000Z\":2.5294701706,\"2020-05-04T08:00:00.000Z\":2.4953251286,\"2020-05-04T09:00:00.000Z\":2.5145793132,\"2020-05-04T10:00:00.000Z\":2.537795696,\"2020-05-04T11:00:00.000Z\":2.5177948972,\"2020-05-04T12:00:00.000Z\":2.4771575641,\"2020-05-04T13:00:00.000Z\":2.4766223173,\"2020-05-04T14:00:00.000Z\":2.4866457947,\"2020-05-04T15:00:00.000Z\":2.4773926315,\"2020-05-04T16:00:00.000Z\":2.4849491065,\"2020-05-04T17:00:00.000Z\":2.4614148496,\"2020-05-04T18:00:00.000Z\":2.5140566144,\"2020-05-04T19:00:00.000Z\":2.4610181004,\"2020-05-04T20:00:00.000Z\":2.5032041998,\"2020-05-04T21:00:00.000Z\":2.4602600843,\"2020-05-04T22:00:00.000Z\":2.4425060895,\"2020-05-04T23:00:00.000Z\":2.4887562624,\"2020-05-05T00:00:00.000Z\":2.4587981472,\"2020-05-05T01:00:00.000Z\":2.4976287919,\"2020-05-05T02:00:00.000Z\":2.4759566315,\"2020-05-05T03:00:00.000Z\":2.4983647141,\"2020-05-05T04:00:00.000Z\":2.4481869955,\"2020-05-05T05:00:00.000Z\":2.4620033756,\"2020-05-05T06:00:00.000Z\":2.4722438504,\"2020-05-05T07:00:00.000Z\":2.4836028877,\"2020-05-05T08:00:00.000Z\":2.4999365634,\"2020-05-05T09:00:00.000Z\":2.4590343725,\"2020-05-05T10:00:00.000Z\":2.485029072,\"2020-05-05T11:00:00.000Z\":2.4832933203,\"2020-05-05T12:00:00.000Z\":2.4493189797,\"2020-05-05T13:00:00.000Z\":2.4555612652,\"2020-05-05T14:00:00.000Z\":2.4331822011,\"2020-05-05T15:00:00.000Z\":2.4437542619,\"2020-05-05T16:00:00.000Z\":2.4103224236,\"2020-05-05T17:00:00.000Z\":2.4599756767,\"2020-05-05T18:00:00.000Z\":2.4195711603,\"2020-05-05T19:00:00.000Z\":2.4204898355,\"2020-05-05T20:00:00.000Z\":2.4271840023,\"2020-05-05T21:00:00.000Z\":2.4093728506,\"2020-05-05T22:00:00.000Z\":2.4287596847,\"2020-05-05T23:00:00.000Z\":2.4502553829,\"2020-05-06T00:00:00.000Z\":2.4032112072,\"2020-05-06T01:00:00.000Z\":2.4164635616,\"2020-05-06T02:00:00.000Z\":2.3964321581,\"2020-05-06T03:00:00.000Z\":2.4296400627,\"2020-05-06T04:00:00.000Z\":2.4597693405,\"2020-05-06T05:00:00.000Z\":2.4051327723,\"2020-05-06T06:00:00.000Z\":2.39231384,\"2020-05-06T07:00:00.000Z\":2.4227524163,\"2020-05-06T08:00:00.000Z\":2.4241047304,\"2020-05-06T09:00:00.000Z\":2.383595989,\"2020-05-06T10:00:00.000Z\":2.3830219146,\"2020-05-06T11:00:00.000Z\":2.391330956,\"2020-05-06T12:00:00.000Z\":2.4083971686,\"2020-05-06T13:00:00.000Z\":2.4019011994,\"2020-05-06T14:00:00.000Z\":2.3741282476,\"2020-05-06T15:00:00.000Z\":2.408673447,\"2020-05-06T16:00:00.000Z\":2.3888631077,\"2020-05-06T17:00:00.000Z\":2.3805006535,\"2020-05-06T18:00:00.000Z\":2.4118540536,\"2020-05-06T19:00:00.000Z\":2.3915179257,\"2020-05-06T20:00:00.000Z\":2.3692830106,\"2020-05-06T21:00:00.000Z\":2.4088917478,\"2020-05-06T22:00:00.000Z\":2.3724274396,\"2020-05-06T23:00:00.000Z\":2.3524618611,\"2020-05-07T00:00:00.000Z\":2.3824901899,\"2020-05-07T01:00:00.000Z\":2.39644748,\"2020-05-07T02:00:00.000Z\":2.4080285331,\"2020-05-07T03:00:00.000Z\":2.3540845158,\"2020-05-07T04:00:00.000Z\":2.377081574,\"2020-05-07T05:00:00.000Z\":2.3825706704,\"2020-05-07T06:00:00.000Z\":2.3969814116,\"2020-05-07T07:00:00.000Z\":2.3902110487,\"2020-05-07T08:00:00.000Z\":2.8876608764,\"2020-05-07T09:00:00.000Z\":2.8554512351,\"2020-05-07T10:00:00.000Z\":2.9011506947,\"2020-05-07T11:00:00.000Z\":2.8739810027,\"2020-05-07T12:00:00.000Z\":2.8642327429,\"2020-05-07T13:00:00.000Z\":2.8609388862,\"2020-05-07T14:00:00.000Z\":2.8691609675,\"2020-05-07T15:00:00.000Z\":2.8516302986,\"2020-05-07T16:00:00.000Z\":2.8860791586,\"2020-05-07T17:00:00.000Z\":2.8417859745,\"2020-05-07T18:00:00.000Z\":2.8577750865,\"2020-05-07T19:00:00.000Z\":2.861678322,\"2020-05-07T20:00:00.000Z\":2.8064804686,\"2020-05-07T21:00:00.000Z\":2.8447594889,\"2020-05-07T22:00:00.000Z\":2.855936299,\"2020-05-07T23:00:00.000Z\":2.8142863343,\"2020-05-08T00:00:00.000Z\":2.8373024815,\"2020-05-08T01:00:00.000Z\":2.8435283639,\"2020-05-08T02:00:00.000Z\":2.8654301284,\"2020-05-08T03:00:00.000Z\":2.821334943,\"2020-05-08T04:00:00.000Z\":2.8432670041,\"2020-05-08T05:00:00.000Z\":2.8557929741,\"2020-05-08T06:00:00.000Z\":2.8156375097,\"2020-05-08T07:00:00.000Z\":2.855427583,\"2020-05-08T08:00:00.000Z\":2.8338698983,\"2020-05-08T09:00:00.000Z\":2.8455777397,\"2020-05-08T10:00:00.000Z\":2.8302046473,\"2020-05-08T11:00:00.000Z\":2.811772505,\"2020-05-08T12:00:00.000Z\":2.8327504575,\"2020-05-08T13:00:00.000Z\":2.8149162137,\"2020-05-08T14:00:00.000Z\":2.8418180107,\"2020-05-08T15:00:00.000Z\":2.77624676,\"2020-05-08T16:00:00.000Z\":2.7750554183,\"2020-05-08T17:00:00.000Z\":2.8217362031,\"2020-05-08T18:00:00.000Z\":2.7887413672,\"2020-05-08T19:00:00.000Z\":2.8221631708,\"2020-05-08T20:00:00.000Z\":2.7607433072,\"2020-05-08T21:00:00.000Z\":2.8068503911,\"2020-05-08T22:00:00.000Z\":2.8275220851,\"2020-05-08T23:00:00.000Z\":2.7854105273,\"2020-05-09T00:00:00.000Z\":2.8234034853,\"2020-05-09T01:00:00.000Z\":2.7770116762,\"2020-05-09T02:00:00.000Z\":2.8169012822,\"2020-05-09T03:00:00.000Z\":2.7867158786,\"2020-05-09T04:00:00.000Z\":2.7771182754,\"2020-05-09T05:00:00.000Z\":2.8149487573,\"2020-05-09T06:00:00.000Z\":2.804412661,\"2020-05-09T07:00:00.000Z\":2.8110121218,\"2020-05-09T08:00:00.000Z\":2.7997556599,\"2020-05-09T09:00:00.000Z\":2.827594843,\"2020-05-09T10:00:00.000Z\":2.8026913184,\"2020-05-09T11:00:00.000Z\":2.7666065452,\"2020-05-09T12:00:00.000Z\":2.8146925781,\"2020-05-09T13:00:00.000Z\":2.8285910075,\"2020-05-09T14:00:00.000Z\":2.819171443,\"2020-05-09T15:00:00.000Z\":2.8276060552,\"2020-05-09T16:00:00.000Z\":2.786607283,\"2020-05-09T17:00:00.000Z\":2.8048391834,\"2020-05-09T18:00:00.000Z\":2.8159184436,\"2020-05-09T19:00:00.000Z\":2.7891395973,\"2020-05-09T20:00:00.000Z\":2.8116468863,\"2020-05-09T21:00:00.000Z\":2.7978174856,\"2020-05-09T22:00:00.000Z\":2.7989229558,\"2020-05-09T23:00:00.000Z\":2.7688699705,\"2020-05-10T00:00:00.000Z\":2.8017221595,\"2020-05-10T01:00:00.000Z\":2.772552825,\"2020-05-10T02:00:00.000Z\":2.7706036817,\"2020-05-10T03:00:00.000Z\":2.8012202962,\"2020-05-10T04:00:00.000Z\":2.785791312,\"2020-05-10T05:00:00.000Z\":2.7742417236,\"2020-05-10T06:00:00.000Z\":2.7712404497,\"2020-05-10T07:00:00.000Z\":2.8023151587,\"2020-05-10T08:00:00.000Z\":2.8038778267,\"2020-05-10T09:00:00.000Z\":2.7654629581,\"2020-05-10T10:00:00.000Z\":2.7723918403,\"2020-05-10T11:00:00.000Z\":2.7758481247,\"2020-05-10T12:00:00.000Z\":2.767177124,\"2020-05-10T13:00:00.000Z\":2.7656505946,\"2020-05-10T14:00:00.000Z\":2.7967909952,\"2020-05-10T15:00:00.000Z\":2.7623871484,\"2020-05-10T16:00:00.000Z\":2.7634893745,\"2020-05-10T17:00:00.000Z\":2.8194647161,\"2020-05-10T18:00:00.000Z\":2.770016505,\"2020-05-10T19:00:00.000Z\":2.791569751,\"2020-05-10T20:00:00.000Z\":2.7731723248,\"2020-05-10T21:00:00.000Z\":2.7867953525,\"2020-05-10T22:00:00.000Z\":2.779407642,\"2020-05-10T23:00:00.000Z\":2.8176463762,\"2020-05-11T00:00:00.000Z\":2.7962230453,\"2020-05-11T01:00:00.000Z\":2.7806077636,\"2020-05-11T02:00:00.000Z\":2.8055549689,\"2020-05-11T03:00:00.000Z\":2.7778179322,\"2020-05-11T04:00:00.000Z\":2.7663530922,\"2020-05-11T05:00:00.000Z\":2.8133794994,\"2020-05-11T06:00:00.000Z\":2.8175014886,\"2020-05-11T07:00:00.000Z\":2.8094160034,\"2020-05-11T08:00:00.000Z\":2.7852624609,\"2020-05-11T09:00:00.000Z\":2.7784953118,\"2020-05-11T10:00:00.000Z\":2.7841129905,\"2020-05-11T11:00:00.000Z\":2.7954359299,\"2020-05-11T12:00:00.000Z\":2.7670627932,\"2020-05-11T13:00:00.000Z\":2.7513481564,\"2020-05-11T14:00:00.000Z\":2.7789241783,\"2020-05-11T15:00:00.000Z\":2.7950077875,\"2020-05-11T16:00:00.000Z\":2.7340843339,\"2020-05-11T17:00:00.000Z\":2.7706471042,\"2020-05-11T18:00:00.000Z\":2.7340350929,\"2020-05-11T19:00:00.000Z\":2.7857325803,\"2020-05-11T20:00:00.000Z\":2.7754412275,\"2020-05-11T21:00:00.000Z\":2.7255128288,\"2020-05-11T22:00:00.000Z\":2.7736621437,\"2020-05-11T23:00:00.000Z\":2.7741544669,\"2020-05-12T00:00:00.000Z\":2.7567000156,\"2020-05-12T01:00:00.000Z\":2.7286863092,\"2020-05-12T02:00:00.000Z\":2.7251265494,\"2020-05-12T03:00:00.000Z\":2.7373543428,\"2020-05-12T04:00:00.000Z\":2.7232293938,\"2020-05-12T05:00:00.000Z\":2.7407298649,\"2020-05-12T06:00:00.000Z\":2.7512581857,\"2020-05-12T07:00:00.000Z\":2.720196368,\"2020-05-12T08:00:00.000Z\":2.7268853219,\"2020-05-12T09:00:00.000Z\":2.7248220638,\"2020-05-12T10:00:00.000Z\":2.7589560897,\"2020-05-12T11:00:00.000Z\":2.7355221787,\"2020-05-12T12:00:00.000Z\":2.7154885845,\"2020-05-12T13:00:00.000Z\":2.6972396153,\"2020-05-12T14:00:00.000Z\":2.6945708743,\"2020-05-12T15:00:00.000Z\":2.728854137,\"2020-05-12T16:00:00.000Z\":2.741924416,\"2020-05-12T17:00:00.000Z\":2.681514517,\"2020-05-12T18:00:00.000Z\":2.7359950179,\"2020-05-12T19:00:00.000Z\":2.7258032095,\"2020-05-12T20:00:00.000Z\":2.7151585953,\"2020-05-12T21:00:00.000Z\":2.6768890865,\"2020-05-12T22:00:00.000Z\":2.7274083591,\"2020-05-12T23:00:00.000Z\":2.6761276008,\"2020-05-13T00:00:00.000Z\":2.7166516426,\"2020-05-13T01:00:00.000Z\":2.6845210743,\"2020-05-13T02:00:00.000Z\":2.7179678993,\"2020-05-13T03:00:00.000Z\":2.6928699958,\"2020-05-13T04:00:00.000Z\":2.7208969343,\"2020-05-13T05:00:00.000Z\":2.6712462796,\"2020-05-13T06:00:00.000Z\":2.7076362206,\"2020-05-13T07:00:00.000Z\":2.7303837224,\"2020-05-13T08:00:00.000Z\":2.7057166449,\"2020-05-13T09:00:00.000Z\":2.6738723965,\"2020-05-13T10:00:00.000Z\":2.6983200178,\"2020-05-13T11:00:00.000Z\":2.7183696993,\"2020-05-13T12:00:00.000Z\":2.6584979712,\"2020-05-13T13:00:00.000Z\":2.7019644564,\"2020-05-13T14:00:00.000Z\":2.6980747823,\"2020-05-13T15:00:00.000Z\":2.6837261034,\"2020-05-13T16:00:00.000Z\":2.6480272182,\"2020-05-13T17:00:00.000Z\":2.6373243943,\"2020-05-13T18:00:00.000Z\":2.6789372856,\"2020-05-13T19:00:00.000Z\":2.6539083585,\"2020-05-13T20:00:00.000Z\":2.6905034117,\"2020-05-13T21:00:00.000Z\":2.6637545007,\"2020-05-13T22:00:00.000Z\":2.6615138317,\"2020-05-13T23:00:00.000Z\":2.6877730651,\"2020-05-14T00:00:00.000Z\":2.6778959828,\"2020-05-14T01:00:00.000Z\":2.6791458864,\"2020-05-14T02:00:00.000Z\":2.6282751287,\"2020-05-14T03:00:00.000Z\":2.691481752,\"2020-05-14T04:00:00.000Z\":2.6438410933,\"2020-05-14T05:00:00.000Z\":2.6446438349,\"2020-05-14T06:00:00.000Z\":2.6664778986,\"2020-05-14T07:00:00.000Z\":2.6749865152,\"2020-05-14T08:00:00.000Z\":2.6197573996,\"2020-05-14T09:00:00.000Z\":2.63033336,\"2020-05-14T10:00:00.000Z\":2.6196842281,\"2020-05-14T11:00:00.000Z\":2.665106046,\"2020-05-14T12:00:00.000Z\":2.653752376,\"2020-05-14T13:00:00.000Z\":2.6624281378,\"2020-05-14T14:00:00.000Z\":2.6601045184,\"2020-05-14T15:00:00.000Z\":2.6642180189,\"2020-05-14T16:00:00.000Z\":2.6121169417,\"2020-05-14T17:00:00.000Z\":2.617543464,\"2020-05-14T18:00:00.000Z\":2.6513501098,\"2020-05-14T19:00:00.000Z\":2.6522931433,\"2020-05-14T20:00:00.000Z\":2.6010705104,\"2020-05-14T21:00:00.000Z\":2.6449498766,\"2020-05-14T22:00:00.000Z\":2.5983408246,\"2020-05-14T23:00:00.000Z\":2.5985499313,\"2020-05-15T00:00:00.000Z\":2.6413951229,\"2020-05-15T01:00:00.000Z\":2.6424818539,\"2020-05-15T02:00:00.000Z\":2.5927885137,\"2020-05-15T03:00:00.000Z\":2.6240514022,\"2020-05-15T04:00:00.000Z\":2.5925715035,\"2020-05-15T05:00:00.000Z\":2.6138055716,\"2020-05-15T06:00:00.000Z\":2.5910883652,\"2020-05-15T07:00:00.000Z\":2.5769435193,\"2020-05-15T08:00:00.000Z\":2.6266156697,\"2020-05-15T09:00:00.000Z\":2.6374539388,\"2020-05-15T10:00:00.000Z\":2.5787424447,\"2020-05-15T11:00:00.000Z\":2.5678192952,\"2020-05-15T12:00:00.000Z\":2.6153927681,\"2020-05-15T13:00:00.000Z\":2.5853832131,\"2020-05-15T14:00:00.000Z\":2.6132661902,\"2020-05-15T15:00:00.000Z\":2.5931169794,\"2020-05-15T16:00:00.000Z\":2.5833136246,\"2020-05-15T17:00:00.000Z\":2.591572653,\"2020-05-15T18:00:00.000Z\":2.5957702589,\"2020-05-15T19:00:00.000Z\":2.5913523358,\"2020-05-15T20:00:00.000Z\":2.601923737,\"2020-05-15T21:00:00.000Z\":2.5841345704,\"2020-05-15T22:00:00.000Z\":2.5392555788,\"2020-05-15T23:00:00.000Z\":2.5391458001,\"2020-05-16T00:00:00.000Z\":2.5678552605,\"2020-05-16T01:00:00.000Z\":2.5837382437,\"2020-05-16T02:00:00.000Z\":2.575568777,\"2020-05-16T03:00:00.000Z\":2.5546579073,\"2020-05-16T04:00:00.000Z\":2.5788964958,\"2020-05-16T05:00:00.000Z\":2.5711382881,\"2020-05-16T06:00:00.000Z\":2.5954454415,\"2020-05-16T07:00:00.000Z\":2.5547805625,\"2020-05-16T08:00:00.000Z\":2.5734597485,\"2020-05-16T09:00:00.000Z\":2.5353495222,\"2020-05-16T10:00:00.000Z\":2.5712632657,\"2020-05-16T11:00:00.000Z\":2.5893826923,\"2020-05-16T12:00:00.000Z\":2.5872103903,\"2020-05-16T13:00:00.000Z\":2.5923852379,\"2020-05-16T14:00:00.000Z\":2.5792818832,\"2020-05-16T15:00:00.000Z\":2.5990198819,\"2020-05-16T16:00:00.000Z\":2.5778749408,\"2020-05-16T17:00:00.000Z\":2.543925516,\"2020-05-16T18:00:00.000Z\":2.5972598182,\"2020-05-16T19:00:00.000Z\":2.5423908565,\"2020-05-16T20:00:00.000Z\":2.5578227224,\"2020-05-16T21:00:00.000Z\":2.5858883985,\"2020-05-16T22:00:00.000Z\":2.5805623562,\"2020-05-16T23:00:00.000Z\":2.5448297192,\"2020-05-17T00:00:00.000Z\":2.5491601489,\"2020-05-17T01:00:00.000Z\":2.5731124094,\"2020-05-17T02:00:00.000Z\":2.5736406969,\"2020-05-17T03:00:00.000Z\":2.5626850061,\"2020-05-17T04:00:00.000Z\":2.5436138376,\"2020-05-17T05:00:00.000Z\":2.5855244367,\"2020-05-17T06:00:00.000Z\":2.5701957181,\"2020-05-17T07:00:00.000Z\":2.5898424455,\"2020-05-17T08:00:00.000Z\":2.5407796698,\"2020-05-17T09:00:00.000Z\":2.6043293124,\"2020-05-17T10:00:00.000Z\":2.5897971392,\"2020-05-17T11:00:00.000Z\":2.591151675,\"2020-05-17T12:00:00.000Z\":2.5381999262,\"2020-05-17T13:00:00.000Z\":2.5496228887,\"2020-05-17T14:00:00.000Z\":2.5541065096,\"2020-05-17T15:00:00.000Z\":2.5871030528,\"2020-05-17T16:00:00.000Z\":2.6038788497,\"2020-05-17T17:00:00.000Z\":2.5506534759,\"2020-05-17T18:00:00.000Z\":2.5866884411,\"2020-05-17T19:00:00.000Z\":2.5455842598,\"2020-05-17T20:00:00.000Z\":2.5487742565,\"2020-05-17T21:00:00.000Z\":2.5406442875,\"2020-05-17T22:00:00.000Z\":2.5737797011,\"2020-05-17T23:00:00.000Z\":2.5390274429,\"2020-05-18T00:00:00.000Z\":2.561363499,\"2020-05-18T01:00:00.000Z\":2.5911964892,\"2020-05-18T02:00:00.000Z\":2.5796647228,\"2020-05-18T03:00:00.000Z\":2.5697442187,\"2020-05-18T04:00:00.000Z\":2.5946197386,\"2020-05-18T05:00:00.000Z\":2.6040066764,\"2020-05-18T06:00:00.000Z\":2.5510987719,\"2020-05-18T07:00:00.000Z\":2.5467777836,\"2020-05-18T08:00:00.000Z\":2.5285608801,\"2020-05-18T09:00:00.000Z\":2.5624147864,\"2020-05-18T10:00:00.000Z\":2.5722812283,\"2020-05-18T11:00:00.000Z\":2.5278309885,\"2020-05-18T12:00:00.000Z\":2.5354241218,\"2020-05-18T13:00:00.000Z\":2.5589556058,\"2020-05-18T14:00:00.000Z\":2.5464946567,\"2020-05-18T15:00:00.000Z\":2.5107928288,\"2020-05-18T16:00:00.000Z\":2.5077725848,\"2020-05-18T17:00:00.000Z\":2.5586393555,\"2020-05-18T18:00:00.000Z\":2.5007512067,\"2020-05-18T19:00:00.000Z\":2.5039389529,\"2020-05-18T20:00:00.000Z\":2.4914330926,\"2020-05-18T21:00:00.000Z\":2.5565952434,\"2020-05-18T22:00:00.000Z\":2.5287467728,\"2020-05-18T23:00:00.000Z\":2.522552616,\"2020-05-19T00:00:00.000Z\":2.549253813,\"2020-05-19T01:00:00.000Z\":2.556982035,\"2020-05-19T02:00:00.000Z\":2.5008039191,\"2020-05-19T03:00:00.000Z\":2.4974688627,\"2020-05-19T04:00:00.000Z\":2.5190140812,\"2020-05-19T05:00:00.000Z\":2.4941905269,\"2020-05-19T06:00:00.000Z\":2.5027892972,\"2020-05-19T07:00:00.000Z\":2.4878828835,\"2020-05-19T08:00:00.000Z\":2.5477026977,\"2020-05-19T09:00:00.000Z\":2.5224390682,\"2020-05-19T10:00:00.000Z\":2.535521406,\"2020-05-19T11:00:00.000Z\":2.5355743475,\"2020-05-19T12:00:00.000Z\":2.4792855611,\"2020-05-19T13:00:00.000Z\":2.5215776496,\"2020-05-19T14:00:00.000Z\":2.5044866209,\"2020-05-19T15:00:00.000Z\":2.4703409983,\"2020-05-19T16:00:00.000Z\":2.4601050583,\"2020-05-19T17:00:00.000Z\":2.4696577071,\"2020-05-19T18:00:00.000Z\":2.4938061169,\"2020-05-19T19:00:00.000Z\":2.5085306803,\"2020-05-19T20:00:00.000Z\":2.4842918727,\"2020-05-19T21:00:00.000Z\":2.4808950741,\"2020-05-19T22:00:00.000Z\":2.4660397747,\"2020-05-19T23:00:00.000Z\":2.4943824127,\"2020-05-20T00:00:00.000Z\":2.4817219064,\"2020-05-20T01:00:00.000Z\":2.5147926716,\"2020-05-20T02:00:00.000Z\":2.470617541,\"2020-05-20T03:00:00.000Z\":2.4616569742,\"2020-05-20T04:00:00.000Z\":2.4553394116,\"2020-05-20T05:00:00.000Z\":2.4874017253,\"2020-05-20T06:00:00.000Z\":2.4713692517,\"2020-05-20T07:00:00.000Z\":2.442824733,\"2020-05-20T08:00:00.000Z\":2.4667143821,\"2020-05-20T09:00:00.000Z\":2.4675433882,\"2020-05-20T10:00:00.000Z\":2.4729672287,\"2020-05-20T11:00:00.000Z\":2.4588428232,\"2020-05-20T12:00:00.000Z\":2.447491051,\"2020-05-20T13:00:00.000Z\":2.4471712469,\"2020-05-20T14:00:00.000Z\":2.4346698167,\"2020-05-20T15:00:00.000Z\":2.4578873391,\"2020-05-20T16:00:00.000Z\":2.4737688817,\"2020-05-20T17:00:00.000Z\":2.44960546,\"2020-05-20T18:00:00.000Z\":2.4650394974,\"2020-05-20T19:00:00.000Z\":2.4429578423,\"2020-05-20T20:00:00.000Z\":2.4125596516,\"2020-05-20T21:00:00.000Z\":2.4147819577,\"2020-05-20T22:00:00.000Z\":2.4481842665,\"2020-05-20T23:00:00.000Z\":2.4224650937,\"2020-05-21T00:00:00.000Z\":2.4026664814,\"2020-05-21T01:00:00.000Z\":2.466764339,\"2020-05-21T02:00:00.000Z\":2.4513187372,\"2020-05-21T03:00:00.000Z\":2.458536271,\"2020-05-21T04:00:00.000Z\":2.4245890798,\"2020-05-21T05:00:00.000Z\":2.4688075588,\"2020-05-21T06:00:00.000Z\":2.4405861286,\"2020-05-21T07:00:00.000Z\":2.3964599329,\"2020-05-21T08:00:00.000Z\":2.435074941,\"2020-05-21T09:00:00.000Z\":2.4060865447,\"2020-05-21T10:00:00.000Z\":2.4452533621,\"2020-05-21T11:00:00.000Z\":2.3889190886,\"2020-05-21T12:00:00.000Z\":2.3827470555,\"2020-05-21T13:00:00.000Z\":2.3999072124,\"2020-05-21T14:00:00.000Z\":2.3811214257,\"2020-05-21T15:00:00.000Z\":2.3957512349,\"2020-05-21T16:00:00.000Z\":2.367176444,\"2020-05-21T17:00:00.000Z\":2.3667989162,\"2020-05-21T18:00:00.000Z\":2.4097563074,\"2020-05-21T19:00:00.000Z\":2.364553978,\"2020-05-21T20:00:00.000Z\":2.3876010939,\"2020-05-21T21:00:00.000Z\":2.3854184921,\"2020-05-21T22:00:00.000Z\":2.3732121899,\"2020-05-21T23:00:00.000Z\":2.3901082352,\"2020-05-22T00:00:00.000Z\":2.3737547667,\"2020-05-22T01:00:00.000Z\":2.3845882331,\"2020-05-22T02:00:00.000Z\":2.3605831468,\"2020-05-22T03:00:00.000Z\":2.3828253831,\"2020-05-22T04:00:00.000Z\":2.3717004247,\"2020-05-22T05:00:00.000Z\":2.3632612577,\"2020-05-22T06:00:00.000Z\":2.3792611882,\"2020-05-22T07:00:00.000Z\":2.3633100994,\"2020-05-22T08:00:00.000Z\":2.3894403828,\"2020-05-22T09:00:00.000Z\":2.3584370477,\"2020-05-22T10:00:00.000Z\":2.3933310636,\"2020-05-22T11:00:00.000Z\":2.3871154084,\"2020-05-22T12:00:00.000Z\":2.380782142,\"2020-05-22T13:00:00.000Z\":2.3701802855,\"2020-05-22T14:00:00.000Z\":2.3835220151,\"2020-05-22T15:00:00.000Z\":2.3760978453,\"2020-05-22T16:00:00.000Z\":2.3373011628,\"2020-05-22T17:00:00.000Z\":2.3382425414,\"2020-05-22T18:00:00.000Z\":2.3650870754,\"2020-05-22T19:00:00.000Z\":2.3587905078,\"2020-05-22T20:00:00.000Z\":2.3215876808,\"2020-05-22T21:00:00.000Z\":2.3288642393,\"2020-05-22T22:00:00.000Z\":2.3696680585,\"2020-05-22T23:00:00.000Z\":2.3575409325,\"2020-05-23T00:00:00.000Z\":2.317467971,\"2020-05-23T01:00:00.000Z\":2.3163217478,\"2020-05-23T02:00:00.000Z\":2.3497703926,\"2020-05-23T03:00:00.000Z\":2.3673813145,\"2020-05-23T04:00:00.000Z\":2.348324602,\"2020-05-23T05:00:00.000Z\":2.3183434648,\"2020-05-23T06:00:00.000Z\":2.3177696674,\"2020-05-23T07:00:00.000Z\":2.3515651594,\"2020-05-23T08:00:00.000Z\":2.3128771772,\"2020-05-23T09:00:00.000Z\":2.3163857401,\"2020-05-23T10:00:00.000Z\":2.356220498,\"2020-05-23T11:00:00.000Z\":2.3230863058,\"2020-05-23T12:00:00.000Z\":2.3222366944,\"2020-05-23T13:00:00.000Z\":2.3503805409,\"2020-05-23T14:00:00.000Z\":2.3635722983,\"2020-05-23T15:00:00.000Z\":2.3646286918,\"2020-05-23T16:00:00.000Z\":2.3578381079,\"2020-05-23T17:00:00.000Z\":2.3176569752,\"2020-05-23T18:00:00.000Z\":2.3414491826,\"2020-05-23T19:00:00.000Z\":2.331806027,\"2020-05-23T20:00:00.000Z\":2.3117808223,\"2020-05-23T21:00:00.000Z\":2.3753074369,\"2020-05-23T22:00:00.000Z\":2.3113172098,\"2020-05-23T23:00:00.000Z\":2.3265853179,\"2020-05-24T00:00:00.000Z\":2.3732642937,\"2020-05-24T01:00:00.000Z\":2.3680356495,\"2020-05-24T02:00:00.000Z\":2.374909295,\"2020-05-24T03:00:00.000Z\":2.3493766638,\"2020-05-24T04:00:00.000Z\":2.3359450082,\"2020-05-24T05:00:00.000Z\":2.37211517,\"2020-05-24T06:00:00.000Z\":2.3623120316,\"2020-05-24T07:00:00.000Z\":2.3301069077,\"2020-05-24T08:00:00.000Z\":2.3729559093,\"2020-05-24T09:00:00.000Z\":2.3609485986,\"2020-05-24T10:00:00.000Z\":2.3424942096,\"2020-05-24T11:00:00.000Z\":2.3197571838,\"2020-05-24T12:00:00.000Z\":2.3710370622,\"2020-05-24T13:00:00.000Z\":2.3179119157,\"2020-05-24T14:00:00.000Z\":2.3416944935,\"2020-05-24T15:00:00.000Z\":2.3370203896,\"2020-05-24T16:00:00.000Z\":2.3538106751,\"2020-05-24T17:00:00.000Z\":2.3291531084,\"2020-05-24T18:00:00.000Z\":2.3345230688,\"2020-05-24T19:00:00.000Z\":2.3722221681,\"2020-05-24T20:00:00.000Z\":2.3386888412,\"2020-05-24T21:00:00.000Z\":2.3352960009,\"2020-05-24T22:00:00.000Z\":2.362323786,\"2020-05-24T23:00:00.000Z\":2.3393720985,\"2020-05-25T00:00:00.000Z\":2.3250893285,\"2020-05-25T01:00:00.000Z\":2.3335853665,\"2020-05-25T02:00:00.000Z\":2.3342798565,\"2020-05-25T03:00:00.000Z\":2.355586723,\"2020-05-25T04:00:00.000Z\":2.3375514173,\"2020-05-25T05:00:00.000Z\":2.3414990313,\"2020-05-25T06:00:00.000Z\":2.3436017427,\"2020-05-25T07:00:00.000Z\":2.3293509691,\"2020-05-25T08:00:00.000Z\":2.3704824342,\"2020-05-25T09:00:00.000Z\":2.327739129,\"2020-05-25T10:00:00.000Z\":2.3141902095,\"2020-05-25T11:00:00.000Z\":2.3037736953,\"2020-05-25T12:00:00.000Z\":2.3481850616,\"2020-05-25T13:00:00.000Z\":2.3378050724,\"2020-05-25T14:00:00.000Z\":2.3519978131,\"2020-05-25T15:00:00.000Z\":2.3111453787,\"2020-05-25T16:00:00.000Z\":2.3117858997,\"2020-05-25T17:00:00.000Z\":2.3437823839,\"2020-05-25T18:00:00.000Z\":2.2985355935,\"2020-05-25T19:00:00.000Z\":2.2889319628,\"2020-05-25T20:00:00.000Z\":2.3141072335,\"2020-05-25T21:00:00.000Z\":2.2663323608,\"2020-05-25T22:00:00.000Z\":2.2663467487,\"2020-05-25T23:00:00.000Z\":2.3139569202,\"2020-05-26T00:00:00.000Z\":2.3129660677,\"2020-05-26T01:00:00.000Z\":2.2993218542,\"2020-05-26T02:00:00.000Z\":2.2902738561,\"2020-05-26T03:00:00.000Z\":2.3081958222,\"2020-05-26T04:00:00.000Z\":2.2772477378,\"2020-05-26T05:00:00.000Z\":2.2833754102,\"2020-05-26T06:00:00.000Z\":2.298624666,\"2020-05-26T07:00:00.000Z\":2.3208954595,\"2020-05-26T08:00:00.000Z\":2.3117240553,\"2020-05-26T09:00:00.000Z\":2.2581707124,\"2020-05-26T10:00:00.000Z\":2.3074877882,\"2020-05-26T11:00:00.000Z\":2.2788177398,\"2020-05-26T12:00:00.000Z\":2.28910202,\"2020-05-26T13:00:00.000Z\":2.2542432777,\"2020-05-26T14:00:00.000Z\":2.2889851565,\"2020-05-26T15:00:00.000Z\":2.2558450265,\"2020-05-26T16:00:00.000Z\":2.2350560292,\"2020-05-26T17:00:00.000Z\":2.2520909581,\"2020-05-26T18:00:00.000Z\":2.2404024881,\"2020-05-26T19:00:00.000Z\":2.2450243247,\"2020-05-26T20:00:00.000Z\":2.2414637677,\"2020-05-26T21:00:00.000Z\":2.2549509291,\"2020-05-26T22:00:00.000Z\":2.2677979399,\"2020-05-26T23:00:00.000Z\":2.2591624133,\"2020-05-27T00:00:00.000Z\":2.2643949437,\"2020-05-27T01:00:00.000Z\":2.2324029864,\"2020-05-27T02:00:00.000Z\":2.2204872979,\"2020-05-27T03:00:00.000Z\":2.2671816003,\"2020-05-27T04:00:00.000Z\":2.2306875543,\"2020-05-27T05:00:00.000Z\":2.2269123244,\"2020-05-27T06:00:00.000Z\":2.2200746478,\"2020-05-27T07:00:00.000Z\":2.2452332587,\"2020-05-27T08:00:00.000Z\":2.2781186957,\"2020-05-27T09:00:00.000Z\":2.2682838438,\"2020-05-27T10:00:00.000Z\":2.2457983355,\"2020-05-27T11:00:00.000Z\":2.2482833103,\"2020-05-27T12:00:00.000Z\":2.2440763375,\"2020-05-27T13:00:00.000Z\":2.2496754332,\"2020-05-27T14:00:00.000Z\":2.2377133006,\"2020-05-27T15:00:00.000Z\":2.2295662521,\"2020-05-27T16:00:00.000Z\":2.2425895424,\"2020-05-27T17:00:00.000Z\":2.1867354651,\"2020-05-27T18:00:00.000Z\":2.2163906738,\"2020-05-27T19:00:00.000Z\":2.2085768065,\"2020-05-27T20:00:00.000Z\":2.2285712981,\"2020-05-27T21:00:00.000Z\":2.1805731795,\"2020-05-27T22:00:00.000Z\":2.22810313,\"2020-05-27T23:00:00.000Z\":2.2138538519,\"2020-05-28T00:00:00.000Z\":2.2441786299,\"2020-05-28T01:00:00.000Z\":2.1803427779,\"2020-05-28T02:00:00.000Z\":2.1992977156,\"2020-05-28T03:00:00.000Z\":2.2416509924,\"2020-05-28T04:00:00.000Z\":2.2079578008,\"2020-05-28T05:00:00.000Z\":2.2354591923,\"2020-05-28T06:00:00.000Z\":2.2412756431,\"2020-05-28T07:00:00.000Z\":2.1753252775,\"2020-05-28T08:00:00.000Z\":2.2150658764,\"2020-05-28T09:00:00.000Z\":2.1862375701,\"2020-05-28T10:00:00.000Z\":2.2181060672,\"2020-05-28T11:00:00.000Z\":2.2245614275,\"2020-05-28T12:00:00.000Z\":2.2105838228,\"2020-05-28T13:00:00.000Z\":2.1950357091,\"2020-05-28T14:00:00.000Z\":2.2175681951,\"2020-05-28T15:00:00.000Z\":2.2071353605,\"2020-05-28T16:00:00.000Z\":2.1753563139,\"2020-05-28T17:00:00.000Z\":2.1543748944,\"2020-05-28T18:00:00.000Z\":2.1911450449,\"2020-05-28T19:00:00.000Z\":2.1370935896,\"2020-05-28T20:00:00.000Z\":2.1732676508,\"2020-05-28T21:00:00.000Z\":2.1649085713,\"2020-05-28T22:00:00.000Z\":2.1334434498,\"2020-05-28T23:00:00.000Z\":2.1373257318,\"2020-05-29T00:00:00.000Z\":2.1415503769,\"2020-05-29T01:00:00.000Z\":2.1741583417,\"2020-05-29T02:00:00.000Z\":2.1300865559,\"2020-05-29T03:00:00.000Z\":2.187064251,\"2020-05-29T04:00:00.000Z\":2.1513825069,\"2020-05-29T05:00:00.000Z\":2.148031209,\"2020-05-29T06:00:00.000Z\":2.1331376479,\"2020-05-29T07:00:00.000Z\":2.1866245451,\"2020-05-29T08:00:00.000Z\":2.1624172082,\"2020-05-29T09:00:00.000Z\":2.1499761981,\"2020-05-29T10:00:00.000Z\":2.1777404933,\"2020-05-29T11:00:00.000Z\":2.1764986815,\"2020-05-29T12:00:00.000Z\":2.1468509665,\"2020-05-29T13:00:00.000Z\":2.1455738939,\"2020-05-29T14:00:00.000Z\":2.1549592857,\"2020-05-29T15:00:00.000Z\":2.1269280095,\"2020-05-29T16:00:00.000Z\":2.1164827024,\"2020-05-29T17:00:00.000Z\":2.1100834923,\"2020-05-29T18:00:00.000Z\":2.1519334744,\"2020-05-29T19:00:00.000Z\":2.1371329129,\"2020-05-29T20:00:00.000Z\":2.1307888009,\"2020-05-29T21:00:00.000Z\":2.0880198804,\"2020-05-29T22:00:00.000Z\":2.127288623,\"2020-05-29T23:00:00.000Z\":2.1287463572,\"2020-05-30T00:00:00.000Z\":2.1008850918,\"2020-05-30T01:00:00.000Z\":2.1057585274,\"2020-05-30T02:00:00.000Z\":2.094936324,\"2020-05-30T03:00:00.000Z\":2.1372542762,\"2020-05-30T04:00:00.000Z\":2.1179414143,\"2020-05-30T05:00:00.000Z\":2.1476393765,\"2020-05-30T06:00:00.000Z\":2.1205701259,\"2020-05-30T07:00:00.000Z\":2.1262053678,\"2020-05-30T08:00:00.000Z\":2.1034287209,\"2020-05-30T09:00:00.000Z\":2.1354021483,\"2020-05-30T10:00:00.000Z\":2.1334894546,\"2020-05-30T11:00:00.000Z\":2.1229640927,\"2020-05-30T12:00:00.000Z\":2.1171839151,\"2020-05-30T13:00:00.000Z\":2.1067720936,\"2020-05-30T14:00:00.000Z\":2.0950818038,\"2020-05-30T15:00:00.000Z\":2.1165297234,\"2020-05-30T16:00:00.000Z\":2.0956712067,\"2020-05-30T17:00:00.000Z\":2.1244171597,\"2020-05-30T18:00:00.000Z\":2.1326702003,\"2020-05-30T19:00:00.000Z\":2.1150019978,\"2020-05-30T20:00:00.000Z\":2.1278116649,\"2020-05-30T21:00:00.000Z\":2.0869849234,\"2020-05-30T22:00:00.000Z\":2.125263829,\"2020-05-30T23:00:00.000Z\":2.1139123953,\"2020-05-31T00:00:00.000Z\":2.1152377215,\"2020-05-31T01:00:00.000Z\":2.1327071907,\"2020-05-31T02:00:00.000Z\":2.1167130658,\"2020-05-31T03:00:00.000Z\":2.1544416014,\"2020-05-31T04:00:00.000Z\":2.0879369852,\"2020-05-31T05:00:00.000Z\":2.1003692503,\"2020-05-31T06:00:00.000Z\":2.1174453335,\"2020-05-31T07:00:00.000Z\":2.1327697996,\"2020-05-31T08:00:00.000Z\":2.1119295366,\"2020-05-31T09:00:00.000Z\":2.1069297046,\"2020-05-31T10:00:00.000Z\":2.1386254617,\"2020-05-31T11:00:00.000Z\":2.1337873369,\"2020-05-31T12:00:00.000Z\":2.1320484796,\"2020-05-31T13:00:00.000Z\":2.1413517653,\"2020-05-31T14:00:00.000Z\":2.1145457701,\"2020-05-31T15:00:00.000Z\":2.1302952654,\"2020-05-31T16:00:00.000Z\":2.1023544041,\"2020-05-31T17:00:00.000Z\":2.0877782935,\"2020-05-31T18:00:00.000Z\":2.0851633362,\"2020-05-31T19:00:00.000Z\":2.1097252537,\"2020-05-31T20:00:00.000Z\":2.0969373432,\"2020-05-31T21:00:00.000Z\":2.1420687879,\"2020-05-31T22:00:00.000Z\":2.1491158273,\"2020-05-31T23:00:00.000Z\":2.124131625,\"2020-06-01T00:00:00.000Z\":2.1425570685,\"2020-06-01T01:00:00.000Z\":2.1430335317,\"2020-06-01T02:00:00.000Z\":2.0961178869,\"2020-06-01T03:00:00.000Z\":2.091500574,\"2020-06-01T04:00:00.000Z\":2.1289326241,\"2020-06-01T05:00:00.000Z\":2.1001815773,\"2020-06-01T06:00:00.000Z\":2.0956116776,\"2020-06-01T07:00:00.000Z\":2.1276899602,\"2020-06-01T08:00:00.000Z\":2.0883829359,\"2020-06-01T09:00:00.000Z\":2.1191745956,\"2020-06-01T10:00:00.000Z\":2.1359184385,\"2020-06-01T11:00:00.000Z\":2.1150058764,\"2020-06-01T12:00:00.000Z\":2.1059588226,\"2020-06-01T13:00:00.000Z\":2.1100688769,\"2020-06-01T14:00:00.000Z\":2.092024714,\"2020-06-01T15:00:00.000Z\":2.0816991334,\"2020-06-01T16:00:00.000Z\":2.0674233713,\"2020-06-01T17:00:00.000Z\":2.0731764502,\"2020-06-01T18:00:00.000Z\":2.0602776299,\"2020-06-01T19:00:00.000Z\":2.0453738282,\"2020-06-01T20:00:00.000Z\":2.0585446903,\"2020-06-01T21:00:00.000Z\":2.0987198157,\"2020-06-01T22:00:00.000Z\":2.0422762919,\"2020-06-01T23:00:00.000Z\":2.1045616634,\"2020-06-02T00:00:00.000Z\":2.1073579135,\"2020-06-02T01:00:00.000Z\":2.0780935507,\"2020-06-02T02:00:00.000Z\":2.0729714237,\"2020-06-02T03:00:00.000Z\":2.0573977155,\"2020-06-02T04:00:00.000Z\":2.0608699953,\"2020-06-02T05:00:00.000Z\":2.0714640979,\"2020-06-02T06:00:00.000Z\":2.094514572,\"2020-06-02T07:00:00.000Z\":2.1033975554,\"2020-06-02T08:00:00.000Z\":2.0476842497,\"2020-06-02T09:00:00.000Z\":2.0913142616,\"2020-06-02T10:00:00.000Z\":2.0336843467,\"2020-06-02T11:00:00.000Z\":2.0383831388,\"2020-06-02T12:00:00.000Z\":2.0418092971,\"2020-06-02T13:00:00.000Z\":2.0649145453,\"2020-06-02T14:00:00.000Z\":2.0512161839,\"2020-06-02T15:00:00.000Z\":2.0686642896,\"2020-06-02T16:00:00.000Z\":2.0598713812,\"2020-06-02T17:00:00.000Z\":2.0219322476,\"2020-06-02T18:00:00.000Z\":2.0351501934,\"2020-06-02T19:00:00.000Z\":2.0266163426,\"2020-06-02T20:00:00.000Z\":2.0644049299,\"2020-06-02T21:00:00.000Z\":2.016462477,\"2020-06-02T22:00:00.000Z\":2.050952448,\"2020-06-02T23:00:00.000Z\":2.0540254954,\"2020-06-03T00:00:00.000Z\":2.0210876923,\"2020-06-03T01:00:00.000Z\":2.0509779924,\"2020-06-03T02:00:00.000Z\":1.9978356372,\"2020-06-03T03:00:00.000Z\":2.0218252491,\"2020-06-03T04:00:00.000Z\":2.0153880438,\"2020-06-03T05:00:00.000Z\":2.0631142101,\"2020-06-03T06:00:00.000Z\":2.0265129691,\"2020-06-03T07:00:00.000Z\":2.0129508505,\"2020-06-03T08:00:00.000Z\":2.0249723556,\"2020-06-03T09:00:00.000Z\":2.0305358457,\"2020-06-03T10:00:00.000Z\":2.0089213589,\"2020-06-03T11:00:00.000Z\":2.0247600939,\"2020-06-03T12:00:00.000Z\":1.9836005561,\"2020-06-03T13:00:00.000Z\":2.0217152172,\"2020-06-03T14:00:00.000Z\":1.9796010588,\"2020-06-03T15:00:00.000Z\":1.9818004199,\"2020-06-03T16:00:00.000Z\":2.0308196048,\"2020-06-03T17:00:00.000Z\":1.9945792697,\"2020-06-03T18:00:00.000Z\":1.963538552,\"2020-06-03T19:00:00.000Z\":1.974156957,\"2020-06-03T20:00:00.000Z\":1.9956456414,\"2020-06-03T21:00:00.000Z\":1.9907259797,\"2020-06-03T22:00:00.000Z\":1.9962944007,\"2020-06-03T23:00:00.000Z\":1.9605906684,\"2020-06-04T00:00:00.000Z\":2.0150474252,\"2020-06-04T01:00:00.000Z\":1.9720500907,\"2020-06-04T02:00:00.000Z\":2.0157201445,\"2020-06-04T03:00:00.000Z\":1.9646814322,\"2020-06-04T04:00:00.000Z\":1.9730844286,\"2020-06-04T05:00:00.000Z\":2.0107599578,\"2020-06-04T06:00:00.000Z\":2.0072156705,\"2020-06-04T07:00:00.000Z\":2.0048548668,\"2020-06-04T08:00:00.000Z\":1.9958200518,\"2020-06-04T09:00:00.000Z\":1.9679680676,\"2020-06-04T10:00:00.000Z\":1.9793470877,\"2020-06-04T11:00:00.000Z\":1.9592617077,\"2020-06-04T12:00:00.000Z\":1.9887023322,\"2020-06-04T13:00:00.000Z\":1.9344542709,\"2020-06-04T14:00:00.000Z\":1.9880870209,\"2020-06-04T15:00:00.000Z\":1.9461746893,\"2020-06-04T16:00:00.000Z\":1.9825521986,\"2020-06-04T17:00:00.000Z\":1.979853137,\"2020-06-04T18:00:00.000Z\":1.9343908128,\"2020-06-04T19:00:00.000Z\":1.9542340726,\"2020-06-04T20:00:00.000Z\":1.9194681724,\"2020-06-04T21:00:00.000Z\":1.9475225896,\"2020-06-04T22:00:00.000Z\":1.9186403536,\"2020-06-04T23:00:00.000Z\":1.9089691019,\"2020-06-05T00:00:00.000Z\":1.9347044622,\"2020-06-05T01:00:00.000Z\":1.9686426954,\"2020-06-05T02:00:00.000Z\":1.9347011013,\"2020-06-05T03:00:00.000Z\":1.9123184662,\"2020-06-05T04:00:00.000Z\":1.9501929906,\"2020-06-05T05:00:00.000Z\":1.9495252168,\"2020-06-05T06:00:00.000Z\":1.936373197,\"2020-06-05T07:00:00.000Z\":1.9554062787,\"2020-06-05T08:00:00.000Z\":1.9487862742,\"2020-06-05T09:00:00.000Z\":1.897130141,\"2020-06-05T10:00:00.000Z\":1.9151998984,\"2020-06-05T11:00:00.000Z\":1.9167378534,\"2020-06-05T12:00:00.000Z\":1.9230983108,\"2020-06-05T13:00:00.000Z\":1.9058410026,\"2020-06-05T14:00:00.000Z\":1.922041465,\"2020-06-05T15:00:00.000Z\":1.9168180426,\"2020-06-05T16:00:00.000Z\":1.9089082012,\"2020-06-05T17:00:00.000Z\":1.8950817099,\"2020-06-05T18:00:00.000Z\":1.8881599743,\"2020-06-05T19:00:00.000Z\":1.86709386,\"2020-06-05T20:00:00.000Z\":1.8847201573,\"2020-06-05T21:00:00.000Z\":1.9280194342,\"2020-06-05T22:00:00.000Z\":1.8687165683,\"2020-06-05T23:00:00.000Z\":1.9175760407,\"2020-06-06T00:00:00.000Z\":1.9144149245,\"2020-06-06T01:00:00.000Z\":1.9048689942,\"2020-06-06T02:00:00.000Z\":1.90828592,\"2020-06-06T03:00:00.000Z\":1.9297969376,\"2020-06-06T04:00:00.000Z\":1.9149704211,\"2020-06-06T05:00:00.000Z\":1.8929761375,\"2020-06-06T06:00:00.000Z\":1.8971279541,\"2020-06-06T07:00:00.000Z\":1.9263268993,\"2020-06-06T08:00:00.000Z\":1.8958174786,\"2020-06-06T09:00:00.000Z\":1.8761773916,\"2020-06-06T10:00:00.000Z\":1.8660876667,\"2020-06-06T11:00:00.000Z\":1.8916842966,\"2020-06-06T12:00:00.000Z\":1.9127603337,\"2020-06-06T13:00:00.000Z\":1.9011050005,\"2020-06-06T14:00:00.000Z\":1.8896462276,\"2020-06-06T15:00:00.000Z\":1.8711809414,\"2020-06-06T16:00:00.000Z\":1.8916412969,\"2020-06-06T17:00:00.000Z\":1.8800334125,\"2020-06-06T18:00:00.000Z\":1.8642478045,\"2020-06-06T19:00:00.000Z\":1.8957160305,\"2020-06-06T20:00:00.000Z\":1.9129895837,\"2020-06-06T21:00:00.000Z\":1.8864261351,\"2020-06-06T22:00:00.000Z\":1.874593256,\"2020-06-06T23:00:00.000Z\":1.8760368949,\"2020-06-07T00:00:00.000Z\":1.9109769621,\"2020-06-07T01:00:00.000Z\":1.8716809077,\"2020-06-07T02:00:00.000Z\":1.9041580864,\"2020-06-07T03:00:00.000Z\":1.8750807346,\"2020-06-07T04:00:00.000Z\":1.9202575144,\"2020-06-07T05:00:00.000Z\":1.8610116065,\"2020-06-07T06:00:00.000Z\":1.8945901134,\"2020-06-07T07:00:00.000Z\":1.8946142489,\"2020-06-07T08:00:00.000Z\":1.8614582248,\"2020-06-07T09:00:00.000Z\":1.863572688,\"2020-06-07T10:00:00.000Z\":1.9297434778,\"2020-06-07T11:00:00.000Z\":1.9187304684,\"2020-06-07T12:00:00.000Z\":1.9298306208,\"2020-06-07T13:00:00.000Z\":1.8608512867,\"2020-06-07T14:00:00.000Z\":1.9118411163,\"2020-06-07T15:00:00.000Z\":1.9066744163,\"2020-06-07T16:00:00.000Z\":1.9116551009,\"2020-06-07T17:00:00.000Z\":1.8828661629,\"2020-06-07T18:00:00.000Z\":1.8866379428,\"2020-06-07T19:00:00.000Z\":1.8788772036,\"2020-06-07T20:00:00.000Z\":1.9042945734,\"2020-06-07T21:00:00.000Z\":1.9056594968,\"2020-06-07T22:00:00.000Z\":1.8887214568,\"2020-06-07T23:00:00.000Z\":1.8835326276,\"2020-06-08T00:00:00.000Z\":1.9284506235,\"2020-06-08T01:00:00.000Z\":1.9143168494,\"2020-06-08T02:00:00.000Z\":1.9007075218,\"2020-06-08T03:00:00.000Z\":1.8777673036,\"2020-06-08T04:00:00.000Z\":1.8952513778,\"2020-06-08T05:00:00.000Z\":1.9264865217,\"2020-06-08T06:00:00.000Z\":1.8817259003,\"2020-06-08T07:00:00.000Z\":1.921584556,\"2020-06-08T08:00:00.000Z\":1.9018817759,\"2020-06-08T09:00:00.000Z\":1.859008478,\"2020-06-08T10:00:00.000Z\":1.8824316125,\"2020-06-08T11:00:00.000Z\":1.8904210058,\"2020-06-08T12:00:00.000Z\":1.8955465242,\"2020-06-08T13:00:00.000Z\":1.87751679,\"2020-06-08T14:00:00.000Z\":1.8580814686,\"2020-06-08T15:00:00.000Z\":1.8642935056,\"2020-06-08T16:00:00.000Z\":1.8605427948,\"2020-06-08T17:00:00.000Z\":1.8785871911,\"2020-06-08T18:00:00.000Z\":1.8686244945,\"2020-06-08T19:00:00.000Z\":1.8326614693,\"2020-06-08T20:00:00.000Z\":1.8783741861,\"2020-06-08T21:00:00.000Z\":1.8839774383,\"2020-06-08T22:00:00.000Z\":1.8581453184,\"2020-06-08T23:00:00.000Z\":1.8737832229,\"2020-06-09T00:00:00.000Z\":1.825608836,\"2020-06-09T01:00:00.000Z\":1.8419542375,\"2020-06-09T02:00:00.000Z\":1.8341249644,\"2020-06-09T03:00:00.000Z\":1.8737361118,\"2020-06-09T04:00:00.000Z\":1.8373356528,\"2020-06-09T05:00:00.000Z\":1.8610829866,\"2020-06-09T06:00:00.000Z\":1.8647217478,\"2020-06-09T07:00:00.000Z\":1.8542354706,\"2020-06-09T08:00:00.000Z\":1.8584044488,\"2020-06-09T09:00:00.000Z\":1.8574092583,\"2020-06-09T10:00:00.000Z\":1.8314458281,\"2020-06-09T11:00:00.000Z\":1.8291249077,\"2020-06-09T12:00:00.000Z\":1.794912816,\"2020-06-09T13:00:00.000Z\":1.806780492,\"2020-06-09T14:00:00.000Z\":1.8515750872,\"2020-06-09T15:00:00.000Z\":1.7881377768,\"2020-06-09T16:00:00.000Z\":1.782908594,\"2020-06-09T17:00:00.000Z\":1.7871490101,\"2020-06-09T18:00:00.000Z\":1.7824570591,\"2020-06-09T19:00:00.000Z\":1.8381627319,\"2020-06-09T20:00:00.000Z\":1.7788963713,\"2020-06-09T21:00:00.000Z\":1.8135459458,\"2020-06-09T22:00:00.000Z\":1.7706291347,\"2020-06-09T23:00:00.000Z\":1.7832814738,\"2020-06-10T00:00:00.000Z\":1.7915501526,\"2020-06-10T01:00:00.000Z\":1.797562649,\"2020-06-10T02:00:00.000Z\":1.810740465,\"2020-06-10T03:00:00.000Z\":1.8039826415,\"2020-06-10T04:00:00.000Z\":1.8061031814,\"2020-06-10T05:00:00.000Z\":1.7798470634,\"2020-06-10T06:00:00.000Z\":1.824419133,\"2020-06-10T07:00:00.000Z\":1.7714949585,\"2020-06-10T08:00:00.000Z\":1.8110842269,\"2020-06-10T09:00:00.000Z\":1.7653148984,\"2020-06-10T10:00:00.000Z\":1.7642104437,\"2020-06-10T11:00:00.000Z\":1.7882945391,\"2020-06-10T12:00:00.000Z\":1.7510199158,\"2020-06-10T13:00:00.000Z\":1.7602817891,\"2020-06-10T14:00:00.000Z\":1.7692896514,\"2020-06-10T15:00:00.000Z\":1.7816856687,\"2020-06-10T16:00:00.000Z\":1.7726023267,\"2020-06-10T17:00:00.000Z\":1.7529701599,\"2020-06-10T18:00:00.000Z\":1.7944730908,\"2020-06-10T19:00:00.000Z\":1.7959826561,\"2020-06-10T20:00:00.000Z\":1.7262595779,\"2020-06-10T21:00:00.000Z\":1.7599426932,\"2020-06-10T22:00:00.000Z\":1.7942664293,\"2020-06-10T23:00:00.000Z\":1.7568792181,\"2020-06-11T00:00:00.000Z\":1.7503584801,\"2020-06-11T01:00:00.000Z\":1.772818345,\"2020-06-11T02:00:00.000Z\":1.7599267103,\"2020-06-11T03:00:00.000Z\":1.7543246604,\"2020-06-11T04:00:00.000Z\":1.7716360143,\"2020-06-11T05:00:00.000Z\":1.7497533172,\"2020-06-11T06:00:00.000Z\":1.7296714486,\"2020-06-11T07:00:00.000Z\":1.7868207192,\"2020-06-11T08:00:00.000Z\":1.7441884421,\"2020-06-11T09:00:00.000Z\":1.7268847381,\"2020-06-11T10:00:00.000Z\":1.7372780067,\"2020-06-11T11:00:00.000Z\":1.7531690232,\"2020-06-11T12:00:00.000Z\":1.7563962807,\"2020-06-11T13:00:00.000Z\":1.7337006137,\"2020-06-11T14:00:00.000Z\":1.7567559875,\"2020-06-11T15:00:00.000Z\":1.7314396428}"
          }
        },
        {
          "workflow_input_name": "positive_step_size",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "0.25"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "09b29726-4373-4652-82c8-7aa3e3f91676",
    "revision_group_id": "aa55faf1-7321-40ee-b41c-ab7267ef6468",
    "name": "Combine two Series into DataFrame",
    "description": "Combine two Series into a DataFrame as new columns",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T16:33:37.208298+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "# Combine two series to a DataFrame\n\nAllows to add two Series to a given DataFrame (or Series which then is converted to a DataFrame).\n\nThis is just a two times application of the corresponding component - see that component for details.\n",
    "content": {
      "operators": [
        {
          "id": "ea5479cb-a8df-4f8c-8165-86c21d0fd8e8",
          "revision_group_id": "68f91351-a1f5-9959-414a-2c72003f3226",
          "name": "Combine into DataFrame",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "68f91351-a1f5-9959-414a-2c72003f3226",
          "inputs": [
            {
              "id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 780,
            "y": 100
          }
        },
        {
          "id": "f2e74579-6058-474a-bb9e-ae2d9a059b6d",
          "revision_group_id": "68f91351-a1f5-9959-414a-2c72003f3226",
          "name": "Combine into DataFrame (2)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "68f91351-a1f5-9959-414a-2c72003f3226",
          "inputs": [
            {
              "id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 250,
            "y": 130
          }
        }
      ],
      "links": [
        {
          "id": "0a460b44-34bc-42ac-9de8-04aac6f376a3",
          "start": {
            "operator": "f2e74579-6058-474a-bb9e-ae2d9a059b6d",
            "connector": {
              "id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "ea5479cb-a8df-4f8c-8165-86c21d0fd8e8",
            "connector": {
              "id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "c35302ff-e7c6-4558-b898-9dcb070040ab",
          "start": {
            "connector": {
              "id": "9f4b9299-867b-41fa-86f8-29069574c991",
              "name": "series_1",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 190
              }
            }
          },
          "end": {
            "operator": "f2e74579-6058-474a-bb9e-ae2d9a059b6d",
            "connector": {
              "id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "529c5379-ab0f-4aaf-b978-3b6f4e664e30",
          "start": {
            "connector": {
              "id": "d36314d1-d09c-4af2-b472-bb46ce30b2ba",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 220
              }
            }
          },
          "end": {
            "operator": "f2e74579-6058-474a-bb9e-ae2d9a059b6d",
            "connector": {
              "id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "dddad71a-ae23-4812-b381-38ef6d90bd6a",
          "start": {
            "connector": {
              "id": "b44f8d11-73c2-4f52-bc56-ff738618fdbb",
              "name": "series_2",
              "data_type": "SERIES",
              "position": {
                "x": 510,
                "y": 60
              }
            }
          },
          "end": {
            "operator": "ea5479cb-a8df-4f8c-8165-86c21d0fd8e8",
            "connector": {
              "id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "e614d1a7-118c-490c-b61f-2590bcaec254",
          "start": {
            "operator": "ea5479cb-a8df-4f8c-8165-86c21d0fd8e8",
            "connector": {
              "id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "ebbfb57d-5108-4f75-9ea3-7025f31530f9",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 1230,
                "y": 160
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "b44f8d11-73c2-4f52-bc56-ff738618fdbb",
          "name": "series_2",
          "data_type": "SERIES",
          "operator_id": "ea5479cb-a8df-4f8c-8165-86c21d0fd8e8",
          "connector_id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
          "operator_name": "Combine into DataFrame (2)",
          "connector_name": "series",
          "position": {
            "x": 510,
            "y": 60
          }
        },
        {
          "id": "9f4b9299-867b-41fa-86f8-29069574c991",
          "name": "series_1",
          "data_type": "SERIES",
          "operator_id": "f2e74579-6058-474a-bb9e-ae2d9a059b6d",
          "connector_id": "15637612-6dc7-4f55-7b5b-83c9fdac8579",
          "operator_name": "Combine into DataFrame",
          "connector_name": "series",
          "position": {
            "x": 0,
            "y": 190
          }
        },
        {
          "id": "d36314d1-d09c-4af2-b472-bb46ce30b2ba",
          "name": "series_or_dataframe",
          "data_type": "ANY",
          "operator_id": "f2e74579-6058-474a-bb9e-ae2d9a059b6d",
          "connector_id": "3e68b069-390e-cf1f-5916-101b7fe4cf4a",
          "operator_name": "Combine into DataFrame",
          "connector_name": "series_or_dataframe",
          "position": {
            "x": 0,
            "y": 220
          }
        }
      ],
      "outputs": [
        {
          "id": "ebbfb57d-5108-4f75-9ea3-7025f31530f9",
          "name": "dataframe",
          "data_type": "DATAFRAME",
          "operator_id": "ea5479cb-a8df-4f8c-8165-86c21d0fd8e8",
          "connector_id": "cbf856b7-faf7-3079-d8e8-3b666d6f9d84",
          "operator_name": "Combine into DataFrame (2)",
          "connector_name": "dataframe",
          "position": {
            "x": 1230,
            "y": 160
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "b44f8d11-73c2-4f52-bc56-ff738618fdbb",
          "name": "series_2",
          "data_type": "SERIES"
        },
        {
          "id": "9f4b9299-867b-41fa-86f8-29069574c991",
          "name": "series_1",
          "data_type": "SERIES"
        },
        {
          "id": "d36314d1-d09c-4af2-b472-bb46ce30b2ba",
          "name": "series_or_dataframe",
          "data_type": "ANY"
        }
      ],
      "outputs": [
        {
          "id": "ebbfb57d-5108-4f75-9ea3-7025f31530f9",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [],
      "output_wirings": []
    }
  },
  {
    "id": "45f4f0c1-3fda-4c3b-8187-c590610e6975",
    "revision_group_id": "047cbb52-c7b4-4134-9fd8-4006bd66c192",
    "name": "Combine two Series as named columns into DataFrame",
    "description": "Combine two Series as named columns into DataFrame",
    "category": "Connectors",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T17:33:37.269504+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "# Combine two Series as named columns into DataFrame\n\nAllows to add two Series to a given DataFrame (or Series which then is converted to a DataFrame) while providing names for the new columns.\n\nThis is just a two times application of the corresponding component - see that component for details.\n",
    "content": {
      "operators": [
        {
          "id": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
          "revision_group_id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
          "name": "Combine as named column into DataFrame",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
          "inputs": [
            {
              "id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
              "name": "column_name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 290,
            "y": 340
          }
        },
        {
          "id": "4081d021-3252-4a92-9cb9-3df129b2969b",
          "revision_group_id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
          "name": "Combine as named column into DataFrame (2)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "0d08af64-3f34-cddc-354b-d6a26c3f1aab",
          "inputs": [
            {
              "id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
              "name": "column_name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            },
            {
              "id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 1020,
            "y": 280
          }
        }
      ],
      "links": [
        {
          "id": "169722e0-13c2-45db-9366-5c278554b1b5",
          "start": {
            "operator": "4081d021-3252-4a92-9cb9-3df129b2969b",
            "connector": {
              "id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "809be129-f35c-47ef-be5d-687256470181",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 1470,
                "y": 340
              }
            }
          },
          "path": []
        },
        {
          "id": "4b980d30-61d1-4a59-9f62-2e7eaca372eb",
          "start": {
            "connector": {
              "id": "ec588521-28e5-4616-b35a-fda973f91c37",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 40,
                "y": 460
              }
            }
          },
          "end": {
            "operator": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
            "connector": {
              "id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "4dd7fb86-67ee-458f-9a81-3ff4be47121c",
          "start": {
            "connector": {
              "id": "7ef1f9fd-4198-4056-8b50-6ee79f4ef1c0",
              "name": "series_1",
              "data_type": "SERIES",
              "position": {
                "x": 40,
                "y": 430
              }
            }
          },
          "end": {
            "operator": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
            "connector": {
              "id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "65d33e17-637a-408b-963c-f49fa3addee0",
          "start": {
            "connector": {
              "id": "fb274218-42c2-4951-8b48-13514c32b8e1",
              "name": "column_name_1",
              "data_type": "STRING",
              "position": {
                "x": 40,
                "y": 400
              }
            }
          },
          "end": {
            "operator": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
            "connector": {
              "id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
              "name": "column_name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "7106b3e8-2c00-4205-945b-cd8c6f65b7b0",
          "start": {
            "connector": {
              "id": "8106c90b-b3d6-48d8-ba61-79f06be3320f",
              "name": "column_name_2",
              "data_type": "STRING",
              "position": {
                "x": 770,
                "y": 340
              }
            }
          },
          "end": {
            "operator": "4081d021-3252-4a92-9cb9-3df129b2969b",
            "connector": {
              "id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
              "name": "column_name",
              "data_type": "STRING",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "af9b62a9-876a-4f0a-bce4-b12c0fe3af7d",
          "start": {
            "connector": {
              "id": "e71a1c04-36bc-4a8c-bff0-26454b6442a0",
              "name": "series_2",
              "data_type": "SERIES",
              "position": {
                "x": 770,
                "y": 370
              }
            }
          },
          "end": {
            "operator": "4081d021-3252-4a92-9cb9-3df129b2969b",
            "connector": {
              "id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "defc6d5b-8a69-4281-a1b7-c1275b91a43d",
          "start": {
            "operator": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
            "connector": {
              "id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
              "name": "dataframe",
              "data_type": "DATAFRAME",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "4081d021-3252-4a92-9cb9-3df129b2969b",
            "connector": {
              "id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
              "name": "series_or_dataframe",
              "data_type": "ANY",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "fb274218-42c2-4951-8b48-13514c32b8e1",
          "name": "column_name_1",
          "data_type": "STRING",
          "operator_id": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
          "connector_id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
          "operator_name": "Combine as named column into DataFrame",
          "connector_name": "column_name",
          "position": {
            "x": 40,
            "y": 400
          }
        },
        {
          "id": "7ef1f9fd-4198-4056-8b50-6ee79f4ef1c0",
          "name": "series_1",
          "data_type": "SERIES",
          "operator_id": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
          "connector_id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
          "operator_name": "Combine as named column into DataFrame",
          "connector_name": "series",
          "position": {
            "x": 40,
            "y": 430
          }
        },
        {
          "id": "ec588521-28e5-4616-b35a-fda973f91c37",
          "name": "series_or_dataframe",
          "data_type": "ANY",
          "operator_id": "d6a1e330-7023-4cf9-986e-a03f14e6cdd6",
          "connector_id": "801659c5-4c57-0dc6-df28-6d4f5412f44f",
          "operator_name": "Combine as named column into DataFrame",
          "connector_name": "series_or_dataframe",
          "position": {
            "x": 40,
            "y": 460
          }
        },
        {
          "id": "8106c90b-b3d6-48d8-ba61-79f06be3320f",
          "name": "column_name_2",
          "data_type": "STRING",
          "operator_id": "4081d021-3252-4a92-9cb9-3df129b2969b",
          "connector_id": "fc417e48-f7d8-0bbf-60ac-af92a9150170",
          "operator_name": "Combine as named column into DataFrame (2)",
          "connector_name": "column_name",
          "position": {
            "x": 770,
            "y": 340
          }
        },
        {
          "id": "e71a1c04-36bc-4a8c-bff0-26454b6442a0",
          "name": "series_2",
          "data_type": "SERIES",
          "operator_id": "4081d021-3252-4a92-9cb9-3df129b2969b",
          "connector_id": "3e1b0bf1-48d3-a534-5a6f-fa1bb37a7aab",
          "operator_name": "Combine as named column into DataFrame (2)",
          "connector_name": "series",
          "position": {
            "x": 770,
            "y": 370
          }
        }
      ],
      "outputs": [
        {
          "id": "809be129-f35c-47ef-be5d-687256470181",
          "name": "dataframe",
          "data_type": "DATAFRAME",
          "operator_id": "4081d021-3252-4a92-9cb9-3df129b2969b",
          "connector_id": "2bad1916-9d38-2409-b236-ebfce1fc1fae",
          "operator_name": "Combine as named column into DataFrame (2)",
          "connector_name": "dataframe",
          "position": {
            "x": 1470,
            "y": 340
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "fb274218-42c2-4951-8b48-13514c32b8e1",
          "name": "column_name_1",
          "data_type": "STRING"
        },
        {
          "id": "7ef1f9fd-4198-4056-8b50-6ee79f4ef1c0",
          "name": "series_1",
          "data_type": "SERIES"
        },
        {
          "id": "ec588521-28e5-4616-b35a-fda973f91c37",
          "name": "series_or_dataframe",
          "data_type": "ANY"
        },
        {
          "id": "8106c90b-b3d6-48d8-ba61-79f06be3320f",
          "name": "column_name_2",
          "data_type": "STRING"
        },
        {
          "id": "e71a1c04-36bc-4a8c-bff0-26454b6442a0",
          "name": "series_2",
          "data_type": "SERIES"
        }
      ],
      "outputs": [
        {
          "id": "809be129-f35c-47ef-be5d-687256470181",
          "name": "dataframe",
          "data_type": "DATAFRAME"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "column_name_1",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "asdf"
          }
        },
        {
          "workflow_input_name": "series_1",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2020-01-01T01:15:27.000Z\": 42.2,\n    \"2020-01-03T08:20:03.000Z\": 18.7,\n    \"2020-01-03T08:20:04.000Z\": 25.9\n}"
          }
        },
        {
          "workflow_input_name": "series_or_dataframe",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"a\": true,\n    \"b\": 31.56\n}"
          }
        },
        {
          "workflow_input_name": "column_name_2",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "asdf"
          }
        },
        {
          "workflow_input_name": "series_2",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\n    \"2020-01-01T01:15:27.000Z\": 42.2,\n    \"2020-01-03T08:20:03.000Z\": 18.7,\n    \"2020-01-03T08:20:04.000Z\": 25.9\n}"
          }
        }
      ],
      "output_wirings": []
    }
  },
  {
    "id": "3d504361-e351-4d52-8734-391aa47e8f24",
    "revision_group_id": "308da08f-c639-4f7a-b111-07bf09c272c4",
    "name": "Linear RUL from last positive Step",
    "description": "Linear RUL regression from last detected positive step onwards",
    "category": "Examples",
    "version_tag": "1.0.0",
    "released_timestamp": "2022-02-09T16:33:37.374694+00:00",
    "state": "RELEASED",
    "type": "WORKFLOW",
    "documentation": "## Linear RUL From last positive Step\n\nDemonstrates a combination of\n* detecting positive steps and filtering data (take only data from last such step onwards)\n* doing RUL Regression with that data.\n\nIn particular, this workflow demonstrates how other workflows can be used as operators in a new workflow.\n\n## Examples\nThe json input of a typical call of this workflow is\n```\n{\n\t\"positive_step_size\": 0.25,\n\t\"limit\": 1.3,\n\t\"num_days_forecast\": 30,\n\t\"inp_series\": {\n    \"2020-05-01T00:00:00.000Z\": 2.5340945967,\n    \"2020-05-01T01:00:00.000Z\": 2.5658768256,\n    \"2020-05-01T02:00:00.000Z\": 2.570679579,\n    \"2020-05-01T03:00:00.000Z\": 2.5618633791,\n    \"2020-05-01T04:00:00.000Z\": 2.5709272918,\n    \"2020-05-01T05:00:00.000Z\": 2.5447713467,\n    \"2020-05-01T06:00:00.000Z\": 2.544863302,\n    \"2020-05-01T07:00:00.000Z\": 2.5890837968,\n    \"2020-05-01T08:00:00.000Z\": 2.5646962713,\n    \"2020-05-01T09:00:00.000Z\": 2.5335594298,\n    \"2020-05-01T10:00:00.000Z\": 2.5570004281,\n    \"2020-05-01T11:00:00.000Z\": 2.5279007185,\n    \"2020-05-01T12:00:00.000Z\": 2.5180691208,\n    \"2020-05-01T13:00:00.000Z\": 2.5425170109,\n    \"2020-05-01T14:00:00.000Z\": 2.5193970292,\n    \"2020-05-01T15:00:00.000Z\": 2.505462918,\n    \"2020-05-01T16:00:00.000Z\": 2.5569998157,\n    \"2020-05-01T17:00:00.000Z\": 2.507311926,\n    \"2020-05-01T18:00:00.000Z\": 2.498353005,\n    \"2020-05-01T19:00:00.000Z\": 2.546221722,\n    \"2020-05-01T20:00:00.000Z\": 2.5223358532,\n    \"2020-05-01T21:00:00.000Z\": 2.4936112195,\n    \"2020-05-01T22:00:00.000Z\": 2.4929833196,\n    \"2020-05-01T23:00:00.000Z\": 2.5375547278,\n    \"2020-05-02T00:00:00.000Z\": 2.5104412318,\n    \"2020-05-02T01:00:00.000Z\": 2.5113524681,\n    \"2020-05-02T02:00:00.000Z\": 2.5337742397,\n    \"2020-05-02T03:00:00.000Z\": 2.5038516369,\n    \"2020-05-02T04:00:00.000Z\": 2.4963372908,\n    \"2020-05-02T05:00:00.000Z\": 2.5195275913,\n    \"2020-05-02T06:00:00.000Z\": 2.4935793186,\n    \"2020-05-02T07:00:00.000Z\": 2.5164266646,\n    \"2020-05-02T08:00:00.000Z\": 2.5185465582,\n    \"2020-05-02T09:00:00.000Z\": 2.5350140943,\n    \"2020-05-02T10:00:00.000Z\": 2.5117286988,\n    \"2020-05-02T11:00:00.000Z\": 2.5082871799,\n    \"2020-05-02T12:00:00.000Z\": 2.5149836071,\n    \"2020-05-02T13:00:00.000Z\": 2.5028807486,\n    \"2020-05-02T14:00:00.000Z\": 2.523517088,\n    \"2020-05-02T15:00:00.000Z\": 2.554328315,\n    \"2020-05-02T16:00:00.000Z\": 2.4982672405,\n    \"2020-05-02T17:00:00.000Z\": 2.5212582072,\n    \"2020-05-02T18:00:00.000Z\": 2.5408671362,\n    \"2020-05-02T19:00:00.000Z\": 2.534927499,\n    \"2020-05-02T20:00:00.000Z\": 2.5499492231,\n    \"2020-05-02T21:00:00.000Z\": 2.506651042,\n    \"2020-05-02T22:00:00.000Z\": 2.5362261202,\n    \"2020-05-02T23:00:00.000Z\": 2.5289785015,\n    \"2020-05-03T00:00:00.000Z\": 2.5439596654,\n    \"2020-05-03T01:00:00.000Z\": 2.5349408476,\n    \"2020-05-03T02:00:00.000Z\": 2.4928973472,\n    \"2020-05-03T03:00:00.000Z\": 2.5235283235,\n    \"2020-05-03T04:00:00.000Z\": 2.4952145471,\n    \"2020-05-03T05:00:00.000Z\": 2.5357483131,\n    \"2020-05-03T06:00:00.000Z\": 2.4875558337,\n    \"2020-05-03T07:00:00.000Z\": 2.4976392088,\n    \"2020-05-03T08:00:00.000Z\": 2.4934381565,\n    \"2020-05-03T09:00:00.000Z\": 2.5499418548,\n    \"2020-05-03T10:00:00.000Z\": 2.5353427119,\n    \"2020-05-03T11:00:00.000Z\": 2.5438575598,\n    \"2020-05-03T12:00:00.000Z\": 2.5477980799,\n    \"2020-05-03T13:00:00.000Z\": 2.5353353389,\n    \"2020-05-03T14:00:00.000Z\": 2.490339555,\n    \"2020-05-03T15:00:00.000Z\": 2.5258760102,\n    \"2020-05-03T16:00:00.000Z\": 2.4909430024,\n    \"2020-05-03T17:00:00.000Z\": 2.5418209819,\n    \"2020-05-03T18:00:00.000Z\": 2.4963330331,\n    \"2020-05-03T19:00:00.000Z\": 2.4893977942,\n    \"2020-05-03T20:00:00.000Z\": 2.5157624715,\n    \"2020-05-03T21:00:00.000Z\": 2.5332988324,\n    \"2020-05-03T22:00:00.000Z\": 2.5080267414,\n    \"2020-05-03T23:00:00.000Z\": 2.5110675161,\n    \"2020-05-04T00:00:00.000Z\": 2.4916789597,\n    \"2020-05-04T01:00:00.000Z\": 2.4857544538,\n    \"2020-05-04T02:00:00.000Z\": 2.5523625847,\n    \"2020-05-04T03:00:00.000Z\": 2.5161945193,\n    \"2020-05-04T04:00:00.000Z\": 2.5031237636,\n    \"2020-05-04T05:00:00.000Z\": 2.499693572,\n    \"2020-05-04T06:00:00.000Z\": 2.5310847546,\n    \"2020-05-04T07:00:00.000Z\": 2.5294701706,\n    \"2020-05-04T08:00:00.000Z\": 2.4953251286,\n    \"2020-05-04T09:00:00.000Z\": 2.5145793132,\n    \"2020-05-04T10:00:00.000Z\": 2.537795696,\n    \"2020-05-04T11:00:00.000Z\": 2.5177948972,\n    \"2020-05-04T12:00:00.000Z\": 2.4771575641,\n    \"2020-05-04T13:00:00.000Z\": 2.4766223173,\n    \"2020-05-04T14:00:00.000Z\": 2.4866457947,\n    \"2020-05-04T15:00:00.000Z\": 2.4773926315,\n    \"2020-05-04T16:00:00.000Z\": 2.4849491065,\n    \"2020-05-04T17:00:00.000Z\": 2.4614148496,\n    \"2020-05-04T18:00:00.000Z\": 2.5140566144,\n    \"2020-05-04T19:00:00.000Z\": 2.4610181004,\n    \"2020-05-04T20:00:00.000Z\": 2.5032041998,\n    \"2020-05-04T21:00:00.000Z\": 2.4602600843,\n    \"2020-05-04T22:00:00.000Z\": 2.4425060895,\n    \"2020-05-04T23:00:00.000Z\": 2.4887562624,\n    \"2020-05-05T00:00:00.000Z\": 2.4587981472,\n    \"2020-05-05T01:00:00.000Z\": 2.4976287919,\n    \"2020-05-05T02:00:00.000Z\": 2.4759566315,\n    \"2020-05-05T03:00:00.000Z\": 2.4983647141,\n    \"2020-05-05T04:00:00.000Z\": 2.4481869955,\n    \"2020-05-05T05:00:00.000Z\": 2.4620033756,\n    \"2020-05-05T06:00:00.000Z\": 2.4722438504,\n    \"2020-05-05T07:00:00.000Z\": 2.4836028877,\n    \"2020-05-05T08:00:00.000Z\": 2.4999365634,\n    \"2020-05-05T09:00:00.000Z\": 2.4590343725,\n    \"2020-05-05T10:00:00.000Z\": 2.485029072,\n    \"2020-05-05T11:00:00.000Z\": 2.4832933203,\n    \"2020-05-05T12:00:00.000Z\": 2.4493189797,\n    \"2020-05-05T13:00:00.000Z\": 2.4555612652,\n    \"2020-05-05T14:00:00.000Z\": 2.4331822011,\n    \"2020-05-05T15:00:00.000Z\": 2.4437542619,\n    \"2020-05-05T16:00:00.000Z\": 2.4103224236,\n    \"2020-05-05T17:00:00.000Z\": 2.4599756767,\n    \"2020-05-05T18:00:00.000Z\": 2.4195711603,\n    \"2020-05-05T19:00:00.000Z\": 2.4204898355,\n    \"2020-05-05T20:00:00.000Z\": 2.4271840023,\n    \"2020-05-05T21:00:00.000Z\": 2.4093728506,\n    \"2020-05-05T22:00:00.000Z\": 2.4287596847,\n    \"2020-05-05T23:00:00.000Z\": 2.4502553829,\n    \"2020-05-06T00:00:00.000Z\": 2.4032112072,\n    \"2020-05-06T01:00:00.000Z\": 2.4164635616,\n    \"2020-05-06T02:00:00.000Z\": 2.3964321581,\n    \"2020-05-06T03:00:00.000Z\": 2.4296400627,\n    \"2020-05-06T04:00:00.000Z\": 2.4597693405,\n    \"2020-05-06T05:00:00.000Z\": 2.4051327723,\n    \"2020-05-06T06:00:00.000Z\": 2.39231384,\n    \"2020-05-06T07:00:00.000Z\": 2.4227524163,\n    \"2020-05-06T08:00:00.000Z\": 2.4241047304,\n    \"2020-05-06T09:00:00.000Z\": 2.383595989,\n    \"2020-05-06T10:00:00.000Z\": 2.3830219146,\n    \"2020-05-06T11:00:00.000Z\": 2.391330956,\n    \"2020-05-06T12:00:00.000Z\": 2.4083971686,\n    \"2020-05-06T13:00:00.000Z\": 2.4019011994,\n    \"2020-05-06T14:00:00.000Z\": 2.3741282476,\n    \"2020-05-06T15:00:00.000Z\": 2.408673447,\n    \"2020-05-06T16:00:00.000Z\": 2.3888631077,\n    \"2020-05-06T17:00:00.000Z\": 2.3805006535,\n    \"2020-05-06T18:00:00.000Z\": 2.4118540536,\n    \"2020-05-06T19:00:00.000Z\": 2.3915179257,\n    \"2020-05-06T20:00:00.000Z\": 2.3692830106,\n    \"2020-05-06T21:00:00.000Z\": 2.4088917478,\n    \"2020-05-06T22:00:00.000Z\": 2.3724274396,\n    \"2020-05-06T23:00:00.000Z\": 2.3524618611,\n    \"2020-05-07T00:00:00.000Z\": 2.3824901899,\n    \"2020-05-07T01:00:00.000Z\": 2.39644748,\n    \"2020-05-07T02:00:00.000Z\": 2.4080285331,\n    \"2020-05-07T03:00:00.000Z\": 2.3540845158,\n    \"2020-05-07T04:00:00.000Z\": 2.377081574,\n    \"2020-05-07T05:00:00.000Z\": 2.3825706704,\n    \"2020-05-07T06:00:00.000Z\": 2.3969814116,\n    \"2020-05-07T07:00:00.000Z\": 2.3902110487,\n    \"2020-05-07T08:00:00.000Z\": 2.8876608764,\n    \"2020-05-07T09:00:00.000Z\": 2.8554512351,\n    \"2020-05-07T10:00:00.000Z\": 2.9011506947,\n    \"2020-05-07T11:00:00.000Z\": 2.8739810027,\n    \"2020-05-07T12:00:00.000Z\": 2.8642327429,\n    \"2020-05-07T13:00:00.000Z\": 2.8609388862,\n    \"2020-05-07T14:00:00.000Z\": 2.8691609675,\n    \"2020-05-07T15:00:00.000Z\": 2.8516302986,\n    \"2020-05-07T16:00:00.000Z\": 2.8860791586,\n    \"2020-05-07T17:00:00.000Z\": 2.8417859745,\n    \"2020-05-07T18:00:00.000Z\": 2.8577750865,\n    \"2020-05-07T19:00:00.000Z\": 2.861678322,\n    \"2020-05-07T20:00:00.000Z\": 2.8064804686,\n    \"2020-05-07T21:00:00.000Z\": 2.8447594889,\n    \"2020-05-07T22:00:00.000Z\": 2.855936299,\n    \"2020-05-07T23:00:00.000Z\": 2.8142863343,\n    \"2020-05-08T00:00:00.000Z\": 2.8373024815,\n    \"2020-05-08T01:00:00.000Z\": 2.8435283639,\n    \"2020-05-08T02:00:00.000Z\": 2.8654301284,\n    \"2020-05-08T03:00:00.000Z\": 2.821334943,\n    \"2020-05-08T04:00:00.000Z\": 2.8432670041,\n    \"2020-05-08T05:00:00.000Z\": 2.8557929741,\n    \"2020-05-08T06:00:00.000Z\": 2.8156375097,\n    \"2020-05-08T07:00:00.000Z\": 2.855427583,\n    \"2020-05-08T08:00:00.000Z\": 2.8338698983,\n    \"2020-05-08T09:00:00.000Z\": 2.8455777397,\n    \"2020-05-08T10:00:00.000Z\": 2.8302046473,\n    \"2020-05-08T11:00:00.000Z\": 2.811772505,\n    \"2020-05-08T12:00:00.000Z\": 2.8327504575,\n    \"2020-05-08T13:00:00.000Z\": 2.8149162137,\n    \"2020-05-08T14:00:00.000Z\": 2.8418180107,\n    \"2020-05-08T15:00:00.000Z\": 2.77624676,\n    \"2020-05-08T16:00:00.000Z\": 2.7750554183,\n    \"2020-05-08T17:00:00.000Z\": 2.8217362031,\n    \"2020-05-08T18:00:00.000Z\": 2.7887413672,\n    \"2020-05-08T19:00:00.000Z\": 2.8221631708,\n    \"2020-05-08T20:00:00.000Z\": 2.7607433072,\n    \"2020-05-08T21:00:00.000Z\": 2.8068503911,\n    \"2020-05-08T22:00:00.000Z\": 2.8275220851,\n    \"2020-05-08T23:00:00.000Z\": 2.7854105273,\n    \"2020-05-09T00:00:00.000Z\": 2.8234034853,\n    \"2020-05-09T01:00:00.000Z\": 2.7770116762,\n    \"2020-05-09T02:00:00.000Z\": 2.8169012822,\n    \"2020-05-09T03:00:00.000Z\": 2.7867158786,\n    \"2020-05-09T04:00:00.000Z\": 2.7771182754,\n    \"2020-05-09T05:00:00.000Z\": 2.8149487573,\n    \"2020-05-09T06:00:00.000Z\": 2.804412661,\n    \"2020-05-09T07:00:00.000Z\": 2.8110121218,\n    \"2020-05-09T08:00:00.000Z\": 2.7997556599,\n    \"2020-05-09T09:00:00.000Z\": 2.827594843,\n    \"2020-05-09T10:00:00.000Z\": 2.8026913184,\n    \"2020-05-09T11:00:00.000Z\": 2.7666065452,\n    \"2020-05-09T12:00:00.000Z\": 2.8146925781,\n    \"2020-05-09T13:00:00.000Z\": 2.8285910075,\n    \"2020-05-09T14:00:00.000Z\": 2.819171443,\n    \"2020-05-09T15:00:00.000Z\": 2.8276060552,\n    \"2020-05-09T16:00:00.000Z\": 2.786607283,\n    \"2020-05-09T17:00:00.000Z\": 2.8048391834,\n    \"2020-05-09T18:00:00.000Z\": 2.8159184436,\n    \"2020-05-09T19:00:00.000Z\": 2.7891395973,\n    \"2020-05-09T20:00:00.000Z\": 2.8116468863,\n    \"2020-05-09T21:00:00.000Z\": 2.7978174856,\n    \"2020-05-09T22:00:00.000Z\": 2.7989229558,\n    \"2020-05-09T23:00:00.000Z\": 2.7688699705,\n    \"2020-05-10T00:00:00.000Z\": 2.8017221595,\n    \"2020-05-10T01:00:00.000Z\": 2.772552825,\n    \"2020-05-10T02:00:00.000Z\": 2.7706036817,\n    \"2020-05-10T03:00:00.000Z\": 2.8012202962,\n    \"2020-05-10T04:00:00.000Z\": 2.785791312,\n    \"2020-05-10T05:00:00.000Z\": 2.7742417236,\n    \"2020-05-10T06:00:00.000Z\": 2.7712404497,\n    \"2020-05-10T07:00:00.000Z\": 2.8023151587,\n    \"2020-05-10T08:00:00.000Z\": 2.8038778267,\n    \"2020-05-10T09:00:00.000Z\": 2.7654629581,\n    \"2020-05-10T10:00:00.000Z\": 2.7723918403,\n    \"2020-05-10T11:00:00.000Z\": 2.7758481247,\n    \"2020-05-10T12:00:00.000Z\": 2.767177124,\n    \"2020-05-10T13:00:00.000Z\": 2.7656505946,\n    \"2020-05-10T14:00:00.000Z\": 2.7967909952,\n    \"2020-05-10T15:00:00.000Z\": 2.7623871484,\n    \"2020-05-10T16:00:00.000Z\": 2.7634893745,\n    \"2020-05-10T17:00:00.000Z\": 2.8194647161,\n    \"2020-05-10T18:00:00.000Z\": 2.770016505,\n    \"2020-05-10T19:00:00.000Z\": 2.791569751,\n    \"2020-05-10T20:00:00.000Z\": 2.7731723248,\n    \"2020-05-10T21:00:00.000Z\": 2.7867953525,\n    \"2020-05-10T22:00:00.000Z\": 2.779407642,\n    \"2020-05-10T23:00:00.000Z\": 2.8176463762,\n    \"2020-05-11T00:00:00.000Z\": 2.7962230453,\n    \"2020-05-11T01:00:00.000Z\": 2.7806077636,\n    \"2020-05-11T02:00:00.000Z\": 2.8055549689,\n    \"2020-05-11T03:00:00.000Z\": 2.7778179322,\n    \"2020-05-11T04:00:00.000Z\": 2.7663530922,\n    \"2020-05-11T05:00:00.000Z\": 2.8133794994,\n    \"2020-05-11T06:00:00.000Z\": 2.8175014886,\n    \"2020-05-11T07:00:00.000Z\": 2.8094160034,\n    \"2020-05-11T08:00:00.000Z\": 2.7852624609,\n    \"2020-05-11T09:00:00.000Z\": 2.7784953118,\n    \"2020-05-11T10:00:00.000Z\": 2.7841129905,\n    \"2020-05-11T11:00:00.000Z\": 2.7954359299,\n    \"2020-05-11T12:00:00.000Z\": 2.7670627932,\n    \"2020-05-11T13:00:00.000Z\": 2.7513481564,\n    \"2020-05-11T14:00:00.000Z\": 2.7789241783,\n    \"2020-05-11T15:00:00.000Z\": 2.7950077875,\n    \"2020-05-11T16:00:00.000Z\": 2.7340843339,\n    \"2020-05-11T17:00:00.000Z\": 2.7706471042,\n    \"2020-05-11T18:00:00.000Z\": 2.7340350929,\n    \"2020-05-11T19:00:00.000Z\": 2.7857325803,\n    \"2020-05-11T20:00:00.000Z\": 2.7754412275,\n    \"2020-05-11T21:00:00.000Z\": 2.7255128288,\n    \"2020-05-11T22:00:00.000Z\": 2.7736621437,\n    \"2020-05-11T23:00:00.000Z\": 2.7741544669,\n    \"2020-05-12T00:00:00.000Z\": 2.7567000156,\n    \"2020-05-12T01:00:00.000Z\": 2.7286863092,\n    \"2020-05-12T02:00:00.000Z\": 2.7251265494,\n    \"2020-05-12T03:00:00.000Z\": 2.7373543428,\n    \"2020-05-12T04:00:00.000Z\": 2.7232293938,\n    \"2020-05-12T05:00:00.000Z\": 2.7407298649,\n    \"2020-05-12T06:00:00.000Z\": 2.7512581857,\n    \"2020-05-12T07:00:00.000Z\": 2.720196368,\n    \"2020-05-12T08:00:00.000Z\": 2.7268853219,\n    \"2020-05-12T09:00:00.000Z\": 2.7248220638,\n    \"2020-05-12T10:00:00.000Z\": 2.7589560897,\n    \"2020-05-12T11:00:00.000Z\": 2.7355221787,\n    \"2020-05-12T12:00:00.000Z\": 2.7154885845,\n    \"2020-05-12T13:00:00.000Z\": 2.6972396153,\n    \"2020-05-12T14:00:00.000Z\": 2.6945708743,\n    \"2020-05-12T15:00:00.000Z\": 2.728854137,\n    \"2020-05-12T16:00:00.000Z\": 2.741924416,\n    \"2020-05-12T17:00:00.000Z\": 2.681514517,\n    \"2020-05-12T18:00:00.000Z\": 2.7359950179,\n    \"2020-05-12T19:00:00.000Z\": 2.7258032095,\n    \"2020-05-12T20:00:00.000Z\": 2.7151585953,\n    \"2020-05-12T21:00:00.000Z\": 2.6768890865,\n    \"2020-05-12T22:00:00.000Z\": 2.7274083591,\n    \"2020-05-12T23:00:00.000Z\": 2.6761276008,\n    \"2020-05-13T00:00:00.000Z\": 2.7166516426,\n    \"2020-05-13T01:00:00.000Z\": 2.6845210743,\n    \"2020-05-13T02:00:00.000Z\": 2.7179678993,\n    \"2020-05-13T03:00:00.000Z\": 2.6928699958,\n    \"2020-05-13T04:00:00.000Z\": 2.7208969343,\n    \"2020-05-13T05:00:00.000Z\": 2.6712462796,\n    \"2020-05-13T06:00:00.000Z\": 2.7076362206,\n    \"2020-05-13T07:00:00.000Z\": 2.7303837224,\n    \"2020-05-13T08:00:00.000Z\": 2.7057166449,\n    \"2020-05-13T09:00:00.000Z\": 2.6738723965,\n    \"2020-05-13T10:00:00.000Z\": 2.6983200178,\n    \"2020-05-13T11:00:00.000Z\": 2.7183696993,\n    \"2020-05-13T12:00:00.000Z\": 2.6584979712,\n    \"2020-05-13T13:00:00.000Z\": 2.7019644564,\n    \"2020-05-13T14:00:00.000Z\": 2.6980747823,\n    \"2020-05-13T15:00:00.000Z\": 2.6837261034,\n    \"2020-05-13T16:00:00.000Z\": 2.6480272182,\n    \"2020-05-13T17:00:00.000Z\": 2.6373243943,\n    \"2020-05-13T18:00:00.000Z\": 2.6789372856,\n    \"2020-05-13T19:00:00.000Z\": 2.6539083585,\n    \"2020-05-13T20:00:00.000Z\": 2.6905034117,\n    \"2020-05-13T21:00:00.000Z\": 2.6637545007,\n    \"2020-05-13T22:00:00.000Z\": 2.6615138317,\n    \"2020-05-13T23:00:00.000Z\": 2.6877730651,\n    \"2020-05-14T00:00:00.000Z\": 2.6778959828,\n    \"2020-05-14T01:00:00.000Z\": 2.6791458864,\n    \"2020-05-14T02:00:00.000Z\": 2.6282751287,\n    \"2020-05-14T03:00:00.000Z\": 2.691481752,\n    \"2020-05-14T04:00:00.000Z\": 2.6438410933,\n    \"2020-05-14T05:00:00.000Z\": 2.6446438349,\n    \"2020-05-14T06:00:00.000Z\": 2.6664778986,\n    \"2020-05-14T07:00:00.000Z\": 2.6749865152,\n    \"2020-05-14T08:00:00.000Z\": 2.6197573996,\n    \"2020-05-14T09:00:00.000Z\": 2.63033336,\n    \"2020-05-14T10:00:00.000Z\": 2.6196842281,\n    \"2020-05-14T11:00:00.000Z\": 2.665106046,\n    \"2020-05-14T12:00:00.000Z\": 2.653752376,\n    \"2020-05-14T13:00:00.000Z\": 2.6624281378,\n    \"2020-05-14T14:00:00.000Z\": 2.6601045184,\n    \"2020-05-14T15:00:00.000Z\": 2.6642180189,\n    \"2020-05-14T16:00:00.000Z\": 2.6121169417,\n    \"2020-05-14T17:00:00.000Z\": 2.617543464,\n    \"2020-05-14T18:00:00.000Z\": 2.6513501098,\n    \"2020-05-14T19:00:00.000Z\": 2.6522931433,\n    \"2020-05-14T20:00:00.000Z\": 2.6010705104,\n    \"2020-05-14T21:00:00.000Z\": 2.6449498766,\n    \"2020-05-14T22:00:00.000Z\": 2.5983408246,\n    \"2020-05-14T23:00:00.000Z\": 2.5985499313,\n    \"2020-05-15T00:00:00.000Z\": 2.6413951229,\n    \"2020-05-15T01:00:00.000Z\": 2.6424818539,\n    \"2020-05-15T02:00:00.000Z\": 2.5927885137,\n    \"2020-05-15T03:00:00.000Z\": 2.6240514022,\n    \"2020-05-15T04:00:00.000Z\": 2.5925715035,\n    \"2020-05-15T05:00:00.000Z\": 2.6138055716,\n    \"2020-05-15T06:00:00.000Z\": 2.5910883652,\n    \"2020-05-15T07:00:00.000Z\": 2.5769435193,\n    \"2020-05-15T08:00:00.000Z\": 2.6266156697,\n    \"2020-05-15T09:00:00.000Z\": 2.6374539388,\n    \"2020-05-15T10:00:00.000Z\": 2.5787424447,\n    \"2020-05-15T11:00:00.000Z\": 2.5678192952,\n    \"2020-05-15T12:00:00.000Z\": 2.6153927681,\n    \"2020-05-15T13:00:00.000Z\": 2.5853832131,\n    \"2020-05-15T14:00:00.000Z\": 2.6132661902,\n    \"2020-05-15T15:00:00.000Z\": 2.5931169794,\n    \"2020-05-15T16:00:00.000Z\": 2.5833136246,\n    \"2020-05-15T17:00:00.000Z\": 2.591572653,\n    \"2020-05-15T18:00:00.000Z\": 2.5957702589,\n    \"2020-05-15T19:00:00.000Z\": 2.5913523358,\n    \"2020-05-15T20:00:00.000Z\": 2.601923737,\n    \"2020-05-15T21:00:00.000Z\": 2.5841345704,\n    \"2020-05-15T22:00:00.000Z\": 2.5392555788,\n    \"2020-05-15T23:00:00.000Z\": 2.5391458001,\n    \"2020-05-16T00:00:00.000Z\": 2.5678552605,\n    \"2020-05-16T01:00:00.000Z\": 2.5837382437,\n    \"2020-05-16T02:00:00.000Z\": 2.575568777,\n    \"2020-05-16T03:00:00.000Z\": 2.5546579073,\n    \"2020-05-16T04:00:00.000Z\": 2.5788964958,\n    \"2020-05-16T05:00:00.000Z\": 2.5711382881,\n    \"2020-05-16T06:00:00.000Z\": 2.5954454415,\n    \"2020-05-16T07:00:00.000Z\": 2.5547805625,\n    \"2020-05-16T08:00:00.000Z\": 2.5734597485,\n    \"2020-05-16T09:00:00.000Z\": 2.5353495222,\n    \"2020-05-16T10:00:00.000Z\": 2.5712632657,\n    \"2020-05-16T11:00:00.000Z\": 2.5893826923,\n    \"2020-05-16T12:00:00.000Z\": 2.5872103903,\n    \"2020-05-16T13:00:00.000Z\": 2.5923852379,\n    \"2020-05-16T14:00:00.000Z\": 2.5792818832,\n    \"2020-05-16T15:00:00.000Z\": 2.5990198819,\n    \"2020-05-16T16:00:00.000Z\": 2.5778749408,\n    \"2020-05-16T17:00:00.000Z\": 2.543925516,\n    \"2020-05-16T18:00:00.000Z\": 2.5972598182,\n    \"2020-05-16T19:00:00.000Z\": 2.5423908565,\n    \"2020-05-16T20:00:00.000Z\": 2.5578227224,\n    \"2020-05-16T21:00:00.000Z\": 2.5858883985,\n    \"2020-05-16T22:00:00.000Z\": 2.5805623562,\n    \"2020-05-16T23:00:00.000Z\": 2.5448297192,\n    \"2020-05-17T00:00:00.000Z\": 2.5491601489,\n    \"2020-05-17T01:00:00.000Z\": 2.5731124094,\n    \"2020-05-17T02:00:00.000Z\": 2.5736406969,\n    \"2020-05-17T03:00:00.000Z\": 2.5626850061,\n    \"2020-05-17T04:00:00.000Z\": 2.5436138376,\n    \"2020-05-17T05:00:00.000Z\": 2.5855244367,\n    \"2020-05-17T06:00:00.000Z\": 2.5701957181,\n    \"2020-05-17T07:00:00.000Z\": 2.5898424455,\n    \"2020-05-17T08:00:00.000Z\": 2.5407796698,\n    \"2020-05-17T09:00:00.000Z\": 2.6043293124,\n    \"2020-05-17T10:00:00.000Z\": 2.5897971392,\n    \"2020-05-17T11:00:00.000Z\": 2.591151675,\n    \"2020-05-17T12:00:00.000Z\": 2.5381999262,\n    \"2020-05-17T13:00:00.000Z\": 2.5496228887,\n    \"2020-05-17T14:00:00.000Z\": 2.5541065096,\n    \"2020-05-17T15:00:00.000Z\": 2.5871030528,\n    \"2020-05-17T16:00:00.000Z\": 2.6038788497,\n    \"2020-05-17T17:00:00.000Z\": 2.5506534759,\n    \"2020-05-17T18:00:00.000Z\": 2.5866884411,\n    \"2020-05-17T19:00:00.000Z\": 2.5455842598,\n    \"2020-05-17T20:00:00.000Z\": 2.5487742565,\n    \"2020-05-17T21:00:00.000Z\": 2.5406442875,\n    \"2020-05-17T22:00:00.000Z\": 2.5737797011,\n    \"2020-05-17T23:00:00.000Z\": 2.5390274429,\n    \"2020-05-18T00:00:00.000Z\": 2.561363499,\n    \"2020-05-18T01:00:00.000Z\": 2.5911964892,\n    \"2020-05-18T02:00:00.000Z\": 2.5796647228,\n    \"2020-05-18T03:00:00.000Z\": 2.5697442187,\n    \"2020-05-18T04:00:00.000Z\": 2.5946197386,\n    \"2020-05-18T05:00:00.000Z\": 2.6040066764,\n    \"2020-05-18T06:00:00.000Z\": 2.5510987719,\n    \"2020-05-18T07:00:00.000Z\": 2.5467777836,\n    \"2020-05-18T08:00:00.000Z\": 2.5285608801,\n    \"2020-05-18T09:00:00.000Z\": 2.5624147864,\n    \"2020-05-18T10:00:00.000Z\": 2.5722812283,\n    \"2020-05-18T11:00:00.000Z\": 2.5278309885,\n    \"2020-05-18T12:00:00.000Z\": 2.5354241218,\n    \"2020-05-18T13:00:00.000Z\": 2.5589556058,\n    \"2020-05-18T14:00:00.000Z\": 2.5464946567,\n    \"2020-05-18T15:00:00.000Z\": 2.5107928288,\n    \"2020-05-18T16:00:00.000Z\": 2.5077725848,\n    \"2020-05-18T17:00:00.000Z\": 2.5586393555,\n    \"2020-05-18T18:00:00.000Z\": 2.5007512067,\n    \"2020-05-18T19:00:00.000Z\": 2.5039389529,\n    \"2020-05-18T20:00:00.000Z\": 2.4914330926,\n    \"2020-05-18T21:00:00.000Z\": 2.5565952434,\n    \"2020-05-18T22:00:00.000Z\": 2.5287467728,\n    \"2020-05-18T23:00:00.000Z\": 2.522552616,\n    \"2020-05-19T00:00:00.000Z\": 2.549253813,\n    \"2020-05-19T01:00:00.000Z\": 2.556982035,\n    \"2020-05-19T02:00:00.000Z\": 2.5008039191,\n    \"2020-05-19T03:00:00.000Z\": 2.4974688627,\n    \"2020-05-19T04:00:00.000Z\": 2.5190140812,\n    \"2020-05-19T05:00:00.000Z\": 2.4941905269,\n    \"2020-05-19T06:00:00.000Z\": 2.5027892972,\n    \"2020-05-19T07:00:00.000Z\": 2.4878828835,\n    \"2020-05-19T08:00:00.000Z\": 2.5477026977,\n    \"2020-05-19T09:00:00.000Z\": 2.5224390682,\n    \"2020-05-19T10:00:00.000Z\": 2.535521406,\n    \"2020-05-19T11:00:00.000Z\": 2.5355743475,\n    \"2020-05-19T12:00:00.000Z\": 2.4792855611,\n    \"2020-05-19T13:00:00.000Z\": 2.5215776496,\n    \"2020-05-19T14:00:00.000Z\": 2.5044866209,\n    \"2020-05-19T15:00:00.000Z\": 2.4703409983,\n    \"2020-05-19T16:00:00.000Z\": 2.4601050583,\n    \"2020-05-19T17:00:00.000Z\": 2.4696577071,\n    \"2020-05-19T18:00:00.000Z\": 2.4938061169,\n    \"2020-05-19T19:00:00.000Z\": 2.5085306803,\n    \"2020-05-19T20:00:00.000Z\": 2.4842918727,\n    \"2020-05-19T21:00:00.000Z\": 2.4808950741,\n    \"2020-05-19T22:00:00.000Z\": 2.4660397747,\n    \"2020-05-19T23:00:00.000Z\": 2.4943824127,\n    \"2020-05-20T00:00:00.000Z\": 2.4817219064,\n    \"2020-05-20T01:00:00.000Z\": 2.5147926716,\n    \"2020-05-20T02:00:00.000Z\": 2.470617541,\n    \"2020-05-20T03:00:00.000Z\": 2.4616569742,\n    \"2020-05-20T04:00:00.000Z\": 2.4553394116,\n    \"2020-05-20T05:00:00.000Z\": 2.4874017253,\n    \"2020-05-20T06:00:00.000Z\": 2.4713692517,\n    \"2020-05-20T07:00:00.000Z\": 2.442824733,\n    \"2020-05-20T08:00:00.000Z\": 2.4667143821,\n    \"2020-05-20T09:00:00.000Z\": 2.4675433882,\n    \"2020-05-20T10:00:00.000Z\": 2.4729672287,\n    \"2020-05-20T11:00:00.000Z\": 2.4588428232,\n    \"2020-05-20T12:00:00.000Z\": 2.447491051,\n    \"2020-05-20T13:00:00.000Z\": 2.4471712469,\n    \"2020-05-20T14:00:00.000Z\": 2.4346698167,\n    \"2020-05-20T15:00:00.000Z\": 2.4578873391,\n    \"2020-05-20T16:00:00.000Z\": 2.4737688817,\n    \"2020-05-20T17:00:00.000Z\": 2.44960546,\n    \"2020-05-20T18:00:00.000Z\": 2.4650394974,\n    \"2020-05-20T19:00:00.000Z\": 2.4429578423,\n    \"2020-05-20T20:00:00.000Z\": 2.4125596516,\n    \"2020-05-20T21:00:00.000Z\": 2.4147819577,\n    \"2020-05-20T22:00:00.000Z\": 2.4481842665,\n    \"2020-05-20T23:00:00.000Z\": 2.4224650937,\n    \"2020-05-21T00:00:00.000Z\": 2.4026664814,\n    \"2020-05-21T01:00:00.000Z\": 2.466764339,\n    \"2020-05-21T02:00:00.000Z\": 2.4513187372,\n    \"2020-05-21T03:00:00.000Z\": 2.458536271,\n    \"2020-05-21T04:00:00.000Z\": 2.4245890798,\n    \"2020-05-21T05:00:00.000Z\": 2.4688075588,\n    \"2020-05-21T06:00:00.000Z\": 2.4405861286,\n    \"2020-05-21T07:00:00.000Z\": 2.3964599329,\n    \"2020-05-21T08:00:00.000Z\": 2.435074941,\n    \"2020-05-21T09:00:00.000Z\": 2.4060865447,\n    \"2020-05-21T10:00:00.000Z\": 2.4452533621,\n    \"2020-05-21T11:00:00.000Z\": 2.3889190886,\n    \"2020-05-21T12:00:00.000Z\": 2.3827470555,\n    \"2020-05-21T13:00:00.000Z\": 2.3999072124,\n    \"2020-05-21T14:00:00.000Z\": 2.3811214257,\n    \"2020-05-21T15:00:00.000Z\": 2.3957512349,\n    \"2020-05-21T16:00:00.000Z\": 2.367176444,\n    \"2020-05-21T17:00:00.000Z\": 2.3667989162,\n    \"2020-05-21T18:00:00.000Z\": 2.4097563074,\n    \"2020-05-21T19:00:00.000Z\": 2.364553978,\n    \"2020-05-21T20:00:00.000Z\": 2.3876010939,\n    \"2020-05-21T21:00:00.000Z\": 2.3854184921,\n    \"2020-05-21T22:00:00.000Z\": 2.3732121899,\n    \"2020-05-21T23:00:00.000Z\": 2.3901082352,\n    \"2020-05-22T00:00:00.000Z\": 2.3737547667,\n    \"2020-05-22T01:00:00.000Z\": 2.3845882331,\n    \"2020-05-22T02:00:00.000Z\": 2.3605831468,\n    \"2020-05-22T03:00:00.000Z\": 2.3828253831,\n    \"2020-05-22T04:00:00.000Z\": 2.3717004247,\n    \"2020-05-22T05:00:00.000Z\": 2.3632612577,\n    \"2020-05-22T06:00:00.000Z\": 2.3792611882,\n    \"2020-05-22T07:00:00.000Z\": 2.3633100994,\n    \"2020-05-22T08:00:00.000Z\": 2.3894403828,\n    \"2020-05-22T09:00:00.000Z\": 2.3584370477,\n    \"2020-05-22T10:00:00.000Z\": 2.3933310636,\n    \"2020-05-22T11:00:00.000Z\": 2.3871154084,\n    \"2020-05-22T12:00:00.000Z\": 2.380782142,\n    \"2020-05-22T13:00:00.000Z\": 2.3701802855,\n    \"2020-05-22T14:00:00.000Z\": 2.3835220151,\n    \"2020-05-22T15:00:00.000Z\": 2.3760978453,\n    \"2020-05-22T16:00:00.000Z\": 2.3373011628,\n    \"2020-05-22T17:00:00.000Z\": 2.3382425414,\n    \"2020-05-22T18:00:00.000Z\": 2.3650870754,\n    \"2020-05-22T19:00:00.000Z\": 2.3587905078,\n    \"2020-05-22T20:00:00.000Z\": 2.3215876808,\n    \"2020-05-22T21:00:00.000Z\": 2.3288642393,\n    \"2020-05-22T22:00:00.000Z\": 2.3696680585,\n    \"2020-05-22T23:00:00.000Z\": 2.3575409325,\n    \"2020-05-23T00:00:00.000Z\": 2.317467971,\n    \"2020-05-23T01:00:00.000Z\": 2.3163217478,\n    \"2020-05-23T02:00:00.000Z\": 2.3497703926,\n    \"2020-05-23T03:00:00.000Z\": 2.3673813145,\n    \"2020-05-23T04:00:00.000Z\": 2.348324602,\n    \"2020-05-23T05:00:00.000Z\": 2.3183434648,\n    \"2020-05-23T06:00:00.000Z\": 2.3177696674,\n    \"2020-05-23T07:00:00.000Z\": 2.3515651594,\n    \"2020-05-23T08:00:00.000Z\": 2.3128771772,\n    \"2020-05-23T09:00:00.000Z\": 2.3163857401,\n    \"2020-05-23T10:00:00.000Z\": 2.356220498,\n    \"2020-05-23T11:00:00.000Z\": 2.3230863058,\n    \"2020-05-23T12:00:00.000Z\": 2.3222366944,\n    \"2020-05-23T13:00:00.000Z\": 2.3503805409,\n    \"2020-05-23T14:00:00.000Z\": 2.3635722983,\n    \"2020-05-23T15:00:00.000Z\": 2.3646286918,\n    \"2020-05-23T16:00:00.000Z\": 2.3578381079,\n    \"2020-05-23T17:00:00.000Z\": 2.3176569752,\n    \"2020-05-23T18:00:00.000Z\": 2.3414491826,\n    \"2020-05-23T19:00:00.000Z\": 2.331806027,\n    \"2020-05-23T20:00:00.000Z\": 2.3117808223,\n    \"2020-05-23T21:00:00.000Z\": 2.3753074369,\n    \"2020-05-23T22:00:00.000Z\": 2.3113172098,\n    \"2020-05-23T23:00:00.000Z\": 2.3265853179,\n    \"2020-05-24T00:00:00.000Z\": 2.3732642937,\n    \"2020-05-24T01:00:00.000Z\": 2.3680356495,\n    \"2020-05-24T02:00:00.000Z\": 2.374909295,\n    \"2020-05-24T03:00:00.000Z\": 2.3493766638,\n    \"2020-05-24T04:00:00.000Z\": 2.3359450082,\n    \"2020-05-24T05:00:00.000Z\": 2.37211517,\n    \"2020-05-24T06:00:00.000Z\": 2.3623120316,\n    \"2020-05-24T07:00:00.000Z\": 2.3301069077,\n    \"2020-05-24T08:00:00.000Z\": 2.3729559093,\n    \"2020-05-24T09:00:00.000Z\": 2.3609485986,\n    \"2020-05-24T10:00:00.000Z\": 2.3424942096,\n    \"2020-05-24T11:00:00.000Z\": 2.3197571838,\n    \"2020-05-24T12:00:00.000Z\": 2.3710370622,\n    \"2020-05-24T13:00:00.000Z\": 2.3179119157,\n    \"2020-05-24T14:00:00.000Z\": 2.3416944935,\n    \"2020-05-24T15:00:00.000Z\": 2.3370203896,\n    \"2020-05-24T16:00:00.000Z\": 2.3538106751,\n    \"2020-05-24T17:00:00.000Z\": 2.3291531084,\n    \"2020-05-24T18:00:00.000Z\": 2.3345230688,\n    \"2020-05-24T19:00:00.000Z\": 2.3722221681,\n    \"2020-05-24T20:00:00.000Z\": 2.3386888412,\n    \"2020-05-24T21:00:00.000Z\": 2.3352960009,\n    \"2020-05-24T22:00:00.000Z\": 2.362323786,\n    \"2020-05-24T23:00:00.000Z\": 2.3393720985,\n    \"2020-05-25T00:00:00.000Z\": 2.3250893285,\n    \"2020-05-25T01:00:00.000Z\": 2.3335853665,\n    \"2020-05-25T02:00:00.000Z\": 2.3342798565,\n    \"2020-05-25T03:00:00.000Z\": 2.355586723,\n    \"2020-05-25T04:00:00.000Z\": 2.3375514173,\n    \"2020-05-25T05:00:00.000Z\": 2.3414990313,\n    \"2020-05-25T06:00:00.000Z\": 2.3436017427,\n    \"2020-05-25T07:00:00.000Z\": 2.3293509691,\n    \"2020-05-25T08:00:00.000Z\": 2.3704824342,\n    \"2020-05-25T09:00:00.000Z\": 2.327739129,\n    \"2020-05-25T10:00:00.000Z\": 2.3141902095,\n    \"2020-05-25T11:00:00.000Z\": 2.3037736953,\n    \"2020-05-25T12:00:00.000Z\": 2.3481850616,\n    \"2020-05-25T13:00:00.000Z\": 2.3378050724,\n    \"2020-05-25T14:00:00.000Z\": 2.3519978131,\n    \"2020-05-25T15:00:00.000Z\": 2.3111453787,\n    \"2020-05-25T16:00:00.000Z\": 2.3117858997,\n    \"2020-05-25T17:00:00.000Z\": 2.3437823839,\n    \"2020-05-25T18:00:00.000Z\": 2.2985355935,\n    \"2020-05-25T19:00:00.000Z\": 2.2889319628,\n    \"2020-05-25T20:00:00.000Z\": 2.3141072335,\n    \"2020-05-25T21:00:00.000Z\": 2.2663323608,\n    \"2020-05-25T22:00:00.000Z\": 2.2663467487,\n    \"2020-05-25T23:00:00.000Z\": 2.3139569202,\n    \"2020-05-26T00:00:00.000Z\": 2.3129660677,\n    \"2020-05-26T01:00:00.000Z\": 2.2993218542,\n    \"2020-05-26T02:00:00.000Z\": 2.2902738561,\n    \"2020-05-26T03:00:00.000Z\": 2.3081958222,\n    \"2020-05-26T04:00:00.000Z\": 2.2772477378,\n    \"2020-05-26T05:00:00.000Z\": 2.2833754102,\n    \"2020-05-26T06:00:00.000Z\": 2.298624666,\n    \"2020-05-26T07:00:00.000Z\": 2.3208954595,\n    \"2020-05-26T08:00:00.000Z\": 2.3117240553,\n    \"2020-05-26T09:00:00.000Z\": 2.2581707124,\n    \"2020-05-26T10:00:00.000Z\": 2.3074877882,\n    \"2020-05-26T11:00:00.000Z\": 2.2788177398,\n    \"2020-05-26T12:00:00.000Z\": 2.28910202,\n    \"2020-05-26T13:00:00.000Z\": 2.2542432777,\n    \"2020-05-26T14:00:00.000Z\": 2.2889851565,\n    \"2020-05-26T15:00:00.000Z\": 2.2558450265,\n    \"2020-05-26T16:00:00.000Z\": 2.2350560292,\n    \"2020-05-26T17:00:00.000Z\": 2.2520909581,\n    \"2020-05-26T18:00:00.000Z\": 2.2404024881,\n    \"2020-05-26T19:00:00.000Z\": 2.2450243247,\n    \"2020-05-26T20:00:00.000Z\": 2.2414637677,\n    \"2020-05-26T21:00:00.000Z\": 2.2549509291,\n    \"2020-05-26T22:00:00.000Z\": 2.2677979399,\n    \"2020-05-26T23:00:00.000Z\": 2.2591624133,\n    \"2020-05-27T00:00:00.000Z\": 2.2643949437,\n    \"2020-05-27T01:00:00.000Z\": 2.2324029864,\n    \"2020-05-27T02:00:00.000Z\": 2.2204872979,\n    \"2020-05-27T03:00:00.000Z\": 2.2671816003,\n    \"2020-05-27T04:00:00.000Z\": 2.2306875543,\n    \"2020-05-27T05:00:00.000Z\": 2.2269123244,\n    \"2020-05-27T06:00:00.000Z\": 2.2200746478,\n    \"2020-05-27T07:00:00.000Z\": 2.2452332587,\n    \"2020-05-27T08:00:00.000Z\": 2.2781186957,\n    \"2020-05-27T09:00:00.000Z\": 2.2682838438,\n    \"2020-05-27T10:00:00.000Z\": 2.2457983355,\n    \"2020-05-27T11:00:00.000Z\": 2.2482833103,\n    \"2020-05-27T12:00:00.000Z\": 2.2440763375,\n    \"2020-05-27T13:00:00.000Z\": 2.2496754332,\n    \"2020-05-27T14:00:00.000Z\": 2.2377133006,\n    \"2020-05-27T15:00:00.000Z\": 2.2295662521,\n    \"2020-05-27T16:00:00.000Z\": 2.2425895424,\n    \"2020-05-27T17:00:00.000Z\": 2.1867354651,\n    \"2020-05-27T18:00:00.000Z\": 2.2163906738,\n    \"2020-05-27T19:00:00.000Z\": 2.2085768065,\n    \"2020-05-27T20:00:00.000Z\": 2.2285712981,\n    \"2020-05-27T21:00:00.000Z\": 2.1805731795,\n    \"2020-05-27T22:00:00.000Z\": 2.22810313,\n    \"2020-05-27T23:00:00.000Z\": 2.2138538519,\n    \"2020-05-28T00:00:00.000Z\": 2.2441786299,\n    \"2020-05-28T01:00:00.000Z\": 2.1803427779,\n    \"2020-05-28T02:00:00.000Z\": 2.1992977156,\n    \"2020-05-28T03:00:00.000Z\": 2.2416509924,\n    \"2020-05-28T04:00:00.000Z\": 2.2079578008,\n    \"2020-05-28T05:00:00.000Z\": 2.2354591923,\n    \"2020-05-28T06:00:00.000Z\": 2.2412756431,\n    \"2020-05-28T07:00:00.000Z\": 2.1753252775,\n    \"2020-05-28T08:00:00.000Z\": 2.2150658764,\n    \"2020-05-28T09:00:00.000Z\": 2.1862375701,\n    \"2020-05-28T10:00:00.000Z\": 2.2181060672,\n    \"2020-05-28T11:00:00.000Z\": 2.2245614275,\n    \"2020-05-28T12:00:00.000Z\": 2.2105838228,\n    \"2020-05-28T13:00:00.000Z\": 2.1950357091,\n    \"2020-05-28T14:00:00.000Z\": 2.2175681951,\n    \"2020-05-28T15:00:00.000Z\": 2.2071353605,\n    \"2020-05-28T16:00:00.000Z\": 2.1753563139,\n    \"2020-05-28T17:00:00.000Z\": 2.1543748944,\n    \"2020-05-28T18:00:00.000Z\": 2.1911450449,\n    \"2020-05-28T19:00:00.000Z\": 2.1370935896,\n    \"2020-05-28T20:00:00.000Z\": 2.1732676508,\n    \"2020-05-28T21:00:00.000Z\": 2.1649085713,\n    \"2020-05-28T22:00:00.000Z\": 2.1334434498,\n    \"2020-05-28T23:00:00.000Z\": 2.1373257318,\n    \"2020-05-29T00:00:00.000Z\": 2.1415503769,\n    \"2020-05-29T01:00:00.000Z\": 2.1741583417,\n    \"2020-05-29T02:00:00.000Z\": 2.1300865559,\n    \"2020-05-29T03:00:00.000Z\": 2.187064251,\n    \"2020-05-29T04:00:00.000Z\": 2.1513825069,\n    \"2020-05-29T05:00:00.000Z\": 2.148031209,\n    \"2020-05-29T06:00:00.000Z\": 2.1331376479,\n    \"2020-05-29T07:00:00.000Z\": 2.1866245451,\n    \"2020-05-29T08:00:00.000Z\": 2.1624172082,\n    \"2020-05-29T09:00:00.000Z\": 2.1499761981,\n    \"2020-05-29T10:00:00.000Z\": 2.1777404933,\n    \"2020-05-29T11:00:00.000Z\": 2.1764986815,\n    \"2020-05-29T12:00:00.000Z\": 2.1468509665,\n    \"2020-05-29T13:00:00.000Z\": 2.1455738939,\n    \"2020-05-29T14:00:00.000Z\": 2.1549592857,\n    \"2020-05-29T15:00:00.000Z\": 2.1269280095,\n    \"2020-05-29T16:00:00.000Z\": 2.1164827024,\n    \"2020-05-29T17:00:00.000Z\": 2.1100834923,\n    \"2020-05-29T18:00:00.000Z\": 2.1519334744,\n    \"2020-05-29T19:00:00.000Z\": 2.1371329129,\n    \"2020-05-29T20:00:00.000Z\": 2.1307888009,\n    \"2020-05-29T21:00:00.000Z\": 2.0880198804,\n    \"2020-05-29T22:00:00.000Z\": 2.127288623,\n    \"2020-05-29T23:00:00.000Z\": 2.1287463572,\n    \"2020-05-30T00:00:00.000Z\": 2.1008850918,\n    \"2020-05-30T01:00:00.000Z\": 2.1057585274,\n    \"2020-05-30T02:00:00.000Z\": 2.094936324,\n    \"2020-05-30T03:00:00.000Z\": 2.1372542762,\n    \"2020-05-30T04:00:00.000Z\": 2.1179414143,\n    \"2020-05-30T05:00:00.000Z\": 2.1476393765,\n    \"2020-05-30T06:00:00.000Z\": 2.1205701259,\n    \"2020-05-30T07:00:00.000Z\": 2.1262053678,\n    \"2020-05-30T08:00:00.000Z\": 2.1034287209,\n    \"2020-05-30T09:00:00.000Z\": 2.1354021483,\n    \"2020-05-30T10:00:00.000Z\": 2.1334894546,\n    \"2020-05-30T11:00:00.000Z\": 2.1229640927,\n    \"2020-05-30T12:00:00.000Z\": 2.1171839151,\n    \"2020-05-30T13:00:00.000Z\": 2.1067720936,\n    \"2020-05-30T14:00:00.000Z\": 2.0950818038,\n    \"2020-05-30T15:00:00.000Z\": 2.1165297234,\n    \"2020-05-30T16:00:00.000Z\": 2.0956712067,\n    \"2020-05-30T17:00:00.000Z\": 2.1244171597,\n    \"2020-05-30T18:00:00.000Z\": 2.1326702003,\n    \"2020-05-30T19:00:00.000Z\": 2.1150019978,\n    \"2020-05-30T20:00:00.000Z\": 2.1278116649,\n    \"2020-05-30T21:00:00.000Z\": 2.0869849234,\n    \"2020-05-30T22:00:00.000Z\": 2.125263829,\n    \"2020-05-30T23:00:00.000Z\": 2.1139123953,\n    \"2020-05-31T00:00:00.000Z\": 2.1152377215,\n    \"2020-05-31T01:00:00.000Z\": 2.1327071907,\n    \"2020-05-31T02:00:00.000Z\": 2.1167130658,\n    \"2020-05-31T03:00:00.000Z\": 2.1544416014,\n    \"2020-05-31T04:00:00.000Z\": 2.0879369852,\n    \"2020-05-31T05:00:00.000Z\": 2.1003692503,\n    \"2020-05-31T06:00:00.000Z\": 2.1174453335,\n    \"2020-05-31T07:00:00.000Z\": 2.1327697996,\n    \"2020-05-31T08:00:00.000Z\": 2.1119295366,\n    \"2020-05-31T09:00:00.000Z\": 2.1069297046,\n    \"2020-05-31T10:00:00.000Z\": 2.1386254617,\n    \"2020-05-31T11:00:00.000Z\": 2.1337873369,\n    \"2020-05-31T12:00:00.000Z\": 2.1320484796,\n    \"2020-05-31T13:00:00.000Z\": 2.1413517653,\n    \"2020-05-31T14:00:00.000Z\": 2.1145457701,\n    \"2020-05-31T15:00:00.000Z\": 2.1302952654,\n    \"2020-05-31T16:00:00.000Z\": 2.1023544041,\n    \"2020-05-31T17:00:00.000Z\": 2.0877782935,\n    \"2020-05-31T18:00:00.000Z\": 2.0851633362,\n    \"2020-05-31T19:00:00.000Z\": 2.1097252537,\n    \"2020-05-31T20:00:00.000Z\": 2.0969373432,\n    \"2020-05-31T21:00:00.000Z\": 2.1420687879,\n    \"2020-05-31T22:00:00.000Z\": 2.1491158273,\n    \"2020-05-31T23:00:00.000Z\": 2.124131625,\n    \"2020-06-01T00:00:00.000Z\": 2.1425570685,\n    \"2020-06-01T01:00:00.000Z\": 2.1430335317,\n    \"2020-06-01T02:00:00.000Z\": 2.0961178869,\n    \"2020-06-01T03:00:00.000Z\": 2.091500574,\n    \"2020-06-01T04:00:00.000Z\": 2.1289326241,\n    \"2020-06-01T05:00:00.000Z\": 2.1001815773,\n    \"2020-06-01T06:00:00.000Z\": 2.0956116776,\n    \"2020-06-01T07:00:00.000Z\": 2.1276899602,\n    \"2020-06-01T08:00:00.000Z\": 2.0883829359,\n    \"2020-06-01T09:00:00.000Z\": 2.1191745956,\n    \"2020-06-01T10:00:00.000Z\": 2.1359184385,\n    \"2020-06-01T11:00:00.000Z\": 2.1150058764,\n    \"2020-06-01T12:00:00.000Z\": 2.1059588226,\n    \"2020-06-01T13:00:00.000Z\": 2.1100688769,\n    \"2020-06-01T14:00:00.000Z\": 2.092024714,\n    \"2020-06-01T15:00:00.000Z\": 2.0816991334,\n    \"2020-06-01T16:00:00.000Z\": 2.0674233713,\n    \"2020-06-01T17:00:00.000Z\": 2.0731764502,\n    \"2020-06-01T18:00:00.000Z\": 2.0602776299,\n    \"2020-06-01T19:00:00.000Z\": 2.0453738282,\n    \"2020-06-01T20:00:00.000Z\": 2.0585446903,\n    \"2020-06-01T21:00:00.000Z\": 2.0987198157,\n    \"2020-06-01T22:00:00.000Z\": 2.0422762919,\n    \"2020-06-01T23:00:00.000Z\": 2.1045616634,\n    \"2020-06-02T00:00:00.000Z\": 2.1073579135,\n    \"2020-06-02T01:00:00.000Z\": 2.0780935507,\n    \"2020-06-02T02:00:00.000Z\": 2.0729714237,\n    \"2020-06-02T03:00:00.000Z\": 2.0573977155,\n    \"2020-06-02T04:00:00.000Z\": 2.0608699953,\n    \"2020-06-02T05:00:00.000Z\": 2.0714640979,\n    \"2020-06-02T06:00:00.000Z\": 2.094514572,\n    \"2020-06-02T07:00:00.000Z\": 2.1033975554,\n    \"2020-06-02T08:00:00.000Z\": 2.0476842497,\n    \"2020-06-02T09:00:00.000Z\": 2.0913142616,\n    \"2020-06-02T10:00:00.000Z\": 2.0336843467,\n    \"2020-06-02T11:00:00.000Z\": 2.0383831388,\n    \"2020-06-02T12:00:00.000Z\": 2.0418092971,\n    \"2020-06-02T13:00:00.000Z\": 2.0649145453,\n    \"2020-06-02T14:00:00.000Z\": 2.0512161839,\n    \"2020-06-02T15:00:00.000Z\": 2.0686642896,\n    \"2020-06-02T16:00:00.000Z\": 2.0598713812,\n    \"2020-06-02T17:00:00.000Z\": 2.0219322476,\n    \"2020-06-02T18:00:00.000Z\": 2.0351501934,\n    \"2020-06-02T19:00:00.000Z\": 2.0266163426,\n    \"2020-06-02T20:00:00.000Z\": 2.0644049299,\n    \"2020-06-02T21:00:00.000Z\": 2.016462477,\n    \"2020-06-02T22:00:00.000Z\": 2.050952448,\n    \"2020-06-02T23:00:00.000Z\": 2.0540254954,\n    \"2020-06-03T00:00:00.000Z\": 2.0210876923,\n    \"2020-06-03T01:00:00.000Z\": 2.0509779924,\n    \"2020-06-03T02:00:00.000Z\": 1.9978356372,\n    \"2020-06-03T03:00:00.000Z\": 2.0218252491,\n    \"2020-06-03T04:00:00.000Z\": 2.0153880438,\n    \"2020-06-03T05:00:00.000Z\": 2.0631142101,\n    \"2020-06-03T06:00:00.000Z\": 2.0265129691,\n    \"2020-06-03T07:00:00.000Z\": 2.0129508505,\n    \"2020-06-03T08:00:00.000Z\": 2.0249723556,\n    \"2020-06-03T09:00:00.000Z\": 2.0305358457,\n    \"2020-06-03T10:00:00.000Z\": 2.0089213589,\n    \"2020-06-03T11:00:00.000Z\": 2.0247600939,\n    \"2020-06-03T12:00:00.000Z\": 1.9836005561,\n    \"2020-06-03T13:00:00.000Z\": 2.0217152172,\n    \"2020-06-03T14:00:00.000Z\": 1.9796010588,\n    \"2020-06-03T15:00:00.000Z\": 1.9818004199,\n    \"2020-06-03T16:00:00.000Z\": 2.0308196048,\n    \"2020-06-03T17:00:00.000Z\": 1.9945792697,\n    \"2020-06-03T18:00:00.000Z\": 1.963538552,\n    \"2020-06-03T19:00:00.000Z\": 1.974156957,\n    \"2020-06-03T20:00:00.000Z\": 1.9956456414,\n    \"2020-06-03T21:00:00.000Z\": 1.9907259797,\n    \"2020-06-03T22:00:00.000Z\": 1.9962944007,\n    \"2020-06-03T23:00:00.000Z\": 1.9605906684,\n    \"2020-06-04T00:00:00.000Z\": 2.0150474252,\n    \"2020-06-04T01:00:00.000Z\": 1.9720500907,\n    \"2020-06-04T02:00:00.000Z\": 2.0157201445,\n    \"2020-06-04T03:00:00.000Z\": 1.9646814322,\n    \"2020-06-04T04:00:00.000Z\": 1.9730844286,\n    \"2020-06-04T05:00:00.000Z\": 2.0107599578,\n    \"2020-06-04T06:00:00.000Z\": 2.0072156705,\n    \"2020-06-04T07:00:00.000Z\": 2.0048548668,\n    \"2020-06-04T08:00:00.000Z\": 1.9958200518,\n    \"2020-06-04T09:00:00.000Z\": 1.9679680676,\n    \"2020-06-04T10:00:00.000Z\": 1.9793470877,\n    \"2020-06-04T11:00:00.000Z\": 1.9592617077,\n    \"2020-06-04T12:00:00.000Z\": 1.9887023322,\n    \"2020-06-04T13:00:00.000Z\": 1.9344542709,\n    \"2020-06-04T14:00:00.000Z\": 1.9880870209,\n    \"2020-06-04T15:00:00.000Z\": 1.9461746893,\n    \"2020-06-04T16:00:00.000Z\": 1.9825521986,\n    \"2020-06-04T17:00:00.000Z\": 1.979853137,\n    \"2020-06-04T18:00:00.000Z\": 1.9343908128,\n    \"2020-06-04T19:00:00.000Z\": 1.9542340726,\n    \"2020-06-04T20:00:00.000Z\": 1.9194681724,\n    \"2020-06-04T21:00:00.000Z\": 1.9475225896,\n    \"2020-06-04T22:00:00.000Z\": 1.9186403536,\n    \"2020-06-04T23:00:00.000Z\": 1.9089691019,\n    \"2020-06-05T00:00:00.000Z\": 1.9347044622,\n    \"2020-06-05T01:00:00.000Z\": 1.9686426954,\n    \"2020-06-05T02:00:00.000Z\": 1.9347011013,\n    \"2020-06-05T03:00:00.000Z\": 1.9123184662,\n    \"2020-06-05T04:00:00.000Z\": 1.9501929906,\n    \"2020-06-05T05:00:00.000Z\": 1.9495252168,\n    \"2020-06-05T06:00:00.000Z\": 1.936373197,\n    \"2020-06-05T07:00:00.000Z\": 1.9554062787,\n    \"2020-06-05T08:00:00.000Z\": 1.9487862742,\n    \"2020-06-05T09:00:00.000Z\": 1.897130141,\n    \"2020-06-05T10:00:00.000Z\": 1.9151998984,\n    \"2020-06-05T11:00:00.000Z\": 1.9167378534,\n    \"2020-06-05T12:00:00.000Z\": 1.9230983108,\n    \"2020-06-05T13:00:00.000Z\": 1.9058410026,\n    \"2020-06-05T14:00:00.000Z\": 1.922041465,\n    \"2020-06-05T15:00:00.000Z\": 1.9168180426,\n    \"2020-06-05T16:00:00.000Z\": 1.9089082012,\n    \"2020-06-05T17:00:00.000Z\": 1.8950817099,\n    \"2020-06-05T18:00:00.000Z\": 1.8881599743,\n    \"2020-06-05T19:00:00.000Z\": 1.86709386,\n    \"2020-06-05T20:00:00.000Z\": 1.8847201573,\n    \"2020-06-05T21:00:00.000Z\": 1.9280194342,\n    \"2020-06-05T22:00:00.000Z\": 1.8687165683,\n    \"2020-06-05T23:00:00.000Z\": 1.9175760407,\n    \"2020-06-06T00:00:00.000Z\": 1.9144149245,\n    \"2020-06-06T01:00:00.000Z\": 1.9048689942,\n    \"2020-06-06T02:00:00.000Z\": 1.90828592,\n    \"2020-06-06T03:00:00.000Z\": 1.9297969376,\n    \"2020-06-06T04:00:00.000Z\": 1.9149704211,\n    \"2020-06-06T05:00:00.000Z\": 1.8929761375,\n    \"2020-06-06T06:00:00.000Z\": 1.8971279541,\n    \"2020-06-06T07:00:00.000Z\": 1.9263268993,\n    \"2020-06-06T08:00:00.000Z\": 1.8958174786,\n    \"2020-06-06T09:00:00.000Z\": 1.8761773916,\n    \"2020-06-06T10:00:00.000Z\": 1.8660876667,\n    \"2020-06-06T11:00:00.000Z\": 1.8916842966,\n    \"2020-06-06T12:00:00.000Z\": 1.9127603337,\n    \"2020-06-06T13:00:00.000Z\": 1.9011050005,\n    \"2020-06-06T14:00:00.000Z\": 1.8896462276,\n    \"2020-06-06T15:00:00.000Z\": 1.8711809414,\n    \"2020-06-06T16:00:00.000Z\": 1.8916412969,\n    \"2020-06-06T17:00:00.000Z\": 1.8800334125,\n    \"2020-06-06T18:00:00.000Z\": 1.8642478045,\n    \"2020-06-06T19:00:00.000Z\": 1.8957160305,\n    \"2020-06-06T20:00:00.000Z\": 1.9129895837,\n    \"2020-06-06T21:00:00.000Z\": 1.8864261351,\n    \"2020-06-06T22:00:00.000Z\": 1.874593256,\n    \"2020-06-06T23:00:00.000Z\": 1.8760368949,\n    \"2020-06-07T00:00:00.000Z\": 1.9109769621,\n    \"2020-06-07T01:00:00.000Z\": 1.8716809077,\n    \"2020-06-07T02:00:00.000Z\": 1.9041580864,\n    \"2020-06-07T03:00:00.000Z\": 1.8750807346,\n    \"2020-06-07T04:00:00.000Z\": 1.9202575144,\n    \"2020-06-07T05:00:00.000Z\": 1.8610116065,\n    \"2020-06-07T06:00:00.000Z\": 1.8945901134,\n    \"2020-06-07T07:00:00.000Z\": 1.8946142489,\n    \"2020-06-07T08:00:00.000Z\": 1.8614582248,\n    \"2020-06-07T09:00:00.000Z\": 1.863572688,\n    \"2020-06-07T10:00:00.000Z\": 1.9297434778,\n    \"2020-06-07T11:00:00.000Z\": 1.9187304684,\n    \"2020-06-07T12:00:00.000Z\": 1.9298306208,\n    \"2020-06-07T13:00:00.000Z\": 1.8608512867,\n    \"2020-06-07T14:00:00.000Z\": 1.9118411163,\n    \"2020-06-07T15:00:00.000Z\": 1.9066744163,\n    \"2020-06-07T16:00:00.000Z\": 1.9116551009,\n    \"2020-06-07T17:00:00.000Z\": 1.8828661629,\n    \"2020-06-07T18:00:00.000Z\": 1.8866379428,\n    \"2020-06-07T19:00:00.000Z\": 1.8788772036,\n    \"2020-06-07T20:00:00.000Z\": 1.9042945734,\n    \"2020-06-07T21:00:00.000Z\": 1.9056594968,\n    \"2020-06-07T22:00:00.000Z\": 1.8887214568,\n    \"2020-06-07T23:00:00.000Z\": 1.8835326276,\n    \"2020-06-08T00:00:00.000Z\": 1.9284506235,\n    \"2020-06-08T01:00:00.000Z\": 1.9143168494,\n    \"2020-06-08T02:00:00.000Z\": 1.9007075218,\n    \"2020-06-08T03:00:00.000Z\": 1.8777673036,\n    \"2020-06-08T04:00:00.000Z\": 1.8952513778,\n    \"2020-06-08T05:00:00.000Z\": 1.9264865217,\n    \"2020-06-08T06:00:00.000Z\": 1.8817259003,\n    \"2020-06-08T07:00:00.000Z\": 1.921584556,\n    \"2020-06-08T08:00:00.000Z\": 1.9018817759,\n    \"2020-06-08T09:00:00.000Z\": 1.859008478,\n    \"2020-06-08T10:00:00.000Z\": 1.8824316125,\n    \"2020-06-08T11:00:00.000Z\": 1.8904210058,\n    \"2020-06-08T12:00:00.000Z\": 1.8955465242,\n    \"2020-06-08T13:00:00.000Z\": 1.87751679,\n    \"2020-06-08T14:00:00.000Z\": 1.8580814686,\n    \"2020-06-08T15:00:00.000Z\": 1.8642935056,\n    \"2020-06-08T16:00:00.000Z\": 1.8605427948,\n    \"2020-06-08T17:00:00.000Z\": 1.8785871911,\n    \"2020-06-08T18:00:00.000Z\": 1.8686244945,\n    \"2020-06-08T19:00:00.000Z\": 1.8326614693,\n    \"2020-06-08T20:00:00.000Z\": 1.8783741861,\n    \"2020-06-08T21:00:00.000Z\": 1.8839774383,\n    \"2020-06-08T22:00:00.000Z\": 1.8581453184,\n    \"2020-06-08T23:00:00.000Z\": 1.8737832229,\n    \"2020-06-09T00:00:00.000Z\": 1.825608836,\n    \"2020-06-09T01:00:00.000Z\": 1.8419542375,\n    \"2020-06-09T02:00:00.000Z\": 1.8341249644,\n    \"2020-06-09T03:00:00.000Z\": 1.8737361118,\n    \"2020-06-09T04:00:00.000Z\": 1.8373356528,\n    \"2020-06-09T05:00:00.000Z\": 1.8610829866,\n    \"2020-06-09T06:00:00.000Z\": 1.8647217478,\n    \"2020-06-09T07:00:00.000Z\": 1.8542354706,\n    \"2020-06-09T08:00:00.000Z\": 1.8584044488,\n    \"2020-06-09T09:00:00.000Z\": 1.8574092583,\n    \"2020-06-09T10:00:00.000Z\": 1.8314458281,\n    \"2020-06-09T11:00:00.000Z\": 1.8291249077,\n    \"2020-06-09T12:00:00.000Z\": 1.794912816,\n    \"2020-06-09T13:00:00.000Z\": 1.806780492,\n    \"2020-06-09T14:00:00.000Z\": 1.8515750872,\n    \"2020-06-09T15:00:00.000Z\": 1.7881377768,\n    \"2020-06-09T16:00:00.000Z\": 1.782908594,\n    \"2020-06-09T17:00:00.000Z\": 1.7871490101,\n    \"2020-06-09T18:00:00.000Z\": 1.7824570591,\n    \"2020-06-09T19:00:00.000Z\": 1.8381627319,\n    \"2020-06-09T20:00:00.000Z\": 1.7788963713,\n    \"2020-06-09T21:00:00.000Z\": 1.8135459458,\n    \"2020-06-09T22:00:00.000Z\": 1.7706291347,\n    \"2020-06-09T23:00:00.000Z\": 1.7832814738,\n    \"2020-06-10T00:00:00.000Z\": 1.7915501526,\n    \"2020-06-10T01:00:00.000Z\": 1.797562649,\n    \"2020-06-10T02:00:00.000Z\": 1.810740465,\n    \"2020-06-10T03:00:00.000Z\": 1.8039826415,\n    \"2020-06-10T04:00:00.000Z\": 1.8061031814,\n    \"2020-06-10T05:00:00.000Z\": 1.7798470634,\n    \"2020-06-10T06:00:00.000Z\": 1.824419133,\n    \"2020-06-10T07:00:00.000Z\": 1.7714949585,\n    \"2020-06-10T08:00:00.000Z\": 1.8110842269,\n    \"2020-06-10T09:00:00.000Z\": 1.7653148984,\n    \"2020-06-10T10:00:00.000Z\": 1.7642104437,\n    \"2020-06-10T11:00:00.000Z\": 1.7882945391,\n    \"2020-06-10T12:00:00.000Z\": 1.7510199158,\n    \"2020-06-10T13:00:00.000Z\": 1.7602817891,\n    \"2020-06-10T14:00:00.000Z\": 1.7692896514,\n    \"2020-06-10T15:00:00.000Z\": 1.7816856687,\n    \"2020-06-10T16:00:00.000Z\": 1.7726023267,\n    \"2020-06-10T17:00:00.000Z\": 1.7529701599,\n    \"2020-06-10T18:00:00.000Z\": 1.7944730908,\n    \"2020-06-10T19:00:00.000Z\": 1.7959826561,\n    \"2020-06-10T20:00:00.000Z\": 1.7262595779,\n    \"2020-06-10T21:00:00.000Z\": 1.7599426932,\n    \"2020-06-10T22:00:00.000Z\": 1.7942664293,\n    \"2020-06-10T23:00:00.000Z\": 1.7568792181,\n    \"2020-06-11T00:00:00.000Z\": 1.7503584801,\n    \"2020-06-11T01:00:00.000Z\": 1.772818345,\n    \"2020-06-11T02:00:00.000Z\": 1.7599267103,\n    \"2020-06-11T03:00:00.000Z\": 1.7543246604,\n    \"2020-06-11T04:00:00.000Z\": 1.7716360143,\n    \"2020-06-11T05:00:00.000Z\": 1.7497533172,\n    \"2020-06-11T06:00:00.000Z\": 1.7296714486,\n    \"2020-06-11T07:00:00.000Z\": 1.7868207192,\n    \"2020-06-11T08:00:00.000Z\": 1.7441884421,\n    \"2020-06-11T09:00:00.000Z\": 1.7268847381,\n    \"2020-06-11T10:00:00.000Z\": 1.7372780067,\n    \"2020-06-11T11:00:00.000Z\": 1.7531690232,\n    \"2020-06-11T12:00:00.000Z\": 1.7563962807,\n    \"2020-06-11T13:00:00.000Z\": 1.7337006137,\n    \"2020-06-11T14:00:00.000Z\": 1.7567559875,\n    \"2020-06-11T15:00:00.000Z\": 1.7314396428\n    }\n}\n```",
    "content": {
      "operators": [
        {
          "id": "ca5ce637-5736-491b-b2e2-13ec1748a538",
          "revision_group_id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
          "name": "Single Timeseries Plot",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "8fba9b51-a0f1-6c6c-a6d4-e224103b819c",
          "inputs": [
            {
              "id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": 330,
            "y": 340
          }
        },
        {
          "id": "10d45f6c-4034-4eb9-b3f6-a497d5f7cc18",
          "revision_group_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "name": "Pass Through (Series)",
          "type": "COMPONENT",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "bfa27afc-dea8-b8aa-4b15-94402f0739b6",
          "inputs": [
            {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "outputs": [
            {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          ],
          "position": {
            "x": -190,
            "y": 110
          }
        },
        {
          "id": "244973af-0daa-4d4e-9a6f-570642162b7f",
          "revision_group_id": "31415338-ed7d-4905-92bb-1c29593c0f1f",
          "name": "Data From Last Positive Step",
          "type": "WORKFLOW",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "2cbb87e7-ea99-4404-abe1-be550f22763f",
          "inputs": [
            {
              "id": "b8e04c00-b389-4ec1-8e3e-ba1645551745",
              "name": "inp_series",
              "data_type": "SERIES",
              "position": {
                "x": -240,
                "y": 40
              }
            },
            {
              "id": "9f517001-688c-4a09-bcea-76c1bf54ec5b",
              "name": "positive_step_size",
              "data_type": "FLOAT",
              "position": {
                "x": 190,
                "y": 250
              }
            }
          ],
          "outputs": [
            {
              "id": "fb643e6f-98d9-4df8-a69e-0c7e142c768d",
              "name": "series_from_last_step",
              "data_type": "SERIES",
              "position": {
                "x": 3230,
                "y": 30
              }
            }
          ],
          "position": {
            "x": 320,
            "y": 120
          }
        },
        {
          "id": "223b0263-af3b-4324-b9f0-c441860edb42",
          "revision_group_id": "9fb25660-ad44-48c9-810a-0badc153e192",
          "name": "Univariate Linear RUL Regression Example",
          "type": "WORKFLOW",
          "state": "RELEASED",
          "version_tag": "1.0.0",
          "transformation_id": "806df1b9-2fc8-4463-943f-3d258c569663",
          "inputs": [
            {
              "id": "890386ce-5e0c-4a24-b714-b49f0de93a3a",
              "name": "inp_series",
              "data_type": "SERIES",
              "position": {
                "x": -130,
                "y": 350
              }
            },
            {
              "id": "b338e339-93a5-4f0e-b1d4-165e70b1e794",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": -155,
                "y": 220
              }
            },
            {
              "id": "2d5dfada-f777-4067-a065-41ffd2994817",
              "name": "num_days_forecast",
              "data_type": "INT",
              "position": {
                "x": -150,
                "y": 260
              }
            }
          ],
          "outputs": [
            {
              "id": "93cf92d4-4082-464e-bc21-724513e59d41",
              "name": "intercept",
              "data_type": "FLOAT",
              "position": {
                "x": 1100,
                "y": 60
              }
            },
            {
              "id": "aa7edab2-3da0-48b9-bbd0-ed6f3136f8ed",
              "name": "limit_violation_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 1710,
                "y": 430
              }
            },
            {
              "id": "8a4a9698-5d7f-401a-b6f6-bc2f549d9395",
              "name": "rul_regression_result_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1710,
                "y": 230
              }
            },
            {
              "id": "02699d2d-865e-493a-bae2-7e79577d549c",
              "name": "slope",
              "data_type": "FLOAT",
              "position": {
                "x": 1100,
                "y": 490
              }
            }
          ],
          "position": {
            "x": 950,
            "y": 140
          }
        }
      ],
      "links": [
        {
          "id": "96bc3aec-8795-4ce0-8999-4d7b3c9dba08",
          "start": {
            "operator": "10d45f6c-4034-4eb9-b3f6-a497d5f7cc18",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "ca5ce637-5736-491b-b2e2-13ec1748a538",
            "connector": {
              "id": "70753b5c-4a8d-fb0b-36d0-076fc7cd7967",
              "name": "series",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "b70a7908-47ed-42df-8bc5-6542e4bc9955",
          "start": {
            "connector": {
              "id": "1ab7579f-eb3a-4725-944b-e96272ff279d",
              "name": "inp_series",
              "data_type": "SERIES",
              "position": {
                "x": -440,
                "y": 170
              }
            }
          },
          "end": {
            "operator": "10d45f6c-4034-4eb9-b3f6-a497d5f7cc18",
            "connector": {
              "id": "f103c395-92b6-444d-320a-93950ed6d857",
              "name": "input",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "path": []
        },
        {
          "id": "6ba0e715-5b62-4360-8087-a79e8912ddd6",
          "start": {
            "operator": "ca5ce637-5736-491b-b2e2-13ec1748a538",
            "connector": {
              "id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
              "name": "plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "connector": {
              "id": "69a90572-028f-4f40-b153-7dd6dc26dc67",
              "name": "before_step_detect",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 780,
                "y": 400
              }
            }
          },
          "path": []
        },
        {
          "id": "ec93bdfd-0e41-4aea-a69c-7d8d34b7b252",
          "start": {
            "operator": "10d45f6c-4034-4eb9-b3f6-a497d5f7cc18",
            "connector": {
              "id": "f78f48b5-4981-e34a-df07-54f8e5a01df3",
              "name": "output",
              "data_type": "SERIES",
              "position": {
                "x": 0,
                "y": 0
              }
            }
          },
          "end": {
            "operator": "244973af-0daa-4d4e-9a6f-570642162b7f",
            "connector": {
              "id": "b8e04c00-b389-4ec1-8e3e-ba1645551745",
              "name": "inp_series",
              "data_type": "SERIES",
              "position": {
                "x": -240,
                "y": 40
              }
            }
          },
          "path": []
        },
        {
          "id": "65e8b202-75a3-48f2-b896-95cfb2f4f53c",
          "start": {
            "operator": "244973af-0daa-4d4e-9a6f-570642162b7f",
            "connector": {
              "id": "fb643e6f-98d9-4df8-a69e-0c7e142c768d",
              "name": "series_from_last_step",
              "data_type": "SERIES",
              "position": {
                "x": 3230,
                "y": 30
              }
            }
          },
          "end": {
            "operator": "223b0263-af3b-4324-b9f0-c441860edb42",
            "connector": {
              "id": "890386ce-5e0c-4a24-b714-b49f0de93a3a",
              "name": "inp_series",
              "data_type": "SERIES",
              "position": {
                "x": -130,
                "y": 350
              }
            }
          },
          "path": []
        },
        {
          "id": "a8ff4f90-14c8-44dc-a955-bef43c75801c",
          "start": {
            "connector": {
              "id": "8080f74f-ce6f-4e0f-b3bb-b222f8341969",
              "name": "positive_step_size",
              "data_type": "FLOAT",
              "position": {
                "x": 70,
                "y": 210
              }
            }
          },
          "end": {
            "operator": "244973af-0daa-4d4e-9a6f-570642162b7f",
            "connector": {
              "id": "9f517001-688c-4a09-bcea-76c1bf54ec5b",
              "name": "positive_step_size",
              "data_type": "FLOAT",
              "position": {
                "x": 190,
                "y": 250
              }
            }
          },
          "path": []
        },
        {
          "id": "ed9fd9ae-7447-4470-a7dc-2befdde06d7a",
          "start": {
            "connector": {
              "id": "716b7b23-2168-4a6b-a8f5-3369dbdc830c",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": 700,
                "y": 230
              }
            }
          },
          "end": {
            "operator": "223b0263-af3b-4324-b9f0-c441860edb42",
            "connector": {
              "id": "b338e339-93a5-4f0e-b1d4-165e70b1e794",
              "name": "limit",
              "data_type": "FLOAT",
              "position": {
                "x": -155,
                "y": 220
              }
            }
          },
          "path": []
        },
        {
          "id": "facc7460-73b5-40a8-8e95-8895bed973c5",
          "start": {
            "connector": {
              "id": "2b35188c-2ecf-400d-8826-86a7c0cc2aee",
              "name": "num_days_forecast",
              "data_type": "INT",
              "position": {
                "x": 700,
                "y": 260
              }
            }
          },
          "end": {
            "operator": "223b0263-af3b-4324-b9f0-c441860edb42",
            "connector": {
              "id": "2d5dfada-f777-4067-a065-41ffd2994817",
              "name": "num_days_forecast",
              "data_type": "INT",
              "position": {
                "x": -150,
                "y": 260
              }
            }
          },
          "path": []
        },
        {
          "id": "83435462-d06b-4aa2-9907-530327304f74",
          "start": {
            "operator": "223b0263-af3b-4324-b9f0-c441860edb42",
            "connector": {
              "id": "93cf92d4-4082-464e-bc21-724513e59d41",
              "name": "intercept",
              "data_type": "FLOAT",
              "position": {
                "x": 1100,
                "y": 60
              }
            }
          },
          "end": {
            "connector": {
              "id": "36d95060-e3c2-485c-8abf-a10875a9adb6",
              "name": "intercept",
              "data_type": "FLOAT",
              "position": {
                "x": 1400,
                "y": 200
              }
            }
          },
          "path": []
        },
        {
          "id": "2403e2df-2896-4047-8046-a1a2018090d6",
          "start": {
            "operator": "223b0263-af3b-4324-b9f0-c441860edb42",
            "connector": {
              "id": "aa7edab2-3da0-48b9-bbd0-ed6f3136f8ed",
              "name": "limit_violation_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 1710,
                "y": 430
              }
            }
          },
          "end": {
            "connector": {
              "id": "634f74ff-ac6d-456c-97a8-ea5188e6ec3c",
              "name": "limit_violation_timestamp",
              "data_type": "STRING",
              "position": {
                "x": 1400,
                "y": 230
              }
            }
          },
          "path": []
        },
        {
          "id": "b030ebef-5735-47ea-9303-e0ed0da7007f",
          "start": {
            "operator": "223b0263-af3b-4324-b9f0-c441860edb42",
            "connector": {
              "id": "8a4a9698-5d7f-401a-b6f6-bc2f549d9395",
              "name": "rul_regression_result_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1710,
                "y": 230
              }
            }
          },
          "end": {
            "connector": {
              "id": "67d1a7e6-aa76-4918-b701-005c8ba4d667",
              "name": "rul_regression_result_plot",
              "data_type": "PLOTLYJSON",
              "position": {
                "x": 1400,
                "y": 260
              }
            }
          },
          "path": []
        },
        {
          "id": "7e4d4bd3-1fb1-495b-8295-741d8e8fdfc9",
          "start": {
            "operator": "223b0263-af3b-4324-b9f0-c441860edb42",
            "connector": {
              "id": "02699d2d-865e-493a-bae2-7e79577d549c",
              "name": "slope",
              "data_type": "FLOAT",
              "position": {
                "x": 1100,
                "y": 490
              }
            }
          },
          "end": {
            "connector": {
              "id": "d1fc90eb-2c5e-4639-ba47-87f2903fadfd",
              "name": "slope",
              "data_type": "FLOAT",
              "position": {
                "x": 1400,
                "y": 290
              }
            }
          },
          "path": []
        }
      ],
      "inputs": [
        {
          "id": "1ab7579f-eb3a-4725-944b-e96272ff279d",
          "name": "inp_series",
          "data_type": "SERIES",
          "operator_id": "10d45f6c-4034-4eb9-b3f6-a497d5f7cc18",
          "connector_id": "f103c395-92b6-444d-320a-93950ed6d857",
          "operator_name": "Pass Through (Series)",
          "connector_name": "input",
          "position": {
            "x": -440,
            "y": 170
          }
        },
        {
          "id": "8080f74f-ce6f-4e0f-b3bb-b222f8341969",
          "name": "positive_step_size",
          "data_type": "FLOAT",
          "operator_id": "244973af-0daa-4d4e-9a6f-570642162b7f",
          "connector_id": "9f517001-688c-4a09-bcea-76c1bf54ec5b",
          "operator_name": "Data From Last Positive Step",
          "connector_name": "positive_step_size",
          "position": {
            "x": 70,
            "y": 210
          }
        },
        {
          "id": "716b7b23-2168-4a6b-a8f5-3369dbdc830c",
          "name": "limit",
          "data_type": "FLOAT",
          "operator_id": "223b0263-af3b-4324-b9f0-c441860edb42",
          "connector_id": "b338e339-93a5-4f0e-b1d4-165e70b1e794",
          "operator_name": "Univariate Linear RUL Regression Example",
          "connector_name": "limit",
          "position": {
            "x": 700,
            "y": 230
          }
        },
        {
          "id": "2b35188c-2ecf-400d-8826-86a7c0cc2aee",
          "name": "num_days_forecast",
          "data_type": "INT",
          "operator_id": "223b0263-af3b-4324-b9f0-c441860edb42",
          "connector_id": "2d5dfada-f777-4067-a065-41ffd2994817",
          "operator_name": "Univariate Linear RUL Regression Example",
          "connector_name": "num_days_forecast",
          "position": {
            "x": 700,
            "y": 260
          }
        }
      ],
      "outputs": [
        {
          "id": "69a90572-028f-4f40-b153-7dd6dc26dc67",
          "name": "before_step_detect",
          "data_type": "PLOTLYJSON",
          "operator_id": "ca5ce637-5736-491b-b2e2-13ec1748a538",
          "connector_id": "eb779c1e-6d98-2cec-506f-ffb8fc11f38a",
          "operator_name": "Single Timeseries Plot",
          "connector_name": "plot",
          "position": {
            "x": 780,
            "y": 400
          }
        },
        {
          "id": "36d95060-e3c2-485c-8abf-a10875a9adb6",
          "name": "intercept",
          "data_type": "FLOAT",
          "operator_id": "223b0263-af3b-4324-b9f0-c441860edb42",
          "connector_id": "93cf92d4-4082-464e-bc21-724513e59d41",
          "operator_name": "Univariate Linear RUL Regression Example",
          "connector_name": "intercept",
          "position": {
            "x": 1400,
            "y": 200
          }
        },
        {
          "id": "634f74ff-ac6d-456c-97a8-ea5188e6ec3c",
          "name": "limit_violation_timestamp",
          "data_type": "STRING",
          "operator_id": "223b0263-af3b-4324-b9f0-c441860edb42",
          "connector_id": "aa7edab2-3da0-48b9-bbd0-ed6f3136f8ed",
          "operator_name": "Univariate Linear RUL Regression Example",
          "connector_name": "limit_violation_timestamp",
          "position": {
            "x": 1400,
            "y": 230
          }
        },
        {
          "id": "67d1a7e6-aa76-4918-b701-005c8ba4d667",
          "name": "rul_regression_result_plot",
          "data_type": "PLOTLYJSON",
          "operator_id": "223b0263-af3b-4324-b9f0-c441860edb42",
          "connector_id": "8a4a9698-5d7f-401a-b6f6-bc2f549d9395",
          "operator_name": "Univariate Linear RUL Regression Example",
          "connector_name": "rul_regression_result_plot",
          "position": {
            "x": 1400,
            "y": 260
          }
        },
        {
          "id": "d1fc90eb-2c5e-4639-ba47-87f2903fadfd",
          "name": "slope",
          "data_type": "FLOAT",
          "operator_id": "223b0263-af3b-4324-b9f0-c441860edb42",
          "connector_id": "02699d2d-865e-493a-bae2-7e79577d549c",
          "operator_name": "Univariate Linear RUL Regression Example",
          "connector_name": "slope",
          "position": {
            "x": 1400,
            "y": 290
          }
        }
      ],
      "constants": []
    },
    "io_interface": {
      "inputs": [
        {
          "id": "1ab7579f-eb3a-4725-944b-e96272ff279d",
          "name": "inp_series",
          "data_type": "SERIES"
        },
        {
          "id": "8080f74f-ce6f-4e0f-b3bb-b222f8341969",
          "name": "positive_step_size",
          "data_type": "FLOAT"
        },
        {
          "id": "716b7b23-2168-4a6b-a8f5-3369dbdc830c",
          "name": "limit",
          "data_type": "FLOAT"
        },
        {
          "id": "2b35188c-2ecf-400d-8826-86a7c0cc2aee",
          "name": "num_days_forecast",
          "data_type": "INT"
        }
      ],
      "outputs": [
        {
          "id": "69a90572-028f-4f40-b153-7dd6dc26dc67",
          "name": "before_step_detect",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "36d95060-e3c2-485c-8abf-a10875a9adb6",
          "name": "intercept",
          "data_type": "FLOAT"
        },
        {
          "id": "634f74ff-ac6d-456c-97a8-ea5188e6ec3c",
          "name": "limit_violation_timestamp",
          "data_type": "STRING"
        },
        {
          "id": "67d1a7e6-aa76-4918-b701-005c8ba4d667",
          "name": "rul_regression_result_plot",
          "data_type": "PLOTLYJSON"
        },
        {
          "id": "d1fc90eb-2c5e-4639-ba47-87f2903fadfd",
          "name": "slope",
          "data_type": "FLOAT"
        }
      ]
    },
    "test_wiring": {
      "input_wirings": [
        {
          "workflow_input_name": "inp_series",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "{\"2020-05-01T00:00:00.000Z\":2.5340945967,\"2020-05-01T01:00:00.000Z\":2.5658768256,\"2020-05-01T02:00:00.000Z\":2.570679579,\"2020-05-01T03:00:00.000Z\":2.5618633791,\"2020-05-01T04:00:00.000Z\":2.5709272918,\"2020-05-01T05:00:00.000Z\":2.5447713467,\"2020-05-01T06:00:00.000Z\":2.544863302,\"2020-05-01T07:00:00.000Z\":2.5890837968,\"2020-05-01T08:00:00.000Z\":2.5646962713,\"2020-05-01T09:00:00.000Z\":2.5335594298,\"2020-05-01T10:00:00.000Z\":2.5570004281,\"2020-05-01T11:00:00.000Z\":2.5279007185,\"2020-05-01T12:00:00.000Z\":2.5180691208,\"2020-05-01T13:00:00.000Z\":2.5425170109,\"2020-05-01T14:00:00.000Z\":2.5193970292,\"2020-05-01T15:00:00.000Z\":2.505462918,\"2020-05-01T16:00:00.000Z\":2.5569998157,\"2020-05-01T17:00:00.000Z\":2.507311926,\"2020-05-01T18:00:00.000Z\":2.498353005,\"2020-05-01T19:00:00.000Z\":2.546221722,\"2020-05-01T20:00:00.000Z\":2.5223358532,\"2020-05-01T21:00:00.000Z\":2.4936112195,\"2020-05-01T22:00:00.000Z\":2.4929833196,\"2020-05-01T23:00:00.000Z\":2.5375547278,\"2020-05-02T00:00:00.000Z\":2.5104412318,\"2020-05-02T01:00:00.000Z\":2.5113524681,\"2020-05-02T02:00:00.000Z\":2.5337742397,\"2020-05-02T03:00:00.000Z\":2.5038516369,\"2020-05-02T04:00:00.000Z\":2.4963372908,\"2020-05-02T05:00:00.000Z\":2.5195275913,\"2020-05-02T06:00:00.000Z\":2.4935793186,\"2020-05-02T07:00:00.000Z\":2.5164266646,\"2020-05-02T08:00:00.000Z\":2.5185465582,\"2020-05-02T09:00:00.000Z\":2.5350140943,\"2020-05-02T10:00:00.000Z\":2.5117286988,\"2020-05-02T11:00:00.000Z\":2.5082871799,\"2020-05-02T12:00:00.000Z\":2.5149836071,\"2020-05-02T13:00:00.000Z\":2.5028807486,\"2020-05-02T14:00:00.000Z\":2.523517088,\"2020-05-02T15:00:00.000Z\":2.554328315,\"2020-05-02T16:00:00.000Z\":2.4982672405,\"2020-05-02T17:00:00.000Z\":2.5212582072,\"2020-05-02T18:00:00.000Z\":2.5408671362,\"2020-05-02T19:00:00.000Z\":2.534927499,\"2020-05-02T20:00:00.000Z\":2.5499492231,\"2020-05-02T21:00:00.000Z\":2.506651042,\"2020-05-02T22:00:00.000Z\":2.5362261202,\"2020-05-02T23:00:00.000Z\":2.5289785015,\"2020-05-03T00:00:00.000Z\":2.5439596654,\"2020-05-03T01:00:00.000Z\":2.5349408476,\"2020-05-03T02:00:00.000Z\":2.4928973472,\"2020-05-03T03:00:00.000Z\":2.5235283235,\"2020-05-03T04:00:00.000Z\":2.4952145471,\"2020-05-03T05:00:00.000Z\":2.5357483131,\"2020-05-03T06:00:00.000Z\":2.4875558337,\"2020-05-03T07:00:00.000Z\":2.4976392088,\"2020-05-03T08:00:00.000Z\":2.4934381565,\"2020-05-03T09:00:00.000Z\":2.5499418548,\"2020-05-03T10:00:00.000Z\":2.5353427119,\"2020-05-03T11:00:00.000Z\":2.5438575598,\"2020-05-03T12:00:00.000Z\":2.5477980799,\"2020-05-03T13:00:00.000Z\":2.5353353389,\"2020-05-03T14:00:00.000Z\":2.490339555,\"2020-05-03T15:00:00.000Z\":2.5258760102,\"2020-05-03T16:00:00.000Z\":2.4909430024,\"2020-05-03T17:00:00.000Z\":2.5418209819,\"2020-05-03T18:00:00.000Z\":2.4963330331,\"2020-05-03T19:00:00.000Z\":2.4893977942,\"2020-05-03T20:00:00.000Z\":2.5157624715,\"2020-05-03T21:00:00.000Z\":2.5332988324,\"2020-05-03T22:00:00.000Z\":2.5080267414,\"2020-05-03T23:00:00.000Z\":2.5110675161,\"2020-05-04T00:00:00.000Z\":2.4916789597,\"2020-05-04T01:00:00.000Z\":2.4857544538,\"2020-05-04T02:00:00.000Z\":2.5523625847,\"2020-05-04T03:00:00.000Z\":2.5161945193,\"2020-05-04T04:00:00.000Z\":2.5031237636,\"2020-05-04T05:00:00.000Z\":2.499693572,\"2020-05-04T06:00:00.000Z\":2.5310847546,\"2020-05-04T07:00:00.000Z\":2.5294701706,\"2020-05-04T08:00:00.000Z\":2.4953251286,\"2020-05-04T09:00:00.000Z\":2.5145793132,\"2020-05-04T10:00:00.000Z\":2.537795696,\"2020-05-04T11:00:00.000Z\":2.5177948972,\"2020-05-04T12:00:00.000Z\":2.4771575641,\"2020-05-04T13:00:00.000Z\":2.4766223173,\"2020-05-04T14:00:00.000Z\":2.4866457947,\"2020-05-04T15:00:00.000Z\":2.4773926315,\"2020-05-04T16:00:00.000Z\":2.4849491065,\"2020-05-04T17:00:00.000Z\":2.4614148496,\"2020-05-04T18:00:00.000Z\":2.5140566144,\"2020-05-04T19:00:00.000Z\":2.4610181004,\"2020-05-04T20:00:00.000Z\":2.5032041998,\"2020-05-04T21:00:00.000Z\":2.4602600843,\"2020-05-04T22:00:00.000Z\":2.4425060895,\"2020-05-04T23:00:00.000Z\":2.4887562624,\"2020-05-05T00:00:00.000Z\":2.4587981472,\"2020-05-05T01:00:00.000Z\":2.4976287919,\"2020-05-05T02:00:00.000Z\":2.4759566315,\"2020-05-05T03:00:00.000Z\":2.4983647141,\"2020-05-05T04:00:00.000Z\":2.4481869955,\"2020-05-05T05:00:00.000Z\":2.4620033756,\"2020-05-05T06:00:00.000Z\":2.4722438504,\"2020-05-05T07:00:00.000Z\":2.4836028877,\"2020-05-05T08:00:00.000Z\":2.4999365634,\"2020-05-05T09:00:00.000Z\":2.4590343725,\"2020-05-05T10:00:00.000Z\":2.485029072,\"2020-05-05T11:00:00.000Z\":2.4832933203,\"2020-05-05T12:00:00.000Z\":2.4493189797,\"2020-05-05T13:00:00.000Z\":2.4555612652,\"2020-05-05T14:00:00.000Z\":2.4331822011,\"2020-05-05T15:00:00.000Z\":2.4437542619,\"2020-05-05T16:00:00.000Z\":2.4103224236,\"2020-05-05T17:00:00.000Z\":2.4599756767,\"2020-05-05T18:00:00.000Z\":2.4195711603,\"2020-05-05T19:00:00.000Z\":2.4204898355,\"2020-05-05T20:00:00.000Z\":2.4271840023,\"2020-05-05T21:00:00.000Z\":2.4093728506,\"2020-05-05T22:00:00.000Z\":2.4287596847,\"2020-05-05T23:00:00.000Z\":2.4502553829,\"2020-05-06T00:00:00.000Z\":2.4032112072,\"2020-05-06T01:00:00.000Z\":2.4164635616,\"2020-05-06T02:00:00.000Z\":2.3964321581,\"2020-05-06T03:00:00.000Z\":2.4296400627,\"2020-05-06T04:00:00.000Z\":2.4597693405,\"2020-05-06T05:00:00.000Z\":2.4051327723,\"2020-05-06T06:00:00.000Z\":2.39231384,\"2020-05-06T07:00:00.000Z\":2.4227524163,\"2020-05-06T08:00:00.000Z\":2.4241047304,\"2020-05-06T09:00:00.000Z\":2.383595989,\"2020-05-06T10:00:00.000Z\":2.3830219146,\"2020-05-06T11:00:00.000Z\":2.391330956,\"2020-05-06T12:00:00.000Z\":2.4083971686,\"2020-05-06T13:00:00.000Z\":2.4019011994,\"2020-05-06T14:00:00.000Z\":2.3741282476,\"2020-05-06T15:00:00.000Z\":2.408673447,\"2020-05-06T16:00:00.000Z\":2.3888631077,\"2020-05-06T17:00:00.000Z\":2.3805006535,\"2020-05-06T18:00:00.000Z\":2.4118540536,\"2020-05-06T19:00:00.000Z\":2.3915179257,\"2020-05-06T20:00:00.000Z\":2.3692830106,\"2020-05-06T21:00:00.000Z\":2.4088917478,\"2020-05-06T22:00:00.000Z\":2.3724274396,\"2020-05-06T23:00:00.000Z\":2.3524618611,\"2020-05-07T00:00:00.000Z\":2.3824901899,\"2020-05-07T01:00:00.000Z\":2.39644748,\"2020-05-07T02:00:00.000Z\":2.4080285331,\"2020-05-07T03:00:00.000Z\":2.3540845158,\"2020-05-07T04:00:00.000Z\":2.377081574,\"2020-05-07T05:00:00.000Z\":2.3825706704,\"2020-05-07T06:00:00.000Z\":2.3969814116,\"2020-05-07T07:00:00.000Z\":2.3902110487,\"2020-05-07T08:00:00.000Z\":2.8876608764,\"2020-05-07T09:00:00.000Z\":2.8554512351,\"2020-05-07T10:00:00.000Z\":2.9011506947,\"2020-05-07T11:00:00.000Z\":2.8739810027,\"2020-05-07T12:00:00.000Z\":2.8642327429,\"2020-05-07T13:00:00.000Z\":2.8609388862,\"2020-05-07T14:00:00.000Z\":2.8691609675,\"2020-05-07T15:00:00.000Z\":2.8516302986,\"2020-05-07T16:00:00.000Z\":2.8860791586,\"2020-05-07T17:00:00.000Z\":2.8417859745,\"2020-05-07T18:00:00.000Z\":2.8577750865,\"2020-05-07T19:00:00.000Z\":2.861678322,\"2020-05-07T20:00:00.000Z\":2.8064804686,\"2020-05-07T21:00:00.000Z\":2.8447594889,\"2020-05-07T22:00:00.000Z\":2.855936299,\"2020-05-07T23:00:00.000Z\":2.8142863343,\"2020-05-08T00:00:00.000Z\":2.8373024815,\"2020-05-08T01:00:00.000Z\":2.8435283639,\"2020-05-08T02:00:00.000Z\":2.8654301284,\"2020-05-08T03:00:00.000Z\":2.821334943,\"2020-05-08T04:00:00.000Z\":2.8432670041,\"2020-05-08T05:00:00.000Z\":2.8557929741,\"2020-05-08T06:00:00.000Z\":2.8156375097,\"2020-05-08T07:00:00.000Z\":2.855427583,\"2020-05-08T08:00:00.000Z\":2.8338698983,\"2020-05-08T09:00:00.000Z\":2.8455777397,\"2020-05-08T10:00:00.000Z\":2.8302046473,\"2020-05-08T11:00:00.000Z\":2.811772505,\"2020-05-08T12:00:00.000Z\":2.8327504575,\"2020-05-08T13:00:00.000Z\":2.8149162137,\"2020-05-08T14:00:00.000Z\":2.8418180107,\"2020-05-08T15:00:00.000Z\":2.77624676,\"2020-05-08T16:00:00.000Z\":2.7750554183,\"2020-05-08T17:00:00.000Z\":2.8217362031,\"2020-05-08T18:00:00.000Z\":2.7887413672,\"2020-05-08T19:00:00.000Z\":2.8221631708,\"2020-05-08T20:00:00.000Z\":2.7607433072,\"2020-05-08T21:00:00.000Z\":2.8068503911,\"2020-05-08T22:00:00.000Z\":2.8275220851,\"2020-05-08T23:00:00.000Z\":2.7854105273,\"2020-05-09T00:00:00.000Z\":2.8234034853,\"2020-05-09T01:00:00.000Z\":2.7770116762,\"2020-05-09T02:00:00.000Z\":2.8169012822,\"2020-05-09T03:00:00.000Z\":2.7867158786,\"2020-05-09T04:00:00.000Z\":2.7771182754,\"2020-05-09T05:00:00.000Z\":2.8149487573,\"2020-05-09T06:00:00.000Z\":2.804412661,\"2020-05-09T07:00:00.000Z\":2.8110121218,\"2020-05-09T08:00:00.000Z\":2.7997556599,\"2020-05-09T09:00:00.000Z\":2.827594843,\"2020-05-09T10:00:00.000Z\":2.8026913184,\"2020-05-09T11:00:00.000Z\":2.7666065452,\"2020-05-09T12:00:00.000Z\":2.8146925781,\"2020-05-09T13:00:00.000Z\":2.8285910075,\"2020-05-09T14:00:00.000Z\":2.819171443,\"2020-05-09T15:00:00.000Z\":2.8276060552,\"2020-05-09T16:00:00.000Z\":2.786607283,\"2020-05-09T17:00:00.000Z\":2.8048391834,\"2020-05-09T18:00:00.000Z\":2.8159184436,\"2020-05-09T19:00:00.000Z\":2.7891395973,\"2020-05-09T20:00:00.000Z\":2.8116468863,\"2020-05-09T21:00:00.000Z\":2.7978174856,\"2020-05-09T22:00:00.000Z\":2.7989229558,\"2020-05-09T23:00:00.000Z\":2.7688699705,\"2020-05-10T00:00:00.000Z\":2.8017221595,\"2020-05-10T01:00:00.000Z\":2.772552825,\"2020-05-10T02:00:00.000Z\":2.7706036817,\"2020-05-10T03:00:00.000Z\":2.8012202962,\"2020-05-10T04:00:00.000Z\":2.785791312,\"2020-05-10T05:00:00.000Z\":2.7742417236,\"2020-05-10T06:00:00.000Z\":2.7712404497,\"2020-05-10T07:00:00.000Z\":2.8023151587,\"2020-05-10T08:00:00.000Z\":2.8038778267,\"2020-05-10T09:00:00.000Z\":2.7654629581,\"2020-05-10T10:00:00.000Z\":2.7723918403,\"2020-05-10T11:00:00.000Z\":2.7758481247,\"2020-05-10T12:00:00.000Z\":2.767177124,\"2020-05-10T13:00:00.000Z\":2.7656505946,\"2020-05-10T14:00:00.000Z\":2.7967909952,\"2020-05-10T15:00:00.000Z\":2.7623871484,\"2020-05-10T16:00:00.000Z\":2.7634893745,\"2020-05-10T17:00:00.000Z\":2.8194647161,\"2020-05-10T18:00:00.000Z\":2.770016505,\"2020-05-10T19:00:00.000Z\":2.791569751,\"2020-05-10T20:00:00.000Z\":2.7731723248,\"2020-05-10T21:00:00.000Z\":2.7867953525,\"2020-05-10T22:00:00.000Z\":2.779407642,\"2020-05-10T23:00:00.000Z\":2.8176463762,\"2020-05-11T00:00:00.000Z\":2.7962230453,\"2020-05-11T01:00:00.000Z\":2.7806077636,\"2020-05-11T02:00:00.000Z\":2.8055549689,\"2020-05-11T03:00:00.000Z\":2.7778179322,\"2020-05-11T04:00:00.000Z\":2.7663530922,\"2020-05-11T05:00:00.000Z\":2.8133794994,\"2020-05-11T06:00:00.000Z\":2.8175014886,\"2020-05-11T07:00:00.000Z\":2.8094160034,\"2020-05-11T08:00:00.000Z\":2.7852624609,\"2020-05-11T09:00:00.000Z\":2.7784953118,\"2020-05-11T10:00:00.000Z\":2.7841129905,\"2020-05-11T11:00:00.000Z\":2.7954359299,\"2020-05-11T12:00:00.000Z\":2.7670627932,\"2020-05-11T13:00:00.000Z\":2.7513481564,\"2020-05-11T14:00:00.000Z\":2.7789241783,\"2020-05-11T15:00:00.000Z\":2.7950077875,\"2020-05-11T16:00:00.000Z\":2.7340843339,\"2020-05-11T17:00:00.000Z\":2.7706471042,\"2020-05-11T18:00:00.000Z\":2.7340350929,\"2020-05-11T19:00:00.000Z\":2.7857325803,\"2020-05-11T20:00:00.000Z\":2.7754412275,\"2020-05-11T21:00:00.000Z\":2.7255128288,\"2020-05-11T22:00:00.000Z\":2.7736621437,\"2020-05-11T23:00:00.000Z\":2.7741544669,\"2020-05-12T00:00:00.000Z\":2.7567000156,\"2020-05-12T01:00:00.000Z\":2.7286863092,\"2020-05-12T02:00:00.000Z\":2.7251265494,\"2020-05-12T03:00:00.000Z\":2.7373543428,\"2020-05-12T04:00:00.000Z\":2.7232293938,\"2020-05-12T05:00:00.000Z\":2.7407298649,\"2020-05-12T06:00:00.000Z\":2.7512581857,\"2020-05-12T07:00:00.000Z\":2.720196368,\"2020-05-12T08:00:00.000Z\":2.7268853219,\"2020-05-12T09:00:00.000Z\":2.7248220638,\"2020-05-12T10:00:00.000Z\":2.7589560897,\"2020-05-12T11:00:00.000Z\":2.7355221787,\"2020-05-12T12:00:00.000Z\":2.7154885845,\"2020-05-12T13:00:00.000Z\":2.6972396153,\"2020-05-12T14:00:00.000Z\":2.6945708743,\"2020-05-12T15:00:00.000Z\":2.728854137,\"2020-05-12T16:00:00.000Z\":2.741924416,\"2020-05-12T17:00:00.000Z\":2.681514517,\"2020-05-12T18:00:00.000Z\":2.7359950179,\"2020-05-12T19:00:00.000Z\":2.7258032095,\"2020-05-12T20:00:00.000Z\":2.7151585953,\"2020-05-12T21:00:00.000Z\":2.6768890865,\"2020-05-12T22:00:00.000Z\":2.7274083591,\"2020-05-12T23:00:00.000Z\":2.6761276008,\"2020-05-13T00:00:00.000Z\":2.7166516426,\"2020-05-13T01:00:00.000Z\":2.6845210743,\"2020-05-13T02:00:00.000Z\":2.7179678993,\"2020-05-13T03:00:00.000Z\":2.6928699958,\"2020-05-13T04:00:00.000Z\":2.7208969343,\"2020-05-13T05:00:00.000Z\":2.6712462796,\"2020-05-13T06:00:00.000Z\":2.7076362206,\"2020-05-13T07:00:00.000Z\":2.7303837224,\"2020-05-13T08:00:00.000Z\":2.7057166449,\"2020-05-13T09:00:00.000Z\":2.6738723965,\"2020-05-13T10:00:00.000Z\":2.6983200178,\"2020-05-13T11:00:00.000Z\":2.7183696993,\"2020-05-13T12:00:00.000Z\":2.6584979712,\"2020-05-13T13:00:00.000Z\":2.7019644564,\"2020-05-13T14:00:00.000Z\":2.6980747823,\"2020-05-13T15:00:00.000Z\":2.6837261034,\"2020-05-13T16:00:00.000Z\":2.6480272182,\"2020-05-13T17:00:00.000Z\":2.6373243943,\"2020-05-13T18:00:00.000Z\":2.6789372856,\"2020-05-13T19:00:00.000Z\":2.6539083585,\"2020-05-13T20:00:00.000Z\":2.6905034117,\"2020-05-13T21:00:00.000Z\":2.6637545007,\"2020-05-13T22:00:00.000Z\":2.6615138317,\"2020-05-13T23:00:00.000Z\":2.6877730651,\"2020-05-14T00:00:00.000Z\":2.6778959828,\"2020-05-14T01:00:00.000Z\":2.6791458864,\"2020-05-14T02:00:00.000Z\":2.6282751287,\"2020-05-14T03:00:00.000Z\":2.691481752,\"2020-05-14T04:00:00.000Z\":2.6438410933,\"2020-05-14T05:00:00.000Z\":2.6446438349,\"2020-05-14T06:00:00.000Z\":2.6664778986,\"2020-05-14T07:00:00.000Z\":2.6749865152,\"2020-05-14T08:00:00.000Z\":2.6197573996,\"2020-05-14T09:00:00.000Z\":2.63033336,\"2020-05-14T10:00:00.000Z\":2.6196842281,\"2020-05-14T11:00:00.000Z\":2.665106046,\"2020-05-14T12:00:00.000Z\":2.653752376,\"2020-05-14T13:00:00.000Z\":2.6624281378,\"2020-05-14T14:00:00.000Z\":2.6601045184,\"2020-05-14T15:00:00.000Z\":2.6642180189,\"2020-05-14T16:00:00.000Z\":2.6121169417,\"2020-05-14T17:00:00.000Z\":2.617543464,\"2020-05-14T18:00:00.000Z\":2.6513501098,\"2020-05-14T19:00:00.000Z\":2.6522931433,\"2020-05-14T20:00:00.000Z\":2.6010705104,\"2020-05-14T21:00:00.000Z\":2.6449498766,\"2020-05-14T22:00:00.000Z\":2.5983408246,\"2020-05-14T23:00:00.000Z\":2.5985499313,\"2020-05-15T00:00:00.000Z\":2.6413951229,\"2020-05-15T01:00:00.000Z\":2.6424818539,\"2020-05-15T02:00:00.000Z\":2.5927885137,\"2020-05-15T03:00:00.000Z\":2.6240514022,\"2020-05-15T04:00:00.000Z\":2.5925715035,\"2020-05-15T05:00:00.000Z\":2.6138055716,\"2020-05-15T06:00:00.000Z\":2.5910883652,\"2020-05-15T07:00:00.000Z\":2.5769435193,\"2020-05-15T08:00:00.000Z\":2.6266156697,\"2020-05-15T09:00:00.000Z\":2.6374539388,\"2020-05-15T10:00:00.000Z\":2.5787424447,\"2020-05-15T11:00:00.000Z\":2.5678192952,\"2020-05-15T12:00:00.000Z\":2.6153927681,\"2020-05-15T13:00:00.000Z\":2.5853832131,\"2020-05-15T14:00:00.000Z\":2.6132661902,\"2020-05-15T15:00:00.000Z\":2.5931169794,\"2020-05-15T16:00:00.000Z\":2.5833136246,\"2020-05-15T17:00:00.000Z\":2.591572653,\"2020-05-15T18:00:00.000Z\":2.5957702589,\"2020-05-15T19:00:00.000Z\":2.5913523358,\"2020-05-15T20:00:00.000Z\":2.601923737,\"2020-05-15T21:00:00.000Z\":2.5841345704,\"2020-05-15T22:00:00.000Z\":2.5392555788,\"2020-05-15T23:00:00.000Z\":2.5391458001,\"2020-05-16T00:00:00.000Z\":2.5678552605,\"2020-05-16T01:00:00.000Z\":2.5837382437,\"2020-05-16T02:00:00.000Z\":2.575568777,\"2020-05-16T03:00:00.000Z\":2.5546579073,\"2020-05-16T04:00:00.000Z\":2.5788964958,\"2020-05-16T05:00:00.000Z\":2.5711382881,\"2020-05-16T06:00:00.000Z\":2.5954454415,\"2020-05-16T07:00:00.000Z\":2.5547805625,\"2020-05-16T08:00:00.000Z\":2.5734597485,\"2020-05-16T09:00:00.000Z\":2.5353495222,\"2020-05-16T10:00:00.000Z\":2.5712632657,\"2020-05-16T11:00:00.000Z\":2.5893826923,\"2020-05-16T12:00:00.000Z\":2.5872103903,\"2020-05-16T13:00:00.000Z\":2.5923852379,\"2020-05-16T14:00:00.000Z\":2.5792818832,\"2020-05-16T15:00:00.000Z\":2.5990198819,\"2020-05-16T16:00:00.000Z\":2.5778749408,\"2020-05-16T17:00:00.000Z\":2.543925516,\"2020-05-16T18:00:00.000Z\":2.5972598182,\"2020-05-16T19:00:00.000Z\":2.5423908565,\"2020-05-16T20:00:00.000Z\":2.5578227224,\"2020-05-16T21:00:00.000Z\":2.5858883985,\"2020-05-16T22:00:00.000Z\":2.5805623562,\"2020-05-16T23:00:00.000Z\":2.5448297192,\"2020-05-17T00:00:00.000Z\":2.5491601489,\"2020-05-17T01:00:00.000Z\":2.5731124094,\"2020-05-17T02:00:00.000Z\":2.5736406969,\"2020-05-17T03:00:00.000Z\":2.5626850061,\"2020-05-17T04:00:00.000Z\":2.5436138376,\"2020-05-17T05:00:00.000Z\":2.5855244367,\"2020-05-17T06:00:00.000Z\":2.5701957181,\"2020-05-17T07:00:00.000Z\":2.5898424455,\"2020-05-17T08:00:00.000Z\":2.5407796698,\"2020-05-17T09:00:00.000Z\":2.6043293124,\"2020-05-17T10:00:00.000Z\":2.5897971392,\"2020-05-17T11:00:00.000Z\":2.591151675,\"2020-05-17T12:00:00.000Z\":2.5381999262,\"2020-05-17T13:00:00.000Z\":2.5496228887,\"2020-05-17T14:00:00.000Z\":2.5541065096,\"2020-05-17T15:00:00.000Z\":2.5871030528,\"2020-05-17T16:00:00.000Z\":2.6038788497,\"2020-05-17T17:00:00.000Z\":2.5506534759,\"2020-05-17T18:00:00.000Z\":2.5866884411,\"2020-05-17T19:00:00.000Z\":2.5455842598,\"2020-05-17T20:00:00.000Z\":2.5487742565,\"2020-05-17T21:00:00.000Z\":2.5406442875,\"2020-05-17T22:00:00.000Z\":2.5737797011,\"2020-05-17T23:00:00.000Z\":2.5390274429,\"2020-05-18T00:00:00.000Z\":2.561363499,\"2020-05-18T01:00:00.000Z\":2.5911964892,\"2020-05-18T02:00:00.000Z\":2.5796647228,\"2020-05-18T03:00:00.000Z\":2.5697442187,\"2020-05-18T04:00:00.000Z\":2.5946197386,\"2020-05-18T05:00:00.000Z\":2.6040066764,\"2020-05-18T06:00:00.000Z\":2.5510987719,\"2020-05-18T07:00:00.000Z\":2.5467777836,\"2020-05-18T08:00:00.000Z\":2.5285608801,\"2020-05-18T09:00:00.000Z\":2.5624147864,\"2020-05-18T10:00:00.000Z\":2.5722812283,\"2020-05-18T11:00:00.000Z\":2.5278309885,\"2020-05-18T12:00:00.000Z\":2.5354241218,\"2020-05-18T13:00:00.000Z\":2.5589556058,\"2020-05-18T14:00:00.000Z\":2.5464946567,\"2020-05-18T15:00:00.000Z\":2.5107928288,\"2020-05-18T16:00:00.000Z\":2.5077725848,\"2020-05-18T17:00:00.000Z\":2.5586393555,\"2020-05-18T18:00:00.000Z\":2.5007512067,\"2020-05-18T19:00:00.000Z\":2.5039389529,\"2020-05-18T20:00:00.000Z\":2.4914330926,\"2020-05-18T21:00:00.000Z\":2.5565952434,\"2020-05-18T22:00:00.000Z\":2.5287467728,\"2020-05-18T23:00:00.000Z\":2.522552616,\"2020-05-19T00:00:00.000Z\":2.549253813,\"2020-05-19T01:00:00.000Z\":2.556982035,\"2020-05-19T02:00:00.000Z\":2.5008039191,\"2020-05-19T03:00:00.000Z\":2.4974688627,\"2020-05-19T04:00:00.000Z\":2.5190140812,\"2020-05-19T05:00:00.000Z\":2.4941905269,\"2020-05-19T06:00:00.000Z\":2.5027892972,\"2020-05-19T07:00:00.000Z\":2.4878828835,\"2020-05-19T08:00:00.000Z\":2.5477026977,\"2020-05-19T09:00:00.000Z\":2.5224390682,\"2020-05-19T10:00:00.000Z\":2.535521406,\"2020-05-19T11:00:00.000Z\":2.5355743475,\"2020-05-19T12:00:00.000Z\":2.4792855611,\"2020-05-19T13:00:00.000Z\":2.5215776496,\"2020-05-19T14:00:00.000Z\":2.5044866209,\"2020-05-19T15:00:00.000Z\":2.4703409983,\"2020-05-19T16:00:00.000Z\":2.4601050583,\"2020-05-19T17:00:00.000Z\":2.4696577071,\"2020-05-19T18:00:00.000Z\":2.4938061169,\"2020-05-19T19:00:00.000Z\":2.5085306803,\"2020-05-19T20:00:00.000Z\":2.4842918727,\"2020-05-19T21:00:00.000Z\":2.4808950741,\"2020-05-19T22:00:00.000Z\":2.4660397747,\"2020-05-19T23:00:00.000Z\":2.4943824127,\"2020-05-20T00:00:00.000Z\":2.4817219064,\"2020-05-20T01:00:00.000Z\":2.5147926716,\"2020-05-20T02:00:00.000Z\":2.470617541,\"2020-05-20T03:00:00.000Z\":2.4616569742,\"2020-05-20T04:00:00.000Z\":2.4553394116,\"2020-05-20T05:00:00.000Z\":2.4874017253,\"2020-05-20T06:00:00.000Z\":2.4713692517,\"2020-05-20T07:00:00.000Z\":2.442824733,\"2020-05-20T08:00:00.000Z\":2.4667143821,\"2020-05-20T09:00:00.000Z\":2.4675433882,\"2020-05-20T10:00:00.000Z\":2.4729672287,\"2020-05-20T11:00:00.000Z\":2.4588428232,\"2020-05-20T12:00:00.000Z\":2.447491051,\"2020-05-20T13:00:00.000Z\":2.4471712469,\"2020-05-20T14:00:00.000Z\":2.4346698167,\"2020-05-20T15:00:00.000Z\":2.4578873391,\"2020-05-20T16:00:00.000Z\":2.4737688817,\"2020-05-20T17:00:00.000Z\":2.44960546,\"2020-05-20T18:00:00.000Z\":2.4650394974,\"2020-05-20T19:00:00.000Z\":2.4429578423,\"2020-05-20T20:00:00.000Z\":2.4125596516,\"2020-05-20T21:00:00.000Z\":2.4147819577,\"2020-05-20T22:00:00.000Z\":2.4481842665,\"2020-05-20T23:00:00.000Z\":2.4224650937,\"2020-05-21T00:00:00.000Z\":2.4026664814,\"2020-05-21T01:00:00.000Z\":2.466764339,\"2020-05-21T02:00:00.000Z\":2.4513187372,\"2020-05-21T03:00:00.000Z\":2.458536271,\"2020-05-21T04:00:00.000Z\":2.4245890798,\"2020-05-21T05:00:00.000Z\":2.4688075588,\"2020-05-21T06:00:00.000Z\":2.4405861286,\"2020-05-21T07:00:00.000Z\":2.3964599329,\"2020-05-21T08:00:00.000Z\":2.435074941,\"2020-05-21T09:00:00.000Z\":2.4060865447,\"2020-05-21T10:00:00.000Z\":2.4452533621,\"2020-05-21T11:00:00.000Z\":2.3889190886,\"2020-05-21T12:00:00.000Z\":2.3827470555,\"2020-05-21T13:00:00.000Z\":2.3999072124,\"2020-05-21T14:00:00.000Z\":2.3811214257,\"2020-05-21T15:00:00.000Z\":2.3957512349,\"2020-05-21T16:00:00.000Z\":2.367176444,\"2020-05-21T17:00:00.000Z\":2.3667989162,\"2020-05-21T18:00:00.000Z\":2.4097563074,\"2020-05-21T19:00:00.000Z\":2.364553978,\"2020-05-21T20:00:00.000Z\":2.3876010939,\"2020-05-21T21:00:00.000Z\":2.3854184921,\"2020-05-21T22:00:00.000Z\":2.3732121899,\"2020-05-21T23:00:00.000Z\":2.3901082352,\"2020-05-22T00:00:00.000Z\":2.3737547667,\"2020-05-22T01:00:00.000Z\":2.3845882331,\"2020-05-22T02:00:00.000Z\":2.3605831468,\"2020-05-22T03:00:00.000Z\":2.3828253831,\"2020-05-22T04:00:00.000Z\":2.3717004247,\"2020-05-22T05:00:00.000Z\":2.3632612577,\"2020-05-22T06:00:00.000Z\":2.3792611882,\"2020-05-22T07:00:00.000Z\":2.3633100994,\"2020-05-22T08:00:00.000Z\":2.3894403828,\"2020-05-22T09:00:00.000Z\":2.3584370477,\"2020-05-22T10:00:00.000Z\":2.3933310636,\"2020-05-22T11:00:00.000Z\":2.3871154084,\"2020-05-22T12:00:00.000Z\":2.380782142,\"2020-05-22T13:00:00.000Z\":2.3701802855,\"2020-05-22T14:00:00.000Z\":2.3835220151,\"2020-05-22T15:00:00.000Z\":2.3760978453,\"2020-05-22T16:00:00.000Z\":2.3373011628,\"2020-05-22T17:00:00.000Z\":2.3382425414,\"2020-05-22T18:00:00.000Z\":2.3650870754,\"2020-05-22T19:00:00.000Z\":2.3587905078,\"2020-05-22T20:00:00.000Z\":2.3215876808,\"2020-05-22T21:00:00.000Z\":2.3288642393,\"2020-05-22T22:00:00.000Z\":2.3696680585,\"2020-05-22T23:00:00.000Z\":2.3575409325,\"2020-05-23T00:00:00.000Z\":2.317467971,\"2020-05-23T01:00:00.000Z\":2.3163217478,\"2020-05-23T02:00:00.000Z\":2.3497703926,\"2020-05-23T03:00:00.000Z\":2.3673813145,\"2020-05-23T04:00:00.000Z\":2.348324602,\"2020-05-23T05:00:00.000Z\":2.3183434648,\"2020-05-23T06:00:00.000Z\":2.3177696674,\"2020-05-23T07:00:00.000Z\":2.3515651594,\"2020-05-23T08:00:00.000Z\":2.3128771772,\"2020-05-23T09:00:00.000Z\":2.3163857401,\"2020-05-23T10:00:00.000Z\":2.356220498,\"2020-05-23T11:00:00.000Z\":2.3230863058,\"2020-05-23T12:00:00.000Z\":2.3222366944,\"2020-05-23T13:00:00.000Z\":2.3503805409,\"2020-05-23T14:00:00.000Z\":2.3635722983,\"2020-05-23T15:00:00.000Z\":2.3646286918,\"2020-05-23T16:00:00.000Z\":2.3578381079,\"2020-05-23T17:00:00.000Z\":2.3176569752,\"2020-05-23T18:00:00.000Z\":2.3414491826,\"2020-05-23T19:00:00.000Z\":2.331806027,\"2020-05-23T20:00:00.000Z\":2.3117808223,\"2020-05-23T21:00:00.000Z\":2.3753074369,\"2020-05-23T22:00:00.000Z\":2.3113172098,\"2020-05-23T23:00:00.000Z\":2.3265853179,\"2020-05-24T00:00:00.000Z\":2.3732642937,\"2020-05-24T01:00:00.000Z\":2.3680356495,\"2020-05-24T02:00:00.000Z\":2.374909295,\"2020-05-24T03:00:00.000Z\":2.3493766638,\"2020-05-24T04:00:00.000Z\":2.3359450082,\"2020-05-24T05:00:00.000Z\":2.37211517,\"2020-05-24T06:00:00.000Z\":2.3623120316,\"2020-05-24T07:00:00.000Z\":2.3301069077,\"2020-05-24T08:00:00.000Z\":2.3729559093,\"2020-05-24T09:00:00.000Z\":2.3609485986,\"2020-05-24T10:00:00.000Z\":2.3424942096,\"2020-05-24T11:00:00.000Z\":2.3197571838,\"2020-05-24T12:00:00.000Z\":2.3710370622,\"2020-05-24T13:00:00.000Z\":2.3179119157,\"2020-05-24T14:00:00.000Z\":2.3416944935,\"2020-05-24T15:00:00.000Z\":2.3370203896,\"2020-05-24T16:00:00.000Z\":2.3538106751,\"2020-05-24T17:00:00.000Z\":2.3291531084,\"2020-05-24T18:00:00.000Z\":2.3345230688,\"2020-05-24T19:00:00.000Z\":2.3722221681,\"2020-05-24T20:00:00.000Z\":2.3386888412,\"2020-05-24T21:00:00.000Z\":2.3352960009,\"2020-05-24T22:00:00.000Z\":2.362323786,\"2020-05-24T23:00:00.000Z\":2.3393720985,\"2020-05-25T00:00:00.000Z\":2.3250893285,\"2020-05-25T01:00:00.000Z\":2.3335853665,\"2020-05-25T02:00:00.000Z\":2.3342798565,\"2020-05-25T03:00:00.000Z\":2.355586723,\"2020-05-25T04:00:00.000Z\":2.3375514173,\"2020-05-25T05:00:00.000Z\":2.3414990313,\"2020-05-25T06:00:00.000Z\":2.3436017427,\"2020-05-25T07:00:00.000Z\":2.3293509691,\"2020-05-25T08:00:00.000Z\":2.3704824342,\"2020-05-25T09:00:00.000Z\":2.327739129,\"2020-05-25T10:00:00.000Z\":2.3141902095,\"2020-05-25T11:00:00.000Z\":2.3037736953,\"2020-05-25T12:00:00.000Z\":2.3481850616,\"2020-05-25T13:00:00.000Z\":2.3378050724,\"2020-05-25T14:00:00.000Z\":2.3519978131,\"2020-05-25T15:00:00.000Z\":2.3111453787,\"2020-05-25T16:00:00.000Z\":2.3117858997,\"2020-05-25T17:00:00.000Z\":2.3437823839,\"2020-05-25T18:00:00.000Z\":2.2985355935,\"2020-05-25T19:00:00.000Z\":2.2889319628,\"2020-05-25T20:00:00.000Z\":2.3141072335,\"2020-05-25T21:00:00.000Z\":2.2663323608,\"2020-05-25T22:00:00.000Z\":2.2663467487,\"2020-05-25T23:00:00.000Z\":2.3139569202,\"2020-05-26T00:00:00.000Z\":2.3129660677,\"2020-05-26T01:00:00.000Z\":2.2993218542,\"2020-05-26T02:00:00.000Z\":2.2902738561,\"2020-05-26T03:00:00.000Z\":2.3081958222,\"2020-05-26T04:00:00.000Z\":2.2772477378,\"2020-05-26T05:00:00.000Z\":2.2833754102,\"2020-05-26T06:00:00.000Z\":2.298624666,\"2020-05-26T07:00:00.000Z\":2.3208954595,\"2020-05-26T08:00:00.000Z\":2.3117240553,\"2020-05-26T09:00:00.000Z\":2.2581707124,\"2020-05-26T10:00:00.000Z\":2.3074877882,\"2020-05-26T11:00:00.000Z\":2.2788177398,\"2020-05-26T12:00:00.000Z\":2.28910202,\"2020-05-26T13:00:00.000Z\":2.2542432777,\"2020-05-26T14:00:00.000Z\":2.2889851565,\"2020-05-26T15:00:00.000Z\":2.2558450265,\"2020-05-26T16:00:00.000Z\":2.2350560292,\"2020-05-26T17:00:00.000Z\":2.2520909581,\"2020-05-26T18:00:00.000Z\":2.2404024881,\"2020-05-26T19:00:00.000Z\":2.2450243247,\"2020-05-26T20:00:00.000Z\":2.2414637677,\"2020-05-26T21:00:00.000Z\":2.2549509291,\"2020-05-26T22:00:00.000Z\":2.2677979399,\"2020-05-26T23:00:00.000Z\":2.2591624133,\"2020-05-27T00:00:00.000Z\":2.2643949437,\"2020-05-27T01:00:00.000Z\":2.2324029864,\"2020-05-27T02:00:00.000Z\":2.2204872979,\"2020-05-27T03:00:00.000Z\":2.2671816003,\"2020-05-27T04:00:00.000Z\":2.2306875543,\"2020-05-27T05:00:00.000Z\":2.2269123244,\"2020-05-27T06:00:00.000Z\":2.2200746478,\"2020-05-27T07:00:00.000Z\":2.2452332587,\"2020-05-27T08:00:00.000Z\":2.2781186957,\"2020-05-27T09:00:00.000Z\":2.2682838438,\"2020-05-27T10:00:00.000Z\":2.2457983355,\"2020-05-27T11:00:00.000Z\":2.2482833103,\"2020-05-27T12:00:00.000Z\":2.2440763375,\"2020-05-27T13:00:00.000Z\":2.2496754332,\"2020-05-27T14:00:00.000Z\":2.2377133006,\"2020-05-27T15:00:00.000Z\":2.2295662521,\"2020-05-27T16:00:00.000Z\":2.2425895424,\"2020-05-27T17:00:00.000Z\":2.1867354651,\"2020-05-27T18:00:00.000Z\":2.2163906738,\"2020-05-27T19:00:00.000Z\":2.2085768065,\"2020-05-27T20:00:00.000Z\":2.2285712981,\"2020-05-27T21:00:00.000Z\":2.1805731795,\"2020-05-27T22:00:00.000Z\":2.22810313,\"2020-05-27T23:00:00.000Z\":2.2138538519,\"2020-05-28T00:00:00.000Z\":2.2441786299,\"2020-05-28T01:00:00.000Z\":2.1803427779,\"2020-05-28T02:00:00.000Z\":2.1992977156,\"2020-05-28T03:00:00.000Z\":2.2416509924,\"2020-05-28T04:00:00.000Z\":2.2079578008,\"2020-05-28T05:00:00.000Z\":2.2354591923,\"2020-05-28T06:00:00.000Z\":2.2412756431,\"2020-05-28T07:00:00.000Z\":2.1753252775,\"2020-05-28T08:00:00.000Z\":2.2150658764,\"2020-05-28T09:00:00.000Z\":2.1862375701,\"2020-05-28T10:00:00.000Z\":2.2181060672,\"2020-05-28T11:00:00.000Z\":2.2245614275,\"2020-05-28T12:00:00.000Z\":2.2105838228,\"2020-05-28T13:00:00.000Z\":2.1950357091,\"2020-05-28T14:00:00.000Z\":2.2175681951,\"2020-05-28T15:00:00.000Z\":2.2071353605,\"2020-05-28T16:00:00.000Z\":2.1753563139,\"2020-05-28T17:00:00.000Z\":2.1543748944,\"2020-05-28T18:00:00.000Z\":2.1911450449,\"2020-05-28T19:00:00.000Z\":2.1370935896,\"2020-05-28T20:00:00.000Z\":2.1732676508,\"2020-05-28T21:00:00.000Z\":2.1649085713,\"2020-05-28T22:00:00.000Z\":2.1334434498,\"2020-05-28T23:00:00.000Z\":2.1373257318,\"2020-05-29T00:00:00.000Z\":2.1415503769,\"2020-05-29T01:00:00.000Z\":2.1741583417,\"2020-05-29T02:00:00.000Z\":2.1300865559,\"2020-05-29T03:00:00.000Z\":2.187064251,\"2020-05-29T04:00:00.000Z\":2.1513825069,\"2020-05-29T05:00:00.000Z\":2.148031209,\"2020-05-29T06:00:00.000Z\":2.1331376479,\"2020-05-29T07:00:00.000Z\":2.1866245451,\"2020-05-29T08:00:00.000Z\":2.1624172082,\"2020-05-29T09:00:00.000Z\":2.1499761981,\"2020-05-29T10:00:00.000Z\":2.1777404933,\"2020-05-29T11:00:00.000Z\":2.1764986815,\"2020-05-29T12:00:00.000Z\":2.1468509665,\"2020-05-29T13:00:00.000Z\":2.1455738939,\"2020-05-29T14:00:00.000Z\":2.1549592857,\"2020-05-29T15:00:00.000Z\":2.1269280095,\"2020-05-29T16:00:00.000Z\":2.1164827024,\"2020-05-29T17:00:00.000Z\":2.1100834923,\"2020-05-29T18:00:00.000Z\":2.1519334744,\"2020-05-29T19:00:00.000Z\":2.1371329129,\"2020-05-29T20:00:00.000Z\":2.1307888009,\"2020-05-29T21:00:00.000Z\":2.0880198804,\"2020-05-29T22:00:00.000Z\":2.127288623,\"2020-05-29T23:00:00.000Z\":2.1287463572,\"2020-05-30T00:00:00.000Z\":2.1008850918,\"2020-05-30T01:00:00.000Z\":2.1057585274,\"2020-05-30T02:00:00.000Z\":2.094936324,\"2020-05-30T03:00:00.000Z\":2.1372542762,\"2020-05-30T04:00:00.000Z\":2.1179414143,\"2020-05-30T05:00:00.000Z\":2.1476393765,\"2020-05-30T06:00:00.000Z\":2.1205701259,\"2020-05-30T07:00:00.000Z\":2.1262053678,\"2020-05-30T08:00:00.000Z\":2.1034287209,\"2020-05-30T09:00:00.000Z\":2.1354021483,\"2020-05-30T10:00:00.000Z\":2.1334894546,\"2020-05-30T11:00:00.000Z\":2.1229640927,\"2020-05-30T12:00:00.000Z\":2.1171839151,\"2020-05-30T13:00:00.000Z\":2.1067720936,\"2020-05-30T14:00:00.000Z\":2.0950818038,\"2020-05-30T15:00:00.000Z\":2.1165297234,\"2020-05-30T16:00:00.000Z\":2.0956712067,\"2020-05-30T17:00:00.000Z\":2.1244171597,\"2020-05-30T18:00:00.000Z\":2.1326702003,\"2020-05-30T19:00:00.000Z\":2.1150019978,\"2020-05-30T20:00:00.000Z\":2.1278116649,\"2020-05-30T21:00:00.000Z\":2.0869849234,\"2020-05-30T22:00:00.000Z\":2.125263829,\"2020-05-30T23:00:00.000Z\":2.1139123953,\"2020-05-31T00:00:00.000Z\":2.1152377215,\"2020-05-31T01:00:00.000Z\":2.1327071907,\"2020-05-31T02:00:00.000Z\":2.1167130658,\"2020-05-31T03:00:00.000Z\":2.1544416014,\"2020-05-31T04:00:00.000Z\":2.0879369852,\"2020-05-31T05:00:00.000Z\":2.1003692503,\"2020-05-31T06:00:00.000Z\":2.1174453335,\"2020-05-31T07:00:00.000Z\":2.1327697996,\"2020-05-31T08:00:00.000Z\":2.1119295366,\"2020-05-31T09:00:00.000Z\":2.1069297046,\"2020-05-31T10:00:00.000Z\":2.1386254617,\"2020-05-31T11:00:00.000Z\":2.1337873369,\"2020-05-31T12:00:00.000Z\":2.1320484796,\"2020-05-31T13:00:00.000Z\":2.1413517653,\"2020-05-31T14:00:00.000Z\":2.1145457701,\"2020-05-31T15:00:00.000Z\":2.1302952654,\"2020-05-31T16:00:00.000Z\":2.1023544041,\"2020-05-31T17:00:00.000Z\":2.0877782935,\"2020-05-31T18:00:00.000Z\":2.0851633362,\"2020-05-31T19:00:00.000Z\":2.1097252537,\"2020-05-31T20:00:00.000Z\":2.0969373432,\"2020-05-31T21:00:00.000Z\":2.1420687879,\"2020-05-31T22:00:00.000Z\":2.1491158273,\"2020-05-31T23:00:00.000Z\":2.124131625,\"2020-06-01T00:00:00.000Z\":2.1425570685,\"2020-06-01T01:00:00.000Z\":2.1430335317,\"2020-06-01T02:00:00.000Z\":2.0961178869,\"2020-06-01T03:00:00.000Z\":2.091500574,\"2020-06-01T04:00:00.000Z\":2.1289326241,\"2020-06-01T05:00:00.000Z\":2.1001815773,\"2020-06-01T06:00:00.000Z\":2.0956116776,\"2020-06-01T07:00:00.000Z\":2.1276899602,\"2020-06-01T08:00:00.000Z\":2.0883829359,\"2020-06-01T09:00:00.000Z\":2.1191745956,\"2020-06-01T10:00:00.000Z\":2.1359184385,\"2020-06-01T11:00:00.000Z\":2.1150058764,\"2020-06-01T12:00:00.000Z\":2.1059588226,\"2020-06-01T13:00:00.000Z\":2.1100688769,\"2020-06-01T14:00:00.000Z\":2.092024714,\"2020-06-01T15:00:00.000Z\":2.0816991334,\"2020-06-01T16:00:00.000Z\":2.0674233713,\"2020-06-01T17:00:00.000Z\":2.0731764502,\"2020-06-01T18:00:00.000Z\":2.0602776299,\"2020-06-01T19:00:00.000Z\":2.0453738282,\"2020-06-01T20:00:00.000Z\":2.0585446903,\"2020-06-01T21:00:00.000Z\":2.0987198157,\"2020-06-01T22:00:00.000Z\":2.0422762919,\"2020-06-01T23:00:00.000Z\":2.1045616634,\"2020-06-02T00:00:00.000Z\":2.1073579135,\"2020-06-02T01:00:00.000Z\":2.0780935507,\"2020-06-02T02:00:00.000Z\":2.0729714237,\"2020-06-02T03:00:00.000Z\":2.0573977155,\"2020-06-02T04:00:00.000Z\":2.0608699953,\"2020-06-02T05:00:00.000Z\":2.0714640979,\"2020-06-02T06:00:00.000Z\":2.094514572,\"2020-06-02T07:00:00.000Z\":2.1033975554,\"2020-06-02T08:00:00.000Z\":2.0476842497,\"2020-06-02T09:00:00.000Z\":2.0913142616,\"2020-06-02T10:00:00.000Z\":2.0336843467,\"2020-06-02T11:00:00.000Z\":2.0383831388,\"2020-06-02T12:00:00.000Z\":2.0418092971,\"2020-06-02T13:00:00.000Z\":2.0649145453,\"2020-06-02T14:00:00.000Z\":2.0512161839,\"2020-06-02T15:00:00.000Z\":2.0686642896,\"2020-06-02T16:00:00.000Z\":2.0598713812,\"2020-06-02T17:00:00.000Z\":2.0219322476,\"2020-06-02T18:00:00.000Z\":2.0351501934,\"2020-06-02T19:00:00.000Z\":2.0266163426,\"2020-06-02T20:00:00.000Z\":2.0644049299,\"2020-06-02T21:00:00.000Z\":2.016462477,\"2020-06-02T22:00:00.000Z\":2.050952448,\"2020-06-02T23:00:00.000Z\":2.0540254954,\"2020-06-03T00:00:00.000Z\":2.0210876923,\"2020-06-03T01:00:00.000Z\":2.0509779924,\"2020-06-03T02:00:00.000Z\":1.9978356372,\"2020-06-03T03:00:00.000Z\":2.0218252491,\"2020-06-03T04:00:00.000Z\":2.0153880438,\"2020-06-03T05:00:00.000Z\":2.0631142101,\"2020-06-03T06:00:00.000Z\":2.0265129691,\"2020-06-03T07:00:00.000Z\":2.0129508505,\"2020-06-03T08:00:00.000Z\":2.0249723556,\"2020-06-03T09:00:00.000Z\":2.0305358457,\"2020-06-03T10:00:00.000Z\":2.0089213589,\"2020-06-03T11:00:00.000Z\":2.0247600939,\"2020-06-03T12:00:00.000Z\":1.9836005561,\"2020-06-03T13:00:00.000Z\":2.0217152172,\"2020-06-03T14:00:00.000Z\":1.9796010588,\"2020-06-03T15:00:00.000Z\":1.9818004199,\"2020-06-03T16:00:00.000Z\":2.0308196048,\"2020-06-03T17:00:00.000Z\":1.9945792697,\"2020-06-03T18:00:00.000Z\":1.963538552,\"2020-06-03T19:00:00.000Z\":1.974156957,\"2020-06-03T20:00:00.000Z\":1.9956456414,\"2020-06-03T21:00:00.000Z\":1.9907259797,\"2020-06-03T22:00:00.000Z\":1.9962944007,\"2020-06-03T23:00:00.000Z\":1.9605906684,\"2020-06-04T00:00:00.000Z\":2.0150474252,\"2020-06-04T01:00:00.000Z\":1.9720500907,\"2020-06-04T02:00:00.000Z\":2.0157201445,\"2020-06-04T03:00:00.000Z\":1.9646814322,\"2020-06-04T04:00:00.000Z\":1.9730844286,\"2020-06-04T05:00:00.000Z\":2.0107599578,\"2020-06-04T06:00:00.000Z\":2.0072156705,\"2020-06-04T07:00:00.000Z\":2.0048548668,\"2020-06-04T08:00:00.000Z\":1.9958200518,\"2020-06-04T09:00:00.000Z\":1.9679680676,\"2020-06-04T10:00:00.000Z\":1.9793470877,\"2020-06-04T11:00:00.000Z\":1.9592617077,\"2020-06-04T12:00:00.000Z\":1.9887023322,\"2020-06-04T13:00:00.000Z\":1.9344542709,\"2020-06-04T14:00:00.000Z\":1.9880870209,\"2020-06-04T15:00:00.000Z\":1.9461746893,\"2020-06-04T16:00:00.000Z\":1.9825521986,\"2020-06-04T17:00:00.000Z\":1.979853137,\"2020-06-04T18:00:00.000Z\":1.9343908128,\"2020-06-04T19:00:00.000Z\":1.9542340726,\"2020-06-04T20:00:00.000Z\":1.9194681724,\"2020-06-04T21:00:00.000Z\":1.9475225896,\"2020-06-04T22:00:00.000Z\":1.9186403536,\"2020-06-04T23:00:00.000Z\":1.9089691019,\"2020-06-05T00:00:00.000Z\":1.9347044622,\"2020-06-05T01:00:00.000Z\":1.9686426954,\"2020-06-05T02:00:00.000Z\":1.9347011013,\"2020-06-05T03:00:00.000Z\":1.9123184662,\"2020-06-05T04:00:00.000Z\":1.9501929906,\"2020-06-05T05:00:00.000Z\":1.9495252168,\"2020-06-05T06:00:00.000Z\":1.936373197,\"2020-06-05T07:00:00.000Z\":1.9554062787,\"2020-06-05T08:00:00.000Z\":1.9487862742,\"2020-06-05T09:00:00.000Z\":1.897130141,\"2020-06-05T10:00:00.000Z\":1.9151998984,\"2020-06-05T11:00:00.000Z\":1.9167378534,\"2020-06-05T12:00:00.000Z\":1.9230983108,\"2020-06-05T13:00:00.000Z\":1.9058410026,\"2020-06-05T14:00:00.000Z\":1.922041465,\"2020-06-05T15:00:00.000Z\":1.9168180426,\"2020-06-05T16:00:00.000Z\":1.9089082012,\"2020-06-05T17:00:00.000Z\":1.8950817099,\"2020-06-05T18:00:00.000Z\":1.8881599743,\"2020-06-05T19:00:00.000Z\":1.86709386,\"2020-06-05T20:00:00.000Z\":1.8847201573,\"2020-06-05T21:00:00.000Z\":1.9280194342,\"2020-06-05T22:00:00.000Z\":1.8687165683,\"2020-06-05T23:00:00.000Z\":1.9175760407,\"2020-06-06T00:00:00.000Z\":1.9144149245,\"2020-06-06T01:00:00.000Z\":1.9048689942,\"2020-06-06T02:00:00.000Z\":1.90828592,\"2020-06-06T03:00:00.000Z\":1.9297969376,\"2020-06-06T04:00:00.000Z\":1.9149704211,\"2020-06-06T05:00:00.000Z\":1.8929761375,\"2020-06-06T06:00:00.000Z\":1.8971279541,\"2020-06-06T07:00:00.000Z\":1.9263268993,\"2020-06-06T08:00:00.000Z\":1.8958174786,\"2020-06-06T09:00:00.000Z\":1.8761773916,\"2020-06-06T10:00:00.000Z\":1.8660876667,\"2020-06-06T11:00:00.000Z\":1.8916842966,\"2020-06-06T12:00:00.000Z\":1.9127603337,\"2020-06-06T13:00:00.000Z\":1.9011050005,\"2020-06-06T14:00:00.000Z\":1.8896462276,\"2020-06-06T15:00:00.000Z\":1.8711809414,\"2020-06-06T16:00:00.000Z\":1.8916412969,\"2020-06-06T17:00:00.000Z\":1.8800334125,\"2020-06-06T18:00:00.000Z\":1.8642478045,\"2020-06-06T19:00:00.000Z\":1.8957160305,\"2020-06-06T20:00:00.000Z\":1.9129895837,\"2020-06-06T21:00:00.000Z\":1.8864261351,\"2020-06-06T22:00:00.000Z\":1.874593256,\"2020-06-06T23:00:00.000Z\":1.8760368949,\"2020-06-07T00:00:00.000Z\":1.9109769621,\"2020-06-07T01:00:00.000Z\":1.8716809077,\"2020-06-07T02:00:00.000Z\":1.9041580864,\"2020-06-07T03:00:00.000Z\":1.8750807346,\"2020-06-07T04:00:00.000Z\":1.9202575144,\"2020-06-07T05:00:00.000Z\":1.8610116065,\"2020-06-07T06:00:00.000Z\":1.8945901134,\"2020-06-07T07:00:00.000Z\":1.8946142489,\"2020-06-07T08:00:00.000Z\":1.8614582248,\"2020-06-07T09:00:00.000Z\":1.863572688,\"2020-06-07T10:00:00.000Z\":1.9297434778,\"2020-06-07T11:00:00.000Z\":1.9187304684,\"2020-06-07T12:00:00.000Z\":1.9298306208,\"2020-06-07T13:00:00.000Z\":1.8608512867,\"2020-06-07T14:00:00.000Z\":1.9118411163,\"2020-06-07T15:00:00.000Z\":1.9066744163,\"2020-06-07T16:00:00.000Z\":1.9116551009,\"2020-06-07T17:00:00.000Z\":1.8828661629,\"2020-06-07T18:00:00.000Z\":1.8866379428,\"2020-06-07T19:00:00.000Z\":1.8788772036,\"2020-06-07T20:00:00.000Z\":1.9042945734,\"2020-06-07T21:00:00.000Z\":1.9056594968,\"2020-06-07T22:00:00.000Z\":1.8887214568,\"2020-06-07T23:00:00.000Z\":1.8835326276,\"2020-06-08T00:00:00.000Z\":1.9284506235,\"2020-06-08T01:00:00.000Z\":1.9143168494,\"2020-06-08T02:00:00.000Z\":1.9007075218,\"2020-06-08T03:00:00.000Z\":1.8777673036,\"2020-06-08T04:00:00.000Z\":1.8952513778,\"2020-06-08T05:00:00.000Z\":1.9264865217,\"2020-06-08T06:00:00.000Z\":1.8817259003,\"2020-06-08T07:00:00.000Z\":1.921584556,\"2020-06-08T08:00:00.000Z\":1.9018817759,\"2020-06-08T09:00:00.000Z\":1.859008478,\"2020-06-08T10:00:00.000Z\":1.8824316125,\"2020-06-08T11:00:00.000Z\":1.8904210058,\"2020-06-08T12:00:00.000Z\":1.8955465242,\"2020-06-08T13:00:00.000Z\":1.87751679,\"2020-06-08T14:00:00.000Z\":1.8580814686,\"2020-06-08T15:00:00.000Z\":1.8642935056,\"2020-06-08T16:00:00.000Z\":1.8605427948,\"2020-06-08T17:00:00.000Z\":1.8785871911,\"2020-06-08T18:00:00.000Z\":1.8686244945,\"2020-06-08T19:00:00.000Z\":1.8326614693,\"2020-06-08T20:00:00.000Z\":1.8783741861,\"2020-06-08T21:00:00.000Z\":1.8839774383,\"2020-06-08T22:00:00.000Z\":1.8581453184,\"2020-06-08T23:00:00.000Z\":1.8737832229,\"2020-06-09T00:00:00.000Z\":1.825608836,\"2020-06-09T01:00:00.000Z\":1.8419542375,\"2020-06-09T02:00:00.000Z\":1.8341249644,\"2020-06-09T03:00:00.000Z\":1.8737361118,\"2020-06-09T04:00:00.000Z\":1.8373356528,\"2020-06-09T05:00:00.000Z\":1.8610829866,\"2020-06-09T06:00:00.000Z\":1.8647217478,\"2020-06-09T07:00:00.000Z\":1.8542354706,\"2020-06-09T08:00:00.000Z\":1.8584044488,\"2020-06-09T09:00:00.000Z\":1.8574092583,\"2020-06-09T10:00:00.000Z\":1.8314458281,\"2020-06-09T11:00:00.000Z\":1.8291249077,\"2020-06-09T12:00:00.000Z\":1.794912816,\"2020-06-09T13:00:00.000Z\":1.806780492,\"2020-06-09T14:00:00.000Z\":1.8515750872,\"2020-06-09T15:00:00.000Z\":1.7881377768,\"2020-06-09T16:00:00.000Z\":1.782908594,\"2020-06-09T17:00:00.000Z\":1.7871490101,\"2020-06-09T18:00:00.000Z\":1.7824570591,\"2020-06-09T19:00:00.000Z\":1.8381627319,\"2020-06-09T20:00:00.000Z\":1.7788963713,\"2020-06-09T21:00:00.000Z\":1.8135459458,\"2020-06-09T22:00:00.000Z\":1.7706291347,\"2020-06-09T23:00:00.000Z\":1.7832814738,\"2020-06-10T00:00:00.000Z\":1.7915501526,\"2020-06-10T01:00:00.000Z\":1.797562649,\"2020-06-10T02:00:00.000Z\":1.810740465,\"2020-06-10T03:00:00.000Z\":1.8039826415,\"2020-06-10T04:00:00.000Z\":1.8061031814,\"2020-06-10T05:00:00.000Z\":1.7798470634,\"2020-06-10T06:00:00.000Z\":1.824419133,\"2020-06-10T07:00:00.000Z\":1.7714949585,\"2020-06-10T08:00:00.000Z\":1.8110842269,\"2020-06-10T09:00:00.000Z\":1.7653148984,\"2020-06-10T10:00:00.000Z\":1.7642104437,\"2020-06-10T11:00:00.000Z\":1.7882945391,\"2020-06-10T12:00:00.000Z\":1.7510199158,\"2020-06-10T13:00:00.000Z\":1.7602817891,\"2020-06-10T14:00:00.000Z\":1.7692896514,\"2020-06-10T15:00:00.000Z\":1.7816856687,\"2020-06-10T16:00:00.000Z\":1.7726023267,\"2020-06-10T17:00:00.000Z\":1.7529701599,\"2020-06-10T18:00:00.000Z\":1.7944730908,\"2020-06-10T19:00:00.000Z\":1.7959826561,\"2020-06-10T20:00:00.000Z\":1.7262595779,\"2020-06-10T21:00:00.000Z\":1.7599426932,\"2020-06-10T22:00:00.000Z\":1.7942664293,\"2020-06-10T23:00:00.000Z\":1.7568792181,\"2020-06-11T00:00:00.000Z\":1.7503584801,\"2020-06-11T01:00:00.000Z\":1.772818345,\"2020-06-11T02:00:00.000Z\":1.7599267103,\"2020-06-11T03:00:00.000Z\":1.7543246604,\"2020-06-11T04:00:00.000Z\":1.7716360143,\"2020-06-11T05:00:00.000Z\":1.7497533172,\"2020-06-11T06:00:00.000Z\":1.7296714486,\"2020-06-11T07:00:00.000Z\":1.7868207192,\"2020-06-11T08:00:00.000Z\":1.7441884421,\"2020-06-11T09:00:00.000Z\":1.7268847381,\"2020-06-11T10:00:00.000Z\":1.7372780067,\"2020-06-11T11:00:00.000Z\":1.7531690232,\"2020-06-11T12:00:00.000Z\":1.7563962807,\"2020-06-11T13:00:00.000Z\":1.7337006137,\"2020-06-11T14:00:00.000Z\":1.7567559875,\"2020-06-11T15:00:00.000Z\":1.7314396428}"
          }
        },
        {
          "workflow_input_name": "positive_step_size",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "0.25"
          }
        },
        {
          "workflow_input_name": "limit",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "1.3"
          }
        },
        {
          "workflow_input_name": "num_days_forecast",
          "adapter_id": "direct_provisioning",
          "filters": {
            "value": "30"
          }
        }
      ],
      "output_wirings": []
    }
  }
]
###############################################################################
#                                                                             #
#         pipt_config.env - control how pipt operates in your project         #
#                                                                             #
###############################################################################
#
# This file is sourced on every pipt invocation.
#
# USAGE:
#    * uncomment the examples and replace the right side with
#      your desired configuration value.
#    * Every variable here can also be controlled by calling pipt with
#      an active environment variable with the same name but prefixed with
#          PIPT_
#      This will have higher priority than the setting in this configuration
#      file. Example:
#          PIPT_SILENT=true pipt shell
#      will override any SILENT=false set here.
#

############################## BASIC OPTIONS ################################

## Set venv taregt directory explicitely. This forces pipt to create its venv
## there.
#
# EXPLICIT_VENV_TARGET_PATH="./venv"

## If no explicit venv target path is set, the venv will by default be created
## as a subdir of $HOME/.pipt/venvs with a name consisting of the basename of 
## the directory containing the requirements files and a hash of that directory's
## absolute path. With this setting you can provide an explicit name instead.
#
# EXPLICIT_VENV_IN_HOME_NAME=""

## Set the system Python interpreter for venv creation explicitely. Pipt will
## then not try to find a matching Python interpreter itself.
#
# PYTHON_INTERPRETER="/usr/bin/python3.12"

## Supress pipt output, only error messages will be shown.
## This does not surpress pip-compile or pip-sync output.
#
# SILENT=true

## Run a bash script when calling `pipt shell` directly after
## activation of the virtual environment.
#
# SHELL_HOOK=example_shell_hook.sh

## Store nix hash: Requires the nix package manager!
## After locking/upgrading, download all locked dependencies in a temporary
## directory, compute the nix hash (recursive sha256sum) of that directory and
## store it in the pipt_lock.env file. This hash can then be used to
## construct a 'fixed-output-derivation' and subsequently a venv as part of
## a nix application build.
#
# STORE_NIX_HASH_OF_DOWNLOADED_REQS=false

## Path to directory containing the pipt files, i.e. requirements*.in,
## requirements*.txt, pipt_config.env, pipt_locks.env.
#
# REQ_SOURCE_DIR="."

################### sync / pip install / download args ######################
## Additional arguments for pip install commands can be provided as Bash 
## array. This is passed to all direct calls of `pip install` by pipt,
## which happens when base requirements are installed.
##
## IMPORTANT: These arguments are NOT passed through to invocations of pip 
## by invocations of pip-compile or pip-sync. Both these commands
## have their own "--pip-args" option which in turn can be reached using
## the PIP_COMPILE_ARGS or PIP_SYNC_PIP_ARGS configuration described below.
#
# PIP_INSTALL_ARGS=("-i" "https://my-company-package-index.org/simple")

## Similarly the following is a direct argument string version.
## This will be passed to pip install commands without
## quotes to support passing multiple arguments! Make sure arguments in it are
## quoted if necessary. 
#
# PIP_INSTALL_ARG_STRING=""

## Direct argument string. This will be passed to pip download commands without
## quotes to support passing multiple arguments! Make sure arguments in it are
## quoted if necessary.
#
# PIP_DOWNLOAD_ARG_STRING=""

## Offline-sync directory
## If this is set, all dependency-installing commands will try to use the
## provided directory as installation source for dependencies, i.e. not
## downloading them from a package index. Typically this setting is used
## in combination with the download command for production installations
## where internet access is limited.
#
# OFFLINE_SYNC_DIR=""

############################## PIP_COMPILE_ARGS ###########################
## Additional arguments for pip-compile / uv pip compile commands as Bash array.
## This is passed to all calls to pip-compile or uv pip compile by pipt.
#
# PIP_COMPILE_ARGS=("-i" "https://my-company-package-index.org/simple")

################################ PIP_SYNC_ARGS ############################
## Additional arguments for pip-sync / uv pip sync commands as Bash array.
## This is passed to all calls to pip-sync / uv pip sync by pipt.
#
# PIP_SYNC_ARGS=("-i" "https://my-company-package-index.org/simple")
#
## The --pip-args of pip-sync parameter can be set directly.
## Note that uv oes not support this parameter at the moment:
#
# PIP_SYNC_PIP_ARGS="--no-cache-dir --no-deps"
#
## Note that --no-deps is set here as default due to
## https://github.com/pypa/pip/issues/9644
PIP_SYNC_PIP_ARGS="--no-deps"

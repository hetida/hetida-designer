worker_processes  auto;
pid /tmp/nginx.pid;

events {
  worker_connections  1024;
}


http {
  log_format  proxy_log  '[$time_local] $remote_addr - $remote_user "$host$request_uri" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"'
                    ' Proxy: "$proxy_host" "$upstream_addr"';

  server {
    listen 8080;
    server_name  localhost;

    access_log /dev/stdout proxy_log;    

    root   /usr/share/nginx/html;
    index  index.html index.htm;
    include /etc/nginx/mime.types;

    gzip on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/html application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location / {
      try_files $uri $uri/ /index.html;
    }

    location ~ /hdapi/(?<suffix>.*)$ {
      # The backend api is configurable in the frontend via the hetida_designer_frontend.json file.
      # The default setting is to expect the backend on the same domain at /hdapi in order
      # to comply with security best practices (e.g. regarding CORS, authentication ...)
      #
      # To make this configuration work for docker-compose setups without domains / ingress etc.
      # the backend service must be reverse-proxied into a common instance with the frontend.
      #
      # Now hardcoding a simple proxy_pass here in the frontend nginx would not allow to
      # edit the backend api configuration for the frontend, since nginx checks every location at
      # startup and crashes if it cannot access it. 
      #
      # But editing the backend api configuration for the frontend ist useful/necessary, e.g. for
      # k8s setups where the backend service name differs from hetida-designer-backend and where
      # "common domain" is handled by mapping via ingress.
      #
      # One solution would be to add an additional nginx proxy in the docker-compose setup bundling
      # frontend and backend together.
      #
      # Here we chose a workaround according to 
      # https://stackoverflow.com/questions/32845674/setup-nginx-not-to-crash-if-host-in-upstream-is-not-found
      # which does avoid nginx crashing if the target is not available.
      #
      # Note this requires docker running since it uses the docker dns resolver.
      client_max_body_size 50M;
      resolver 127.0.0.11;
      set $upstream_backend_service hetida-designer-backend;
      proxy_pass http://$upstream_backend_service:8090/api/$suffix$is_args$args;
      proxy_pass_header Content-Type;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_read_timeout 900;
      proxy_connect_timeout 900;
      proxy_send_timeout 900;
    }
  }
}

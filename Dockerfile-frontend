##### Build stage
FROM ubuntu:20.04 as build
RUN  apt-get update && apt-get install -y curl wget gnupg \
  && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
  && wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
  && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata \
  && (dpkg -i google-chrome-stable_current_amd64.deb; apt-get -fy install; rm google-chrome-stable_current_amd64.deb; apt-get clean; ) \
  && curl -sL https://deb.nodesource.com/setup_12.x |  bash - \
  && apt-get install -y nodejs

WORKDIR /app

# 1. Only update dependencies when package.json actually changed.
COPY ./frontend/package.json .
COPY ./frontend/package-lock.json .
RUN npm ci
RUN npm run compile-libs

# 2. Test
COPY ./frontend/tsconfig.json .
COPY ./frontend/angular.json .
COPY ./frontend/src/ src/
COPY VERSION src/assets/VERSION
COPY ./frontend/src/assets/hetida_designer_config_docker.json src/assets/hetida_designer_config.json
RUN npm run test-docker

# 3. Do the actual build
ARG configuration=production
RUN npm run build -- --output-path=./dist/out --configuration $configuration

##### Production stage
FROM nginxinc/nginx-unprivileged:1.23.1
COPY --from=build /app/dist/out/ /usr/share/nginx/html
COPY ./frontend/nginx.conf /etc/nginx/nginx.conf
EXPOSE 8080
